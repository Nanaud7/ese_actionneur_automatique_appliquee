
tp_actionneur_auto_appliquee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a21c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ec  0800a400  0800a400  0001a400  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9ec  0800a9ec  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9ec  0800a9ec  0001a9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9f4  0800a9f4  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9f4  0800a9f4  0001a9f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9f8  0800a9f8  0001a9f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800a9fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  200001ec  0800abe8  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000638  0800abe8  00020638  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ba6  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d33  00000000  00000000  00035dc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  00038af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001080  00000000  00000000  00039ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ff64  00000000  00000000  0003ad20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000135f2  00000000  00000000  0005ac84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7100  00000000  00000000  0006e276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00135376  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e18  00000000  00000000  001353cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001ec 	.word	0x200001ec
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a3e4 	.word	0x0800a3e4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f0 	.word	0x200001f0
 800021c:	0800a3e4 	.word	0x0800a3e4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a4 	b.w	8001038 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468c      	mov	ip, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f040 8083 	bne.w	8000e8a <__udivmoddi4+0x116>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d947      	bls.n	8000e1a <__udivmoddi4+0xa6>
 8000d8a:	fab2 f282 	clz	r2, r2
 8000d8e:	b142      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	f1c2 0020 	rsb	r0, r2, #32
 8000d94:	fa24 f000 	lsr.w	r0, r4, r0
 8000d98:	4091      	lsls	r1, r2
 8000d9a:	4097      	lsls	r7, r2
 8000d9c:	ea40 0c01 	orr.w	ip, r0, r1
 8000da0:	4094      	lsls	r4, r2
 8000da2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000da6:	0c23      	lsrs	r3, r4, #16
 8000da8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dac:	fa1f fe87 	uxth.w	lr, r7
 8000db0:	fb08 c116 	mls	r1, r8, r6, ip
 8000db4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dbc:	4299      	cmp	r1, r3
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x60>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dc6:	f080 8119 	bcs.w	8000ffc <__udivmoddi4+0x288>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 8116 	bls.w	8000ffc <__udivmoddi4+0x288>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ddc:	fb08 3310 	mls	r3, r8, r0, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d909      	bls.n	8000e00 <__udivmoddi4+0x8c>
 8000dec:	193c      	adds	r4, r7, r4
 8000dee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df2:	f080 8105 	bcs.w	8001000 <__udivmoddi4+0x28c>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f240 8102 	bls.w	8001000 <__udivmoddi4+0x28c>
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	443c      	add	r4, r7
 8000e00:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e04:	eba4 040e 	sub.w	r4, r4, lr
 8000e08:	2600      	movs	r6, #0
 8000e0a:	b11d      	cbz	r5, 8000e14 <__udivmoddi4+0xa0>
 8000e0c:	40d4      	lsrs	r4, r2
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e9c5 4300 	strd	r4, r3, [r5]
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	b902      	cbnz	r2, 8000e1e <__udivmoddi4+0xaa>
 8000e1c:	deff      	udf	#255	; 0xff
 8000e1e:	fab2 f282 	clz	r2, r2
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	d150      	bne.n	8000ec8 <__udivmoddi4+0x154>
 8000e26:	1bcb      	subs	r3, r1, r7
 8000e28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2c:	fa1f f887 	uxth.w	r8, r7
 8000e30:	2601      	movs	r6, #1
 8000e32:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e36:	0c21      	lsrs	r1, r4, #16
 8000e38:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb08 f30c 	mul.w	r3, r8, ip
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d907      	bls.n	8000e58 <__udivmoddi4+0xe4>
 8000e48:	1879      	adds	r1, r7, r1
 8000e4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0xe2>
 8000e50:	428b      	cmp	r3, r1
 8000e52:	f200 80e9 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e56:	4684      	mov	ip, r0
 8000e58:	1ac9      	subs	r1, r1, r3
 8000e5a:	b2a3      	uxth	r3, r4
 8000e5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e60:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e64:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e68:	fb08 f800 	mul.w	r8, r8, r0
 8000e6c:	45a0      	cmp	r8, r4
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0x10c>
 8000e70:	193c      	adds	r4, r7, r4
 8000e72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x10a>
 8000e78:	45a0      	cmp	r8, r4
 8000e7a:	f200 80d9 	bhi.w	8001030 <__udivmoddi4+0x2bc>
 8000e7e:	4618      	mov	r0, r3
 8000e80:	eba4 0408 	sub.w	r4, r4, r8
 8000e84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e88:	e7bf      	b.n	8000e0a <__udivmoddi4+0x96>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d909      	bls.n	8000ea2 <__udivmoddi4+0x12e>
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	f000 80b1 	beq.w	8000ff6 <__udivmoddi4+0x282>
 8000e94:	2600      	movs	r6, #0
 8000e96:	e9c5 0100 	strd	r0, r1, [r5]
 8000e9a:	4630      	mov	r0, r6
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	fab3 f683 	clz	r6, r3
 8000ea6:	2e00      	cmp	r6, #0
 8000ea8:	d14a      	bne.n	8000f40 <__udivmoddi4+0x1cc>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d302      	bcc.n	8000eb4 <__udivmoddi4+0x140>
 8000eae:	4282      	cmp	r2, r0
 8000eb0:	f200 80b8 	bhi.w	8001024 <__udivmoddi4+0x2b0>
 8000eb4:	1a84      	subs	r4, r0, r2
 8000eb6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eba:	2001      	movs	r0, #1
 8000ebc:	468c      	mov	ip, r1
 8000ebe:	2d00      	cmp	r5, #0
 8000ec0:	d0a8      	beq.n	8000e14 <__udivmoddi4+0xa0>
 8000ec2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ec6:	e7a5      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ed0:	4097      	lsls	r7, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eda:	40d9      	lsrs	r1, r3
 8000edc:	4330      	orrs	r0, r6
 8000ede:	0c03      	lsrs	r3, r0, #16
 8000ee0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ee4:	fa1f f887 	uxth.w	r8, r7
 8000ee8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ef0:	fb06 f108 	mul.w	r1, r6, r8
 8000ef4:	4299      	cmp	r1, r3
 8000ef6:	fa04 f402 	lsl.w	r4, r4, r2
 8000efa:	d909      	bls.n	8000f10 <__udivmoddi4+0x19c>
 8000efc:	18fb      	adds	r3, r7, r3
 8000efe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f02:	f080 808d 	bcs.w	8001020 <__udivmoddi4+0x2ac>
 8000f06:	4299      	cmp	r1, r3
 8000f08:	f240 808a 	bls.w	8001020 <__udivmoddi4+0x2ac>
 8000f0c:	3e02      	subs	r6, #2
 8000f0e:	443b      	add	r3, r7
 8000f10:	1a5b      	subs	r3, r3, r1
 8000f12:	b281      	uxth	r1, r0
 8000f14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f20:	fb00 f308 	mul.w	r3, r0, r8
 8000f24:	428b      	cmp	r3, r1
 8000f26:	d907      	bls.n	8000f38 <__udivmoddi4+0x1c4>
 8000f28:	1879      	adds	r1, r7, r1
 8000f2a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2e:	d273      	bcs.n	8001018 <__udivmoddi4+0x2a4>
 8000f30:	428b      	cmp	r3, r1
 8000f32:	d971      	bls.n	8001018 <__udivmoddi4+0x2a4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4439      	add	r1, r7
 8000f38:	1acb      	subs	r3, r1, r3
 8000f3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f3e:	e778      	b.n	8000e32 <__udivmoddi4+0xbe>
 8000f40:	f1c6 0c20 	rsb	ip, r6, #32
 8000f44:	fa03 f406 	lsl.w	r4, r3, r6
 8000f48:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f4c:	431c      	orrs	r4, r3
 8000f4e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f52:	fa01 f306 	lsl.w	r3, r1, r6
 8000f56:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f5a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	0c3b      	lsrs	r3, r7, #16
 8000f62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f66:	fa1f f884 	uxth.w	r8, r4
 8000f6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f72:	fb09 fa08 	mul.w	sl, r9, r8
 8000f76:	458a      	cmp	sl, r1
 8000f78:	fa02 f206 	lsl.w	r2, r2, r6
 8000f7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x220>
 8000f82:	1861      	adds	r1, r4, r1
 8000f84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f88:	d248      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000f8a:	458a      	cmp	sl, r1
 8000f8c:	d946      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000f8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f92:	4421      	add	r1, r4
 8000f94:	eba1 010a 	sub.w	r1, r1, sl
 8000f98:	b2bf      	uxth	r7, r7
 8000f9a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f9e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fa2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fa6:	fb00 f808 	mul.w	r8, r0, r8
 8000faa:	45b8      	cmp	r8, r7
 8000fac:	d907      	bls.n	8000fbe <__udivmoddi4+0x24a>
 8000fae:	19e7      	adds	r7, r4, r7
 8000fb0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fb4:	d22e      	bcs.n	8001014 <__udivmoddi4+0x2a0>
 8000fb6:	45b8      	cmp	r8, r7
 8000fb8:	d92c      	bls.n	8001014 <__udivmoddi4+0x2a0>
 8000fba:	3802      	subs	r0, #2
 8000fbc:	4427      	add	r7, r4
 8000fbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fc2:	eba7 0708 	sub.w	r7, r7, r8
 8000fc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fca:	454f      	cmp	r7, r9
 8000fcc:	46c6      	mov	lr, r8
 8000fce:	4649      	mov	r1, r9
 8000fd0:	d31a      	bcc.n	8001008 <__udivmoddi4+0x294>
 8000fd2:	d017      	beq.n	8001004 <__udivmoddi4+0x290>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x27a>
 8000fd6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fda:	eb67 0701 	sbc.w	r7, r7, r1
 8000fde:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fe2:	40f2      	lsrs	r2, r6
 8000fe4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fe8:	40f7      	lsrs	r7, r6
 8000fea:	e9c5 2700 	strd	r2, r7, [r5]
 8000fee:	2600      	movs	r6, #0
 8000ff0:	4631      	mov	r1, r6
 8000ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e70b      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e9      	b.n	8000dd4 <__udivmoddi4+0x60>
 8001000:	4618      	mov	r0, r3
 8001002:	e6fd      	b.n	8000e00 <__udivmoddi4+0x8c>
 8001004:	4543      	cmp	r3, r8
 8001006:	d2e5      	bcs.n	8000fd4 <__udivmoddi4+0x260>
 8001008:	ebb8 0e02 	subs.w	lr, r8, r2
 800100c:	eb69 0104 	sbc.w	r1, r9, r4
 8001010:	3801      	subs	r0, #1
 8001012:	e7df      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001014:	4608      	mov	r0, r1
 8001016:	e7d2      	b.n	8000fbe <__udivmoddi4+0x24a>
 8001018:	4660      	mov	r0, ip
 800101a:	e78d      	b.n	8000f38 <__udivmoddi4+0x1c4>
 800101c:	4681      	mov	r9, r0
 800101e:	e7b9      	b.n	8000f94 <__udivmoddi4+0x220>
 8001020:	4666      	mov	r6, ip
 8001022:	e775      	b.n	8000f10 <__udivmoddi4+0x19c>
 8001024:	4630      	mov	r0, r6
 8001026:	e74a      	b.n	8000ebe <__udivmoddi4+0x14a>
 8001028:	f1ac 0c02 	sub.w	ip, ip, #2
 800102c:	4439      	add	r1, r7
 800102e:	e713      	b.n	8000e58 <__udivmoddi4+0xe4>
 8001030:	3802      	subs	r0, #2
 8001032:	443c      	add	r4, r7
 8001034:	e724      	b.n	8000e80 <__udivmoddi4+0x10c>
 8001036:	bf00      	nop

08001038 <__aeabi_idiv0>:
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <__io_putchar>:
static int shell_func_list_size = 0;
static shell_func_t shell_func_list[_SHELL_FUNC_LIST_MAX_SIZE];

static int dataReady = 0;

int __io_putchar(int ch) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001044:	1d39      	adds	r1, r7, #4
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	2201      	movs	r2, #1
 800104c:	4803      	ldr	r0, [pc, #12]	; (800105c <__io_putchar+0x20>)
 800104e:	f003 fc52 	bl	80048f6 <HAL_UART_Transmit>
	return ch;
 8001052:	687b      	ldr	r3, [r7, #4]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000594 	.word	0x20000594

08001060 <uart_write>:
	HAL_UART_Receive(&UART_DEVICE, (uint8_t*)(&c), 1, 0xFFFFFFFF);

	return c;
}

int uart_write(char * s, uint16_t size) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, 0xFFFF);
 800106c:	887a      	ldrh	r2, [r7, #2]
 800106e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	4803      	ldr	r0, [pc, #12]	; (8001084 <uart_write+0x24>)
 8001076:	f003 fc3e 	bl	80048f6 <HAL_UART_Transmit>
	return size;
 800107a:	887b      	ldrh	r3, [r7, #2]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000594 	.word	0x20000594

08001088 <sh_help>:

void uart_data_ready() {
	dataReady = 1;
}

int sh_help(int argc, char ** argv) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	e019      	b.n	80010cc <sh_help+0x44>
		printf("%c %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 8001098:	4911      	ldr	r1, [pc, #68]	; (80010e0 <sh_help+0x58>)
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	4613      	mov	r3, r2
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	4413      	add	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	440b      	add	r3, r1
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	490d      	ldr	r1, [pc, #52]	; (80010e0 <sh_help+0x58>)
 80010ac:	68fa      	ldr	r2, [r7, #12]
 80010ae:	4613      	mov	r3, r2
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	4413      	add	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	440b      	add	r3, r1
 80010b8:	3308      	adds	r3, #8
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	4601      	mov	r1, r0
 80010c0:	4808      	ldr	r0, [pc, #32]	; (80010e4 <sh_help+0x5c>)
 80010c2:	f005 fd17 	bl	8006af4 <iprintf>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	3301      	adds	r3, #1
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <sh_help+0x60>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	68fa      	ldr	r2, [r7, #12]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	dbe0      	blt.n	8001098 <sh_help+0x10>
	}

	return 0;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000238 	.word	0x20000238
 80010e4:	0800a400 	.word	0x0800a400
 80010e8:	20000234 	.word	0x20000234

080010ec <shell_init>:

void shell_init() {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
	printf("\r\n\r\n===== Shell =====\r\n");
 80010f2:	480f      	ldr	r0, [pc, #60]	; (8001130 <shell_init+0x44>)
 80010f4:	f005 fd84 	bl	8006c00 <puts>
	HAL_UART_Receive_IT(&UART_DEVICE, (uint8_t*)&c, 1);
 80010f8:	2201      	movs	r2, #1
 80010fa:	490e      	ldr	r1, [pc, #56]	; (8001134 <shell_init+0x48>)
 80010fc:	480e      	ldr	r0, [pc, #56]	; (8001138 <shell_init+0x4c>)
 80010fe:	f003 fc91 	bl	8004a24 <HAL_UART_Receive_IT>
	//uart_write(prompt,sizeof(prompt));

	shell_add('h', sh_help, help);
 8001102:	4a0e      	ldr	r2, [pc, #56]	; (800113c <shell_init+0x50>)
 8001104:	490e      	ldr	r1, [pc, #56]	; (8001140 <shell_init+0x54>)
 8001106:	2068      	movs	r0, #104	; 0x68
 8001108:	f000 f81c 	bl	8001144 <shell_add>

	for (int i = 0 ; i < 3 ; i++) {
 800110c:	2300      	movs	r3, #0
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	e005      	b.n	800111e <shell_init+0x32>

		HAL_Delay(200);
 8001112:	20c8      	movs	r0, #200	; 0xc8
 8001114:	f000 ff20 	bl	8001f58 <HAL_Delay>
	for (int i = 0 ; i < 3 ; i++) {
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3301      	adds	r3, #1
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b02      	cmp	r3, #2
 8001122:	ddf6      	ble.n	8001112 <shell_init+0x26>
	}
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	0800a408 	.word	0x0800a408
 8001134:	20000208 	.word	0x20000208
 8001138:	20000594 	.word	0x20000594
 800113c:	20000000 	.word	0x20000000
 8001140:	08001089 	.word	0x08001089

08001144 <shell_add>:

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	73fb      	strb	r3, [r7, #15]
	if (shell_func_list_size < _SHELL_FUNC_LIST_MAX_SIZE) {
 8001152:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <shell_add+0x74>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2b3f      	cmp	r3, #63	; 0x3f
 8001158:	dc26      	bgt.n	80011a8 <shell_add+0x64>
		shell_func_list[shell_func_list_size].c = c;
 800115a:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <shell_add+0x74>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	4917      	ldr	r1, [pc, #92]	; (80011bc <shell_add+0x78>)
 8001160:	4613      	mov	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	4413      	add	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	440b      	add	r3, r1
 800116a:	7bfa      	ldrb	r2, [r7, #15]
 800116c:	701a      	strb	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 800116e:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <shell_add+0x74>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	4912      	ldr	r1, [pc, #72]	; (80011bc <shell_add+0x78>)
 8001174:	4613      	mov	r3, r2
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	4413      	add	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	440b      	add	r3, r1
 800117e:	3304      	adds	r3, #4
 8001180:	68ba      	ldr	r2, [r7, #8]
 8001182:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <shell_add+0x74>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	490c      	ldr	r1, [pc, #48]	; (80011bc <shell_add+0x78>)
 800118a:	4613      	mov	r3, r2
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	4413      	add	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	440b      	add	r3, r1
 8001194:	3308      	adds	r3, #8
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 800119a:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <shell_add+0x74>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	3301      	adds	r3, #1
 80011a0:	4a05      	ldr	r2, [pc, #20]	; (80011b8 <shell_add+0x74>)
 80011a2:	6013      	str	r3, [r2, #0]
		return 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	e001      	b.n	80011ac <shell_add+0x68>
	}

	return -1;
 80011a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	20000234 	.word	0x20000234
 80011bc:	20000238 	.word	0x20000238

080011c0 <shell_char_received>:

void shell_char_received() {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0

	switch (c) {
 80011c4:	4b23      	ldr	r3, [pc, #140]	; (8001254 <shell_char_received+0x94>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b08      	cmp	r3, #8
 80011ca:	d01c      	beq.n	8001206 <shell_char_received+0x46>
 80011cc:	2b0d      	cmp	r3, #13
 80011ce:	d129      	bne.n	8001224 <shell_char_received+0x64>

	case '\r':
		// Enter
		printf("\r\n");
 80011d0:	4821      	ldr	r0, [pc, #132]	; (8001258 <shell_char_received+0x98>)
 80011d2:	f005 fd15 	bl	8006c00 <puts>
		buf[pos++] = 0;
 80011d6:	4b21      	ldr	r3, [pc, #132]	; (800125c <shell_char_received+0x9c>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	1c5a      	adds	r2, r3, #1
 80011dc:	b2d1      	uxtb	r1, r2
 80011de:	4a1f      	ldr	r2, [pc, #124]	; (800125c <shell_char_received+0x9c>)
 80011e0:	7011      	strb	r1, [r2, #0]
 80011e2:	461a      	mov	r2, r3
 80011e4:	4b1e      	ldr	r3, [pc, #120]	; (8001260 <shell_char_received+0xa0>)
 80011e6:	2100      	movs	r1, #0
 80011e8:	5499      	strb	r1, [r3, r2]
		printf(":%s\r\n", buf);
 80011ea:	491d      	ldr	r1, [pc, #116]	; (8001260 <shell_char_received+0xa0>)
 80011ec:	481d      	ldr	r0, [pc, #116]	; (8001264 <shell_char_received+0xa4>)
 80011ee:	f005 fc81 	bl	8006af4 <iprintf>
		pos = 0;
 80011f2:	4b1a      	ldr	r3, [pc, #104]	; (800125c <shell_char_received+0x9c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
		shell_exec(buf[0], buf);
 80011f8:	4b19      	ldr	r3, [pc, #100]	; (8001260 <shell_char_received+0xa0>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4918      	ldr	r1, [pc, #96]	; (8001260 <shell_char_received+0xa0>)
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 f834 	bl	800126c <shell_exec>
		break;
 8001204:	e023      	b.n	800124e <shell_char_received+0x8e>

		// Delete
	case '\b':
		if (pos > 0) {
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <shell_char_received+0x9c>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d01e      	beq.n	800124c <shell_char_received+0x8c>
			pos--;
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <shell_char_received+0x9c>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	3b01      	subs	r3, #1
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <shell_char_received+0x9c>)
 8001218:	701a      	strb	r2, [r3, #0]
			uart_write(backspace, 3);
 800121a:	2103      	movs	r1, #3
 800121c:	4812      	ldr	r0, [pc, #72]	; (8001268 <shell_char_received+0xa8>)
 800121e:	f7ff ff1f 	bl	8001060 <uart_write>
		}
		break;
 8001222:	e013      	b.n	800124c <shell_char_received+0x8c>

	default:
		if (pos < BUFFER_SIZE) {
 8001224:	4b0d      	ldr	r3, [pc, #52]	; (800125c <shell_char_received+0x9c>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b27      	cmp	r3, #39	; 0x27
 800122a:	d810      	bhi.n	800124e <shell_char_received+0x8e>
			uart_write(&c, 1);
 800122c:	2101      	movs	r1, #1
 800122e:	4809      	ldr	r0, [pc, #36]	; (8001254 <shell_char_received+0x94>)
 8001230:	f7ff ff16 	bl	8001060 <uart_write>
			buf[pos++] = c;
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <shell_char_received+0x9c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	1c5a      	adds	r2, r3, #1
 800123a:	b2d1      	uxtb	r1, r2
 800123c:	4a07      	ldr	r2, [pc, #28]	; (800125c <shell_char_received+0x9c>)
 800123e:	7011      	strb	r1, [r2, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	4b04      	ldr	r3, [pc, #16]	; (8001254 <shell_char_received+0x94>)
 8001244:	7819      	ldrb	r1, [r3, #0]
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <shell_char_received+0xa0>)
 8001248:	5499      	strb	r1, [r3, r2]
		}
	}
}
 800124a:	e000      	b.n	800124e <shell_char_received+0x8e>
		break;
 800124c:	bf00      	nop
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000208 	.word	0x20000208
 8001258:	0800a420 	.word	0x0800a420
 800125c:	20000209 	.word	0x20000209
 8001260:	2000020c 	.word	0x2000020c
 8001264:	0800a424 	.word	0x0800a424
 8001268:	20000008 	.word	0x20000008

0800126c <shell_exec>:

int shell_exec(char c, char * buf) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b08e      	sub	sp, #56	; 0x38
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	71fb      	strb	r3, [r7, #7]

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001278:	2300      	movs	r3, #0
 800127a:	637b      	str	r3, [r7, #52]	; 0x34
 800127c:	e040      	b.n	8001300 <shell_exec+0x94>
		if (shell_func_list[i].c == c) {
 800127e:	4928      	ldr	r1, [pc, #160]	; (8001320 <shell_exec+0xb4>)
 8001280:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001282:	4613      	mov	r3, r2
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	4413      	add	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	440b      	add	r3, r1
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	79fa      	ldrb	r2, [r7, #7]
 8001290:	429a      	cmp	r2, r3
 8001292:	d132      	bne.n	80012fa <shell_exec+0x8e>
			argc = 1;
 8001294:	2301      	movs	r3, #1
 8001296:	633b      	str	r3, [r7, #48]	; 0x30
			argv[0] = buf;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012a0:	e014      	b.n	80012cc <shell_exec+0x60>
				if(*p == ' ') {
 80012a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b20      	cmp	r3, #32
 80012a8:	d10d      	bne.n	80012c6 <shell_exec+0x5a>
					*p = '\0';
 80012aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 80012b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	633a      	str	r2, [r7, #48]	; 0x30
 80012b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012b8:	3201      	adds	r2, #1
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80012c0:	440b      	add	r3, r1
 80012c2:	f843 2c2c 	str.w	r2, [r3, #-44]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 80012c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c8:	3301      	adds	r3, #1
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d002      	beq.n	80012da <shell_exec+0x6e>
 80012d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d6:	2b07      	cmp	r3, #7
 80012d8:	dde3      	ble.n	80012a2 <shell_exec+0x36>
				}
			}

			return shell_func_list[i].func(argc, argv);
 80012da:	4911      	ldr	r1, [pc, #68]	; (8001320 <shell_exec+0xb4>)
 80012dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012de:	4613      	mov	r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4413      	add	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	440b      	add	r3, r1
 80012e8:	3304      	adds	r3, #4
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f107 020c 	add.w	r2, r7, #12
 80012f0:	4611      	mov	r1, r2
 80012f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80012f4:	4798      	blx	r3
 80012f6:	4603      	mov	r3, r0
 80012f8:	e00e      	b.n	8001318 <shell_exec+0xac>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 80012fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012fc:	3301      	adds	r3, #1
 80012fe:	637b      	str	r3, [r7, #52]	; 0x34
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <shell_exec+0xb8>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001306:	429a      	cmp	r2, r3
 8001308:	dbb9      	blt.n	800127e <shell_exec+0x12>
		}
	}
	printf("%c: no such command\r\n", c);
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	4619      	mov	r1, r3
 800130e:	4806      	ldr	r0, [pc, #24]	; (8001328 <shell_exec+0xbc>)
 8001310:	f005 fbf0 	bl	8006af4 <iprintf>
	return -1;
 8001314:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001318:	4618      	mov	r0, r3
 800131a:	3738      	adds	r7, #56	; 0x38
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000238 	.word	0x20000238
 8001324:	20000234 	.word	0x20000234
 8001328:	0800a42c 	.word	0x0800a42c

0800132c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08a      	sub	sp, #40	; 0x28
 8001330:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001342:	4b38      	ldr	r3, [pc, #224]	; (8001424 <MX_GPIO_Init+0xf8>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	4a37      	ldr	r2, [pc, #220]	; (8001424 <MX_GPIO_Init+0xf8>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134e:	4b35      	ldr	r3, [pc, #212]	; (8001424 <MX_GPIO_Init+0xf8>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800135a:	4b32      	ldr	r3, [pc, #200]	; (8001424 <MX_GPIO_Init+0xf8>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135e:	4a31      	ldr	r2, [pc, #196]	; (8001424 <MX_GPIO_Init+0xf8>)
 8001360:	f043 0320 	orr.w	r3, r3, #32
 8001364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001366:	4b2f      	ldr	r3, [pc, #188]	; (8001424 <MX_GPIO_Init+0xf8>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	f003 0320 	and.w	r3, r3, #32
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	4b2c      	ldr	r3, [pc, #176]	; (8001424 <MX_GPIO_Init+0xf8>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001376:	4a2b      	ldr	r2, [pc, #172]	; (8001424 <MX_GPIO_Init+0xf8>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137e:	4b29      	ldr	r3, [pc, #164]	; (8001424 <MX_GPIO_Init+0xf8>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800138a:	4b26      	ldr	r3, [pc, #152]	; (8001424 <MX_GPIO_Init+0xf8>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	4a25      	ldr	r2, [pc, #148]	; (8001424 <MX_GPIO_Init+0xf8>)
 8001390:	f043 0302 	orr.w	r3, r3, #2
 8001394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001396:	4b23      	ldr	r3, [pc, #140]	; (8001424 <MX_GPIO_Init+0xf8>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2101      	movs	r1, #1
 80013a6:	4820      	ldr	r0, [pc, #128]	; (8001428 <MX_GPIO_Init+0xfc>)
 80013a8:	f001 f94a 	bl	8002640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2120      	movs	r1, #32
 80013b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b4:	f001 f944 	bl	8002640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013be:	4b1b      	ldr	r3, [pc, #108]	; (800142c <MX_GPIO_Init+0x100>)
 80013c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	4619      	mov	r1, r3
 80013cc:	4816      	ldr	r0, [pc, #88]	; (8001428 <MX_GPIO_Init+0xfc>)
 80013ce:	f000 ffb5 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin;
 80013d2:	2301      	movs	r3, #1
 80013d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	480f      	ldr	r0, [pc, #60]	; (8001428 <MX_GPIO_Init+0xfc>)
 80013ea:	f000 ffa7 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013ee:	2320      	movs	r3, #32
 80013f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f2:	2301      	movs	r3, #1
 80013f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001408:	f000 ff98 	bl	800233c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800140c:	2200      	movs	r2, #0
 800140e:	2100      	movs	r1, #0
 8001410:	2028      	movs	r0, #40	; 0x28
 8001412:	f000 fe9e 	bl	8002152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001416:	2028      	movs	r0, #40	; 0x28
 8001418:	f000 feb5 	bl	8002186 <HAL_NVIC_EnableIRQ>

}
 800141c:	bf00      	nop
 800141e:	3728      	adds	r7, #40	; 0x28
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40021000 	.word	0x40021000
 8001428:	48000800 	.word	0x48000800
 800142c:	10110000 	.word	0x10110000

08001430 <fonction>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int fonction(int argc, char ** argv) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
	printf("Fonction exemple\r\n");
 800143a:	4810      	ldr	r0, [pc, #64]	; (800147c <fonction+0x4c>)
 800143c:	f005 fbe0 	bl	8006c00 <puts>

	printf("argc = %d\r\n", argc);
 8001440:	6879      	ldr	r1, [r7, #4]
 8001442:	480f      	ldr	r0, [pc, #60]	; (8001480 <fonction+0x50>)
 8001444:	f005 fb56 	bl	8006af4 <iprintf>

	for (int i = 0 ; i < argc ; i++) {
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	e00c      	b.n	8001468 <fonction+0x38>
		printf("arg numero %d = %s\r\n", i, argv[i]);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	4413      	add	r3, r2
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	68f9      	ldr	r1, [r7, #12]
 800145c:	4809      	ldr	r0, [pc, #36]	; (8001484 <fonction+0x54>)
 800145e:	f005 fb49 	bl	8006af4 <iprintf>
	for (int i = 0 ; i < argc ; i++) {
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	3301      	adds	r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	429a      	cmp	r2, r3
 800146e:	dbee      	blt.n	800144e <fonction+0x1e>
	}

	return 0;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	0800a444 	.word	0x0800a444
 8001480:	0800a458 	.word	0x0800a458
 8001484:	0800a464 	.word	0x0800a464

08001488 <hacheur>:

int hacheur(int argc, char ** argv){
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
	if(argc == 2){
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b02      	cmp	r3, #2
 8001496:	d117      	bne.n	80014c8 <hacheur+0x40>
		uint8_t cmd = atoi(argv[1]);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	3304      	adds	r3, #4
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f004 fe87 	bl	80061b2 <atoi>
 80014a4:	4603      	mov	r3, r0
 80014a6:	73fb      	strb	r3, [r7, #15]

		if(cmd == 1){
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d106      	bne.n	80014bc <hacheur+0x34>
			printf("Hacheur active !\r\n");
 80014ae:	4809      	ldr	r0, [pc, #36]	; (80014d4 <hacheur+0x4c>)
 80014b0:	f005 fba6 	bl	8006c00 <puts>
			hacheurStart = 1;
 80014b4:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <hacheur+0x50>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	701a      	strb	r2, [r3, #0]
 80014ba:	e005      	b.n	80014c8 <hacheur+0x40>
		}
		else{
			hacheurStart = 0;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <hacheur+0x50>)
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
			printf("Hacheur desactive !\r\n");
 80014c2:	4806      	ldr	r0, [pc, #24]	; (80014dc <hacheur+0x54>)
 80014c4:	f005 fb9c 	bl	8006c00 <puts>
		}
	}

	return 0;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	0800a47c 	.word	0x0800a47c
 80014d8:	20000538 	.word	0x20000538
 80014dc:	0800a490 	.word	0x0800a490

080014e0 <speed>:

int speed(int argc, char ** argv){
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
	if(argc == 2){
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d161      	bne.n	80015b4 <speed+0xd4>
		float vitesse = atof(argv[1]);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	3304      	adds	r3, #4
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f004 fe58 	bl	80061ac <atof>
 80014fc:	ec53 2b10 	vmov	r2, r3, d0
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	f7ff fb98 	bl	8000c38 <__aeabi_d2f>
 8001508:	4603      	mov	r3, r0
 800150a:	617b      	str	r3, [r7, #20]
		printf("vitesse = %f\r\n",vitesse);
 800150c:	6978      	ldr	r0, [r7, #20]
 800150e:	f7ff f843 	bl	8000598 <__aeabi_f2d>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	482a      	ldr	r0, [pc, #168]	; (80015c0 <speed+0xe0>)
 8001518:	f005 faec 	bl	8006af4 <iprintf>

		if(vitesse < 0) vitesse = 0;
 800151c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001520:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001528:	d503      	bpl.n	8001532 <speed+0x52>
 800152a:	f04f 0300 	mov.w	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	e00a      	b.n	8001548 <speed+0x68>
		else if(vitesse > 100) vitesse = 100;
 8001532:	edd7 7a05 	vldr	s15, [r7, #20]
 8001536:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80015c4 <speed+0xe4>
 800153a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800153e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001542:	dd01      	ble.n	8001548 <speed+0x68>
 8001544:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <speed+0xe8>)
 8001546:	617b      	str	r3, [r7, #20]

		float cmd = 1023 * (vitesse/100);
 8001548:	ed97 7a05 	vldr	s14, [r7, #20]
 800154c:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80015c4 <speed+0xe4>
 8001550:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001554:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80015cc <speed+0xec>
 8001558:	ee67 7a87 	vmul.f32	s15, s15, s14
 800155c:	edc7 7a04 	vstr	s15, [r7, #16]
		TIM1->CCR1 = (int)cmd;
 8001560:	edd7 7a04 	vldr	s15, [r7, #16]
 8001564:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001568:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <speed+0xf0>)
 800156a:	ee17 2a90 	vmov	r2, s15
 800156e:	635a      	str	r2, [r3, #52]	; 0x34
		printf("cmd = %d\r\n",(int)cmd);
 8001570:	edd7 7a04 	vldr	s15, [r7, #16]
 8001574:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001578:	ee17 1a90 	vmov	r1, s15
 800157c:	4815      	ldr	r0, [pc, #84]	; (80015d4 <speed+0xf4>)
 800157e:	f005 fab9 	bl	8006af4 <iprintf>

		float cmdn = 1023 - cmd;
 8001582:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80015cc <speed+0xec>
 8001586:	edd7 7a04 	vldr	s15, [r7, #16]
 800158a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800158e:	edc7 7a03 	vstr	s15, [r7, #12]
		TIM1->CCR2 = (int)cmdn;
 8001592:	edd7 7a03 	vldr	s15, [r7, #12]
 8001596:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800159a:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <speed+0xf0>)
 800159c:	ee17 2a90 	vmov	r2, s15
 80015a0:	639a      	str	r2, [r3, #56]	; 0x38
		printf("cmdn = %d\r\n",(int)cmdn);
 80015a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80015a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015aa:	ee17 1a90 	vmov	r1, s15
 80015ae:	480a      	ldr	r0, [pc, #40]	; (80015d8 <speed+0xf8>)
 80015b0:	f005 faa0 	bl	8006af4 <iprintf>
	}

	return 0;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	0800a4a8 	.word	0x0800a4a8
 80015c4:	42c80000 	.word	0x42c80000
 80015c8:	42c80000 	.word	0x42c80000
 80015cc:	447fc000 	.word	0x447fc000
 80015d0:	40012c00 	.word	0x40012c00
 80015d4:	0800a4b8 	.word	0x0800a4b8
 80015d8:	0800a4c4 	.word	0x0800a4c4

080015dc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80015e0:	f000 fc49 	bl	8001e76 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80015e4:	f000 f872 	bl	80016cc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80015e8:	f7ff fea0 	bl	800132c <MX_GPIO_Init>
	MX_LPUART1_UART_Init();
 80015ec:	f000 fb86 	bl	8001cfc <MX_LPUART1_UART_Init>
	MX_TIM1_Init();
 80015f0:	f000 fa50 	bl	8001a94 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	shell_init();
 80015f4:	f7ff fd7a 	bl	80010ec <shell_init>
	shell_add('f', fonction, "Fonction exemple");
 80015f8:	4a2a      	ldr	r2, [pc, #168]	; (80016a4 <main+0xc8>)
 80015fa:	492b      	ldr	r1, [pc, #172]	; (80016a8 <main+0xcc>)
 80015fc:	2066      	movs	r0, #102	; 0x66
 80015fe:	f7ff fda1 	bl	8001144 <shell_add>
	shell_add('a', hacheur, "Activation hacheur");
 8001602:	4a2a      	ldr	r2, [pc, #168]	; (80016ac <main+0xd0>)
 8001604:	492a      	ldr	r1, [pc, #168]	; (80016b0 <main+0xd4>)
 8001606:	2061      	movs	r0, #97	; 0x61
 8001608:	f7ff fd9c 	bl	8001144 <shell_add>
	shell_add('s', speed, "Vitesse");
 800160c:	4a29      	ldr	r2, [pc, #164]	; (80016b4 <main+0xd8>)
 800160e:	492a      	ldr	r1, [pc, #168]	; (80016b8 <main+0xdc>)
 8001610:	2073      	movs	r0, #115	; 0x73
 8001612:	f7ff fd97 	bl	8001144 <shell_add>

	TIM1->PSC = 5-1;	// car il compte et decompte
 8001616:	4b29      	ldr	r3, [pc, #164]	; (80016bc <main+0xe0>)
 8001618:	2204      	movs	r2, #4
 800161a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR = 1024-1;
 800161c:	4b27      	ldr	r3, [pc, #156]	; (80016bc <main+0xe0>)
 800161e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001622:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM1->CCR1 = 614;
 8001624:	4b25      	ldr	r3, [pc, #148]	; (80016bc <main+0xe0>)
 8001626:	f240 2266 	movw	r2, #614	; 0x266
 800162a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 1023-614;
 800162c:	4b23      	ldr	r3, [pc, #140]	; (80016bc <main+0xe0>)
 800162e:	f240 1299 	movw	r2, #409	; 0x199
 8001632:	639a      	str	r2, [r3, #56]	; 0x38

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if (hacheurStart == 1){
 8001634:	4b22      	ldr	r3, [pc, #136]	; (80016c0 <main+0xe4>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d11d      	bne.n	8001678 <main+0x9c>
			HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, 1);
 800163c:	2201      	movs	r2, #1
 800163e:	2101      	movs	r1, #1
 8001640:	4820      	ldr	r0, [pc, #128]	; (80016c4 <main+0xe8>)
 8001642:	f000 fffd 	bl	8002640 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8001646:	2001      	movs	r0, #1
 8001648:	f000 fc86 	bl	8001f58 <HAL_Delay>
			HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, 0);
 800164c:	2200      	movs	r2, #0
 800164e:	2101      	movs	r1, #1
 8001650:	481c      	ldr	r0, [pc, #112]	; (80016c4 <main+0xe8>)
 8001652:	f000 fff5 	bl	8002640 <HAL_GPIO_WritePin>

			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001656:	2100      	movs	r1, #0
 8001658:	481b      	ldr	r0, [pc, #108]	; (80016c8 <main+0xec>)
 800165a:	f002 f851 	bl	8003700 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800165e:	2100      	movs	r1, #0
 8001660:	4819      	ldr	r0, [pc, #100]	; (80016c8 <main+0xec>)
 8001662:	f002 fe9f 	bl	80043a4 <HAL_TIMEx_PWMN_Start>


			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001666:	2104      	movs	r1, #4
 8001668:	4817      	ldr	r0, [pc, #92]	; (80016c8 <main+0xec>)
 800166a:	f002 f849 	bl	8003700 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800166e:	2104      	movs	r1, #4
 8001670:	4815      	ldr	r0, [pc, #84]	; (80016c8 <main+0xec>)
 8001672:	f002 fe97 	bl	80043a4 <HAL_TIMEx_PWMN_Start>
 8001676:	e7dd      	b.n	8001634 <main+0x58>


		}
		else{
			HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, 0);
 8001678:	2200      	movs	r2, #0
 800167a:	2101      	movs	r1, #1
 800167c:	4811      	ldr	r0, [pc, #68]	; (80016c4 <main+0xe8>)
 800167e:	f000 ffdf 	bl	8002640 <HAL_GPIO_WritePin>

			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001682:	2100      	movs	r1, #0
 8001684:	4810      	ldr	r0, [pc, #64]	; (80016c8 <main+0xec>)
 8001686:	f002 f93b 	bl	8003900 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800168a:	2100      	movs	r1, #0
 800168c:	480e      	ldr	r0, [pc, #56]	; (80016c8 <main+0xec>)
 800168e:	f002 ff3d 	bl	800450c <HAL_TIMEx_PWMN_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001692:	2104      	movs	r1, #4
 8001694:	480c      	ldr	r0, [pc, #48]	; (80016c8 <main+0xec>)
 8001696:	f002 f933 	bl	8003900 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 800169a:	2104      	movs	r1, #4
 800169c:	480a      	ldr	r0, [pc, #40]	; (80016c8 <main+0xec>)
 800169e:	f002 ff35 	bl	800450c <HAL_TIMEx_PWMN_Stop>
		if (hacheurStart == 1){
 80016a2:	e7c7      	b.n	8001634 <main+0x58>
 80016a4:	0800a4d0 	.word	0x0800a4d0
 80016a8:	08001431 	.word	0x08001431
 80016ac:	0800a4e4 	.word	0x0800a4e4
 80016b0:	08001489 	.word	0x08001489
 80016b4:	0800a4f8 	.word	0x0800a4f8
 80016b8:	080014e1 	.word	0x080014e1
 80016bc:	40012c00 	.word	0x40012c00
 80016c0:	20000538 	.word	0x20000538
 80016c4:	48000800 	.word	0x48000800
 80016c8:	20000548 	.word	0x20000548

080016cc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b0a4      	sub	sp, #144	; 0x90
 80016d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016d6:	2238      	movs	r2, #56	; 0x38
 80016d8:	2100      	movs	r1, #0
 80016da:	4618      	mov	r0, r3
 80016dc:	f004 fd98 	bl	8006210 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016f0:	463b      	mov	r3, r7
 80016f2:	2244      	movs	r2, #68	; 0x44
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f004 fd8a 	bl	8006210 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80016fc:	2000      	movs	r0, #0
 80016fe:	f000 ffcf 	bl	80026a0 <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001702:	2302      	movs	r3, #2
 8001704:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001706:	f44f 7380 	mov.w	r3, #256	; 0x100
 800170a:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800170c:	2340      	movs	r3, #64	; 0x40
 800170e:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001710:	2302      	movs	r3, #2
 8001712:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001714:	2302      	movs	r3, #2
 8001716:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001718:	2304      	movs	r3, #4
 800171a:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800171c:	2355      	movs	r3, #85	; 0x55
 800171e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001722:	2302      	movs	r3, #2
 8001724:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001728:	2302      	movs	r3, #2
 800172a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800172e:	2302      	movs	r3, #2
 8001730:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001734:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001738:	4618      	mov	r0, r3
 800173a:	f001 f865 	bl	8002808 <HAL_RCC_OscConfig>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <SystemClock_Config+0x7c>
	{
		Error_Handler();
 8001744:	f000 f868 	bl	8001818 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001748:	230f      	movs	r3, #15
 800174a:	647b      	str	r3, [r7, #68]	; 0x44
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800174c:	2303      	movs	r3, #3
 800174e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001750:	2300      	movs	r3, #0
 8001752:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001754:	2300      	movs	r3, #0
 8001756:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001758:	2300      	movs	r3, #0
 800175a:	657b      	str	r3, [r7, #84]	; 0x54

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800175c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001760:	2104      	movs	r1, #4
 8001762:	4618      	mov	r0, r3
 8001764:	f001 fb68 	bl	8002e38 <HAL_RCC_ClockConfig>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <SystemClock_Config+0xa6>
	{
		Error_Handler();
 800176e:	f000 f853 	bl	8001818 <Error_Handler>
	}
	/** Initializes the peripherals clocks
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001772:	2320      	movs	r3, #32
 8001774:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800177a:	463b      	mov	r3, r7
 800177c:	4618      	mov	r0, r3
 800177e:	f001 fd77 	bl	8003270 <HAL_RCCEx_PeriphCLKConfig>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8001788:	f000 f846 	bl	8001818 <Error_Handler>
	}
}
 800178c:	bf00      	nop
 800178e:	3790      	adds	r7, #144	; 0x90
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 800179e:	88fb      	ldrh	r3, [r7, #6]
 80017a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017a4:	d114      	bne.n	80017d0 <HAL_GPIO_EXTI_Callback+0x3c>
		hacheurStart = !hacheurStart;
 80017a6:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <HAL_GPIO_EXTI_Callback+0x44>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	bf0c      	ite	eq
 80017ae:	2301      	moveq	r3, #1
 80017b0:	2300      	movne	r3, #0
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <HAL_GPIO_EXTI_Callback+0x44>)
 80017b8:	701a      	strb	r2, [r3, #0]

		if(hacheurStart == 1){
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <HAL_GPIO_EXTI_Callback+0x44>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d103      	bne.n	80017ca <HAL_GPIO_EXTI_Callback+0x36>
			printf("Hacheur active !\r\n");
 80017c2:	4806      	ldr	r0, [pc, #24]	; (80017dc <HAL_GPIO_EXTI_Callback+0x48>)
 80017c4:	f005 fa1c 	bl	8006c00 <puts>
		}
		else{
			printf("Hacheur desactive !\r\n");
		}
	}
}
 80017c8:	e002      	b.n	80017d0 <HAL_GPIO_EXTI_Callback+0x3c>
			printf("Hacheur desactive !\r\n");
 80017ca:	4805      	ldr	r0, [pc, #20]	; (80017e0 <HAL_GPIO_EXTI_Callback+0x4c>)
 80017cc:	f005 fa18 	bl	8006c00 <puts>
}
 80017d0:	bf00      	nop
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000538 	.word	0x20000538
 80017dc:	0800a47c 	.word	0x0800a47c
 80017e0:	0800a490 	.word	0x0800a490

080017e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	if(huart->Instance == LPUART1){
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a06      	ldr	r2, [pc, #24]	; (800180c <HAL_UART_RxCpltCallback+0x28>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d106      	bne.n	8001804 <HAL_UART_RxCpltCallback+0x20>
		shell_char_received();
 80017f6:	f7ff fce3 	bl	80011c0 <shell_char_received>
		HAL_UART_Receive_IT(&hlpuart1, (uint8_t*)&c, 1);
 80017fa:	2201      	movs	r2, #1
 80017fc:	4904      	ldr	r1, [pc, #16]	; (8001810 <HAL_UART_RxCpltCallback+0x2c>)
 80017fe:	4805      	ldr	r0, [pc, #20]	; (8001814 <HAL_UART_RxCpltCallback+0x30>)
 8001800:	f003 f910 	bl	8004a24 <HAL_UART_Receive_IT>
	}
}
 8001804:	bf00      	nop
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40008000 	.word	0x40008000
 8001810:	20000208 	.word	0x20000208
 8001814:	20000594 	.word	0x20000594

08001818 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800181c:	b672      	cpsid	i
}
 800181e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001820:	e7fe      	b.n	8001820 <Error_Handler+0x8>
	...

08001824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182a:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <HAL_MspInit+0x44>)
 800182c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800182e:	4a0e      	ldr	r2, [pc, #56]	; (8001868 <HAL_MspInit+0x44>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6613      	str	r3, [r2, #96]	; 0x60
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <HAL_MspInit+0x44>)
 8001838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <HAL_MspInit+0x44>)
 8001844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001846:	4a08      	ldr	r2, [pc, #32]	; (8001868 <HAL_MspInit+0x44>)
 8001848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800184c:	6593      	str	r3, [r2, #88]	; 0x58
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HAL_MspInit+0x44>)
 8001850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800185a:	f000 ffc5 	bl	80027e8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40021000 	.word	0x40021000

0800186c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <NMI_Handler+0x4>

08001872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001876:	e7fe      	b.n	8001876 <HardFault_Handler+0x4>

08001878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800187c:	e7fe      	b.n	800187c <MemManage_Handler+0x4>

0800187e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <BusFault_Handler+0x4>

08001884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <UsageFault_Handler+0x4>

0800188a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b8:	f000 fb30 	bl	8001f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}

080018c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80018c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018c8:	f000 fed2 	bl	8002670 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80018d4:	4802      	ldr	r0, [pc, #8]	; (80018e0 <LPUART1_IRQHandler+0x10>)
 80018d6:	f003 f8eb 	bl	8004ab0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000594 	.word	0x20000594

080018e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
	return 1;
 80018e8:	2301      	movs	r3, #1
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <_kill>:

int _kill(int pid, int sig)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018fe:	f004 fc5d 	bl	80061bc <__errno>
 8001902:	4603      	mov	r3, r0
 8001904:	2216      	movs	r2, #22
 8001906:	601a      	str	r2, [r3, #0]
	return -1;
 8001908:	f04f 33ff 	mov.w	r3, #4294967295
}
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <_exit>:

void _exit (int status)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800191c:	f04f 31ff 	mov.w	r1, #4294967295
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ffe7 	bl	80018f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001926:	e7fe      	b.n	8001926 <_exit+0x12>

08001928 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	e00a      	b.n	8001950 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800193a:	f3af 8000 	nop.w
 800193e:	4601      	mov	r1, r0
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	60ba      	str	r2, [r7, #8]
 8001946:	b2ca      	uxtb	r2, r1
 8001948:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	3301      	adds	r3, #1
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	429a      	cmp	r2, r3
 8001956:	dbf0      	blt.n	800193a <_read+0x12>
	}

return len;
 8001958:	687b      	ldr	r3, [r7, #4]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b086      	sub	sp, #24
 8001966:	af00      	add	r7, sp, #0
 8001968:	60f8      	str	r0, [r7, #12]
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	e009      	b.n	8001988 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	60ba      	str	r2, [r7, #8]
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fb5d 	bl	800103c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	3301      	adds	r3, #1
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	429a      	cmp	r2, r3
 800198e:	dbf1      	blt.n	8001974 <_write+0x12>
	}
	return len;
 8001990:	687b      	ldr	r3, [r7, #4]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <_close>:

int _close(int file)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
	return -1;
 80019a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
 80019ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019c2:	605a      	str	r2, [r3, #4]
	return 0;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <_isatty>:

int _isatty(int file)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
	return 1;
 80019da:	2301      	movs	r3, #1
}
 80019dc:	4618      	mov	r0, r3
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
	return 0;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a0c:	4a14      	ldr	r2, [pc, #80]	; (8001a60 <_sbrk+0x5c>)
 8001a0e:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <_sbrk+0x60>)
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a18:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <_sbrk+0x64>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d102      	bne.n	8001a26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a20:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <_sbrk+0x64>)
 8001a22:	4a12      	ldr	r2, [pc, #72]	; (8001a6c <_sbrk+0x68>)
 8001a24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a26:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <_sbrk+0x64>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d207      	bcs.n	8001a44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a34:	f004 fbc2 	bl	80061bc <__errno>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	220c      	movs	r2, #12
 8001a3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a42:	e009      	b.n	8001a58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <_sbrk+0x64>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a4a:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <_sbrk+0x64>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	4a05      	ldr	r2, [pc, #20]	; (8001a68 <_sbrk+0x64>)
 8001a54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a56:	68fb      	ldr	r3, [r7, #12]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20008000 	.word	0x20008000
 8001a64:	00000400 	.word	0x00000400
 8001a68:	2000053c 	.word	0x2000053c
 8001a6c:	20000638 	.word	0x20000638

08001a70 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <SystemInit+0x20>)
 8001a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a7a:	4a05      	ldr	r2, [pc, #20]	; (8001a90 <SystemInit+0x20>)
 8001a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b098      	sub	sp, #96	; 0x60
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a9a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aa6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]
 8001ab0:	609a      	str	r2, [r3, #8]
 8001ab2:	60da      	str	r2, [r3, #12]
 8001ab4:	611a      	str	r2, [r3, #16]
 8001ab6:	615a      	str	r2, [r3, #20]
 8001ab8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	2234      	movs	r2, #52	; 0x34
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f004 fba5 	bl	8006210 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ac6:	4b41      	ldr	r3, [pc, #260]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001ac8:	4a41      	ldr	r2, [pc, #260]	; (8001bd0 <MX_TIM1_Init+0x13c>)
 8001aca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 8001acc:	4b3f      	ldr	r3, [pc, #252]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001ace:	2209      	movs	r2, #9
 8001ad0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001ad2:	4b3e      	ldr	r3, [pc, #248]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001ad4:	2220      	movs	r2, #32
 8001ad6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8001ad8:	4b3c      	ldr	r3, [pc, #240]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001ada:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001ade:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae0:	4b3a      	ldr	r3, [pc, #232]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ae6:	4b39      	ldr	r3, [pc, #228]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aec:	4b37      	ldr	r3, [pc, #220]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001af2:	4836      	ldr	r0, [pc, #216]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001af4:	f001 fdac 	bl	8003650 <HAL_TIM_PWM_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001afe:	f7ff fe8b 	bl	8001818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b02:	2300      	movs	r3, #0
 8001b04:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b06:	2300      	movs	r3, #0
 8001b08:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b0e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b12:	4619      	mov	r1, r3
 8001b14:	482d      	ldr	r0, [pc, #180]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001b16:	f002 fd57 	bl	80045c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001b20:	f7ff fe7a 	bl	8001818 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b24:	2360      	movs	r3, #96	; 0x60
 8001b26:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b30:	2300      	movs	r3, #0
 8001b32:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b40:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b44:	2200      	movs	r2, #0
 8001b46:	4619      	mov	r1, r3
 8001b48:	4820      	ldr	r0, [pc, #128]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001b4a:	f001 ff6f 	bl	8003a2c <HAL_TIM_PWM_ConfigChannel>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001b54:	f7ff fe60 	bl	8001818 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b58:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b5c:	2204      	movs	r2, #4
 8001b5e:	4619      	mov	r1, r3
 8001b60:	481a      	ldr	r0, [pc, #104]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001b62:	f001 ff63 	bl	8003a2c <HAL_TIM_PWM_ConfigChannel>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001b6c:	f7ff fe54 	bl	8001818 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 203;
 8001b7c:	23cb      	movs	r3, #203	; 0xcb
 8001b7e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b88:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	4619      	mov	r1, r3
 8001bac:	4807      	ldr	r0, [pc, #28]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001bae:	f002 fd8d 	bl	80046cc <HAL_TIMEx_ConfigBreakDeadTime>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001bb8:	f7ff fe2e 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bbc:	4803      	ldr	r0, [pc, #12]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001bbe:	f000 f829 	bl	8001c14 <HAL_TIM_MspPostInit>

}
 8001bc2:	bf00      	nop
 8001bc4:	3760      	adds	r7, #96	; 0x60
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000548 	.word	0x20000548
 8001bd0:	40012c00 	.word	0x40012c00

08001bd4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0a      	ldr	r2, [pc, #40]	; (8001c0c <HAL_TIM_PWM_MspInit+0x38>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d10b      	bne.n	8001bfe <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <HAL_TIM_PWM_MspInit+0x3c>)
 8001be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bea:	4a09      	ldr	r2, [pc, #36]	; (8001c10 <HAL_TIM_PWM_MspInit+0x3c>)
 8001bec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bf0:	6613      	str	r3, [r2, #96]	; 0x60
 8001bf2:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <HAL_TIM_PWM_MspInit+0x3c>)
 8001bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001bfe:	bf00      	nop
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40012c00 	.word	0x40012c00
 8001c10:	40021000 	.word	0x40021000

08001c14 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08a      	sub	sp, #40	; 0x28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a2e      	ldr	r2, [pc, #184]	; (8001cec <HAL_TIM_MspPostInit+0xd8>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d155      	bne.n	8001ce2 <HAL_TIM_MspPostInit+0xce>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c36:	4b2e      	ldr	r3, [pc, #184]	; (8001cf0 <HAL_TIM_MspPostInit+0xdc>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3a:	4a2d      	ldr	r2, [pc, #180]	; (8001cf0 <HAL_TIM_MspPostInit+0xdc>)
 8001c3c:	f043 0304 	orr.w	r3, r3, #4
 8001c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c42:	4b2b      	ldr	r3, [pc, #172]	; (8001cf0 <HAL_TIM_MspPostInit+0xdc>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4e:	4b28      	ldr	r3, [pc, #160]	; (8001cf0 <HAL_TIM_MspPostInit+0xdc>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c52:	4a27      	ldr	r2, [pc, #156]	; (8001cf0 <HAL_TIM_MspPostInit+0xdc>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c5a:	4b25      	ldr	r3, [pc, #148]	; (8001cf0 <HAL_TIM_MspPostInit+0xdc>)
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c66:	4b22      	ldr	r3, [pc, #136]	; (8001cf0 <HAL_TIM_MspPostInit+0xdc>)
 8001c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6a:	4a21      	ldr	r2, [pc, #132]	; (8001cf0 <HAL_TIM_MspPostInit+0xdc>)
 8001c6c:	f043 0302 	orr.w	r3, r3, #2
 8001c70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c72:	4b1f      	ldr	r3, [pc, #124]	; (8001cf0 <HAL_TIM_MspPostInit+0xdc>)
 8001c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	60bb      	str	r3, [r7, #8]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> TIM1_CH2
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c92:	f107 0314 	add.w	r3, r7, #20
 8001c96:	4619      	mov	r1, r3
 8001c98:	4816      	ldr	r0, [pc, #88]	; (8001cf4 <HAL_TIM_MspPostInit+0xe0>)
 8001c9a:	f000 fb4f 	bl	800233c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001c9e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2300      	movs	r3, #0
 8001cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001cb0:	2306      	movs	r3, #6
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cbe:	f000 fb3d 	bl	800233c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001cd2:	2306      	movs	r3, #6
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4806      	ldr	r0, [pc, #24]	; (8001cf8 <HAL_TIM_MspPostInit+0xe4>)
 8001cde:	f000 fb2d 	bl	800233c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ce2:	bf00      	nop
 8001ce4:	3728      	adds	r7, #40	; 0x28
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40012c00 	.word	0x40012c00
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	48000800 	.word	0x48000800
 8001cf8:	48000400 	.word	0x48000400

08001cfc <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001d00:	4b21      	ldr	r3, [pc, #132]	; (8001d88 <MX_LPUART1_UART_Init+0x8c>)
 8001d02:	4a22      	ldr	r2, [pc, #136]	; (8001d8c <MX_LPUART1_UART_Init+0x90>)
 8001d04:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001d06:	4b20      	ldr	r3, [pc, #128]	; (8001d88 <MX_LPUART1_UART_Init+0x8c>)
 8001d08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d0c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d0e:	4b1e      	ldr	r3, [pc, #120]	; (8001d88 <MX_LPUART1_UART_Init+0x8c>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001d14:	4b1c      	ldr	r3, [pc, #112]	; (8001d88 <MX_LPUART1_UART_Init+0x8c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001d1a:	4b1b      	ldr	r3, [pc, #108]	; (8001d88 <MX_LPUART1_UART_Init+0x8c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001d20:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <MX_LPUART1_UART_Init+0x8c>)
 8001d22:	220c      	movs	r2, #12
 8001d24:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d26:	4b18      	ldr	r3, [pc, #96]	; (8001d88 <MX_LPUART1_UART_Init+0x8c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d2c:	4b16      	ldr	r3, [pc, #88]	; (8001d88 <MX_LPUART1_UART_Init+0x8c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d32:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <MX_LPUART1_UART_Init+0x8c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d38:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <MX_LPUART1_UART_Init+0x8c>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001d3e:	4812      	ldr	r0, [pc, #72]	; (8001d88 <MX_LPUART1_UART_Init+0x8c>)
 8001d40:	f002 fd89 	bl	8004856 <HAL_UART_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001d4a:	f7ff fd65 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d4e:	2100      	movs	r1, #0
 8001d50:	480d      	ldr	r0, [pc, #52]	; (8001d88 <MX_LPUART1_UART_Init+0x8c>)
 8001d52:	f004 f960 	bl	8006016 <HAL_UARTEx_SetTxFifoThreshold>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001d5c:	f7ff fd5c 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d60:	2100      	movs	r1, #0
 8001d62:	4809      	ldr	r0, [pc, #36]	; (8001d88 <MX_LPUART1_UART_Init+0x8c>)
 8001d64:	f004 f995 	bl	8006092 <HAL_UARTEx_SetRxFifoThreshold>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001d6e:	f7ff fd53 	bl	8001818 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001d72:	4805      	ldr	r0, [pc, #20]	; (8001d88 <MX_LPUART1_UART_Init+0x8c>)
 8001d74:	f004 f916 	bl	8005fa4 <HAL_UARTEx_DisableFifoMode>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001d7e:	f7ff fd4b 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000594 	.word	0x20000594
 8001d8c:	40008000 	.word	0x40008000

08001d90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08a      	sub	sp, #40	; 0x28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a1b      	ldr	r2, [pc, #108]	; (8001e1c <HAL_UART_MspInit+0x8c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d130      	bne.n	8001e14 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001db2:	4b1b      	ldr	r3, [pc, #108]	; (8001e20 <HAL_UART_MspInit+0x90>)
 8001db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db6:	4a1a      	ldr	r2, [pc, #104]	; (8001e20 <HAL_UART_MspInit+0x90>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001dbe:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <HAL_UART_MspInit+0x90>)
 8001dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <HAL_UART_MspInit+0x90>)
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dce:	4a14      	ldr	r2, [pc, #80]	; (8001e20 <HAL_UART_MspInit+0x90>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dd6:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <HAL_UART_MspInit+0x90>)
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001de2:	230c      	movs	r3, #12
 8001de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	2302      	movs	r3, #2
 8001de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dee:	2300      	movs	r3, #0
 8001df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001df2:	230c      	movs	r3, #12
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df6:	f107 0314 	add.w	r3, r7, #20
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e00:	f000 fa9c 	bl	800233c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001e04:	2200      	movs	r2, #0
 8001e06:	2100      	movs	r1, #0
 8001e08:	205b      	movs	r0, #91	; 0x5b
 8001e0a:	f000 f9a2 	bl	8002152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001e0e:	205b      	movs	r0, #91	; 0x5b
 8001e10:	f000 f9b9 	bl	8002186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001e14:	bf00      	nop
 8001e16:	3728      	adds	r7, #40	; 0x28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40008000 	.word	0x40008000
 8001e20:	40021000 	.word	0x40021000

08001e24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e24:	480d      	ldr	r0, [pc, #52]	; (8001e5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e26:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e28:	480d      	ldr	r0, [pc, #52]	; (8001e60 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e2a:	490e      	ldr	r1, [pc, #56]	; (8001e64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e2c:	4a0e      	ldr	r2, [pc, #56]	; (8001e68 <LoopForever+0xe>)
  movs r3, #0
 8001e2e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e30:	e002      	b.n	8001e38 <LoopCopyDataInit>

08001e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e36:	3304      	adds	r3, #4

08001e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e3c:	d3f9      	bcc.n	8001e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e3e:	4a0b      	ldr	r2, [pc, #44]	; (8001e6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e40:	4c0b      	ldr	r4, [pc, #44]	; (8001e70 <LoopForever+0x16>)
  movs r3, #0
 8001e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e44:	e001      	b.n	8001e4a <LoopFillZerobss>

08001e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e48:	3204      	adds	r2, #4

08001e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e4c:	d3fb      	bcc.n	8001e46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e4e:	f7ff fe0f 	bl	8001a70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e52:	f004 f9b9 	bl	80061c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e56:	f7ff fbc1 	bl	80015dc <main>

08001e5a <LoopForever>:

LoopForever:
    b LoopForever
 8001e5a:	e7fe      	b.n	8001e5a <LoopForever>
  ldr   r0, =_estack
 8001e5c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e64:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001e68:	0800a9fc 	.word	0x0800a9fc
  ldr r2, =_sbss
 8001e6c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001e70:	20000638 	.word	0x20000638

08001e74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e74:	e7fe      	b.n	8001e74 <ADC1_2_IRQHandler>

08001e76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e80:	2003      	movs	r0, #3
 8001e82:	f000 f95b 	bl	800213c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e86:	2000      	movs	r0, #0
 8001e88:	f000 f80e 	bl	8001ea8 <HAL_InitTick>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d002      	beq.n	8001e98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	71fb      	strb	r3, [r7, #7]
 8001e96:	e001      	b.n	8001e9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e98:	f7ff fcc4 	bl	8001824 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e9c:	79fb      	ldrb	r3, [r7, #7]

}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001eb4:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <HAL_InitTick+0x68>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d022      	beq.n	8001f02 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ebc:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <HAL_InitTick+0x6c>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <HAL_InitTick+0x68>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ec8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f000 f966 	bl	80021a2 <HAL_SYSTICK_Config>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10f      	bne.n	8001efc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b0f      	cmp	r3, #15
 8001ee0:	d809      	bhi.n	8001ef6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8001eea:	f000 f932 	bl	8002152 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001eee:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <HAL_InitTick+0x70>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	e007      	b.n	8001f06 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	73fb      	strb	r3, [r7, #15]
 8001efa:	e004      	b.n	8001f06 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	73fb      	strb	r3, [r7, #15]
 8001f00:	e001      	b.n	8001f06 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000014 	.word	0x20000014
 8001f14:	2000000c 	.word	0x2000000c
 8001f18:	20000010 	.word	0x20000010

08001f1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <HAL_IncTick+0x1c>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <HAL_IncTick+0x20>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4413      	add	r3, r2
 8001f2a:	4a03      	ldr	r2, [pc, #12]	; (8001f38 <HAL_IncTick+0x1c>)
 8001f2c:	6013      	str	r3, [r2, #0]
}
 8001f2e:	bf00      	nop
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	20000624 	.word	0x20000624
 8001f3c:	20000014 	.word	0x20000014

08001f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return uwTick;
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <HAL_GetTick+0x14>)
 8001f46:	681b      	ldr	r3, [r3, #0]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	20000624 	.word	0x20000624

08001f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f60:	f7ff ffee 	bl	8001f40 <HAL_GetTick>
 8001f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f70:	d004      	beq.n	8001f7c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <HAL_Delay+0x40>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	4413      	add	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f7c:	bf00      	nop
 8001f7e:	f7ff ffdf 	bl	8001f40 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d8f7      	bhi.n	8001f7e <HAL_Delay+0x26>
  {
  }
}
 8001f8e:	bf00      	nop
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000014 	.word	0x20000014

08001f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fac:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fce:	4a04      	ldr	r2, [pc, #16]	; (8001fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	60d3      	str	r3, [r2, #12]
}
 8001fd4:	bf00      	nop
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe8:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <__NVIC_GetPriorityGrouping+0x18>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	0a1b      	lsrs	r3, r3, #8
 8001fee:	f003 0307 	and.w	r3, r3, #7
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	2b00      	cmp	r3, #0
 8002010:	db0b      	blt.n	800202a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	f003 021f 	and.w	r2, r3, #31
 8002018:	4907      	ldr	r1, [pc, #28]	; (8002038 <__NVIC_EnableIRQ+0x38>)
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	095b      	lsrs	r3, r3, #5
 8002020:	2001      	movs	r0, #1
 8002022:	fa00 f202 	lsl.w	r2, r0, r2
 8002026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000e100 	.word	0xe000e100

0800203c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	6039      	str	r1, [r7, #0]
 8002046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204c:	2b00      	cmp	r3, #0
 800204e:	db0a      	blt.n	8002066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	b2da      	uxtb	r2, r3
 8002054:	490c      	ldr	r1, [pc, #48]	; (8002088 <__NVIC_SetPriority+0x4c>)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	0112      	lsls	r2, r2, #4
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	440b      	add	r3, r1
 8002060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002064:	e00a      	b.n	800207c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	b2da      	uxtb	r2, r3
 800206a:	4908      	ldr	r1, [pc, #32]	; (800208c <__NVIC_SetPriority+0x50>)
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	3b04      	subs	r3, #4
 8002074:	0112      	lsls	r2, r2, #4
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	440b      	add	r3, r1
 800207a:	761a      	strb	r2, [r3, #24]
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000e100 	.word	0xe000e100
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	; 0x24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f1c3 0307 	rsb	r3, r3, #7
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	bf28      	it	cs
 80020ae:	2304      	movcs	r3, #4
 80020b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3304      	adds	r3, #4
 80020b6:	2b06      	cmp	r3, #6
 80020b8:	d902      	bls.n	80020c0 <NVIC_EncodePriority+0x30>
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3b03      	subs	r3, #3
 80020be:	e000      	b.n	80020c2 <NVIC_EncodePriority+0x32>
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	f04f 32ff 	mov.w	r2, #4294967295
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43da      	mvns	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	401a      	ands	r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d8:	f04f 31ff 	mov.w	r1, #4294967295
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	fa01 f303 	lsl.w	r3, r1, r3
 80020e2:	43d9      	mvns	r1, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	4313      	orrs	r3, r2
         );
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3724      	adds	r7, #36	; 0x24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
	...

080020f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3b01      	subs	r3, #1
 8002104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002108:	d301      	bcc.n	800210e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800210a:	2301      	movs	r3, #1
 800210c:	e00f      	b.n	800212e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800210e:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <SysTick_Config+0x40>)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3b01      	subs	r3, #1
 8002114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002116:	210f      	movs	r1, #15
 8002118:	f04f 30ff 	mov.w	r0, #4294967295
 800211c:	f7ff ff8e 	bl	800203c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002120:	4b05      	ldr	r3, [pc, #20]	; (8002138 <SysTick_Config+0x40>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002126:	4b04      	ldr	r3, [pc, #16]	; (8002138 <SysTick_Config+0x40>)
 8002128:	2207      	movs	r2, #7
 800212a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	e000e010 	.word	0xe000e010

0800213c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff ff29 	bl	8001f9c <__NVIC_SetPriorityGrouping>
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b086      	sub	sp, #24
 8002156:	af00      	add	r7, sp, #0
 8002158:	4603      	mov	r3, r0
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	607a      	str	r2, [r7, #4]
 800215e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002160:	f7ff ff40 	bl	8001fe4 <__NVIC_GetPriorityGrouping>
 8002164:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68b9      	ldr	r1, [r7, #8]
 800216a:	6978      	ldr	r0, [r7, #20]
 800216c:	f7ff ff90 	bl	8002090 <NVIC_EncodePriority>
 8002170:	4602      	mov	r2, r0
 8002172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002176:	4611      	mov	r1, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff ff5f 	bl	800203c <__NVIC_SetPriority>
}
 800217e:	bf00      	nop
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	4603      	mov	r3, r0
 800218e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff ff33 	bl	8002000 <__NVIC_EnableIRQ>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff ffa4 	bl	80020f8 <SysTick_Config>
 80021b0:	4603      	mov	r3, r0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b085      	sub	sp, #20
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d005      	beq.n	80021de <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2204      	movs	r2, #4
 80021d6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]
 80021dc:	e037      	b.n	800224e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 020e 	bic.w	r2, r2, #14
 80021ec:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021fc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0201 	bic.w	r2, r2, #1
 800220c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	f003 021f 	and.w	r2, r3, #31
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	2101      	movs	r1, #1
 800221c:	fa01 f202 	lsl.w	r2, r1, r2
 8002220:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800222a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00c      	beq.n	800224e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002242:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800224c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800225e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002274:	2300      	movs	r3, #0
 8002276:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d00d      	beq.n	80022a0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2204      	movs	r2, #4
 8002288:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	73fb      	strb	r3, [r7, #15]
 800229e:	e047      	b.n	8002330 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 020e 	bic.w	r2, r2, #14
 80022ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0201 	bic.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d4:	f003 021f 	and.w	r2, r3, #31
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	2101      	movs	r1, #1
 80022de:	fa01 f202 	lsl.w	r2, r1, r2
 80022e2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022ec:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00c      	beq.n	8002310 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002300:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002304:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800230e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	4798      	blx	r3
    }
  }
  return status;
 8002330:	7bfb      	ldrb	r3, [r7, #15]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800233c:	b480      	push	{r7}
 800233e:	b087      	sub	sp, #28
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800234a:	e15a      	b.n	8002602 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	2101      	movs	r1, #1
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	fa01 f303 	lsl.w	r3, r1, r3
 8002358:	4013      	ands	r3, r2
 800235a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 814c 	beq.w	80025fc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d00b      	beq.n	8002384 <HAL_GPIO_Init+0x48>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b02      	cmp	r3, #2
 8002372:	d007      	beq.n	8002384 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002378:	2b11      	cmp	r3, #17
 800237a:	d003      	beq.n	8002384 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2b12      	cmp	r3, #18
 8002382:	d130      	bne.n	80023e6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	2203      	movs	r2, #3
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4013      	ands	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023ba:	2201      	movs	r2, #1
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4013      	ands	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	091b      	lsrs	r3, r3, #4
 80023d0:	f003 0201 	and.w	r2, r3, #1
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4313      	orrs	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	2203      	movs	r2, #3
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43db      	mvns	r3, r3
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4013      	ands	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4313      	orrs	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_Init+0xea>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b12      	cmp	r3, #18
 8002424:	d123      	bne.n	800246e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	08da      	lsrs	r2, r3, #3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3208      	adds	r2, #8
 800242e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002432:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	220f      	movs	r2, #15
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4013      	ands	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	691a      	ldr	r2, [r3, #16]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	08da      	lsrs	r2, r3, #3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3208      	adds	r2, #8
 8002468:	6939      	ldr	r1, [r7, #16]
 800246a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	2203      	movs	r2, #3
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4013      	ands	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 0203 	and.w	r2, r3, #3
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 80a6 	beq.w	80025fc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b0:	4b5b      	ldr	r3, [pc, #364]	; (8002620 <HAL_GPIO_Init+0x2e4>)
 80024b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b4:	4a5a      	ldr	r2, [pc, #360]	; (8002620 <HAL_GPIO_Init+0x2e4>)
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	6613      	str	r3, [r2, #96]	; 0x60
 80024bc:	4b58      	ldr	r3, [pc, #352]	; (8002620 <HAL_GPIO_Init+0x2e4>)
 80024be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024c8:	4a56      	ldr	r2, [pc, #344]	; (8002624 <HAL_GPIO_Init+0x2e8>)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	089b      	lsrs	r3, r3, #2
 80024ce:	3302      	adds	r3, #2
 80024d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f003 0303 	and.w	r3, r3, #3
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	220f      	movs	r2, #15
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	4013      	ands	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024f2:	d01f      	beq.n	8002534 <HAL_GPIO_Init+0x1f8>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a4c      	ldr	r2, [pc, #304]	; (8002628 <HAL_GPIO_Init+0x2ec>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d019      	beq.n	8002530 <HAL_GPIO_Init+0x1f4>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a4b      	ldr	r2, [pc, #300]	; (800262c <HAL_GPIO_Init+0x2f0>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d013      	beq.n	800252c <HAL_GPIO_Init+0x1f0>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a4a      	ldr	r2, [pc, #296]	; (8002630 <HAL_GPIO_Init+0x2f4>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d00d      	beq.n	8002528 <HAL_GPIO_Init+0x1ec>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a49      	ldr	r2, [pc, #292]	; (8002634 <HAL_GPIO_Init+0x2f8>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d007      	beq.n	8002524 <HAL_GPIO_Init+0x1e8>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a48      	ldr	r2, [pc, #288]	; (8002638 <HAL_GPIO_Init+0x2fc>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d101      	bne.n	8002520 <HAL_GPIO_Init+0x1e4>
 800251c:	2305      	movs	r3, #5
 800251e:	e00a      	b.n	8002536 <HAL_GPIO_Init+0x1fa>
 8002520:	2306      	movs	r3, #6
 8002522:	e008      	b.n	8002536 <HAL_GPIO_Init+0x1fa>
 8002524:	2304      	movs	r3, #4
 8002526:	e006      	b.n	8002536 <HAL_GPIO_Init+0x1fa>
 8002528:	2303      	movs	r3, #3
 800252a:	e004      	b.n	8002536 <HAL_GPIO_Init+0x1fa>
 800252c:	2302      	movs	r3, #2
 800252e:	e002      	b.n	8002536 <HAL_GPIO_Init+0x1fa>
 8002530:	2301      	movs	r3, #1
 8002532:	e000      	b.n	8002536 <HAL_GPIO_Init+0x1fa>
 8002534:	2300      	movs	r3, #0
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	f002 0203 	and.w	r2, r2, #3
 800253c:	0092      	lsls	r2, r2, #2
 800253e:	4093      	lsls	r3, r2
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4313      	orrs	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002546:	4937      	ldr	r1, [pc, #220]	; (8002624 <HAL_GPIO_Init+0x2e8>)
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	089b      	lsrs	r3, r3, #2
 800254c:	3302      	adds	r3, #2
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002554:	4b39      	ldr	r3, [pc, #228]	; (800263c <HAL_GPIO_Init+0x300>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	43db      	mvns	r3, r3
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4013      	ands	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4313      	orrs	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002578:	4a30      	ldr	r2, [pc, #192]	; (800263c <HAL_GPIO_Init+0x300>)
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800257e:	4b2f      	ldr	r3, [pc, #188]	; (800263c <HAL_GPIO_Init+0x300>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	43db      	mvns	r3, r3
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4013      	ands	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4313      	orrs	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025a2:	4a26      	ldr	r2, [pc, #152]	; (800263c <HAL_GPIO_Init+0x300>)
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025a8:	4b24      	ldr	r3, [pc, #144]	; (800263c <HAL_GPIO_Init+0x300>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	43db      	mvns	r3, r3
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4013      	ands	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025cc:	4a1b      	ldr	r2, [pc, #108]	; (800263c <HAL_GPIO_Init+0x300>)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025d2:	4b1a      	ldr	r3, [pc, #104]	; (800263c <HAL_GPIO_Init+0x300>)
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	43db      	mvns	r3, r3
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4013      	ands	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025f6:	4a11      	ldr	r2, [pc, #68]	; (800263c <HAL_GPIO_Init+0x300>)
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	3301      	adds	r3, #1
 8002600:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	fa22 f303 	lsr.w	r3, r2, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	f47f ae9d 	bne.w	800234c <HAL_GPIO_Init+0x10>
  }
}
 8002612:	bf00      	nop
 8002614:	bf00      	nop
 8002616:	371c      	adds	r7, #28
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	40021000 	.word	0x40021000
 8002624:	40010000 	.word	0x40010000
 8002628:	48000400 	.word	0x48000400
 800262c:	48000800 	.word	0x48000800
 8002630:	48000c00 	.word	0x48000c00
 8002634:	48001000 	.word	0x48001000
 8002638:	48001400 	.word	0x48001400
 800263c:	40010400 	.word	0x40010400

08002640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	807b      	strh	r3, [r7, #2]
 800264c:	4613      	mov	r3, r2
 800264e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002650:	787b      	ldrb	r3, [r7, #1]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002656:	887a      	ldrh	r2, [r7, #2]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800265c:	e002      	b.n	8002664 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800265e:	887a      	ldrh	r2, [r7, #2]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800267a:	4b08      	ldr	r3, [pc, #32]	; (800269c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800267c:	695a      	ldr	r2, [r3, #20]
 800267e:	88fb      	ldrh	r3, [r7, #6]
 8002680:	4013      	ands	r3, r2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d006      	beq.n	8002694 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002686:	4a05      	ldr	r2, [pc, #20]	; (800269c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002688:	88fb      	ldrh	r3, [r7, #6]
 800268a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800268c:	88fb      	ldrh	r3, [r7, #6]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff f880 	bl	8001794 <HAL_GPIO_EXTI_Callback>
  }
}
 8002694:	bf00      	nop
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40010400 	.word	0x40010400

080026a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d141      	bne.n	8002732 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026ae:	4b4b      	ldr	r3, [pc, #300]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ba:	d131      	bne.n	8002720 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026bc:	4b47      	ldr	r3, [pc, #284]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026c2:	4a46      	ldr	r2, [pc, #280]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026cc:	4b43      	ldr	r3, [pc, #268]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026d4:	4a41      	ldr	r2, [pc, #260]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026dc:	4b40      	ldr	r3, [pc, #256]	; (80027e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2232      	movs	r2, #50	; 0x32
 80026e2:	fb02 f303 	mul.w	r3, r2, r3
 80026e6:	4a3f      	ldr	r2, [pc, #252]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80026e8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ec:	0c9b      	lsrs	r3, r3, #18
 80026ee:	3301      	adds	r3, #1
 80026f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026f2:	e002      	b.n	80026fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026fa:	4b38      	ldr	r3, [pc, #224]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002706:	d102      	bne.n	800270e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f2      	bne.n	80026f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800270e:	4b33      	ldr	r3, [pc, #204]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800271a:	d158      	bne.n	80027ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e057      	b.n	80027d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002720:	4b2e      	ldr	r3, [pc, #184]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002726:	4a2d      	ldr	r2, [pc, #180]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800272c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002730:	e04d      	b.n	80027ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002738:	d141      	bne.n	80027be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800273a:	4b28      	ldr	r3, [pc, #160]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002746:	d131      	bne.n	80027ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002748:	4b24      	ldr	r3, [pc, #144]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800274a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800274e:	4a23      	ldr	r2, [pc, #140]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002754:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002758:	4b20      	ldr	r3, [pc, #128]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002760:	4a1e      	ldr	r2, [pc, #120]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002762:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002766:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002768:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2232      	movs	r2, #50	; 0x32
 800276e:	fb02 f303 	mul.w	r3, r2, r3
 8002772:	4a1c      	ldr	r2, [pc, #112]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002774:	fba2 2303 	umull	r2, r3, r2, r3
 8002778:	0c9b      	lsrs	r3, r3, #18
 800277a:	3301      	adds	r3, #1
 800277c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800277e:	e002      	b.n	8002786 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	3b01      	subs	r3, #1
 8002784:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002786:	4b15      	ldr	r3, [pc, #84]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800278e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002792:	d102      	bne.n	800279a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1f2      	bne.n	8002780 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800279a:	4b10      	ldr	r3, [pc, #64]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027a6:	d112      	bne.n	80027ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e011      	b.n	80027d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027b2:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80027bc:	e007      	b.n	80027ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027be:	4b07      	ldr	r3, [pc, #28]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027c6:	4a05      	ldr	r2, [pc, #20]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	40007000 	.word	0x40007000
 80027e0:	2000000c 	.word	0x2000000c
 80027e4:	431bde83 	.word	0x431bde83

080027e8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80027ec:	4b05      	ldr	r3, [pc, #20]	; (8002804 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	4a04      	ldr	r2, [pc, #16]	; (8002804 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80027f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027f6:	6093      	str	r3, [r2, #8]
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	40007000 	.word	0x40007000

08002808 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b088      	sub	sp, #32
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e308      	b.n	8002e2c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d075      	beq.n	8002912 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002826:	4ba3      	ldr	r3, [pc, #652]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002830:	4ba0      	ldr	r3, [pc, #640]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	2b0c      	cmp	r3, #12
 800283e:	d102      	bne.n	8002846 <HAL_RCC_OscConfig+0x3e>
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	2b03      	cmp	r3, #3
 8002844:	d002      	beq.n	800284c <HAL_RCC_OscConfig+0x44>
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	2b08      	cmp	r3, #8
 800284a:	d10b      	bne.n	8002864 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800284c:	4b99      	ldr	r3, [pc, #612]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d05b      	beq.n	8002910 <HAL_RCC_OscConfig+0x108>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d157      	bne.n	8002910 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e2e3      	b.n	8002e2c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800286c:	d106      	bne.n	800287c <HAL_RCC_OscConfig+0x74>
 800286e:	4b91      	ldr	r3, [pc, #580]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a90      	ldr	r2, [pc, #576]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	e01d      	b.n	80028b8 <HAL_RCC_OscConfig+0xb0>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002884:	d10c      	bne.n	80028a0 <HAL_RCC_OscConfig+0x98>
 8002886:	4b8b      	ldr	r3, [pc, #556]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a8a      	ldr	r2, [pc, #552]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 800288c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	4b88      	ldr	r3, [pc, #544]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a87      	ldr	r2, [pc, #540]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	e00b      	b.n	80028b8 <HAL_RCC_OscConfig+0xb0>
 80028a0:	4b84      	ldr	r3, [pc, #528]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a83      	ldr	r2, [pc, #524]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 80028a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	4b81      	ldr	r3, [pc, #516]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a80      	ldr	r2, [pc, #512]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 80028b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d013      	beq.n	80028e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c0:	f7ff fb3e 	bl	8001f40 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c8:	f7ff fb3a 	bl	8001f40 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b64      	cmp	r3, #100	; 0x64
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e2a8      	b.n	8002e2c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028da:	4b76      	ldr	r3, [pc, #472]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0xc0>
 80028e6:	e014      	b.n	8002912 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e8:	f7ff fb2a 	bl	8001f40 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f0:	f7ff fb26 	bl	8001f40 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b64      	cmp	r3, #100	; 0x64
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e294      	b.n	8002e2c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002902:	4b6c      	ldr	r3, [pc, #432]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f0      	bne.n	80028f0 <HAL_RCC_OscConfig+0xe8>
 800290e:	e000      	b.n	8002912 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d075      	beq.n	8002a0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800291e:	4b65      	ldr	r3, [pc, #404]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002928:	4b62      	ldr	r3, [pc, #392]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	2b0c      	cmp	r3, #12
 8002936:	d102      	bne.n	800293e <HAL_RCC_OscConfig+0x136>
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	2b02      	cmp	r3, #2
 800293c:	d002      	beq.n	8002944 <HAL_RCC_OscConfig+0x13c>
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	2b04      	cmp	r3, #4
 8002942:	d11f      	bne.n	8002984 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002944:	4b5b      	ldr	r3, [pc, #364]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_RCC_OscConfig+0x154>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e267      	b.n	8002e2c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295c:	4b55      	ldr	r3, [pc, #340]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	061b      	lsls	r3, r3, #24
 800296a:	4952      	ldr	r1, [pc, #328]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 800296c:	4313      	orrs	r3, r2
 800296e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002970:	4b51      	ldr	r3, [pc, #324]	; (8002ab8 <HAL_RCC_OscConfig+0x2b0>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff fa97 	bl	8001ea8 <HAL_InitTick>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d043      	beq.n	8002a08 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e253      	b.n	8002e2c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d023      	beq.n	80029d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800298c:	4b49      	ldr	r3, [pc, #292]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a48      	ldr	r2, [pc, #288]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002998:	f7ff fad2 	bl	8001f40 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029a0:	f7ff face 	bl	8001f40 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e23c      	b.n	8002e2c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029b2:	4b40      	ldr	r3, [pc, #256]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0f0      	beq.n	80029a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029be:	4b3d      	ldr	r3, [pc, #244]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	061b      	lsls	r3, r3, #24
 80029cc:	4939      	ldr	r1, [pc, #228]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	604b      	str	r3, [r1, #4]
 80029d2:	e01a      	b.n	8002a0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029d4:	4b37      	ldr	r3, [pc, #220]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a36      	ldr	r2, [pc, #216]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 80029da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e0:	f7ff faae 	bl	8001f40 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029e8:	f7ff faaa 	bl	8001f40 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e218      	b.n	8002e2c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029fa:	4b2e      	ldr	r3, [pc, #184]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f0      	bne.n	80029e8 <HAL_RCC_OscConfig+0x1e0>
 8002a06:	e000      	b.n	8002a0a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d03c      	beq.n	8002a90 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d01c      	beq.n	8002a58 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a1e:	4b25      	ldr	r3, [pc, #148]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002a20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a24:	4a23      	ldr	r2, [pc, #140]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2e:	f7ff fa87 	bl	8001f40 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a36:	f7ff fa83 	bl	8001f40 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e1f1      	b.n	8002e2c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a48:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0ef      	beq.n	8002a36 <HAL_RCC_OscConfig+0x22e>
 8002a56:	e01b      	b.n	8002a90 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a58:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a5e:	4a15      	ldr	r2, [pc, #84]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002a60:	f023 0301 	bic.w	r3, r3, #1
 8002a64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a68:	f7ff fa6a 	bl	8001f40 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a70:	f7ff fa66 	bl	8001f40 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e1d4      	b.n	8002e2c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a82:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1ef      	bne.n	8002a70 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80ab 	beq.w	8002bf4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002aa2:	4b04      	ldr	r3, [pc, #16]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d106      	bne.n	8002abc <HAL_RCC_OscConfig+0x2b4>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e005      	b.n	8002abe <HAL_RCC_OscConfig+0x2b6>
 8002ab2:	bf00      	nop
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	20000010 	.word	0x20000010
 8002abc:	2300      	movs	r3, #0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00d      	beq.n	8002ade <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ac2:	4baf      	ldr	r3, [pc, #700]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac6:	4aae      	ldr	r2, [pc, #696]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002acc:	6593      	str	r3, [r2, #88]	; 0x58
 8002ace:	4bac      	ldr	r3, [pc, #688]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ada:	2301      	movs	r3, #1
 8002adc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ade:	4ba9      	ldr	r3, [pc, #676]	; (8002d84 <HAL_RCC_OscConfig+0x57c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d118      	bne.n	8002b1c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aea:	4ba6      	ldr	r3, [pc, #664]	; (8002d84 <HAL_RCC_OscConfig+0x57c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4aa5      	ldr	r2, [pc, #660]	; (8002d84 <HAL_RCC_OscConfig+0x57c>)
 8002af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002af6:	f7ff fa23 	bl	8001f40 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002afe:	f7ff fa1f 	bl	8001f40 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e18d      	b.n	8002e2c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b10:	4b9c      	ldr	r3, [pc, #624]	; (8002d84 <HAL_RCC_OscConfig+0x57c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0f0      	beq.n	8002afe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d108      	bne.n	8002b36 <HAL_RCC_OscConfig+0x32e>
 8002b24:	4b96      	ldr	r3, [pc, #600]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2a:	4a95      	ldr	r2, [pc, #596]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b34:	e024      	b.n	8002b80 <HAL_RCC_OscConfig+0x378>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b05      	cmp	r3, #5
 8002b3c:	d110      	bne.n	8002b60 <HAL_RCC_OscConfig+0x358>
 8002b3e:	4b90      	ldr	r3, [pc, #576]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b44:	4a8e      	ldr	r2, [pc, #568]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002b46:	f043 0304 	orr.w	r3, r3, #4
 8002b4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b4e:	4b8c      	ldr	r3, [pc, #560]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b54:	4a8a      	ldr	r2, [pc, #552]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b5e:	e00f      	b.n	8002b80 <HAL_RCC_OscConfig+0x378>
 8002b60:	4b87      	ldr	r3, [pc, #540]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b66:	4a86      	ldr	r2, [pc, #536]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002b68:	f023 0301 	bic.w	r3, r3, #1
 8002b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b70:	4b83      	ldr	r3, [pc, #524]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b76:	4a82      	ldr	r2, [pc, #520]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002b78:	f023 0304 	bic.w	r3, r3, #4
 8002b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d016      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b88:	f7ff f9da 	bl	8001f40 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b8e:	e00a      	b.n	8002ba6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b90:	f7ff f9d6 	bl	8001f40 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e142      	b.n	8002e2c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ba6:	4b76      	ldr	r3, [pc, #472]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0ed      	beq.n	8002b90 <HAL_RCC_OscConfig+0x388>
 8002bb4:	e015      	b.n	8002be2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb6:	f7ff f9c3 	bl	8001f40 <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bbc:	e00a      	b.n	8002bd4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bbe:	f7ff f9bf 	bl	8001f40 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e12b      	b.n	8002e2c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bd4:	4b6a      	ldr	r3, [pc, #424]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1ed      	bne.n	8002bbe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002be2:	7ffb      	ldrb	r3, [r7, #31]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d105      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002be8:	4b65      	ldr	r3, [pc, #404]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bec:	4a64      	ldr	r2, [pc, #400]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002bee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bf2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0320 	and.w	r3, r3, #32
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d03c      	beq.n	8002c7a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d01c      	beq.n	8002c42 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c08:	4b5d      	ldr	r3, [pc, #372]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002c0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c0e:	4a5c      	ldr	r2, [pc, #368]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c18:	f7ff f992 	bl	8001f40 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c20:	f7ff f98e 	bl	8001f40 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e0fc      	b.n	8002e2c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c32:	4b53      	ldr	r3, [pc, #332]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002c34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0ef      	beq.n	8002c20 <HAL_RCC_OscConfig+0x418>
 8002c40:	e01b      	b.n	8002c7a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c42:	4b4f      	ldr	r3, [pc, #316]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002c44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c48:	4a4d      	ldr	r2, [pc, #308]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002c4a:	f023 0301 	bic.w	r3, r3, #1
 8002c4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c52:	f7ff f975 	bl	8001f40 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c5a:	f7ff f971 	bl	8001f40 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e0df      	b.n	8002e2c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c6c:	4b44      	ldr	r3, [pc, #272]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002c6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1ef      	bne.n	8002c5a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 80d3 	beq.w	8002e2a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c84:	4b3e      	ldr	r3, [pc, #248]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 030c 	and.w	r3, r3, #12
 8002c8c:	2b0c      	cmp	r3, #12
 8002c8e:	f000 808d 	beq.w	8002dac <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d15a      	bne.n	8002d50 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c9a:	4b39      	ldr	r3, [pc, #228]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a38      	ldr	r2, [pc, #224]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002ca0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ca4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca6:	f7ff f94b 	bl	8001f40 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cae:	f7ff f947 	bl	8001f40 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e0b5      	b.n	8002e2c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cc0:	4b2f      	ldr	r3, [pc, #188]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1f0      	bne.n	8002cae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ccc:	4b2c      	ldr	r3, [pc, #176]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002cce:	68da      	ldr	r2, [r3, #12]
 8002cd0:	4b2d      	ldr	r3, [pc, #180]	; (8002d88 <HAL_RCC_OscConfig+0x580>)
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6a11      	ldr	r1, [r2, #32]
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cdc:	3a01      	subs	r2, #1
 8002cde:	0112      	lsls	r2, r2, #4
 8002ce0:	4311      	orrs	r1, r2
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002ce6:	0212      	lsls	r2, r2, #8
 8002ce8:	4311      	orrs	r1, r2
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002cee:	0852      	lsrs	r2, r2, #1
 8002cf0:	3a01      	subs	r2, #1
 8002cf2:	0552      	lsls	r2, r2, #21
 8002cf4:	4311      	orrs	r1, r2
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002cfa:	0852      	lsrs	r2, r2, #1
 8002cfc:	3a01      	subs	r2, #1
 8002cfe:	0652      	lsls	r2, r2, #25
 8002d00:	4311      	orrs	r1, r2
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d06:	06d2      	lsls	r2, r2, #27
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	491d      	ldr	r1, [pc, #116]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d10:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a1a      	ldr	r2, [pc, #104]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002d16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d1a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d1c:	4b18      	ldr	r3, [pc, #96]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	4a17      	ldr	r2, [pc, #92]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002d22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d26:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d28:	f7ff f90a 	bl	8001f40 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d30:	f7ff f906 	bl	8001f40 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e074      	b.n	8002e2c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d42:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCC_OscConfig+0x528>
 8002d4e:	e06c      	b.n	8002e2a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d50:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a0a      	ldr	r2, [pc, #40]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002d56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d5a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002d5c:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	4a07      	ldr	r2, [pc, #28]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002d62:	f023 0303 	bic.w	r3, r3, #3
 8002d66:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002d68:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	4a04      	ldr	r2, [pc, #16]	; (8002d80 <HAL_RCC_OscConfig+0x578>)
 8002d6e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d76:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d78:	f7ff f8e2 	bl	8001f40 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d7e:	e00e      	b.n	8002d9e <HAL_RCC_OscConfig+0x596>
 8002d80:	40021000 	.word	0x40021000
 8002d84:	40007000 	.word	0x40007000
 8002d88:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d8c:	f7ff f8d8 	bl	8001f40 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e046      	b.n	8002e2c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d9e:	4b25      	ldr	r3, [pc, #148]	; (8002e34 <HAL_RCC_OscConfig+0x62c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0x584>
 8002daa:	e03e      	b.n	8002e2a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e039      	b.n	8002e2c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002db8:	4b1e      	ldr	r3, [pc, #120]	; (8002e34 <HAL_RCC_OscConfig+0x62c>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f003 0203 	and.w	r2, r3, #3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d12c      	bne.n	8002e26 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d123      	bne.n	8002e26 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d11b      	bne.n	8002e26 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d113      	bne.n	8002e26 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	085b      	lsrs	r3, r3, #1
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d109      	bne.n	8002e26 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1c:	085b      	lsrs	r3, r3, #1
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d001      	beq.n	8002e2a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3720      	adds	r7, #32
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40021000 	.word	0x40021000

08002e38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002e42:	2300      	movs	r3, #0
 8002e44:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e11e      	b.n	800308e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e50:	4b91      	ldr	r3, [pc, #580]	; (8003098 <HAL_RCC_ClockConfig+0x260>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 030f 	and.w	r3, r3, #15
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d910      	bls.n	8002e80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5e:	4b8e      	ldr	r3, [pc, #568]	; (8003098 <HAL_RCC_ClockConfig+0x260>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f023 020f 	bic.w	r2, r3, #15
 8002e66:	498c      	ldr	r1, [pc, #560]	; (8003098 <HAL_RCC_ClockConfig+0x260>)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6e:	4b8a      	ldr	r3, [pc, #552]	; (8003098 <HAL_RCC_ClockConfig+0x260>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e106      	b.n	800308e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d073      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	d129      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e94:	4b81      	ldr	r3, [pc, #516]	; (800309c <HAL_RCC_ClockConfig+0x264>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0f4      	b.n	800308e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002ea4:	f000 f99e 	bl	80031e4 <RCC_GetSysClockFreqFromPLLSource>
 8002ea8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	4a7c      	ldr	r2, [pc, #496]	; (80030a0 <HAL_RCC_ClockConfig+0x268>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d93f      	bls.n	8002f32 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002eb2:	4b7a      	ldr	r3, [pc, #488]	; (800309c <HAL_RCC_ClockConfig+0x264>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d009      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d033      	beq.n	8002f32 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d12f      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ed2:	4b72      	ldr	r3, [pc, #456]	; (800309c <HAL_RCC_ClockConfig+0x264>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eda:	4a70      	ldr	r2, [pc, #448]	; (800309c <HAL_RCC_ClockConfig+0x264>)
 8002edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ee0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ee2:	2380      	movs	r3, #128	; 0x80
 8002ee4:	617b      	str	r3, [r7, #20]
 8002ee6:	e024      	b.n	8002f32 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d107      	bne.n	8002f00 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ef0:	4b6a      	ldr	r3, [pc, #424]	; (800309c <HAL_RCC_ClockConfig+0x264>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d109      	bne.n	8002f10 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e0c6      	b.n	800308e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f00:	4b66      	ldr	r3, [pc, #408]	; (800309c <HAL_RCC_ClockConfig+0x264>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e0be      	b.n	800308e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002f10:	f000 f8ce 	bl	80030b0 <HAL_RCC_GetSysClockFreq>
 8002f14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	4a61      	ldr	r2, [pc, #388]	; (80030a0 <HAL_RCC_ClockConfig+0x268>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d909      	bls.n	8002f32 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f1e:	4b5f      	ldr	r3, [pc, #380]	; (800309c <HAL_RCC_ClockConfig+0x264>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f26:	4a5d      	ldr	r2, [pc, #372]	; (800309c <HAL_RCC_ClockConfig+0x264>)
 8002f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f2c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002f2e:	2380      	movs	r3, #128	; 0x80
 8002f30:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f32:	4b5a      	ldr	r3, [pc, #360]	; (800309c <HAL_RCC_ClockConfig+0x264>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f023 0203 	bic.w	r2, r3, #3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	4957      	ldr	r1, [pc, #348]	; (800309c <HAL_RCC_ClockConfig+0x264>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f44:	f7fe fffc 	bl	8001f40 <HAL_GetTick>
 8002f48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4a:	e00a      	b.n	8002f62 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f4c:	f7fe fff8 	bl	8001f40 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e095      	b.n	800308e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f62:	4b4e      	ldr	r3, [pc, #312]	; (800309c <HAL_RCC_ClockConfig+0x264>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 020c 	and.w	r2, r3, #12
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d1eb      	bne.n	8002f4c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d023      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d005      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f8c:	4b43      	ldr	r3, [pc, #268]	; (800309c <HAL_RCC_ClockConfig+0x264>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	4a42      	ldr	r2, [pc, #264]	; (800309c <HAL_RCC_ClockConfig+0x264>)
 8002f92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f96:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0308 	and.w	r3, r3, #8
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d007      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002fa4:	4b3d      	ldr	r3, [pc, #244]	; (800309c <HAL_RCC_ClockConfig+0x264>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002fac:	4a3b      	ldr	r2, [pc, #236]	; (800309c <HAL_RCC_ClockConfig+0x264>)
 8002fae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fb2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb4:	4b39      	ldr	r3, [pc, #228]	; (800309c <HAL_RCC_ClockConfig+0x264>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	4936      	ldr	r1, [pc, #216]	; (800309c <HAL_RCC_ClockConfig+0x264>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	608b      	str	r3, [r1, #8]
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	2b80      	cmp	r3, #128	; 0x80
 8002fcc:	d105      	bne.n	8002fda <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002fce:	4b33      	ldr	r3, [pc, #204]	; (800309c <HAL_RCC_ClockConfig+0x264>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	4a32      	ldr	r2, [pc, #200]	; (800309c <HAL_RCC_ClockConfig+0x264>)
 8002fd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fd8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fda:	4b2f      	ldr	r3, [pc, #188]	; (8003098 <HAL_RCC_ClockConfig+0x260>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d21d      	bcs.n	8003024 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe8:	4b2b      	ldr	r3, [pc, #172]	; (8003098 <HAL_RCC_ClockConfig+0x260>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f023 020f 	bic.w	r2, r3, #15
 8002ff0:	4929      	ldr	r1, [pc, #164]	; (8003098 <HAL_RCC_ClockConfig+0x260>)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ff8:	f7fe ffa2 	bl	8001f40 <HAL_GetTick>
 8002ffc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffe:	e00a      	b.n	8003016 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003000:	f7fe ff9e 	bl	8001f40 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	f241 3288 	movw	r2, #5000	; 0x1388
 800300e:	4293      	cmp	r3, r2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e03b      	b.n	800308e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003016:	4b20      	ldr	r3, [pc, #128]	; (8003098 <HAL_RCC_ClockConfig+0x260>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	429a      	cmp	r2, r3
 8003022:	d1ed      	bne.n	8003000 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	2b00      	cmp	r3, #0
 800302e:	d008      	beq.n	8003042 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003030:	4b1a      	ldr	r3, [pc, #104]	; (800309c <HAL_RCC_ClockConfig+0x264>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	4917      	ldr	r1, [pc, #92]	; (800309c <HAL_RCC_ClockConfig+0x264>)
 800303e:	4313      	orrs	r3, r2
 8003040:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d009      	beq.n	8003062 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800304e:	4b13      	ldr	r3, [pc, #76]	; (800309c <HAL_RCC_ClockConfig+0x264>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	490f      	ldr	r1, [pc, #60]	; (800309c <HAL_RCC_ClockConfig+0x264>)
 800305e:	4313      	orrs	r3, r2
 8003060:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003062:	f000 f825 	bl	80030b0 <HAL_RCC_GetSysClockFreq>
 8003066:	4602      	mov	r2, r0
 8003068:	4b0c      	ldr	r3, [pc, #48]	; (800309c <HAL_RCC_ClockConfig+0x264>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	091b      	lsrs	r3, r3, #4
 800306e:	f003 030f 	and.w	r3, r3, #15
 8003072:	490c      	ldr	r1, [pc, #48]	; (80030a4 <HAL_RCC_ClockConfig+0x26c>)
 8003074:	5ccb      	ldrb	r3, [r1, r3]
 8003076:	f003 031f 	and.w	r3, r3, #31
 800307a:	fa22 f303 	lsr.w	r3, r2, r3
 800307e:	4a0a      	ldr	r2, [pc, #40]	; (80030a8 <HAL_RCC_ClockConfig+0x270>)
 8003080:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003082:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <HAL_RCC_ClockConfig+0x274>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f7fe ff0e 	bl	8001ea8 <HAL_InitTick>
 800308c:	4603      	mov	r3, r0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40022000 	.word	0x40022000
 800309c:	40021000 	.word	0x40021000
 80030a0:	04c4b400 	.word	0x04c4b400
 80030a4:	0800a500 	.word	0x0800a500
 80030a8:	2000000c 	.word	0x2000000c
 80030ac:	20000010 	.word	0x20000010

080030b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b087      	sub	sp, #28
 80030b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80030b6:	4b2c      	ldr	r3, [pc, #176]	; (8003168 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 030c 	and.w	r3, r3, #12
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d102      	bne.n	80030c8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030c2:	4b2a      	ldr	r3, [pc, #168]	; (800316c <HAL_RCC_GetSysClockFreq+0xbc>)
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	e047      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80030c8:	4b27      	ldr	r3, [pc, #156]	; (8003168 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 030c 	and.w	r3, r3, #12
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d102      	bne.n	80030da <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030d4:	4b26      	ldr	r3, [pc, #152]	; (8003170 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	e03e      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80030da:	4b23      	ldr	r3, [pc, #140]	; (8003168 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 030c 	and.w	r3, r3, #12
 80030e2:	2b0c      	cmp	r3, #12
 80030e4:	d136      	bne.n	8003154 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030e6:	4b20      	ldr	r3, [pc, #128]	; (8003168 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030f0:	4b1d      	ldr	r3, [pc, #116]	; (8003168 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	091b      	lsrs	r3, r3, #4
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	3301      	adds	r3, #1
 80030fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2b03      	cmp	r3, #3
 8003102:	d10c      	bne.n	800311e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003104:	4a1a      	ldr	r2, [pc, #104]	; (8003170 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	fbb2 f3f3 	udiv	r3, r2, r3
 800310c:	4a16      	ldr	r2, [pc, #88]	; (8003168 <HAL_RCC_GetSysClockFreq+0xb8>)
 800310e:	68d2      	ldr	r2, [r2, #12]
 8003110:	0a12      	lsrs	r2, r2, #8
 8003112:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003116:	fb02 f303 	mul.w	r3, r2, r3
 800311a:	617b      	str	r3, [r7, #20]
      break;
 800311c:	e00c      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800311e:	4a13      	ldr	r2, [pc, #76]	; (800316c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	fbb2 f3f3 	udiv	r3, r2, r3
 8003126:	4a10      	ldr	r2, [pc, #64]	; (8003168 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003128:	68d2      	ldr	r2, [r2, #12]
 800312a:	0a12      	lsrs	r2, r2, #8
 800312c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003130:	fb02 f303 	mul.w	r3, r2, r3
 8003134:	617b      	str	r3, [r7, #20]
      break;
 8003136:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003138:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <HAL_RCC_GetSysClockFreq+0xb8>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	0e5b      	lsrs	r3, r3, #25
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	3301      	adds	r3, #1
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003150:	613b      	str	r3, [r7, #16]
 8003152:	e001      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003158:	693b      	ldr	r3, [r7, #16]
}
 800315a:	4618      	mov	r0, r3
 800315c:	371c      	adds	r7, #28
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40021000 	.word	0x40021000
 800316c:	00f42400 	.word	0x00f42400
 8003170:	016e3600 	.word	0x016e3600

08003174 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003178:	4b03      	ldr	r3, [pc, #12]	; (8003188 <HAL_RCC_GetHCLKFreq+0x14>)
 800317a:	681b      	ldr	r3, [r3, #0]
}
 800317c:	4618      	mov	r0, r3
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	2000000c 	.word	0x2000000c

0800318c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003190:	f7ff fff0 	bl	8003174 <HAL_RCC_GetHCLKFreq>
 8003194:	4602      	mov	r2, r0
 8003196:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	0a1b      	lsrs	r3, r3, #8
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	4904      	ldr	r1, [pc, #16]	; (80031b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031a2:	5ccb      	ldrb	r3, [r1, r3]
 80031a4:	f003 031f 	and.w	r3, r3, #31
 80031a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40021000 	.word	0x40021000
 80031b4:	0800a510 	.word	0x0800a510

080031b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031bc:	f7ff ffda 	bl	8003174 <HAL_RCC_GetHCLKFreq>
 80031c0:	4602      	mov	r2, r0
 80031c2:	4b06      	ldr	r3, [pc, #24]	; (80031dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	0adb      	lsrs	r3, r3, #11
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	4904      	ldr	r1, [pc, #16]	; (80031e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031ce:	5ccb      	ldrb	r3, [r1, r3]
 80031d0:	f003 031f 	and.w	r3, r3, #31
 80031d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d8:	4618      	mov	r0, r3
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40021000 	.word	0x40021000
 80031e0:	0800a510 	.word	0x0800a510

080031e4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b087      	sub	sp, #28
 80031e8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031ea:	4b1e      	ldr	r3, [pc, #120]	; (8003264 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031f4:	4b1b      	ldr	r3, [pc, #108]	; (8003264 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	091b      	lsrs	r3, r3, #4
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	3301      	adds	r3, #1
 8003200:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	2b03      	cmp	r3, #3
 8003206:	d10c      	bne.n	8003222 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003208:	4a17      	ldr	r2, [pc, #92]	; (8003268 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	4a14      	ldr	r2, [pc, #80]	; (8003264 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003212:	68d2      	ldr	r2, [r2, #12]
 8003214:	0a12      	lsrs	r2, r2, #8
 8003216:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800321a:	fb02 f303 	mul.w	r3, r2, r3
 800321e:	617b      	str	r3, [r7, #20]
    break;
 8003220:	e00c      	b.n	800323c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003222:	4a12      	ldr	r2, [pc, #72]	; (800326c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	fbb2 f3f3 	udiv	r3, r2, r3
 800322a:	4a0e      	ldr	r2, [pc, #56]	; (8003264 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800322c:	68d2      	ldr	r2, [r2, #12]
 800322e:	0a12      	lsrs	r2, r2, #8
 8003230:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003234:	fb02 f303 	mul.w	r3, r2, r3
 8003238:	617b      	str	r3, [r7, #20]
    break;
 800323a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800323c:	4b09      	ldr	r3, [pc, #36]	; (8003264 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	0e5b      	lsrs	r3, r3, #25
 8003242:	f003 0303 	and.w	r3, r3, #3
 8003246:	3301      	adds	r3, #1
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	fbb2 f3f3 	udiv	r3, r2, r3
 8003254:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003256:	687b      	ldr	r3, [r7, #4]
}
 8003258:	4618      	mov	r0, r3
 800325a:	371c      	adds	r7, #28
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	40021000 	.word	0x40021000
 8003268:	016e3600 	.word	0x016e3600
 800326c:	00f42400 	.word	0x00f42400

08003270 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003278:	2300      	movs	r3, #0
 800327a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800327c:	2300      	movs	r3, #0
 800327e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 8098 	beq.w	80033be <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800328e:	2300      	movs	r3, #0
 8003290:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003292:	4b43      	ldr	r3, [pc, #268]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10d      	bne.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800329e:	4b40      	ldr	r3, [pc, #256]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a2:	4a3f      	ldr	r2, [pc, #252]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a8:	6593      	str	r3, [r2, #88]	; 0x58
 80032aa:	4b3d      	ldr	r3, [pc, #244]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b2:	60bb      	str	r3, [r7, #8]
 80032b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032b6:	2301      	movs	r3, #1
 80032b8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032ba:	4b3a      	ldr	r3, [pc, #232]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a39      	ldr	r2, [pc, #228]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032c6:	f7fe fe3b 	bl	8001f40 <HAL_GetTick>
 80032ca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032cc:	e009      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ce:	f7fe fe37 	bl	8001f40 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d902      	bls.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	74fb      	strb	r3, [r7, #19]
        break;
 80032e0:	e005      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032e2:	4b30      	ldr	r3, [pc, #192]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0ef      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80032ee:	7cfb      	ldrb	r3, [r7, #19]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d159      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032f4:	4b2a      	ldr	r3, [pc, #168]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032fe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d01e      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	429a      	cmp	r2, r3
 800330e:	d019      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003310:	4b23      	ldr	r3, [pc, #140]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800331a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800331c:	4b20      	ldr	r3, [pc, #128]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800331e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003322:	4a1f      	ldr	r2, [pc, #124]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800332c:	4b1c      	ldr	r3, [pc, #112]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800332e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003332:	4a1b      	ldr	r2, [pc, #108]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003338:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800333c:	4a18      	ldr	r2, [pc, #96]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d016      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334e:	f7fe fdf7 	bl	8001f40 <HAL_GetTick>
 8003352:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003354:	e00b      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003356:	f7fe fdf3 	bl	8001f40 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	f241 3288 	movw	r2, #5000	; 0x1388
 8003364:	4293      	cmp	r3, r2
 8003366:	d902      	bls.n	800336e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	74fb      	strb	r3, [r7, #19]
            break;
 800336c:	e006      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800336e:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0ec      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800337c:	7cfb      	ldrb	r3, [r7, #19]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10b      	bne.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003382:	4b07      	ldr	r3, [pc, #28]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003388:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	4903      	ldr	r1, [pc, #12]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003398:	e008      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800339a:	7cfb      	ldrb	r3, [r7, #19]
 800339c:	74bb      	strb	r3, [r7, #18]
 800339e:	e005      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80033a0:	40021000 	.word	0x40021000
 80033a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a8:	7cfb      	ldrb	r3, [r7, #19]
 80033aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033ac:	7c7b      	ldrb	r3, [r7, #17]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d105      	bne.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033b2:	4ba6      	ldr	r3, [pc, #664]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b6:	4aa5      	ldr	r2, [pc, #660]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033ca:	4ba0      	ldr	r3, [pc, #640]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d0:	f023 0203 	bic.w	r2, r3, #3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	499c      	ldr	r1, [pc, #624]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00a      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033ec:	4b97      	ldr	r3, [pc, #604]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f2:	f023 020c 	bic.w	r2, r3, #12
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	4994      	ldr	r1, [pc, #592]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00a      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800340e:	4b8f      	ldr	r3, [pc, #572]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003414:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	498b      	ldr	r1, [pc, #556]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800341e:	4313      	orrs	r3, r2
 8003420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0308 	and.w	r3, r3, #8
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00a      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003430:	4b86      	ldr	r3, [pc, #536]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003436:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	4983      	ldr	r1, [pc, #524]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003440:	4313      	orrs	r3, r2
 8003442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0320 	and.w	r3, r3, #32
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00a      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003452:	4b7e      	ldr	r3, [pc, #504]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003458:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	497a      	ldr	r1, [pc, #488]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003462:	4313      	orrs	r3, r2
 8003464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00a      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003474:	4b75      	ldr	r3, [pc, #468]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	4972      	ldr	r1, [pc, #456]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003484:	4313      	orrs	r3, r2
 8003486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00a      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003496:	4b6d      	ldr	r3, [pc, #436]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	4969      	ldr	r1, [pc, #420]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00a      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034b8:	4b64      	ldr	r3, [pc, #400]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	4961      	ldr	r1, [pc, #388]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034da:	4b5c      	ldr	r3, [pc, #368]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	4958      	ldr	r1, [pc, #352]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d015      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034fc:	4b53      	ldr	r3, [pc, #332]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003502:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350a:	4950      	ldr	r1, [pc, #320]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800350c:	4313      	orrs	r3, r2
 800350e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800351a:	d105      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800351c:	4b4b      	ldr	r3, [pc, #300]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	4a4a      	ldr	r2, [pc, #296]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003522:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003526:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003530:	2b00      	cmp	r3, #0
 8003532:	d015      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003534:	4b45      	ldr	r3, [pc, #276]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003542:	4942      	ldr	r1, [pc, #264]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003544:	4313      	orrs	r3, r2
 8003546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003552:	d105      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003554:	4b3d      	ldr	r3, [pc, #244]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	4a3c      	ldr	r2, [pc, #240]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800355a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800355e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d015      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800356c:	4b37      	ldr	r3, [pc, #220]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800356e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003572:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	4934      	ldr	r1, [pc, #208]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800357c:	4313      	orrs	r3, r2
 800357e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800358a:	d105      	bne.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800358c:	4b2f      	ldr	r3, [pc, #188]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	4a2e      	ldr	r2, [pc, #184]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003592:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003596:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d015      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035a4:	4b29      	ldr	r3, [pc, #164]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b2:	4926      	ldr	r1, [pc, #152]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035c2:	d105      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035c4:	4b21      	ldr	r3, [pc, #132]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	4a20      	ldr	r2, [pc, #128]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035ce:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d015      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035dc:	4b1b      	ldr	r3, [pc, #108]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ea:	4918      	ldr	r1, [pc, #96]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035fa:	d105      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035fc:	4b13      	ldr	r3, [pc, #76]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	4a12      	ldr	r2, [pc, #72]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003602:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003606:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d015      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003614:	4b0d      	ldr	r3, [pc, #52]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003622:	490a      	ldr	r1, [pc, #40]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003624:	4313      	orrs	r3, r2
 8003626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003632:	d105      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003634:	4b05      	ldr	r3, [pc, #20]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	4a04      	ldr	r2, [pc, #16]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800363a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800363e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003640:	7cbb      	ldrb	r3, [r7, #18]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40021000 	.word	0x40021000

08003650 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e049      	b.n	80036f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d106      	bne.n	800367c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7fe faac 	bl	8001bd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3304      	adds	r3, #4
 800368c:	4619      	mov	r1, r3
 800368e:	4610      	mov	r0, r2
 8003690:	f000 fadc 	bl	8003c4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d109      	bne.n	8003724 <HAL_TIM_PWM_Start+0x24>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b01      	cmp	r3, #1
 800371a:	bf14      	ite	ne
 800371c:	2301      	movne	r3, #1
 800371e:	2300      	moveq	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	e03c      	b.n	800379e <HAL_TIM_PWM_Start+0x9e>
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	2b04      	cmp	r3, #4
 8003728:	d109      	bne.n	800373e <HAL_TIM_PWM_Start+0x3e>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b01      	cmp	r3, #1
 8003734:	bf14      	ite	ne
 8003736:	2301      	movne	r3, #1
 8003738:	2300      	moveq	r3, #0
 800373a:	b2db      	uxtb	r3, r3
 800373c:	e02f      	b.n	800379e <HAL_TIM_PWM_Start+0x9e>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2b08      	cmp	r3, #8
 8003742:	d109      	bne.n	8003758 <HAL_TIM_PWM_Start+0x58>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b01      	cmp	r3, #1
 800374e:	bf14      	ite	ne
 8003750:	2301      	movne	r3, #1
 8003752:	2300      	moveq	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	e022      	b.n	800379e <HAL_TIM_PWM_Start+0x9e>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	2b0c      	cmp	r3, #12
 800375c:	d109      	bne.n	8003772 <HAL_TIM_PWM_Start+0x72>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b01      	cmp	r3, #1
 8003768:	bf14      	ite	ne
 800376a:	2301      	movne	r3, #1
 800376c:	2300      	moveq	r3, #0
 800376e:	b2db      	uxtb	r3, r3
 8003770:	e015      	b.n	800379e <HAL_TIM_PWM_Start+0x9e>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b10      	cmp	r3, #16
 8003776:	d109      	bne.n	800378c <HAL_TIM_PWM_Start+0x8c>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b01      	cmp	r3, #1
 8003782:	bf14      	ite	ne
 8003784:	2301      	movne	r3, #1
 8003786:	2300      	moveq	r3, #0
 8003788:	b2db      	uxtb	r3, r3
 800378a:	e008      	b.n	800379e <HAL_TIM_PWM_Start+0x9e>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b01      	cmp	r3, #1
 8003796:	bf14      	ite	ne
 8003798:	2301      	movne	r3, #1
 800379a:	2300      	moveq	r3, #0
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e097      	b.n	80038d6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d104      	bne.n	80037b6 <HAL_TIM_PWM_Start+0xb6>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037b4:	e023      	b.n	80037fe <HAL_TIM_PWM_Start+0xfe>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d104      	bne.n	80037c6 <HAL_TIM_PWM_Start+0xc6>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037c4:	e01b      	b.n	80037fe <HAL_TIM_PWM_Start+0xfe>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d104      	bne.n	80037d6 <HAL_TIM_PWM_Start+0xd6>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037d4:	e013      	b.n	80037fe <HAL_TIM_PWM_Start+0xfe>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b0c      	cmp	r3, #12
 80037da:	d104      	bne.n	80037e6 <HAL_TIM_PWM_Start+0xe6>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037e4:	e00b      	b.n	80037fe <HAL_TIM_PWM_Start+0xfe>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b10      	cmp	r3, #16
 80037ea:	d104      	bne.n	80037f6 <HAL_TIM_PWM_Start+0xf6>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037f4:	e003      	b.n	80037fe <HAL_TIM_PWM_Start+0xfe>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2202      	movs	r2, #2
 80037fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2201      	movs	r2, #1
 8003804:	6839      	ldr	r1, [r7, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f000 fda6 	bl	8004358 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a33      	ldr	r2, [pc, #204]	; (80038e0 <HAL_TIM_PWM_Start+0x1e0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d013      	beq.n	800383e <HAL_TIM_PWM_Start+0x13e>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a32      	ldr	r2, [pc, #200]	; (80038e4 <HAL_TIM_PWM_Start+0x1e4>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d00e      	beq.n	800383e <HAL_TIM_PWM_Start+0x13e>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a30      	ldr	r2, [pc, #192]	; (80038e8 <HAL_TIM_PWM_Start+0x1e8>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d009      	beq.n	800383e <HAL_TIM_PWM_Start+0x13e>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a2f      	ldr	r2, [pc, #188]	; (80038ec <HAL_TIM_PWM_Start+0x1ec>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d004      	beq.n	800383e <HAL_TIM_PWM_Start+0x13e>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a2d      	ldr	r2, [pc, #180]	; (80038f0 <HAL_TIM_PWM_Start+0x1f0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d101      	bne.n	8003842 <HAL_TIM_PWM_Start+0x142>
 800383e:	2301      	movs	r3, #1
 8003840:	e000      	b.n	8003844 <HAL_TIM_PWM_Start+0x144>
 8003842:	2300      	movs	r3, #0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d007      	beq.n	8003858 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003856:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a20      	ldr	r2, [pc, #128]	; (80038e0 <HAL_TIM_PWM_Start+0x1e0>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d018      	beq.n	8003894 <HAL_TIM_PWM_Start+0x194>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386a:	d013      	beq.n	8003894 <HAL_TIM_PWM_Start+0x194>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a20      	ldr	r2, [pc, #128]	; (80038f4 <HAL_TIM_PWM_Start+0x1f4>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d00e      	beq.n	8003894 <HAL_TIM_PWM_Start+0x194>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a1f      	ldr	r2, [pc, #124]	; (80038f8 <HAL_TIM_PWM_Start+0x1f8>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d009      	beq.n	8003894 <HAL_TIM_PWM_Start+0x194>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a17      	ldr	r2, [pc, #92]	; (80038e4 <HAL_TIM_PWM_Start+0x1e4>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d004      	beq.n	8003894 <HAL_TIM_PWM_Start+0x194>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a16      	ldr	r2, [pc, #88]	; (80038e8 <HAL_TIM_PWM_Start+0x1e8>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d115      	bne.n	80038c0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	4b18      	ldr	r3, [pc, #96]	; (80038fc <HAL_TIM_PWM_Start+0x1fc>)
 800389c:	4013      	ands	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2b06      	cmp	r3, #6
 80038a4:	d015      	beq.n	80038d2 <HAL_TIM_PWM_Start+0x1d2>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ac:	d011      	beq.n	80038d2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f042 0201 	orr.w	r2, r2, #1
 80038bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038be:	e008      	b.n	80038d2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0201 	orr.w	r2, r2, #1
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	e000      	b.n	80038d4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40012c00 	.word	0x40012c00
 80038e4:	40013400 	.word	0x40013400
 80038e8:	40014000 	.word	0x40014000
 80038ec:	40014400 	.word	0x40014400
 80038f0:	40014800 	.word	0x40014800
 80038f4:	40000400 	.word	0x40000400
 80038f8:	40000800 	.word	0x40000800
 80038fc:	00010007 	.word	0x00010007

08003900 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2200      	movs	r2, #0
 8003910:	6839      	ldr	r1, [r7, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f000 fd20 	bl	8004358 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a3e      	ldr	r2, [pc, #248]	; (8003a18 <HAL_TIM_PWM_Stop+0x118>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d013      	beq.n	800394a <HAL_TIM_PWM_Stop+0x4a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a3d      	ldr	r2, [pc, #244]	; (8003a1c <HAL_TIM_PWM_Stop+0x11c>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d00e      	beq.n	800394a <HAL_TIM_PWM_Stop+0x4a>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a3b      	ldr	r2, [pc, #236]	; (8003a20 <HAL_TIM_PWM_Stop+0x120>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d009      	beq.n	800394a <HAL_TIM_PWM_Stop+0x4a>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a3a      	ldr	r2, [pc, #232]	; (8003a24 <HAL_TIM_PWM_Stop+0x124>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d004      	beq.n	800394a <HAL_TIM_PWM_Stop+0x4a>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a38      	ldr	r2, [pc, #224]	; (8003a28 <HAL_TIM_PWM_Stop+0x128>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d101      	bne.n	800394e <HAL_TIM_PWM_Stop+0x4e>
 800394a:	2301      	movs	r3, #1
 800394c:	e000      	b.n	8003950 <HAL_TIM_PWM_Stop+0x50>
 800394e:	2300      	movs	r3, #0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d017      	beq.n	8003984 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6a1a      	ldr	r2, [r3, #32]
 800395a:	f241 1311 	movw	r3, #4369	; 0x1111
 800395e:	4013      	ands	r3, r2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10f      	bne.n	8003984 <HAL_TIM_PWM_Stop+0x84>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6a1a      	ldr	r2, [r3, #32]
 800396a:	f244 4344 	movw	r3, #17476	; 0x4444
 800396e:	4013      	ands	r3, r2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d107      	bne.n	8003984 <HAL_TIM_PWM_Stop+0x84>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003982:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6a1a      	ldr	r2, [r3, #32]
 800398a:	f241 1311 	movw	r3, #4369	; 0x1111
 800398e:	4013      	ands	r3, r2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10f      	bne.n	80039b4 <HAL_TIM_PWM_Stop+0xb4>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6a1a      	ldr	r2, [r3, #32]
 800399a:	f244 4344 	movw	r3, #17476	; 0x4444
 800399e:	4013      	ands	r3, r2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d107      	bne.n	80039b4 <HAL_TIM_PWM_Stop+0xb4>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0201 	bic.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d104      	bne.n	80039c4 <HAL_TIM_PWM_Stop+0xc4>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039c2:	e023      	b.n	8003a0c <HAL_TIM_PWM_Stop+0x10c>
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d104      	bne.n	80039d4 <HAL_TIM_PWM_Stop+0xd4>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039d2:	e01b      	b.n	8003a0c <HAL_TIM_PWM_Stop+0x10c>
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d104      	bne.n	80039e4 <HAL_TIM_PWM_Stop+0xe4>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039e2:	e013      	b.n	8003a0c <HAL_TIM_PWM_Stop+0x10c>
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	2b0c      	cmp	r3, #12
 80039e8:	d104      	bne.n	80039f4 <HAL_TIM_PWM_Stop+0xf4>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039f2:	e00b      	b.n	8003a0c <HAL_TIM_PWM_Stop+0x10c>
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2b10      	cmp	r3, #16
 80039f8:	d104      	bne.n	8003a04 <HAL_TIM_PWM_Stop+0x104>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a02:	e003      	b.n	8003a0c <HAL_TIM_PWM_Stop+0x10c>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40012c00 	.word	0x40012c00
 8003a1c:	40013400 	.word	0x40013400
 8003a20:	40014000 	.word	0x40014000
 8003a24:	40014400 	.word	0x40014400
 8003a28:	40014800 	.word	0x40014800

08003a2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d101      	bne.n	8003a46 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003a42:	2302      	movs	r3, #2
 8003a44:	e0fd      	b.n	8003c42 <HAL_TIM_PWM_ConfigChannel+0x216>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b14      	cmp	r3, #20
 8003a52:	f200 80f0 	bhi.w	8003c36 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003a56:	a201      	add	r2, pc, #4	; (adr r2, 8003a5c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5c:	08003ab1 	.word	0x08003ab1
 8003a60:	08003c37 	.word	0x08003c37
 8003a64:	08003c37 	.word	0x08003c37
 8003a68:	08003c37 	.word	0x08003c37
 8003a6c:	08003af1 	.word	0x08003af1
 8003a70:	08003c37 	.word	0x08003c37
 8003a74:	08003c37 	.word	0x08003c37
 8003a78:	08003c37 	.word	0x08003c37
 8003a7c:	08003b33 	.word	0x08003b33
 8003a80:	08003c37 	.word	0x08003c37
 8003a84:	08003c37 	.word	0x08003c37
 8003a88:	08003c37 	.word	0x08003c37
 8003a8c:	08003b73 	.word	0x08003b73
 8003a90:	08003c37 	.word	0x08003c37
 8003a94:	08003c37 	.word	0x08003c37
 8003a98:	08003c37 	.word	0x08003c37
 8003a9c:	08003bb5 	.word	0x08003bb5
 8003aa0:	08003c37 	.word	0x08003c37
 8003aa4:	08003c37 	.word	0x08003c37
 8003aa8:	08003c37 	.word	0x08003c37
 8003aac:	08003bf5 	.word	0x08003bf5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68b9      	ldr	r1, [r7, #8]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 f958 	bl	8003d6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699a      	ldr	r2, [r3, #24]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0208 	orr.w	r2, r2, #8
 8003aca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699a      	ldr	r2, [r3, #24]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0204 	bic.w	r2, r2, #4
 8003ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6999      	ldr	r1, [r3, #24]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	691a      	ldr	r2, [r3, #16]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	619a      	str	r2, [r3, #24]
      break;
 8003aee:	e0a3      	b.n	8003c38 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68b9      	ldr	r1, [r7, #8]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 f9c8 	bl	8003e8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	699a      	ldr	r2, [r3, #24]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699a      	ldr	r2, [r3, #24]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6999      	ldr	r1, [r3, #24]
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	021a      	lsls	r2, r3, #8
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	619a      	str	r2, [r3, #24]
      break;
 8003b30:	e082      	b.n	8003c38 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68b9      	ldr	r1, [r7, #8]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 fa31 	bl	8003fa0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	69da      	ldr	r2, [r3, #28]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f042 0208 	orr.w	r2, r2, #8
 8003b4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69da      	ldr	r2, [r3, #28]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0204 	bic.w	r2, r2, #4
 8003b5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	69d9      	ldr	r1, [r3, #28]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	691a      	ldr	r2, [r3, #16]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	61da      	str	r2, [r3, #28]
      break;
 8003b70:	e062      	b.n	8003c38 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68b9      	ldr	r1, [r7, #8]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 fa99 	bl	80040b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	69da      	ldr	r2, [r3, #28]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	69da      	ldr	r2, [r3, #28]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	69d9      	ldr	r1, [r3, #28]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	021a      	lsls	r2, r3, #8
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	61da      	str	r2, [r3, #28]
      break;
 8003bb2:	e041      	b.n	8003c38 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68b9      	ldr	r1, [r7, #8]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 fb02 	bl	80041c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0208 	orr.w	r2, r2, #8
 8003bce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0204 	bic.w	r2, r2, #4
 8003bde:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	691a      	ldr	r2, [r3, #16]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003bf2:	e021      	b.n	8003c38 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68b9      	ldr	r1, [r7, #8]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 fb46 	bl	800428c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c0e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c1e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	021a      	lsls	r2, r3, #8
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	430a      	orrs	r2, r1
 8003c32:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003c34:	e000      	b.n	8003c38 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8003c36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop

08003c4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a3c      	ldr	r2, [pc, #240]	; (8003d50 <TIM_Base_SetConfig+0x104>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d00f      	beq.n	8003c84 <TIM_Base_SetConfig+0x38>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c6a:	d00b      	beq.n	8003c84 <TIM_Base_SetConfig+0x38>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a39      	ldr	r2, [pc, #228]	; (8003d54 <TIM_Base_SetConfig+0x108>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d007      	beq.n	8003c84 <TIM_Base_SetConfig+0x38>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a38      	ldr	r2, [pc, #224]	; (8003d58 <TIM_Base_SetConfig+0x10c>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d003      	beq.n	8003c84 <TIM_Base_SetConfig+0x38>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a37      	ldr	r2, [pc, #220]	; (8003d5c <TIM_Base_SetConfig+0x110>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d108      	bne.n	8003c96 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a2d      	ldr	r2, [pc, #180]	; (8003d50 <TIM_Base_SetConfig+0x104>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d01b      	beq.n	8003cd6 <TIM_Base_SetConfig+0x8a>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca4:	d017      	beq.n	8003cd6 <TIM_Base_SetConfig+0x8a>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a2a      	ldr	r2, [pc, #168]	; (8003d54 <TIM_Base_SetConfig+0x108>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d013      	beq.n	8003cd6 <TIM_Base_SetConfig+0x8a>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a29      	ldr	r2, [pc, #164]	; (8003d58 <TIM_Base_SetConfig+0x10c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d00f      	beq.n	8003cd6 <TIM_Base_SetConfig+0x8a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a28      	ldr	r2, [pc, #160]	; (8003d5c <TIM_Base_SetConfig+0x110>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d00b      	beq.n	8003cd6 <TIM_Base_SetConfig+0x8a>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a27      	ldr	r2, [pc, #156]	; (8003d60 <TIM_Base_SetConfig+0x114>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d007      	beq.n	8003cd6 <TIM_Base_SetConfig+0x8a>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a26      	ldr	r2, [pc, #152]	; (8003d64 <TIM_Base_SetConfig+0x118>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d003      	beq.n	8003cd6 <TIM_Base_SetConfig+0x8a>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a25      	ldr	r2, [pc, #148]	; (8003d68 <TIM_Base_SetConfig+0x11c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d108      	bne.n	8003ce8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a10      	ldr	r2, [pc, #64]	; (8003d50 <TIM_Base_SetConfig+0x104>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d00f      	beq.n	8003d34 <TIM_Base_SetConfig+0xe8>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a11      	ldr	r2, [pc, #68]	; (8003d5c <TIM_Base_SetConfig+0x110>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d00b      	beq.n	8003d34 <TIM_Base_SetConfig+0xe8>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a10      	ldr	r2, [pc, #64]	; (8003d60 <TIM_Base_SetConfig+0x114>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d007      	beq.n	8003d34 <TIM_Base_SetConfig+0xe8>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a0f      	ldr	r2, [pc, #60]	; (8003d64 <TIM_Base_SetConfig+0x118>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d003      	beq.n	8003d34 <TIM_Base_SetConfig+0xe8>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a0e      	ldr	r2, [pc, #56]	; (8003d68 <TIM_Base_SetConfig+0x11c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d103      	bne.n	8003d3c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	691a      	ldr	r2, [r3, #16]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	615a      	str	r2, [r3, #20]
}
 8003d42:	bf00      	nop
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40012c00 	.word	0x40012c00
 8003d54:	40000400 	.word	0x40000400
 8003d58:	40000800 	.word	0x40000800
 8003d5c:	40013400 	.word	0x40013400
 8003d60:	40014000 	.word	0x40014000
 8003d64:	40014400 	.word	0x40014400
 8003d68:	40014800 	.word	0x40014800

08003d6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	f023 0201 	bic.w	r2, r3, #1
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 0303 	bic.w	r3, r3, #3
 8003da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f023 0302 	bic.w	r3, r3, #2
 8003db8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a2c      	ldr	r2, [pc, #176]	; (8003e78 <TIM_OC1_SetConfig+0x10c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d00f      	beq.n	8003dec <TIM_OC1_SetConfig+0x80>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a2b      	ldr	r2, [pc, #172]	; (8003e7c <TIM_OC1_SetConfig+0x110>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d00b      	beq.n	8003dec <TIM_OC1_SetConfig+0x80>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a2a      	ldr	r2, [pc, #168]	; (8003e80 <TIM_OC1_SetConfig+0x114>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d007      	beq.n	8003dec <TIM_OC1_SetConfig+0x80>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a29      	ldr	r2, [pc, #164]	; (8003e84 <TIM_OC1_SetConfig+0x118>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d003      	beq.n	8003dec <TIM_OC1_SetConfig+0x80>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a28      	ldr	r2, [pc, #160]	; (8003e88 <TIM_OC1_SetConfig+0x11c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d10c      	bne.n	8003e06 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f023 0308 	bic.w	r3, r3, #8
 8003df2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f023 0304 	bic.w	r3, r3, #4
 8003e04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a1b      	ldr	r2, [pc, #108]	; (8003e78 <TIM_OC1_SetConfig+0x10c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d00f      	beq.n	8003e2e <TIM_OC1_SetConfig+0xc2>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a1a      	ldr	r2, [pc, #104]	; (8003e7c <TIM_OC1_SetConfig+0x110>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d00b      	beq.n	8003e2e <TIM_OC1_SetConfig+0xc2>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a19      	ldr	r2, [pc, #100]	; (8003e80 <TIM_OC1_SetConfig+0x114>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d007      	beq.n	8003e2e <TIM_OC1_SetConfig+0xc2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a18      	ldr	r2, [pc, #96]	; (8003e84 <TIM_OC1_SetConfig+0x118>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d003      	beq.n	8003e2e <TIM_OC1_SetConfig+0xc2>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a17      	ldr	r2, [pc, #92]	; (8003e88 <TIM_OC1_SetConfig+0x11c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d111      	bne.n	8003e52 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	621a      	str	r2, [r3, #32]
}
 8003e6c:	bf00      	nop
 8003e6e:	371c      	adds	r7, #28
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	40012c00 	.word	0x40012c00
 8003e7c:	40013400 	.word	0x40013400
 8003e80:	40014000 	.word	0x40014000
 8003e84:	40014400 	.word	0x40014400
 8003e88:	40014800 	.word	0x40014800

08003e8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b087      	sub	sp, #28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	f023 0210 	bic.w	r2, r3, #16
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	021b      	lsls	r3, r3, #8
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f023 0320 	bic.w	r3, r3, #32
 8003eda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a28      	ldr	r2, [pc, #160]	; (8003f8c <TIM_OC2_SetConfig+0x100>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d003      	beq.n	8003ef8 <TIM_OC2_SetConfig+0x6c>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a27      	ldr	r2, [pc, #156]	; (8003f90 <TIM_OC2_SetConfig+0x104>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d10d      	bne.n	8003f14 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003efe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	011b      	lsls	r3, r3, #4
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a1d      	ldr	r2, [pc, #116]	; (8003f8c <TIM_OC2_SetConfig+0x100>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00f      	beq.n	8003f3c <TIM_OC2_SetConfig+0xb0>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a1c      	ldr	r2, [pc, #112]	; (8003f90 <TIM_OC2_SetConfig+0x104>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d00b      	beq.n	8003f3c <TIM_OC2_SetConfig+0xb0>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a1b      	ldr	r2, [pc, #108]	; (8003f94 <TIM_OC2_SetConfig+0x108>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d007      	beq.n	8003f3c <TIM_OC2_SetConfig+0xb0>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a1a      	ldr	r2, [pc, #104]	; (8003f98 <TIM_OC2_SetConfig+0x10c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d003      	beq.n	8003f3c <TIM_OC2_SetConfig+0xb0>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a19      	ldr	r2, [pc, #100]	; (8003f9c <TIM_OC2_SetConfig+0x110>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d113      	bne.n	8003f64 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	621a      	str	r2, [r3, #32]
}
 8003f7e:	bf00      	nop
 8003f80:	371c      	adds	r7, #28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	40012c00 	.word	0x40012c00
 8003f90:	40013400 	.word	0x40013400
 8003f94:	40014000 	.word	0x40014000
 8003f98:	40014400 	.word	0x40014400
 8003f9c:	40014800 	.word	0x40014800

08003fa0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b087      	sub	sp, #28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f023 0303 	bic.w	r3, r3, #3
 8003fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	021b      	lsls	r3, r3, #8
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a27      	ldr	r2, [pc, #156]	; (800409c <TIM_OC3_SetConfig+0xfc>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d003      	beq.n	800400a <TIM_OC3_SetConfig+0x6a>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a26      	ldr	r2, [pc, #152]	; (80040a0 <TIM_OC3_SetConfig+0x100>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d10d      	bne.n	8004026 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004010:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	021b      	lsls	r3, r3, #8
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	4313      	orrs	r3, r2
 800401c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004024:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a1c      	ldr	r2, [pc, #112]	; (800409c <TIM_OC3_SetConfig+0xfc>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d00f      	beq.n	800404e <TIM_OC3_SetConfig+0xae>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a1b      	ldr	r2, [pc, #108]	; (80040a0 <TIM_OC3_SetConfig+0x100>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d00b      	beq.n	800404e <TIM_OC3_SetConfig+0xae>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a1a      	ldr	r2, [pc, #104]	; (80040a4 <TIM_OC3_SetConfig+0x104>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d007      	beq.n	800404e <TIM_OC3_SetConfig+0xae>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a19      	ldr	r2, [pc, #100]	; (80040a8 <TIM_OC3_SetConfig+0x108>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d003      	beq.n	800404e <TIM_OC3_SetConfig+0xae>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a18      	ldr	r2, [pc, #96]	; (80040ac <TIM_OC3_SetConfig+0x10c>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d113      	bne.n	8004076 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800405c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	4313      	orrs	r3, r2
 8004068:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	011b      	lsls	r3, r3, #4
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	4313      	orrs	r3, r2
 8004074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	621a      	str	r2, [r3, #32]
}
 8004090:	bf00      	nop
 8004092:	371c      	adds	r7, #28
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	40012c00 	.word	0x40012c00
 80040a0:	40013400 	.word	0x40013400
 80040a4:	40014000 	.word	0x40014000
 80040a8:	40014400 	.word	0x40014400
 80040ac:	40014800 	.word	0x40014800

080040b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b087      	sub	sp, #28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	021b      	lsls	r3, r3, #8
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	031b      	lsls	r3, r3, #12
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	4313      	orrs	r3, r2
 800410a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a28      	ldr	r2, [pc, #160]	; (80041b0 <TIM_OC4_SetConfig+0x100>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d003      	beq.n	800411c <TIM_OC4_SetConfig+0x6c>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a27      	ldr	r2, [pc, #156]	; (80041b4 <TIM_OC4_SetConfig+0x104>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d10d      	bne.n	8004138 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004122:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	031b      	lsls	r3, r3, #12
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	4313      	orrs	r3, r2
 800412e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004136:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a1d      	ldr	r2, [pc, #116]	; (80041b0 <TIM_OC4_SetConfig+0x100>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d00f      	beq.n	8004160 <TIM_OC4_SetConfig+0xb0>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a1c      	ldr	r2, [pc, #112]	; (80041b4 <TIM_OC4_SetConfig+0x104>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d00b      	beq.n	8004160 <TIM_OC4_SetConfig+0xb0>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a1b      	ldr	r2, [pc, #108]	; (80041b8 <TIM_OC4_SetConfig+0x108>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d007      	beq.n	8004160 <TIM_OC4_SetConfig+0xb0>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a1a      	ldr	r2, [pc, #104]	; (80041bc <TIM_OC4_SetConfig+0x10c>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d003      	beq.n	8004160 <TIM_OC4_SetConfig+0xb0>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a19      	ldr	r2, [pc, #100]	; (80041c0 <TIM_OC4_SetConfig+0x110>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d113      	bne.n	8004188 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004166:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800416e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	019b      	lsls	r3, r3, #6
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4313      	orrs	r3, r2
 800417a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	019b      	lsls	r3, r3, #6
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	4313      	orrs	r3, r2
 8004186:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	621a      	str	r2, [r3, #32]
}
 80041a2:	bf00      	nop
 80041a4:	371c      	adds	r7, #28
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40012c00 	.word	0x40012c00
 80041b4:	40013400 	.word	0x40013400
 80041b8:	40014000 	.word	0x40014000
 80041bc:	40014400 	.word	0x40014400
 80041c0:	40014800 	.word	0x40014800

080041c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	4313      	orrs	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004208:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	041b      	lsls	r3, r3, #16
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	4313      	orrs	r3, r2
 8004214:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a17      	ldr	r2, [pc, #92]	; (8004278 <TIM_OC5_SetConfig+0xb4>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d00f      	beq.n	800423e <TIM_OC5_SetConfig+0x7a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a16      	ldr	r2, [pc, #88]	; (800427c <TIM_OC5_SetConfig+0xb8>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d00b      	beq.n	800423e <TIM_OC5_SetConfig+0x7a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a15      	ldr	r2, [pc, #84]	; (8004280 <TIM_OC5_SetConfig+0xbc>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d007      	beq.n	800423e <TIM_OC5_SetConfig+0x7a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a14      	ldr	r2, [pc, #80]	; (8004284 <TIM_OC5_SetConfig+0xc0>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d003      	beq.n	800423e <TIM_OC5_SetConfig+0x7a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a13      	ldr	r2, [pc, #76]	; (8004288 <TIM_OC5_SetConfig+0xc4>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d109      	bne.n	8004252 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004244:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	021b      	lsls	r3, r3, #8
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	4313      	orrs	r3, r2
 8004250:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	621a      	str	r2, [r3, #32]
}
 800426c:	bf00      	nop
 800426e:	371c      	adds	r7, #28
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	40012c00 	.word	0x40012c00
 800427c:	40013400 	.word	0x40013400
 8004280:	40014000 	.word	0x40014000
 8004284:	40014400 	.word	0x40014400
 8004288:	40014800 	.word	0x40014800

0800428c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	021b      	lsls	r3, r3, #8
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	051b      	lsls	r3, r3, #20
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	4313      	orrs	r3, r2
 80042de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a18      	ldr	r2, [pc, #96]	; (8004344 <TIM_OC6_SetConfig+0xb8>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d00f      	beq.n	8004308 <TIM_OC6_SetConfig+0x7c>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a17      	ldr	r2, [pc, #92]	; (8004348 <TIM_OC6_SetConfig+0xbc>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d00b      	beq.n	8004308 <TIM_OC6_SetConfig+0x7c>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a16      	ldr	r2, [pc, #88]	; (800434c <TIM_OC6_SetConfig+0xc0>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d007      	beq.n	8004308 <TIM_OC6_SetConfig+0x7c>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a15      	ldr	r2, [pc, #84]	; (8004350 <TIM_OC6_SetConfig+0xc4>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d003      	beq.n	8004308 <TIM_OC6_SetConfig+0x7c>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a14      	ldr	r2, [pc, #80]	; (8004354 <TIM_OC6_SetConfig+0xc8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d109      	bne.n	800431c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800430e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	029b      	lsls	r3, r3, #10
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	4313      	orrs	r3, r2
 800431a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	621a      	str	r2, [r3, #32]
}
 8004336:	bf00      	nop
 8004338:	371c      	adds	r7, #28
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	40012c00 	.word	0x40012c00
 8004348:	40013400 	.word	0x40013400
 800434c:	40014000 	.word	0x40014000
 8004350:	40014400 	.word	0x40014400
 8004354:	40014800 	.word	0x40014800

08004358 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004358:	b480      	push	{r7}
 800435a:	b087      	sub	sp, #28
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f003 031f 	and.w	r3, r3, #31
 800436a:	2201      	movs	r2, #1
 800436c:	fa02 f303 	lsl.w	r3, r2, r3
 8004370:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6a1a      	ldr	r2, [r3, #32]
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	43db      	mvns	r3, r3
 800437a:	401a      	ands	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6a1a      	ldr	r2, [r3, #32]
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	f003 031f 	and.w	r3, r3, #31
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	fa01 f303 	lsl.w	r3, r1, r3
 8004390:	431a      	orrs	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	621a      	str	r2, [r3, #32]
}
 8004396:	bf00      	nop
 8004398:	371c      	adds	r7, #28
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
	...

080043a4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d109      	bne.n	80043c8 <HAL_TIMEx_PWMN_Start+0x24>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b01      	cmp	r3, #1
 80043be:	bf14      	ite	ne
 80043c0:	2301      	movne	r3, #1
 80043c2:	2300      	moveq	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	e022      	b.n	800440e <HAL_TIMEx_PWMN_Start+0x6a>
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d109      	bne.n	80043e2 <HAL_TIMEx_PWMN_Start+0x3e>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	bf14      	ite	ne
 80043da:	2301      	movne	r3, #1
 80043dc:	2300      	moveq	r3, #0
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	e015      	b.n	800440e <HAL_TIMEx_PWMN_Start+0x6a>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d109      	bne.n	80043fc <HAL_TIMEx_PWMN_Start+0x58>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	bf14      	ite	ne
 80043f4:	2301      	movne	r3, #1
 80043f6:	2300      	moveq	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	e008      	b.n	800440e <HAL_TIMEx_PWMN_Start+0x6a>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b01      	cmp	r3, #1
 8004406:	bf14      	ite	ne
 8004408:	2301      	movne	r3, #1
 800440a:	2300      	moveq	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e069      	b.n	80044ea <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d104      	bne.n	8004426 <HAL_TIMEx_PWMN_Start+0x82>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004424:	e013      	b.n	800444e <HAL_TIMEx_PWMN_Start+0xaa>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2b04      	cmp	r3, #4
 800442a:	d104      	bne.n	8004436 <HAL_TIMEx_PWMN_Start+0x92>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004434:	e00b      	b.n	800444e <HAL_TIMEx_PWMN_Start+0xaa>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b08      	cmp	r3, #8
 800443a:	d104      	bne.n	8004446 <HAL_TIMEx_PWMN_Start+0xa2>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004444:	e003      	b.n	800444e <HAL_TIMEx_PWMN_Start+0xaa>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2202      	movs	r2, #2
 800444a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2204      	movs	r2, #4
 8004454:	6839      	ldr	r1, [r7, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f000 f9d8 	bl	800480c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800446a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a20      	ldr	r2, [pc, #128]	; (80044f4 <HAL_TIMEx_PWMN_Start+0x150>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d018      	beq.n	80044a8 <HAL_TIMEx_PWMN_Start+0x104>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800447e:	d013      	beq.n	80044a8 <HAL_TIMEx_PWMN_Start+0x104>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a1c      	ldr	r2, [pc, #112]	; (80044f8 <HAL_TIMEx_PWMN_Start+0x154>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d00e      	beq.n	80044a8 <HAL_TIMEx_PWMN_Start+0x104>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a1b      	ldr	r2, [pc, #108]	; (80044fc <HAL_TIMEx_PWMN_Start+0x158>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d009      	beq.n	80044a8 <HAL_TIMEx_PWMN_Start+0x104>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a19      	ldr	r2, [pc, #100]	; (8004500 <HAL_TIMEx_PWMN_Start+0x15c>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d004      	beq.n	80044a8 <HAL_TIMEx_PWMN_Start+0x104>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a18      	ldr	r2, [pc, #96]	; (8004504 <HAL_TIMEx_PWMN_Start+0x160>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d115      	bne.n	80044d4 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689a      	ldr	r2, [r3, #8]
 80044ae:	4b16      	ldr	r3, [pc, #88]	; (8004508 <HAL_TIMEx_PWMN_Start+0x164>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b06      	cmp	r3, #6
 80044b8:	d015      	beq.n	80044e6 <HAL_TIMEx_PWMN_Start+0x142>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044c0:	d011      	beq.n	80044e6 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f042 0201 	orr.w	r2, r2, #1
 80044d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d2:	e008      	b.n	80044e6 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0201 	orr.w	r2, r2, #1
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	e000      	b.n	80044e8 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	40012c00 	.word	0x40012c00
 80044f8:	40000400 	.word	0x40000400
 80044fc:	40000800 	.word	0x40000800
 8004500:	40013400 	.word	0x40013400
 8004504:	40014000 	.word	0x40014000
 8004508:	00010007 	.word	0x00010007

0800450c <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2200      	movs	r2, #0
 800451c:	6839      	ldr	r1, [r7, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f000 f974 	bl	800480c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6a1a      	ldr	r2, [r3, #32]
 800452a:	f241 1311 	movw	r3, #4369	; 0x1111
 800452e:	4013      	ands	r3, r2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10f      	bne.n	8004554 <HAL_TIMEx_PWMN_Stop+0x48>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6a1a      	ldr	r2, [r3, #32]
 800453a:	f244 4344 	movw	r3, #17476	; 0x4444
 800453e:	4013      	ands	r3, r2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d107      	bne.n	8004554 <HAL_TIMEx_PWMN_Stop+0x48>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004552:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6a1a      	ldr	r2, [r3, #32]
 800455a:	f241 1311 	movw	r3, #4369	; 0x1111
 800455e:	4013      	ands	r3, r2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10f      	bne.n	8004584 <HAL_TIMEx_PWMN_Stop+0x78>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6a1a      	ldr	r2, [r3, #32]
 800456a:	f244 4344 	movw	r3, #17476	; 0x4444
 800456e:	4013      	ands	r3, r2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d107      	bne.n	8004584 <HAL_TIMEx_PWMN_Stop+0x78>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f022 0201 	bic.w	r2, r2, #1
 8004582:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d104      	bne.n	8004594 <HAL_TIMEx_PWMN_Stop+0x88>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004592:	e013      	b.n	80045bc <HAL_TIMEx_PWMN_Stop+0xb0>
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	2b04      	cmp	r3, #4
 8004598:	d104      	bne.n	80045a4 <HAL_TIMEx_PWMN_Stop+0x98>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045a2:	e00b      	b.n	80045bc <HAL_TIMEx_PWMN_Stop+0xb0>
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	2b08      	cmp	r3, #8
 80045a8:	d104      	bne.n	80045b4 <HAL_TIMEx_PWMN_Stop+0xa8>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045b2:	e003      	b.n	80045bc <HAL_TIMEx_PWMN_Stop+0xb0>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
	...

080045c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d101      	bne.n	80045e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045dc:	2302      	movs	r3, #2
 80045de:	e065      	b.n	80046ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a2c      	ldr	r2, [pc, #176]	; (80046b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d004      	beq.n	8004614 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a2b      	ldr	r2, [pc, #172]	; (80046bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d108      	bne.n	8004626 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800461a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	4313      	orrs	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800462c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004630:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	4313      	orrs	r3, r2
 800463a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a1b      	ldr	r2, [pc, #108]	; (80046b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d018      	beq.n	8004680 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004656:	d013      	beq.n	8004680 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a18      	ldr	r2, [pc, #96]	; (80046c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d00e      	beq.n	8004680 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a17      	ldr	r2, [pc, #92]	; (80046c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d009      	beq.n	8004680 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a12      	ldr	r2, [pc, #72]	; (80046bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d004      	beq.n	8004680 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a13      	ldr	r2, [pc, #76]	; (80046c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d10c      	bne.n	800469a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004686:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	4313      	orrs	r3, r2
 8004690:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	40012c00 	.word	0x40012c00
 80046bc:	40013400 	.word	0x40013400
 80046c0:	40000400 	.word	0x40000400
 80046c4:	40000800 	.word	0x40000800
 80046c8:	40014000 	.word	0x40014000

080046cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80046d6:	2300      	movs	r3, #0
 80046d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d101      	bne.n	80046e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80046e4:	2302      	movs	r3, #2
 80046e6:	e087      	b.n	80047f8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	4313      	orrs	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4313      	orrs	r3, r2
 8004726:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	4313      	orrs	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	4313      	orrs	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474e:	4313      	orrs	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	041b      	lsls	r3, r3, #16
 800475e:	4313      	orrs	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a27      	ldr	r2, [pc, #156]	; (8004804 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d004      	beq.n	8004776 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a25      	ldr	r2, [pc, #148]	; (8004808 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d106      	bne.n	8004784 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	69db      	ldr	r3, [r3, #28]
 8004780:	4313      	orrs	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a1e      	ldr	r2, [pc, #120]	; (8004804 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d004      	beq.n	8004798 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a1d      	ldr	r2, [pc, #116]	; (8004808 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d126      	bne.n	80047e6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a2:	051b      	lsls	r3, r3, #20
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c0:	4313      	orrs	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a0e      	ldr	r2, [pc, #56]	; (8004804 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d004      	beq.n	80047d8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a0d      	ldr	r2, [pc, #52]	; (8004808 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d106      	bne.n	80047e6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e2:	4313      	orrs	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	40012c00 	.word	0x40012c00
 8004808:	40013400 	.word	0x40013400

0800480c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800480c:	b480      	push	{r7}
 800480e:	b087      	sub	sp, #28
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f003 031f 	and.w	r3, r3, #31
 800481e:	2204      	movs	r2, #4
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6a1a      	ldr	r2, [r3, #32]
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	43db      	mvns	r3, r3
 800482e:	401a      	ands	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6a1a      	ldr	r2, [r3, #32]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	f003 031f 	and.w	r3, r3, #31
 800483e:	6879      	ldr	r1, [r7, #4]
 8004840:	fa01 f303 	lsl.w	r3, r1, r3
 8004844:	431a      	orrs	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	621a      	str	r2, [r3, #32]
}
 800484a:	bf00      	nop
 800484c:	371c      	adds	r7, #28
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b082      	sub	sp, #8
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e042      	b.n	80048ee <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800486e:	2b00      	cmp	r3, #0
 8004870:	d106      	bne.n	8004880 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7fd fa88 	bl	8001d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2224      	movs	r2, #36	; 0x24
 8004884:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 0201 	bic.w	r2, r2, #1
 8004896:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 fb5d 	bl	8004f58 <UART_SetConfig>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d101      	bne.n	80048a8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e022      	b.n	80048ee <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d002      	beq.n	80048b6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 fdef 	bl	8005494 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f042 0201 	orr.w	r2, r2, #1
 80048e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 fe76 	bl	80055d8 <UART_CheckIdleState>
 80048ec:	4603      	mov	r3, r0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b08a      	sub	sp, #40	; 0x28
 80048fa:	af02      	add	r7, sp, #8
 80048fc:	60f8      	str	r0, [r7, #12]
 80048fe:	60b9      	str	r1, [r7, #8]
 8004900:	603b      	str	r3, [r7, #0]
 8004902:	4613      	mov	r3, r2
 8004904:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800490c:	2b20      	cmp	r3, #32
 800490e:	f040 8083 	bne.w	8004a18 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d002      	beq.n	800491e <HAL_UART_Transmit+0x28>
 8004918:	88fb      	ldrh	r3, [r7, #6]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e07b      	b.n	8004a1a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004928:	2b01      	cmp	r3, #1
 800492a:	d101      	bne.n	8004930 <HAL_UART_Transmit+0x3a>
 800492c:	2302      	movs	r3, #2
 800492e:	e074      	b.n	8004a1a <HAL_UART_Transmit+0x124>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2221      	movs	r2, #33	; 0x21
 8004944:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004948:	f7fd fafa 	bl	8001f40 <HAL_GetTick>
 800494c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	88fa      	ldrh	r2, [r7, #6]
 8004952:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	88fa      	ldrh	r2, [r7, #6]
 800495a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004966:	d108      	bne.n	800497a <HAL_UART_Transmit+0x84>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d104      	bne.n	800497a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004970:	2300      	movs	r3, #0
 8004972:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	61bb      	str	r3, [r7, #24]
 8004978:	e003      	b.n	8004982 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800497e:	2300      	movs	r3, #0
 8004980:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800498a:	e02c      	b.n	80049e6 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2200      	movs	r2, #0
 8004994:	2180      	movs	r1, #128	; 0x80
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 fe69 	bl	800566e <UART_WaitOnFlagUntilTimeout>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e039      	b.n	8004a1a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10b      	bne.n	80049c4 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	881b      	ldrh	r3, [r3, #0]
 80049b0:	461a      	mov	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	3302      	adds	r3, #2
 80049c0:	61bb      	str	r3, [r7, #24]
 80049c2:	e007      	b.n	80049d4 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	781a      	ldrb	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	3301      	adds	r3, #1
 80049d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80049da:	b29b      	uxth	r3, r3
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1cc      	bne.n	800498c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	2200      	movs	r2, #0
 80049fa:	2140      	movs	r1, #64	; 0x40
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 fe36 	bl	800566e <UART_WaitOnFlagUntilTimeout>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e006      	b.n	8004a1a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004a14:	2300      	movs	r3, #0
 8004a16:	e000      	b.n	8004a1a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004a18:	2302      	movs	r3, #2
  }
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3720      	adds	r7, #32
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
	...

08004a24 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a38:	2b20      	cmp	r3, #32
 8004a3a:	d131      	bne.n	8004aa0 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d002      	beq.n	8004a48 <HAL_UART_Receive_IT+0x24>
 8004a42:	88fb      	ldrh	r3, [r7, #6]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e02a      	b.n	8004aa2 <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d101      	bne.n	8004a5a <HAL_UART_Receive_IT+0x36>
 8004a56:	2302      	movs	r3, #2
 8004a58:	e023      	b.n	8004aa2 <HAL_UART_Receive_IT+0x7e>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a0f      	ldr	r2, [pc, #60]	; (8004aac <HAL_UART_Receive_IT+0x88>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d00e      	beq.n	8004a90 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d007      	beq.n	8004a90 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004a8e:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a90:	88fb      	ldrh	r3, [r7, #6]
 8004a92:	461a      	mov	r2, r3
 8004a94:	68b9      	ldr	r1, [r7, #8]
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f000 fe6a 	bl	8005770 <UART_Start_Receive_IT>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	e000      	b.n	8004aa2 <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004aa0:	2302      	movs	r3, #2
  }
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	40008000 	.word	0x40008000

08004ab0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b088      	sub	sp, #32
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004ad0:	69fa      	ldr	r2, [r7, #28]
 8004ad2:	f640 030f 	movw	r3, #2063	; 0x80f
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d118      	bne.n	8004b12 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	f003 0320 	and.w	r3, r3, #32
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d013      	beq.n	8004b12 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	f003 0320 	and.w	r3, r3, #32
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d104      	bne.n	8004afe <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d009      	beq.n	8004b12 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 81fb 	beq.w	8004efe <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	4798      	blx	r3
      }
      return;
 8004b10:	e1f5      	b.n	8004efe <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 80ef 	beq.w	8004cf8 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4b73      	ldr	r3, [pc, #460]	; (8004cec <HAL_UART_IRQHandler+0x23c>)
 8004b1e:	4013      	ands	r3, r2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d105      	bne.n	8004b30 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	4b72      	ldr	r3, [pc, #456]	; (8004cf0 <HAL_UART_IRQHandler+0x240>)
 8004b28:	4013      	ands	r3, r2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 80e4 	beq.w	8004cf8 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d010      	beq.n	8004b5c <HAL_UART_IRQHandler+0xac>
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00b      	beq.n	8004b5c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b52:	f043 0201 	orr.w	r2, r3, #1
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d010      	beq.n	8004b88 <HAL_UART_IRQHandler+0xd8>
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00b      	beq.n	8004b88 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2202      	movs	r2, #2
 8004b76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b7e:	f043 0204 	orr.w	r2, r3, #4
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	f003 0304 	and.w	r3, r3, #4
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d010      	beq.n	8004bb4 <HAL_UART_IRQHandler+0x104>
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00b      	beq.n	8004bb4 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2204      	movs	r2, #4
 8004ba2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004baa:	f043 0202 	orr.w	r2, r3, #2
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d015      	beq.n	8004bea <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	f003 0320 	and.w	r3, r3, #32
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d104      	bne.n	8004bd2 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	4b48      	ldr	r3, [pc, #288]	; (8004cec <HAL_UART_IRQHandler+0x23c>)
 8004bcc:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00b      	beq.n	8004bea <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2208      	movs	r2, #8
 8004bd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004be0:	f043 0208 	orr.w	r2, r3, #8
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d011      	beq.n	8004c18 <HAL_UART_IRQHandler+0x168>
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00c      	beq.n	8004c18 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c0e:	f043 0220 	orr.w	r2, r3, #32
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f000 816f 	beq.w	8004f02 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	f003 0320 	and.w	r3, r3, #32
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d011      	beq.n	8004c52 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	f003 0320 	and.w	r3, r3, #32
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d104      	bne.n	8004c42 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d007      	beq.n	8004c52 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d003      	beq.n	8004c52 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c58:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c64:	2b40      	cmp	r3, #64	; 0x40
 8004c66:	d004      	beq.n	8004c72 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d031      	beq.n	8004cd6 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fe3a 	bl	80058ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c82:	2b40      	cmp	r3, #64	; 0x40
 8004c84:	d123      	bne.n	8004cce <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c94:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d013      	beq.n	8004cc6 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ca2:	4a14      	ldr	r2, [pc, #80]	; (8004cf4 <HAL_UART_IRQHandler+0x244>)
 8004ca4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fd fade 	bl	800226c <HAL_DMA_Abort_IT>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d017      	beq.n	8004ce6 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004cc0:	4610      	mov	r0, r2
 8004cc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc4:	e00f      	b.n	8004ce6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f930 	bl	8004f2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ccc:	e00b      	b.n	8004ce6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f92c 	bl	8004f2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd4:	e007      	b.n	8004ce6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f928 	bl	8004f2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004ce4:	e10d      	b.n	8004f02 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce6:	bf00      	nop
    return;
 8004ce8:	e10b      	b.n	8004f02 <HAL_UART_IRQHandler+0x452>
 8004cea:	bf00      	nop
 8004cec:	10000001 	.word	0x10000001
 8004cf0:	04000120 	.word	0x04000120
 8004cf4:	08005951 	.word	0x08005951

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	f040 80ab 	bne.w	8004e58 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	f003 0310 	and.w	r3, r3, #16
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 80a5 	beq.w	8004e58 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	f003 0310 	and.w	r3, r3, #16
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 809f 	beq.w	8004e58 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2210      	movs	r2, #16
 8004d20:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2c:	2b40      	cmp	r3, #64	; 0x40
 8004d2e:	d155      	bne.n	8004ddc <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8004d3a:	893b      	ldrh	r3, [r7, #8]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 80e2 	beq.w	8004f06 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d48:	893a      	ldrh	r2, [r7, #8]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	f080 80db 	bcs.w	8004f06 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	893a      	ldrh	r2, [r7, #8]
 8004d54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0320 	and.w	r3, r3, #32
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d12b      	bne.n	8004dc0 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d76:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f022 0201 	bic.w	r2, r2, #1
 8004d86:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	689a      	ldr	r2, [r3, #8]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d96:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 0210 	bic.w	r2, r2, #16
 8004db4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fd f9fd 	bl	80021ba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f8b3 	bl	8004f40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004dda:	e094      	b.n	8004f06 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f000 8087 	beq.w	8004f0a <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8004dfc:	897b      	ldrh	r3, [r7, #10]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 8083 	beq.w	8004f0a <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e12:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6812      	ldr	r2, [r2, #0]
 8004e1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e22:	f023 0301 	bic.w	r3, r3, #1
 8004e26:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 0210 	bic.w	r2, r2, #16
 8004e4a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e4c:	897b      	ldrh	r3, [r7, #10]
 8004e4e:	4619      	mov	r1, r3
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 f875 	bl	8004f40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e56:	e058      	b.n	8004f0a <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00d      	beq.n	8004e7e <HAL_UART_IRQHandler+0x3ce>
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d008      	beq.n	8004e7e <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f001 f876 	bl	8005f68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e7c:	e048      	b.n	8004f10 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d012      	beq.n	8004eae <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d104      	bne.n	8004e9c <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d008      	beq.n	8004eae <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d034      	beq.n	8004f0e <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	4798      	blx	r3
    }
    return;
 8004eac:	e02f      	b.n	8004f0e <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d008      	beq.n	8004eca <HAL_UART_IRQHandler+0x41a>
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fd5a 	bl	800597c <UART_EndTransmit_IT>
    return;
 8004ec8:	e022      	b.n	8004f10 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d008      	beq.n	8004ee6 <HAL_UART_IRQHandler+0x436>
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f001 f856 	bl	8005f90 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ee4:	e014      	b.n	8004f10 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00f      	beq.n	8004f10 <HAL_UART_IRQHandler+0x460>
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	da0c      	bge.n	8004f10 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f001 f840 	bl	8005f7c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004efc:	e008      	b.n	8004f10 <HAL_UART_IRQHandler+0x460>
      return;
 8004efe:	bf00      	nop
 8004f00:	e006      	b.n	8004f10 <HAL_UART_IRQHandler+0x460>
    return;
 8004f02:	bf00      	nop
 8004f04:	e004      	b.n	8004f10 <HAL_UART_IRQHandler+0x460>
      return;
 8004f06:	bf00      	nop
 8004f08:	e002      	b.n	8004f10 <HAL_UART_IRQHandler+0x460>
      return;
 8004f0a:	bf00      	nop
 8004f0c:	e000      	b.n	8004f10 <HAL_UART_IRQHandler+0x460>
    return;
 8004f0e:	bf00      	nop
  }
}
 8004f10:	3720      	adds	r7, #32
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop

08004f18 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	460b      	mov	r3, r1
 8004f4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f58:	b5b0      	push	{r4, r5, r7, lr}
 8004f5a:	b088      	sub	sp, #32
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f60:	2300      	movs	r3, #0
 8004f62:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	4baf      	ldr	r3, [pc, #700]	; (8005240 <UART_SetConfig+0x2e8>)
 8004f84:	4013      	ands	r3, r2
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	6812      	ldr	r2, [r2, #0]
 8004f8a:	69f9      	ldr	r1, [r7, #28]
 8004f8c:	430b      	orrs	r3, r1
 8004f8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68da      	ldr	r2, [r3, #12]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4aa4      	ldr	r2, [pc, #656]	; (8005244 <UART_SetConfig+0x2ec>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d004      	beq.n	8004fc0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	69fa      	ldr	r2, [r7, #28]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004fca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	6812      	ldr	r2, [r2, #0]
 8004fd2:	69f9      	ldr	r1, [r7, #28]
 8004fd4:	430b      	orrs	r3, r1
 8004fd6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fde:	f023 010f 	bic.w	r1, r3, #15
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a95      	ldr	r2, [pc, #596]	; (8005248 <UART_SetConfig+0x2f0>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d120      	bne.n	800503a <UART_SetConfig+0xe2>
 8004ff8:	4b94      	ldr	r3, [pc, #592]	; (800524c <UART_SetConfig+0x2f4>)
 8004ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffe:	f003 0303 	and.w	r3, r3, #3
 8005002:	2b03      	cmp	r3, #3
 8005004:	d816      	bhi.n	8005034 <UART_SetConfig+0xdc>
 8005006:	a201      	add	r2, pc, #4	; (adr r2, 800500c <UART_SetConfig+0xb4>)
 8005008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500c:	0800501d 	.word	0x0800501d
 8005010:	08005029 	.word	0x08005029
 8005014:	08005023 	.word	0x08005023
 8005018:	0800502f 	.word	0x0800502f
 800501c:	2301      	movs	r3, #1
 800501e:	76fb      	strb	r3, [r7, #27]
 8005020:	e0bc      	b.n	800519c <UART_SetConfig+0x244>
 8005022:	2302      	movs	r3, #2
 8005024:	76fb      	strb	r3, [r7, #27]
 8005026:	e0b9      	b.n	800519c <UART_SetConfig+0x244>
 8005028:	2304      	movs	r3, #4
 800502a:	76fb      	strb	r3, [r7, #27]
 800502c:	e0b6      	b.n	800519c <UART_SetConfig+0x244>
 800502e:	2308      	movs	r3, #8
 8005030:	76fb      	strb	r3, [r7, #27]
 8005032:	e0b3      	b.n	800519c <UART_SetConfig+0x244>
 8005034:	2310      	movs	r3, #16
 8005036:	76fb      	strb	r3, [r7, #27]
 8005038:	e0b0      	b.n	800519c <UART_SetConfig+0x244>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a84      	ldr	r2, [pc, #528]	; (8005250 <UART_SetConfig+0x2f8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d132      	bne.n	80050aa <UART_SetConfig+0x152>
 8005044:	4b81      	ldr	r3, [pc, #516]	; (800524c <UART_SetConfig+0x2f4>)
 8005046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504a:	f003 030c 	and.w	r3, r3, #12
 800504e:	2b0c      	cmp	r3, #12
 8005050:	d828      	bhi.n	80050a4 <UART_SetConfig+0x14c>
 8005052:	a201      	add	r2, pc, #4	; (adr r2, 8005058 <UART_SetConfig+0x100>)
 8005054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005058:	0800508d 	.word	0x0800508d
 800505c:	080050a5 	.word	0x080050a5
 8005060:	080050a5 	.word	0x080050a5
 8005064:	080050a5 	.word	0x080050a5
 8005068:	08005099 	.word	0x08005099
 800506c:	080050a5 	.word	0x080050a5
 8005070:	080050a5 	.word	0x080050a5
 8005074:	080050a5 	.word	0x080050a5
 8005078:	08005093 	.word	0x08005093
 800507c:	080050a5 	.word	0x080050a5
 8005080:	080050a5 	.word	0x080050a5
 8005084:	080050a5 	.word	0x080050a5
 8005088:	0800509f 	.word	0x0800509f
 800508c:	2300      	movs	r3, #0
 800508e:	76fb      	strb	r3, [r7, #27]
 8005090:	e084      	b.n	800519c <UART_SetConfig+0x244>
 8005092:	2302      	movs	r3, #2
 8005094:	76fb      	strb	r3, [r7, #27]
 8005096:	e081      	b.n	800519c <UART_SetConfig+0x244>
 8005098:	2304      	movs	r3, #4
 800509a:	76fb      	strb	r3, [r7, #27]
 800509c:	e07e      	b.n	800519c <UART_SetConfig+0x244>
 800509e:	2308      	movs	r3, #8
 80050a0:	76fb      	strb	r3, [r7, #27]
 80050a2:	e07b      	b.n	800519c <UART_SetConfig+0x244>
 80050a4:	2310      	movs	r3, #16
 80050a6:	76fb      	strb	r3, [r7, #27]
 80050a8:	e078      	b.n	800519c <UART_SetConfig+0x244>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a69      	ldr	r2, [pc, #420]	; (8005254 <UART_SetConfig+0x2fc>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d120      	bne.n	80050f6 <UART_SetConfig+0x19e>
 80050b4:	4b65      	ldr	r3, [pc, #404]	; (800524c <UART_SetConfig+0x2f4>)
 80050b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80050be:	2b30      	cmp	r3, #48	; 0x30
 80050c0:	d013      	beq.n	80050ea <UART_SetConfig+0x192>
 80050c2:	2b30      	cmp	r3, #48	; 0x30
 80050c4:	d814      	bhi.n	80050f0 <UART_SetConfig+0x198>
 80050c6:	2b20      	cmp	r3, #32
 80050c8:	d009      	beq.n	80050de <UART_SetConfig+0x186>
 80050ca:	2b20      	cmp	r3, #32
 80050cc:	d810      	bhi.n	80050f0 <UART_SetConfig+0x198>
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d002      	beq.n	80050d8 <UART_SetConfig+0x180>
 80050d2:	2b10      	cmp	r3, #16
 80050d4:	d006      	beq.n	80050e4 <UART_SetConfig+0x18c>
 80050d6:	e00b      	b.n	80050f0 <UART_SetConfig+0x198>
 80050d8:	2300      	movs	r3, #0
 80050da:	76fb      	strb	r3, [r7, #27]
 80050dc:	e05e      	b.n	800519c <UART_SetConfig+0x244>
 80050de:	2302      	movs	r3, #2
 80050e0:	76fb      	strb	r3, [r7, #27]
 80050e2:	e05b      	b.n	800519c <UART_SetConfig+0x244>
 80050e4:	2304      	movs	r3, #4
 80050e6:	76fb      	strb	r3, [r7, #27]
 80050e8:	e058      	b.n	800519c <UART_SetConfig+0x244>
 80050ea:	2308      	movs	r3, #8
 80050ec:	76fb      	strb	r3, [r7, #27]
 80050ee:	e055      	b.n	800519c <UART_SetConfig+0x244>
 80050f0:	2310      	movs	r3, #16
 80050f2:	76fb      	strb	r3, [r7, #27]
 80050f4:	e052      	b.n	800519c <UART_SetConfig+0x244>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a57      	ldr	r2, [pc, #348]	; (8005258 <UART_SetConfig+0x300>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d120      	bne.n	8005142 <UART_SetConfig+0x1ea>
 8005100:	4b52      	ldr	r3, [pc, #328]	; (800524c <UART_SetConfig+0x2f4>)
 8005102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005106:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800510a:	2bc0      	cmp	r3, #192	; 0xc0
 800510c:	d013      	beq.n	8005136 <UART_SetConfig+0x1de>
 800510e:	2bc0      	cmp	r3, #192	; 0xc0
 8005110:	d814      	bhi.n	800513c <UART_SetConfig+0x1e4>
 8005112:	2b80      	cmp	r3, #128	; 0x80
 8005114:	d009      	beq.n	800512a <UART_SetConfig+0x1d2>
 8005116:	2b80      	cmp	r3, #128	; 0x80
 8005118:	d810      	bhi.n	800513c <UART_SetConfig+0x1e4>
 800511a:	2b00      	cmp	r3, #0
 800511c:	d002      	beq.n	8005124 <UART_SetConfig+0x1cc>
 800511e:	2b40      	cmp	r3, #64	; 0x40
 8005120:	d006      	beq.n	8005130 <UART_SetConfig+0x1d8>
 8005122:	e00b      	b.n	800513c <UART_SetConfig+0x1e4>
 8005124:	2300      	movs	r3, #0
 8005126:	76fb      	strb	r3, [r7, #27]
 8005128:	e038      	b.n	800519c <UART_SetConfig+0x244>
 800512a:	2302      	movs	r3, #2
 800512c:	76fb      	strb	r3, [r7, #27]
 800512e:	e035      	b.n	800519c <UART_SetConfig+0x244>
 8005130:	2304      	movs	r3, #4
 8005132:	76fb      	strb	r3, [r7, #27]
 8005134:	e032      	b.n	800519c <UART_SetConfig+0x244>
 8005136:	2308      	movs	r3, #8
 8005138:	76fb      	strb	r3, [r7, #27]
 800513a:	e02f      	b.n	800519c <UART_SetConfig+0x244>
 800513c:	2310      	movs	r3, #16
 800513e:	76fb      	strb	r3, [r7, #27]
 8005140:	e02c      	b.n	800519c <UART_SetConfig+0x244>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a3f      	ldr	r2, [pc, #252]	; (8005244 <UART_SetConfig+0x2ec>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d125      	bne.n	8005198 <UART_SetConfig+0x240>
 800514c:	4b3f      	ldr	r3, [pc, #252]	; (800524c <UART_SetConfig+0x2f4>)
 800514e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005152:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005156:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800515a:	d017      	beq.n	800518c <UART_SetConfig+0x234>
 800515c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005160:	d817      	bhi.n	8005192 <UART_SetConfig+0x23a>
 8005162:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005166:	d00b      	beq.n	8005180 <UART_SetConfig+0x228>
 8005168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800516c:	d811      	bhi.n	8005192 <UART_SetConfig+0x23a>
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <UART_SetConfig+0x222>
 8005172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005176:	d006      	beq.n	8005186 <UART_SetConfig+0x22e>
 8005178:	e00b      	b.n	8005192 <UART_SetConfig+0x23a>
 800517a:	2300      	movs	r3, #0
 800517c:	76fb      	strb	r3, [r7, #27]
 800517e:	e00d      	b.n	800519c <UART_SetConfig+0x244>
 8005180:	2302      	movs	r3, #2
 8005182:	76fb      	strb	r3, [r7, #27]
 8005184:	e00a      	b.n	800519c <UART_SetConfig+0x244>
 8005186:	2304      	movs	r3, #4
 8005188:	76fb      	strb	r3, [r7, #27]
 800518a:	e007      	b.n	800519c <UART_SetConfig+0x244>
 800518c:	2308      	movs	r3, #8
 800518e:	76fb      	strb	r3, [r7, #27]
 8005190:	e004      	b.n	800519c <UART_SetConfig+0x244>
 8005192:	2310      	movs	r3, #16
 8005194:	76fb      	strb	r3, [r7, #27]
 8005196:	e001      	b.n	800519c <UART_SetConfig+0x244>
 8005198:	2310      	movs	r3, #16
 800519a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a28      	ldr	r2, [pc, #160]	; (8005244 <UART_SetConfig+0x2ec>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	f040 809e 	bne.w	80052e4 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051a8:	7efb      	ldrb	r3, [r7, #27]
 80051aa:	2b08      	cmp	r3, #8
 80051ac:	d823      	bhi.n	80051f6 <UART_SetConfig+0x29e>
 80051ae:	a201      	add	r2, pc, #4	; (adr r2, 80051b4 <UART_SetConfig+0x25c>)
 80051b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b4:	080051d9 	.word	0x080051d9
 80051b8:	080051f7 	.word	0x080051f7
 80051bc:	080051e1 	.word	0x080051e1
 80051c0:	080051f7 	.word	0x080051f7
 80051c4:	080051e7 	.word	0x080051e7
 80051c8:	080051f7 	.word	0x080051f7
 80051cc:	080051f7 	.word	0x080051f7
 80051d0:	080051f7 	.word	0x080051f7
 80051d4:	080051ef 	.word	0x080051ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051d8:	f7fd ffd8 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 80051dc:	6178      	str	r0, [r7, #20]
        break;
 80051de:	e00f      	b.n	8005200 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051e0:	4b1e      	ldr	r3, [pc, #120]	; (800525c <UART_SetConfig+0x304>)
 80051e2:	617b      	str	r3, [r7, #20]
        break;
 80051e4:	e00c      	b.n	8005200 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051e6:	f7fd ff63 	bl	80030b0 <HAL_RCC_GetSysClockFreq>
 80051ea:	6178      	str	r0, [r7, #20]
        break;
 80051ec:	e008      	b.n	8005200 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051f2:	617b      	str	r3, [r7, #20]
        break;
 80051f4:	e004      	b.n	8005200 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	76bb      	strb	r3, [r7, #26]
        break;
 80051fe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 812e 	beq.w	8005464 <UART_SetConfig+0x50c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	4a14      	ldr	r2, [pc, #80]	; (8005260 <UART_SetConfig+0x308>)
 800520e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005212:	461a      	mov	r2, r3
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	fbb3 f3f2 	udiv	r3, r3, r2
 800521a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	4613      	mov	r3, r2
 8005222:	005b      	lsls	r3, r3, #1
 8005224:	4413      	add	r3, r2
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	429a      	cmp	r2, r3
 800522a:	d305      	bcc.n	8005238 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	429a      	cmp	r2, r3
 8005236:	d915      	bls.n	8005264 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	76bb      	strb	r3, [r7, #26]
 800523c:	e112      	b.n	8005464 <UART_SetConfig+0x50c>
 800523e:	bf00      	nop
 8005240:	cfff69f3 	.word	0xcfff69f3
 8005244:	40008000 	.word	0x40008000
 8005248:	40013800 	.word	0x40013800
 800524c:	40021000 	.word	0x40021000
 8005250:	40004400 	.word	0x40004400
 8005254:	40004800 	.word	0x40004800
 8005258:	40004c00 	.word	0x40004c00
 800525c:	00f42400 	.word	0x00f42400
 8005260:	0800a518 	.word	0x0800a518
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	4618      	mov	r0, r3
 8005268:	f04f 0100 	mov.w	r1, #0
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005270:	4a86      	ldr	r2, [pc, #536]	; (800548c <UART_SetConfig+0x534>)
 8005272:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005276:	b29a      	uxth	r2, r3
 8005278:	f04f 0300 	mov.w	r3, #0
 800527c:	f7fb fd2c 	bl	8000cd8 <__aeabi_uldivmod>
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	4610      	mov	r0, r2
 8005286:	4619      	mov	r1, r3
 8005288:	f04f 0200 	mov.w	r2, #0
 800528c:	f04f 0300 	mov.w	r3, #0
 8005290:	020b      	lsls	r3, r1, #8
 8005292:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005296:	0202      	lsls	r2, r0, #8
 8005298:	6879      	ldr	r1, [r7, #4]
 800529a:	6849      	ldr	r1, [r1, #4]
 800529c:	0849      	lsrs	r1, r1, #1
 800529e:	4608      	mov	r0, r1
 80052a0:	f04f 0100 	mov.w	r1, #0
 80052a4:	1814      	adds	r4, r2, r0
 80052a6:	eb43 0501 	adc.w	r5, r3, r1
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	461a      	mov	r2, r3
 80052b0:	f04f 0300 	mov.w	r3, #0
 80052b4:	4620      	mov	r0, r4
 80052b6:	4629      	mov	r1, r5
 80052b8:	f7fb fd0e 	bl	8000cd8 <__aeabi_uldivmod>
 80052bc:	4602      	mov	r2, r0
 80052be:	460b      	mov	r3, r1
 80052c0:	4613      	mov	r3, r2
 80052c2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052ca:	d308      	bcc.n	80052de <UART_SetConfig+0x386>
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052d2:	d204      	bcs.n	80052de <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	60da      	str	r2, [r3, #12]
 80052dc:	e0c2      	b.n	8005464 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	76bb      	strb	r3, [r7, #26]
 80052e2:	e0bf      	b.n	8005464 <UART_SetConfig+0x50c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	69db      	ldr	r3, [r3, #28]
 80052e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052ec:	d165      	bne.n	80053ba <UART_SetConfig+0x462>
  {
    switch (clocksource)
 80052ee:	7efb      	ldrb	r3, [r7, #27]
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	d828      	bhi.n	8005346 <UART_SetConfig+0x3ee>
 80052f4:	a201      	add	r2, pc, #4	; (adr r2, 80052fc <UART_SetConfig+0x3a4>)
 80052f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fa:	bf00      	nop
 80052fc:	08005321 	.word	0x08005321
 8005300:	08005329 	.word	0x08005329
 8005304:	08005331 	.word	0x08005331
 8005308:	08005347 	.word	0x08005347
 800530c:	08005337 	.word	0x08005337
 8005310:	08005347 	.word	0x08005347
 8005314:	08005347 	.word	0x08005347
 8005318:	08005347 	.word	0x08005347
 800531c:	0800533f 	.word	0x0800533f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005320:	f7fd ff34 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 8005324:	6178      	str	r0, [r7, #20]
        break;
 8005326:	e013      	b.n	8005350 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005328:	f7fd ff46 	bl	80031b8 <HAL_RCC_GetPCLK2Freq>
 800532c:	6178      	str	r0, [r7, #20]
        break;
 800532e:	e00f      	b.n	8005350 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005330:	4b57      	ldr	r3, [pc, #348]	; (8005490 <UART_SetConfig+0x538>)
 8005332:	617b      	str	r3, [r7, #20]
        break;
 8005334:	e00c      	b.n	8005350 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005336:	f7fd febb 	bl	80030b0 <HAL_RCC_GetSysClockFreq>
 800533a:	6178      	str	r0, [r7, #20]
        break;
 800533c:	e008      	b.n	8005350 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800533e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005342:	617b      	str	r3, [r7, #20]
        break;
 8005344:	e004      	b.n	8005350 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 8005346:	2300      	movs	r3, #0
 8005348:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	76bb      	strb	r3, [r7, #26]
        break;
 800534e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	2b00      	cmp	r3, #0
 8005354:	f000 8086 	beq.w	8005464 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535c:	4a4b      	ldr	r2, [pc, #300]	; (800548c <UART_SetConfig+0x534>)
 800535e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005362:	461a      	mov	r2, r3
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	fbb3 f3f2 	udiv	r3, r3, r2
 800536a:	005a      	lsls	r2, r3, #1
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	085b      	lsrs	r3, r3, #1
 8005372:	441a      	add	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	fbb2 f3f3 	udiv	r3, r2, r3
 800537c:	b29b      	uxth	r3, r3
 800537e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	2b0f      	cmp	r3, #15
 8005384:	d916      	bls.n	80053b4 <UART_SetConfig+0x45c>
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800538c:	d212      	bcs.n	80053b4 <UART_SetConfig+0x45c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	b29b      	uxth	r3, r3
 8005392:	f023 030f 	bic.w	r3, r3, #15
 8005396:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	085b      	lsrs	r3, r3, #1
 800539c:	b29b      	uxth	r3, r3
 800539e:	f003 0307 	and.w	r3, r3, #7
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	89fb      	ldrh	r3, [r7, #14]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	89fa      	ldrh	r2, [r7, #14]
 80053b0:	60da      	str	r2, [r3, #12]
 80053b2:	e057      	b.n	8005464 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	76bb      	strb	r3, [r7, #26]
 80053b8:	e054      	b.n	8005464 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053ba:	7efb      	ldrb	r3, [r7, #27]
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d828      	bhi.n	8005412 <UART_SetConfig+0x4ba>
 80053c0:	a201      	add	r2, pc, #4	; (adr r2, 80053c8 <UART_SetConfig+0x470>)
 80053c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c6:	bf00      	nop
 80053c8:	080053ed 	.word	0x080053ed
 80053cc:	080053f5 	.word	0x080053f5
 80053d0:	080053fd 	.word	0x080053fd
 80053d4:	08005413 	.word	0x08005413
 80053d8:	08005403 	.word	0x08005403
 80053dc:	08005413 	.word	0x08005413
 80053e0:	08005413 	.word	0x08005413
 80053e4:	08005413 	.word	0x08005413
 80053e8:	0800540b 	.word	0x0800540b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053ec:	f7fd fece 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 80053f0:	6178      	str	r0, [r7, #20]
        break;
 80053f2:	e013      	b.n	800541c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053f4:	f7fd fee0 	bl	80031b8 <HAL_RCC_GetPCLK2Freq>
 80053f8:	6178      	str	r0, [r7, #20]
        break;
 80053fa:	e00f      	b.n	800541c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053fc:	4b24      	ldr	r3, [pc, #144]	; (8005490 <UART_SetConfig+0x538>)
 80053fe:	617b      	str	r3, [r7, #20]
        break;
 8005400:	e00c      	b.n	800541c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005402:	f7fd fe55 	bl	80030b0 <HAL_RCC_GetSysClockFreq>
 8005406:	6178      	str	r0, [r7, #20]
        break;
 8005408:	e008      	b.n	800541c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800540a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800540e:	617b      	str	r3, [r7, #20]
        break;
 8005410:	e004      	b.n	800541c <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8005412:	2300      	movs	r3, #0
 8005414:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	76bb      	strb	r3, [r7, #26]
        break;
 800541a:	bf00      	nop
    }

    if (pclk != 0U)
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d020      	beq.n	8005464 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005426:	4a19      	ldr	r2, [pc, #100]	; (800548c <UART_SetConfig+0x534>)
 8005428:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800542c:	461a      	mov	r2, r3
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	fbb3 f2f2 	udiv	r2, r3, r2
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	085b      	lsrs	r3, r3, #1
 800543a:	441a      	add	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	fbb2 f3f3 	udiv	r3, r2, r3
 8005444:	b29b      	uxth	r3, r3
 8005446:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	2b0f      	cmp	r3, #15
 800544c:	d908      	bls.n	8005460 <UART_SetConfig+0x508>
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005454:	d204      	bcs.n	8005460 <UART_SetConfig+0x508>
      {
        huart->Instance->BRR = usartdiv;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	60da      	str	r2, [r3, #12]
 800545e:	e001      	b.n	8005464 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005480:	7ebb      	ldrb	r3, [r7, #26]
}
 8005482:	4618      	mov	r0, r3
 8005484:	3720      	adds	r7, #32
 8005486:	46bd      	mov	sp, r7
 8005488:	bdb0      	pop	{r4, r5, r7, pc}
 800548a:	bf00      	nop
 800548c:	0800a518 	.word	0x0800a518
 8005490:	00f42400 	.word	0x00f42400

08005494 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00a      	beq.n	80054be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e4:	f003 0304 	and.w	r3, r3, #4
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00a      	beq.n	8005502 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	430a      	orrs	r2, r1
 8005500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005506:	f003 0308 	and.w	r3, r3, #8
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00a      	beq.n	8005524 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	430a      	orrs	r2, r1
 8005522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005528:	f003 0310 	and.w	r3, r3, #16
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00a      	beq.n	8005546 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554a:	f003 0320 	and.w	r3, r3, #32
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00a      	beq.n	8005568 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	430a      	orrs	r2, r1
 8005566:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005570:	2b00      	cmp	r3, #0
 8005572:	d01a      	beq.n	80055aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800558e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005592:	d10a      	bne.n	80055aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00a      	beq.n	80055cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	605a      	str	r2, [r3, #4]
  }
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af02      	add	r7, sp, #8
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055e8:	f7fc fcaa 	bl	8001f40 <HAL_GetTick>
 80055ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0308 	and.w	r3, r3, #8
 80055f8:	2b08      	cmp	r3, #8
 80055fa:	d10e      	bne.n	800561a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005600:	9300      	str	r3, [sp, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f82f 	bl	800566e <UART_WaitOnFlagUntilTimeout>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e025      	b.n	8005666 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0304 	and.w	r3, r3, #4
 8005624:	2b04      	cmp	r3, #4
 8005626:	d10e      	bne.n	8005646 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005628:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f819 	bl	800566e <UART_WaitOnFlagUntilTimeout>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e00f      	b.n	8005666 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2220      	movs	r2, #32
 800564a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2220      	movs	r2, #32
 8005652:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b084      	sub	sp, #16
 8005672:	af00      	add	r7, sp, #0
 8005674:	60f8      	str	r0, [r7, #12]
 8005676:	60b9      	str	r1, [r7, #8]
 8005678:	603b      	str	r3, [r7, #0]
 800567a:	4613      	mov	r3, r2
 800567c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800567e:	e062      	b.n	8005746 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005686:	d05e      	beq.n	8005746 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005688:	f7fc fc5a 	bl	8001f40 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	429a      	cmp	r2, r3
 8005696:	d302      	bcc.n	800569e <UART_WaitOnFlagUntilTimeout+0x30>
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d11d      	bne.n	80056da <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80056ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 0201 	bic.w	r2, r2, #1
 80056bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2220      	movs	r2, #32
 80056c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2220      	movs	r2, #32
 80056ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e045      	b.n	8005766 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0304 	and.w	r3, r3, #4
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d02e      	beq.n	8005746 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056f6:	d126      	bne.n	8005746 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005700:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005710:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f022 0201 	bic.w	r2, r2, #1
 8005720:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2220      	movs	r2, #32
 8005726:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2220      	movs	r2, #32
 800572e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2220      	movs	r2, #32
 8005736:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e00f      	b.n	8005766 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	69da      	ldr	r2, [r3, #28]
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	4013      	ands	r3, r2
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	429a      	cmp	r2, r3
 8005754:	bf0c      	ite	eq
 8005756:	2301      	moveq	r3, #1
 8005758:	2300      	movne	r3, #0
 800575a:	b2db      	uxtb	r3, r3
 800575c:	461a      	mov	r2, r3
 800575e:	79fb      	ldrb	r3, [r7, #7]
 8005760:	429a      	cmp	r2, r3
 8005762:	d08d      	beq.n	8005680 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
	...

08005770 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	4613      	mov	r3, r2
 800577c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	88fa      	ldrh	r2, [r7, #6]
 8005788:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	88fa      	ldrh	r2, [r7, #6]
 8005790:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057a2:	d10e      	bne.n	80057c2 <UART_Start_Receive_IT+0x52>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d105      	bne.n	80057b8 <UART_Start_Receive_IT+0x48>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 80057b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057b6:	e02d      	b.n	8005814 <UART_Start_Receive_IT+0xa4>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	22ff      	movs	r2, #255	; 0xff
 80057bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057c0:	e028      	b.n	8005814 <UART_Start_Receive_IT+0xa4>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10d      	bne.n	80057e6 <UART_Start_Receive_IT+0x76>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d104      	bne.n	80057dc <UART_Start_Receive_IT+0x6c>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	22ff      	movs	r2, #255	; 0xff
 80057d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057da:	e01b      	b.n	8005814 <UART_Start_Receive_IT+0xa4>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	227f      	movs	r2, #127	; 0x7f
 80057e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057e4:	e016      	b.n	8005814 <UART_Start_Receive_IT+0xa4>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057ee:	d10d      	bne.n	800580c <UART_Start_Receive_IT+0x9c>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d104      	bne.n	8005802 <UART_Start_Receive_IT+0x92>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	227f      	movs	r2, #127	; 0x7f
 80057fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005800:	e008      	b.n	8005814 <UART_Start_Receive_IT+0xa4>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	223f      	movs	r2, #63	; 0x3f
 8005806:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800580a:	e003      	b.n	8005814 <UART_Start_Receive_IT+0xa4>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2222      	movs	r2, #34	; 0x22
 8005820:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689a      	ldr	r2, [r3, #8]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f042 0201 	orr.w	r2, r2, #1
 8005832:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005838:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800583c:	d12a      	bne.n	8005894 <UART_Start_Receive_IT+0x124>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005844:	88fa      	ldrh	r2, [r7, #6]
 8005846:	429a      	cmp	r2, r3
 8005848:	d324      	bcc.n	8005894 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005852:	d107      	bne.n	8005864 <UART_Start_Receive_IT+0xf4>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d103      	bne.n	8005864 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	4a1f      	ldr	r2, [pc, #124]	; (80058dc <UART_Start_Receive_IT+0x16c>)
 8005860:	671a      	str	r2, [r3, #112]	; 0x70
 8005862:	e002      	b.n	800586a <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	4a1e      	ldr	r2, [pc, #120]	; (80058e0 <UART_Start_Receive_IT+0x170>)
 8005868:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005880:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	689a      	ldr	r2, [r3, #8]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005890:	609a      	str	r2, [r3, #8]
 8005892:	e01b      	b.n	80058cc <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800589c:	d107      	bne.n	80058ae <UART_Start_Receive_IT+0x13e>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d103      	bne.n	80058ae <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	4a0e      	ldr	r2, [pc, #56]	; (80058e4 <UART_Start_Receive_IT+0x174>)
 80058aa:	671a      	str	r2, [r3, #112]	; 0x70
 80058ac:	e002      	b.n	80058b4 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	4a0d      	ldr	r2, [pc, #52]	; (80058e8 <UART_Start_Receive_IT+0x178>)
 80058b2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80058ca:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	08005d65 	.word	0x08005d65
 80058e0:	08005b61 	.word	0x08005b61
 80058e4:	08005a89 	.word	0x08005a89
 80058e8:	080059b1 	.word	0x080059b1

080058ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005902:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	6812      	ldr	r2, [r2, #0]
 800590e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005912:	f023 0301 	bic.w	r3, r3, #1
 8005916:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800591c:	2b01      	cmp	r3, #1
 800591e:	d107      	bne.n	8005930 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 0210 	bic.w	r2, r2, #16
 800592e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2220      	movs	r2, #32
 8005934:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f7ff fadc 	bl	8004f2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005974:	bf00      	nop
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005992:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2220      	movs	r2, #32
 8005998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f7ff fab8 	bl	8004f18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059a8:	bf00      	nop
 80059aa:	3708      	adds	r7, #8
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80059be:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c6:	2b22      	cmp	r3, #34	; 0x22
 80059c8:	d152      	bne.n	8005a70 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80059d2:	89bb      	ldrh	r3, [r7, #12]
 80059d4:	b2d9      	uxtb	r1, r3
 80059d6:	89fb      	ldrh	r3, [r7, #14]
 80059d8:	b2da      	uxtb	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059de:	400a      	ands	r2, r1
 80059e0:	b2d2      	uxtb	r2, r2
 80059e2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	3b01      	subs	r3, #1
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d139      	bne.n	8005a80 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a1a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689a      	ldr	r2, [r3, #8]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f022 0201 	bic.w	r2, r2, #1
 8005a2a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d10f      	bne.n	8005a62 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f022 0210 	bic.w	r2, r2, #16
 8005a50:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a58:	4619      	mov	r1, r3
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7ff fa70 	bl	8004f40 <HAL_UARTEx_RxEventCallback>
 8005a60:	e002      	b.n	8005a68 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7fb febe 	bl	80017e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a6e:	e007      	b.n	8005a80 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	699a      	ldr	r2, [r3, #24]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f042 0208 	orr.w	r2, r2, #8
 8005a7e:	619a      	str	r2, [r3, #24]
}
 8005a80:	bf00      	nop
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005a96:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9e:	2b22      	cmp	r3, #34	; 0x22
 8005aa0:	d152      	bne.n	8005b48 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa8:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aae:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005ab0:	89ba      	ldrh	r2, [r7, #12]
 8005ab2:	89fb      	ldrh	r3, [r7, #14]
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac0:	1c9a      	adds	r2, r3, #2
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d139      	bne.n	8005b58 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005af2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	689a      	ldr	r2, [r3, #8]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0201 	bic.w	r2, r2, #1
 8005b02:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2220      	movs	r2, #32
 8005b08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d10f      	bne.n	8005b3a <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f022 0210 	bic.w	r2, r2, #16
 8005b28:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005b30:	4619      	mov	r1, r3
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7ff fa04 	bl	8004f40 <HAL_UARTEx_RxEventCallback>
 8005b38:	e002      	b.n	8005b40 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7fb fe52 	bl	80017e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b46:	e007      	b.n	8005b58 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	699a      	ldr	r2, [r3, #24]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f042 0208 	orr.w	r2, r2, #8
 8005b56:	619a      	str	r2, [r3, #24]
}
 8005b58:	bf00      	nop
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b088      	sub	sp, #32
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005b6e:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b8e:	2b22      	cmp	r3, #34	; 0x22
 8005b90:	f040 80da 	bne.w	8005d48 <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005b9a:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005b9c:	e0aa      	b.n	8005cf4 <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba4:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005ba6:	89bb      	ldrh	r3, [r7, #12]
 8005ba8:	b2d9      	uxtb	r1, r3
 8005baa:	8b7b      	ldrh	r3, [r7, #26]
 8005bac:	b2da      	uxtb	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb2:	400a      	ands	r2, r1
 8005bb4:	b2d2      	uxtb	r2, r2
 8005bb6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bbc:	1c5a      	adds	r2, r3, #1
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	f003 0307 	and.w	r3, r3, #7
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d04d      	beq.n	8005c82 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d010      	beq.n	8005c12 <UART_RxISR_8BIT_FIFOEN+0xb2>
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00b      	beq.n	8005c12 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c08:	f043 0201 	orr.w	r2, r3, #1
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d010      	beq.n	8005c3e <UART_RxISR_8BIT_FIFOEN+0xde>
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00b      	beq.n	8005c3e <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c34:	f043 0204 	orr.w	r2, r3, #4
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	f003 0304 	and.w	r3, r3, #4
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d010      	beq.n	8005c6a <UART_RxISR_8BIT_FIFOEN+0x10a>
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00b      	beq.n	8005c6a <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2204      	movs	r2, #4
 8005c58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c60:	f043 0202 	orr.w	r2, r3, #2
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d006      	beq.n	8005c82 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f7ff f959 	bl	8004f2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d132      	bne.n	8005cf4 <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c9c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	6812      	ldr	r2, [r2, #0]
 8005ca8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cac:	f023 0301 	bic.w	r3, r3, #1
 8005cb0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d10f      	bne.n	8005ce8 <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 0210 	bic.w	r2, r2, #16
 8005cd6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005cde:	4619      	mov	r1, r3
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f7ff f92d 	bl	8004f40 <HAL_UARTEx_RxEventCallback>
 8005ce6:	e002      	b.n	8005cee <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f7fb fd7b 	bl	80017e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005cf4:	89fb      	ldrh	r3, [r7, #14]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d005      	beq.n	8005d06 <UART_RxISR_8BIT_FIFOEN+0x1a6>
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	f003 0320 	and.w	r3, r3, #32
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f47f af4c 	bne.w	8005b9e <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d0c:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005d0e:	897b      	ldrh	r3, [r7, #10]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d021      	beq.n	8005d58 <UART_RxISR_8BIT_FIFOEN+0x1f8>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005d1a:	897a      	ldrh	r2, [r7, #10]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d21b      	bcs.n	8005d58 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	689a      	ldr	r2, [r3, #8]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005d2e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a0b      	ldr	r2, [pc, #44]	; (8005d60 <UART_RxISR_8BIT_FIFOEN+0x200>)
 8005d34:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f042 0220 	orr.w	r2, r2, #32
 8005d44:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d46:	e007      	b.n	8005d58 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	699a      	ldr	r2, [r3, #24]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f042 0208 	orr.w	r2, r2, #8
 8005d56:	619a      	str	r2, [r3, #24]
}
 8005d58:	bf00      	nop
 8005d5a:	3720      	adds	r7, #32
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	080059b1 	.word	0x080059b1

08005d64 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b08a      	sub	sp, #40	; 0x28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005d72:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d92:	2b22      	cmp	r3, #34	; 0x22
 8005d94:	f040 80da 	bne.w	8005f4c <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005d9e:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005da0:	e0aa      	b.n	8005ef8 <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da8:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dae:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 8005db0:	8aba      	ldrh	r2, [r7, #20]
 8005db2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005db4:	4013      	ands	r3, r2
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dc0:	1c9a      	adds	r2, r3, #2
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	f003 0307 	and.w	r3, r3, #7
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d04d      	beq.n	8005e86 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	f003 0301 	and.w	r3, r3, #1
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d010      	beq.n	8005e16 <UART_RxISR_16BIT_FIFOEN+0xb2>
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00b      	beq.n	8005e16 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2201      	movs	r2, #1
 8005e04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e0c:	f043 0201 	orr.w	r2, r3, #1
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e18:	f003 0302 	and.w	r3, r3, #2
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d010      	beq.n	8005e42 <UART_RxISR_16BIT_FIFOEN+0xde>
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00b      	beq.n	8005e42 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e38:	f043 0204 	orr.w	r2, r3, #4
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e44:	f003 0304 	and.w	r3, r3, #4
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d010      	beq.n	8005e6e <UART_RxISR_16BIT_FIFOEN+0x10a>
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00b      	beq.n	8005e6e <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2204      	movs	r2, #4
 8005e5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e64:	f043 0202 	orr.w	r2, r3, #2
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d006      	beq.n	8005e86 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f7ff f857 	bl	8004f2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d132      	bne.n	8005ef8 <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ea0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	6812      	ldr	r2, [r2, #0]
 8005eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005eb0:	f023 0301 	bic.w	r3, r3, #1
 8005eb4:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2220      	movs	r2, #32
 8005eba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d10f      	bne.n	8005eec <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 0210 	bic.w	r2, r2, #16
 8005eda:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7ff f82b 	bl	8004f40 <HAL_UARTEx_RxEventCallback>
 8005eea:	e002      	b.n	8005ef2 <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f7fb fc79 	bl	80017e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005ef8:	8afb      	ldrh	r3, [r7, #22]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d005      	beq.n	8005f0a <UART_RxISR_16BIT_FIFOEN+0x1a6>
 8005efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f00:	f003 0320 	and.w	r3, r3, #32
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f47f af4c 	bne.w	8005da2 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f10:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005f12:	89fb      	ldrh	r3, [r7, #14]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d021      	beq.n	8005f5c <UART_RxISR_16BIT_FIFOEN+0x1f8>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005f1e:	89fa      	ldrh	r2, [r7, #14]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d21b      	bcs.n	8005f5c <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	689a      	ldr	r2, [r3, #8]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005f32:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a0b      	ldr	r2, [pc, #44]	; (8005f64 <UART_RxISR_16BIT_FIFOEN+0x200>)
 8005f38:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f042 0220 	orr.w	r2, r2, #32
 8005f48:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f4a:	e007      	b.n	8005f5c <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	699a      	ldr	r2, [r3, #24]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f042 0208 	orr.w	r2, r2, #8
 8005f5a:	619a      	str	r2, [r3, #24]
}
 8005f5c:	bf00      	nop
 8005f5e:	3728      	adds	r7, #40	; 0x28
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	08005a89 	.word	0x08005a89

08005f68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d101      	bne.n	8005fba <HAL_UARTEx_DisableFifoMode+0x16>
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	e027      	b.n	800600a <HAL_UARTEx_DisableFifoMode+0x66>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2224      	movs	r2, #36	; 0x24
 8005fc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 0201 	bic.w	r2, r2, #1
 8005fe0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005fe8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b084      	sub	sp, #16
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
 800601e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006026:	2b01      	cmp	r3, #1
 8006028:	d101      	bne.n	800602e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800602a:	2302      	movs	r3, #2
 800602c:	e02d      	b.n	800608a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2224      	movs	r2, #36	; 0x24
 800603a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 0201 	bic.w	r2, r2, #1
 8006054:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 f850 	bl	8006110 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2220      	movs	r2, #32
 800607c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b084      	sub	sp, #16
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
 800609a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d101      	bne.n	80060aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80060a6:	2302      	movs	r3, #2
 80060a8:	e02d      	b.n	8006106 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2224      	movs	r2, #36	; 0x24
 80060b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f022 0201 	bic.w	r2, r2, #1
 80060d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	430a      	orrs	r2, r1
 80060e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f812 	bl	8006110 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2220      	movs	r2, #32
 80060f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
	...

08006110 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800611c:	2b00      	cmp	r3, #0
 800611e:	d108      	bne.n	8006132 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006130:	e031      	b.n	8006196 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006132:	2308      	movs	r3, #8
 8006134:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006136:	2308      	movs	r3, #8
 8006138:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	0e5b      	lsrs	r3, r3, #25
 8006142:	b2db      	uxtb	r3, r3
 8006144:	f003 0307 	and.w	r3, r3, #7
 8006148:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	0f5b      	lsrs	r3, r3, #29
 8006152:	b2db      	uxtb	r3, r3
 8006154:	f003 0307 	and.w	r3, r3, #7
 8006158:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800615a:	7bbb      	ldrb	r3, [r7, #14]
 800615c:	7b3a      	ldrb	r2, [r7, #12]
 800615e:	4911      	ldr	r1, [pc, #68]	; (80061a4 <UARTEx_SetNbDataToProcess+0x94>)
 8006160:	5c8a      	ldrb	r2, [r1, r2]
 8006162:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006166:	7b3a      	ldrb	r2, [r7, #12]
 8006168:	490f      	ldr	r1, [pc, #60]	; (80061a8 <UARTEx_SetNbDataToProcess+0x98>)
 800616a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800616c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006170:	b29a      	uxth	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006178:	7bfb      	ldrb	r3, [r7, #15]
 800617a:	7b7a      	ldrb	r2, [r7, #13]
 800617c:	4909      	ldr	r1, [pc, #36]	; (80061a4 <UARTEx_SetNbDataToProcess+0x94>)
 800617e:	5c8a      	ldrb	r2, [r1, r2]
 8006180:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006184:	7b7a      	ldrb	r2, [r7, #13]
 8006186:	4908      	ldr	r1, [pc, #32]	; (80061a8 <UARTEx_SetNbDataToProcess+0x98>)
 8006188:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800618a:	fb93 f3f2 	sdiv	r3, r3, r2
 800618e:	b29a      	uxth	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006196:	bf00      	nop
 8006198:	3714      	adds	r7, #20
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	0800a530 	.word	0x0800a530
 80061a8:	0800a538 	.word	0x0800a538

080061ac <atof>:
 80061ac:	2100      	movs	r1, #0
 80061ae:	f001 bb55 	b.w	800785c <strtod>

080061b2 <atoi>:
 80061b2:	220a      	movs	r2, #10
 80061b4:	2100      	movs	r1, #0
 80061b6:	f001 bbe1 	b.w	800797c <strtol>
	...

080061bc <__errno>:
 80061bc:	4b01      	ldr	r3, [pc, #4]	; (80061c4 <__errno+0x8>)
 80061be:	6818      	ldr	r0, [r3, #0]
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	20000018 	.word	0x20000018

080061c8 <__libc_init_array>:
 80061c8:	b570      	push	{r4, r5, r6, lr}
 80061ca:	4d0d      	ldr	r5, [pc, #52]	; (8006200 <__libc_init_array+0x38>)
 80061cc:	4c0d      	ldr	r4, [pc, #52]	; (8006204 <__libc_init_array+0x3c>)
 80061ce:	1b64      	subs	r4, r4, r5
 80061d0:	10a4      	asrs	r4, r4, #2
 80061d2:	2600      	movs	r6, #0
 80061d4:	42a6      	cmp	r6, r4
 80061d6:	d109      	bne.n	80061ec <__libc_init_array+0x24>
 80061d8:	4d0b      	ldr	r5, [pc, #44]	; (8006208 <__libc_init_array+0x40>)
 80061da:	4c0c      	ldr	r4, [pc, #48]	; (800620c <__libc_init_array+0x44>)
 80061dc:	f004 f902 	bl	800a3e4 <_init>
 80061e0:	1b64      	subs	r4, r4, r5
 80061e2:	10a4      	asrs	r4, r4, #2
 80061e4:	2600      	movs	r6, #0
 80061e6:	42a6      	cmp	r6, r4
 80061e8:	d105      	bne.n	80061f6 <__libc_init_array+0x2e>
 80061ea:	bd70      	pop	{r4, r5, r6, pc}
 80061ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80061f0:	4798      	blx	r3
 80061f2:	3601      	adds	r6, #1
 80061f4:	e7ee      	b.n	80061d4 <__libc_init_array+0xc>
 80061f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80061fa:	4798      	blx	r3
 80061fc:	3601      	adds	r6, #1
 80061fe:	e7f2      	b.n	80061e6 <__libc_init_array+0x1e>
 8006200:	0800a9f4 	.word	0x0800a9f4
 8006204:	0800a9f4 	.word	0x0800a9f4
 8006208:	0800a9f4 	.word	0x0800a9f4
 800620c:	0800a9f8 	.word	0x0800a9f8

08006210 <memset>:
 8006210:	4402      	add	r2, r0
 8006212:	4603      	mov	r3, r0
 8006214:	4293      	cmp	r3, r2
 8006216:	d100      	bne.n	800621a <memset+0xa>
 8006218:	4770      	bx	lr
 800621a:	f803 1b01 	strb.w	r1, [r3], #1
 800621e:	e7f9      	b.n	8006214 <memset+0x4>

08006220 <__cvt>:
 8006220:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006224:	ec55 4b10 	vmov	r4, r5, d0
 8006228:	2d00      	cmp	r5, #0
 800622a:	460e      	mov	r6, r1
 800622c:	4619      	mov	r1, r3
 800622e:	462b      	mov	r3, r5
 8006230:	bfbb      	ittet	lt
 8006232:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006236:	461d      	movlt	r5, r3
 8006238:	2300      	movge	r3, #0
 800623a:	232d      	movlt	r3, #45	; 0x2d
 800623c:	700b      	strb	r3, [r1, #0]
 800623e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006240:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006244:	4691      	mov	r9, r2
 8006246:	f023 0820 	bic.w	r8, r3, #32
 800624a:	bfbc      	itt	lt
 800624c:	4622      	movlt	r2, r4
 800624e:	4614      	movlt	r4, r2
 8006250:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006254:	d005      	beq.n	8006262 <__cvt+0x42>
 8006256:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800625a:	d100      	bne.n	800625e <__cvt+0x3e>
 800625c:	3601      	adds	r6, #1
 800625e:	2102      	movs	r1, #2
 8006260:	e000      	b.n	8006264 <__cvt+0x44>
 8006262:	2103      	movs	r1, #3
 8006264:	ab03      	add	r3, sp, #12
 8006266:	9301      	str	r3, [sp, #4]
 8006268:	ab02      	add	r3, sp, #8
 800626a:	9300      	str	r3, [sp, #0]
 800626c:	ec45 4b10 	vmov	d0, r4, r5
 8006270:	4653      	mov	r3, sl
 8006272:	4632      	mov	r2, r6
 8006274:	f001 fcd8 	bl	8007c28 <_dtoa_r>
 8006278:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800627c:	4607      	mov	r7, r0
 800627e:	d102      	bne.n	8006286 <__cvt+0x66>
 8006280:	f019 0f01 	tst.w	r9, #1
 8006284:	d022      	beq.n	80062cc <__cvt+0xac>
 8006286:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800628a:	eb07 0906 	add.w	r9, r7, r6
 800628e:	d110      	bne.n	80062b2 <__cvt+0x92>
 8006290:	783b      	ldrb	r3, [r7, #0]
 8006292:	2b30      	cmp	r3, #48	; 0x30
 8006294:	d10a      	bne.n	80062ac <__cvt+0x8c>
 8006296:	2200      	movs	r2, #0
 8006298:	2300      	movs	r3, #0
 800629a:	4620      	mov	r0, r4
 800629c:	4629      	mov	r1, r5
 800629e:	f7fa fc3b 	bl	8000b18 <__aeabi_dcmpeq>
 80062a2:	b918      	cbnz	r0, 80062ac <__cvt+0x8c>
 80062a4:	f1c6 0601 	rsb	r6, r6, #1
 80062a8:	f8ca 6000 	str.w	r6, [sl]
 80062ac:	f8da 3000 	ldr.w	r3, [sl]
 80062b0:	4499      	add	r9, r3
 80062b2:	2200      	movs	r2, #0
 80062b4:	2300      	movs	r3, #0
 80062b6:	4620      	mov	r0, r4
 80062b8:	4629      	mov	r1, r5
 80062ba:	f7fa fc2d 	bl	8000b18 <__aeabi_dcmpeq>
 80062be:	b108      	cbz	r0, 80062c4 <__cvt+0xa4>
 80062c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80062c4:	2230      	movs	r2, #48	; 0x30
 80062c6:	9b03      	ldr	r3, [sp, #12]
 80062c8:	454b      	cmp	r3, r9
 80062ca:	d307      	bcc.n	80062dc <__cvt+0xbc>
 80062cc:	9b03      	ldr	r3, [sp, #12]
 80062ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062d0:	1bdb      	subs	r3, r3, r7
 80062d2:	4638      	mov	r0, r7
 80062d4:	6013      	str	r3, [r2, #0]
 80062d6:	b004      	add	sp, #16
 80062d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062dc:	1c59      	adds	r1, r3, #1
 80062de:	9103      	str	r1, [sp, #12]
 80062e0:	701a      	strb	r2, [r3, #0]
 80062e2:	e7f0      	b.n	80062c6 <__cvt+0xa6>

080062e4 <__exponent>:
 80062e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062e6:	4603      	mov	r3, r0
 80062e8:	2900      	cmp	r1, #0
 80062ea:	bfb8      	it	lt
 80062ec:	4249      	neglt	r1, r1
 80062ee:	f803 2b02 	strb.w	r2, [r3], #2
 80062f2:	bfb4      	ite	lt
 80062f4:	222d      	movlt	r2, #45	; 0x2d
 80062f6:	222b      	movge	r2, #43	; 0x2b
 80062f8:	2909      	cmp	r1, #9
 80062fa:	7042      	strb	r2, [r0, #1]
 80062fc:	dd2a      	ble.n	8006354 <__exponent+0x70>
 80062fe:	f10d 0407 	add.w	r4, sp, #7
 8006302:	46a4      	mov	ip, r4
 8006304:	270a      	movs	r7, #10
 8006306:	46a6      	mov	lr, r4
 8006308:	460a      	mov	r2, r1
 800630a:	fb91 f6f7 	sdiv	r6, r1, r7
 800630e:	fb07 1516 	mls	r5, r7, r6, r1
 8006312:	3530      	adds	r5, #48	; 0x30
 8006314:	2a63      	cmp	r2, #99	; 0x63
 8006316:	f104 34ff 	add.w	r4, r4, #4294967295
 800631a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800631e:	4631      	mov	r1, r6
 8006320:	dcf1      	bgt.n	8006306 <__exponent+0x22>
 8006322:	3130      	adds	r1, #48	; 0x30
 8006324:	f1ae 0502 	sub.w	r5, lr, #2
 8006328:	f804 1c01 	strb.w	r1, [r4, #-1]
 800632c:	1c44      	adds	r4, r0, #1
 800632e:	4629      	mov	r1, r5
 8006330:	4561      	cmp	r1, ip
 8006332:	d30a      	bcc.n	800634a <__exponent+0x66>
 8006334:	f10d 0209 	add.w	r2, sp, #9
 8006338:	eba2 020e 	sub.w	r2, r2, lr
 800633c:	4565      	cmp	r5, ip
 800633e:	bf88      	it	hi
 8006340:	2200      	movhi	r2, #0
 8006342:	4413      	add	r3, r2
 8006344:	1a18      	subs	r0, r3, r0
 8006346:	b003      	add	sp, #12
 8006348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800634a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800634e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006352:	e7ed      	b.n	8006330 <__exponent+0x4c>
 8006354:	2330      	movs	r3, #48	; 0x30
 8006356:	3130      	adds	r1, #48	; 0x30
 8006358:	7083      	strb	r3, [r0, #2]
 800635a:	70c1      	strb	r1, [r0, #3]
 800635c:	1d03      	adds	r3, r0, #4
 800635e:	e7f1      	b.n	8006344 <__exponent+0x60>

08006360 <_printf_float>:
 8006360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006364:	ed2d 8b02 	vpush	{d8}
 8006368:	b08d      	sub	sp, #52	; 0x34
 800636a:	460c      	mov	r4, r1
 800636c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006370:	4616      	mov	r6, r2
 8006372:	461f      	mov	r7, r3
 8006374:	4605      	mov	r5, r0
 8006376:	f002 ff69 	bl	800924c <_localeconv_r>
 800637a:	f8d0 a000 	ldr.w	sl, [r0]
 800637e:	4650      	mov	r0, sl
 8006380:	f7f9 ff4e 	bl	8000220 <strlen>
 8006384:	2300      	movs	r3, #0
 8006386:	930a      	str	r3, [sp, #40]	; 0x28
 8006388:	6823      	ldr	r3, [r4, #0]
 800638a:	9305      	str	r3, [sp, #20]
 800638c:	f8d8 3000 	ldr.w	r3, [r8]
 8006390:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006394:	3307      	adds	r3, #7
 8006396:	f023 0307 	bic.w	r3, r3, #7
 800639a:	f103 0208 	add.w	r2, r3, #8
 800639e:	f8c8 2000 	str.w	r2, [r8]
 80063a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80063aa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80063ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80063b2:	9307      	str	r3, [sp, #28]
 80063b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80063b8:	ee08 0a10 	vmov	s16, r0
 80063bc:	4b9f      	ldr	r3, [pc, #636]	; (800663c <_printf_float+0x2dc>)
 80063be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063c2:	f04f 32ff 	mov.w	r2, #4294967295
 80063c6:	f7fa fbd9 	bl	8000b7c <__aeabi_dcmpun>
 80063ca:	bb88      	cbnz	r0, 8006430 <_printf_float+0xd0>
 80063cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063d0:	4b9a      	ldr	r3, [pc, #616]	; (800663c <_printf_float+0x2dc>)
 80063d2:	f04f 32ff 	mov.w	r2, #4294967295
 80063d6:	f7fa fbb3 	bl	8000b40 <__aeabi_dcmple>
 80063da:	bb48      	cbnz	r0, 8006430 <_printf_float+0xd0>
 80063dc:	2200      	movs	r2, #0
 80063de:	2300      	movs	r3, #0
 80063e0:	4640      	mov	r0, r8
 80063e2:	4649      	mov	r1, r9
 80063e4:	f7fa fba2 	bl	8000b2c <__aeabi_dcmplt>
 80063e8:	b110      	cbz	r0, 80063f0 <_printf_float+0x90>
 80063ea:	232d      	movs	r3, #45	; 0x2d
 80063ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063f0:	4b93      	ldr	r3, [pc, #588]	; (8006640 <_printf_float+0x2e0>)
 80063f2:	4894      	ldr	r0, [pc, #592]	; (8006644 <_printf_float+0x2e4>)
 80063f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80063f8:	bf94      	ite	ls
 80063fa:	4698      	movls	r8, r3
 80063fc:	4680      	movhi	r8, r0
 80063fe:	2303      	movs	r3, #3
 8006400:	6123      	str	r3, [r4, #16]
 8006402:	9b05      	ldr	r3, [sp, #20]
 8006404:	f023 0204 	bic.w	r2, r3, #4
 8006408:	6022      	str	r2, [r4, #0]
 800640a:	f04f 0900 	mov.w	r9, #0
 800640e:	9700      	str	r7, [sp, #0]
 8006410:	4633      	mov	r3, r6
 8006412:	aa0b      	add	r2, sp, #44	; 0x2c
 8006414:	4621      	mov	r1, r4
 8006416:	4628      	mov	r0, r5
 8006418:	f000 f9d8 	bl	80067cc <_printf_common>
 800641c:	3001      	adds	r0, #1
 800641e:	f040 8090 	bne.w	8006542 <_printf_float+0x1e2>
 8006422:	f04f 30ff 	mov.w	r0, #4294967295
 8006426:	b00d      	add	sp, #52	; 0x34
 8006428:	ecbd 8b02 	vpop	{d8}
 800642c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006430:	4642      	mov	r2, r8
 8006432:	464b      	mov	r3, r9
 8006434:	4640      	mov	r0, r8
 8006436:	4649      	mov	r1, r9
 8006438:	f7fa fba0 	bl	8000b7c <__aeabi_dcmpun>
 800643c:	b140      	cbz	r0, 8006450 <_printf_float+0xf0>
 800643e:	464b      	mov	r3, r9
 8006440:	2b00      	cmp	r3, #0
 8006442:	bfbc      	itt	lt
 8006444:	232d      	movlt	r3, #45	; 0x2d
 8006446:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800644a:	487f      	ldr	r0, [pc, #508]	; (8006648 <_printf_float+0x2e8>)
 800644c:	4b7f      	ldr	r3, [pc, #508]	; (800664c <_printf_float+0x2ec>)
 800644e:	e7d1      	b.n	80063f4 <_printf_float+0x94>
 8006450:	6863      	ldr	r3, [r4, #4]
 8006452:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006456:	9206      	str	r2, [sp, #24]
 8006458:	1c5a      	adds	r2, r3, #1
 800645a:	d13f      	bne.n	80064dc <_printf_float+0x17c>
 800645c:	2306      	movs	r3, #6
 800645e:	6063      	str	r3, [r4, #4]
 8006460:	9b05      	ldr	r3, [sp, #20]
 8006462:	6861      	ldr	r1, [r4, #4]
 8006464:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006468:	2300      	movs	r3, #0
 800646a:	9303      	str	r3, [sp, #12]
 800646c:	ab0a      	add	r3, sp, #40	; 0x28
 800646e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006472:	ab09      	add	r3, sp, #36	; 0x24
 8006474:	ec49 8b10 	vmov	d0, r8, r9
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	6022      	str	r2, [r4, #0]
 800647c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006480:	4628      	mov	r0, r5
 8006482:	f7ff fecd 	bl	8006220 <__cvt>
 8006486:	9b06      	ldr	r3, [sp, #24]
 8006488:	9909      	ldr	r1, [sp, #36]	; 0x24
 800648a:	2b47      	cmp	r3, #71	; 0x47
 800648c:	4680      	mov	r8, r0
 800648e:	d108      	bne.n	80064a2 <_printf_float+0x142>
 8006490:	1cc8      	adds	r0, r1, #3
 8006492:	db02      	blt.n	800649a <_printf_float+0x13a>
 8006494:	6863      	ldr	r3, [r4, #4]
 8006496:	4299      	cmp	r1, r3
 8006498:	dd41      	ble.n	800651e <_printf_float+0x1be>
 800649a:	f1ab 0b02 	sub.w	fp, fp, #2
 800649e:	fa5f fb8b 	uxtb.w	fp, fp
 80064a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80064a6:	d820      	bhi.n	80064ea <_printf_float+0x18a>
 80064a8:	3901      	subs	r1, #1
 80064aa:	465a      	mov	r2, fp
 80064ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80064b0:	9109      	str	r1, [sp, #36]	; 0x24
 80064b2:	f7ff ff17 	bl	80062e4 <__exponent>
 80064b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064b8:	1813      	adds	r3, r2, r0
 80064ba:	2a01      	cmp	r2, #1
 80064bc:	4681      	mov	r9, r0
 80064be:	6123      	str	r3, [r4, #16]
 80064c0:	dc02      	bgt.n	80064c8 <_printf_float+0x168>
 80064c2:	6822      	ldr	r2, [r4, #0]
 80064c4:	07d2      	lsls	r2, r2, #31
 80064c6:	d501      	bpl.n	80064cc <_printf_float+0x16c>
 80064c8:	3301      	adds	r3, #1
 80064ca:	6123      	str	r3, [r4, #16]
 80064cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d09c      	beq.n	800640e <_printf_float+0xae>
 80064d4:	232d      	movs	r3, #45	; 0x2d
 80064d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064da:	e798      	b.n	800640e <_printf_float+0xae>
 80064dc:	9a06      	ldr	r2, [sp, #24]
 80064de:	2a47      	cmp	r2, #71	; 0x47
 80064e0:	d1be      	bne.n	8006460 <_printf_float+0x100>
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1bc      	bne.n	8006460 <_printf_float+0x100>
 80064e6:	2301      	movs	r3, #1
 80064e8:	e7b9      	b.n	800645e <_printf_float+0xfe>
 80064ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80064ee:	d118      	bne.n	8006522 <_printf_float+0x1c2>
 80064f0:	2900      	cmp	r1, #0
 80064f2:	6863      	ldr	r3, [r4, #4]
 80064f4:	dd0b      	ble.n	800650e <_printf_float+0x1ae>
 80064f6:	6121      	str	r1, [r4, #16]
 80064f8:	b913      	cbnz	r3, 8006500 <_printf_float+0x1a0>
 80064fa:	6822      	ldr	r2, [r4, #0]
 80064fc:	07d0      	lsls	r0, r2, #31
 80064fe:	d502      	bpl.n	8006506 <_printf_float+0x1a6>
 8006500:	3301      	adds	r3, #1
 8006502:	440b      	add	r3, r1
 8006504:	6123      	str	r3, [r4, #16]
 8006506:	65a1      	str	r1, [r4, #88]	; 0x58
 8006508:	f04f 0900 	mov.w	r9, #0
 800650c:	e7de      	b.n	80064cc <_printf_float+0x16c>
 800650e:	b913      	cbnz	r3, 8006516 <_printf_float+0x1b6>
 8006510:	6822      	ldr	r2, [r4, #0]
 8006512:	07d2      	lsls	r2, r2, #31
 8006514:	d501      	bpl.n	800651a <_printf_float+0x1ba>
 8006516:	3302      	adds	r3, #2
 8006518:	e7f4      	b.n	8006504 <_printf_float+0x1a4>
 800651a:	2301      	movs	r3, #1
 800651c:	e7f2      	b.n	8006504 <_printf_float+0x1a4>
 800651e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006524:	4299      	cmp	r1, r3
 8006526:	db05      	blt.n	8006534 <_printf_float+0x1d4>
 8006528:	6823      	ldr	r3, [r4, #0]
 800652a:	6121      	str	r1, [r4, #16]
 800652c:	07d8      	lsls	r0, r3, #31
 800652e:	d5ea      	bpl.n	8006506 <_printf_float+0x1a6>
 8006530:	1c4b      	adds	r3, r1, #1
 8006532:	e7e7      	b.n	8006504 <_printf_float+0x1a4>
 8006534:	2900      	cmp	r1, #0
 8006536:	bfd4      	ite	le
 8006538:	f1c1 0202 	rsble	r2, r1, #2
 800653c:	2201      	movgt	r2, #1
 800653e:	4413      	add	r3, r2
 8006540:	e7e0      	b.n	8006504 <_printf_float+0x1a4>
 8006542:	6823      	ldr	r3, [r4, #0]
 8006544:	055a      	lsls	r2, r3, #21
 8006546:	d407      	bmi.n	8006558 <_printf_float+0x1f8>
 8006548:	6923      	ldr	r3, [r4, #16]
 800654a:	4642      	mov	r2, r8
 800654c:	4631      	mov	r1, r6
 800654e:	4628      	mov	r0, r5
 8006550:	47b8      	blx	r7
 8006552:	3001      	adds	r0, #1
 8006554:	d12c      	bne.n	80065b0 <_printf_float+0x250>
 8006556:	e764      	b.n	8006422 <_printf_float+0xc2>
 8006558:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800655c:	f240 80e0 	bls.w	8006720 <_printf_float+0x3c0>
 8006560:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006564:	2200      	movs	r2, #0
 8006566:	2300      	movs	r3, #0
 8006568:	f7fa fad6 	bl	8000b18 <__aeabi_dcmpeq>
 800656c:	2800      	cmp	r0, #0
 800656e:	d034      	beq.n	80065da <_printf_float+0x27a>
 8006570:	4a37      	ldr	r2, [pc, #220]	; (8006650 <_printf_float+0x2f0>)
 8006572:	2301      	movs	r3, #1
 8006574:	4631      	mov	r1, r6
 8006576:	4628      	mov	r0, r5
 8006578:	47b8      	blx	r7
 800657a:	3001      	adds	r0, #1
 800657c:	f43f af51 	beq.w	8006422 <_printf_float+0xc2>
 8006580:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006584:	429a      	cmp	r2, r3
 8006586:	db02      	blt.n	800658e <_printf_float+0x22e>
 8006588:	6823      	ldr	r3, [r4, #0]
 800658a:	07d8      	lsls	r0, r3, #31
 800658c:	d510      	bpl.n	80065b0 <_printf_float+0x250>
 800658e:	ee18 3a10 	vmov	r3, s16
 8006592:	4652      	mov	r2, sl
 8006594:	4631      	mov	r1, r6
 8006596:	4628      	mov	r0, r5
 8006598:	47b8      	blx	r7
 800659a:	3001      	adds	r0, #1
 800659c:	f43f af41 	beq.w	8006422 <_printf_float+0xc2>
 80065a0:	f04f 0800 	mov.w	r8, #0
 80065a4:	f104 091a 	add.w	r9, r4, #26
 80065a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065aa:	3b01      	subs	r3, #1
 80065ac:	4543      	cmp	r3, r8
 80065ae:	dc09      	bgt.n	80065c4 <_printf_float+0x264>
 80065b0:	6823      	ldr	r3, [r4, #0]
 80065b2:	079b      	lsls	r3, r3, #30
 80065b4:	f100 8105 	bmi.w	80067c2 <_printf_float+0x462>
 80065b8:	68e0      	ldr	r0, [r4, #12]
 80065ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065bc:	4298      	cmp	r0, r3
 80065be:	bfb8      	it	lt
 80065c0:	4618      	movlt	r0, r3
 80065c2:	e730      	b.n	8006426 <_printf_float+0xc6>
 80065c4:	2301      	movs	r3, #1
 80065c6:	464a      	mov	r2, r9
 80065c8:	4631      	mov	r1, r6
 80065ca:	4628      	mov	r0, r5
 80065cc:	47b8      	blx	r7
 80065ce:	3001      	adds	r0, #1
 80065d0:	f43f af27 	beq.w	8006422 <_printf_float+0xc2>
 80065d4:	f108 0801 	add.w	r8, r8, #1
 80065d8:	e7e6      	b.n	80065a8 <_printf_float+0x248>
 80065da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065dc:	2b00      	cmp	r3, #0
 80065de:	dc39      	bgt.n	8006654 <_printf_float+0x2f4>
 80065e0:	4a1b      	ldr	r2, [pc, #108]	; (8006650 <_printf_float+0x2f0>)
 80065e2:	2301      	movs	r3, #1
 80065e4:	4631      	mov	r1, r6
 80065e6:	4628      	mov	r0, r5
 80065e8:	47b8      	blx	r7
 80065ea:	3001      	adds	r0, #1
 80065ec:	f43f af19 	beq.w	8006422 <_printf_float+0xc2>
 80065f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065f4:	4313      	orrs	r3, r2
 80065f6:	d102      	bne.n	80065fe <_printf_float+0x29e>
 80065f8:	6823      	ldr	r3, [r4, #0]
 80065fa:	07d9      	lsls	r1, r3, #31
 80065fc:	d5d8      	bpl.n	80065b0 <_printf_float+0x250>
 80065fe:	ee18 3a10 	vmov	r3, s16
 8006602:	4652      	mov	r2, sl
 8006604:	4631      	mov	r1, r6
 8006606:	4628      	mov	r0, r5
 8006608:	47b8      	blx	r7
 800660a:	3001      	adds	r0, #1
 800660c:	f43f af09 	beq.w	8006422 <_printf_float+0xc2>
 8006610:	f04f 0900 	mov.w	r9, #0
 8006614:	f104 0a1a 	add.w	sl, r4, #26
 8006618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800661a:	425b      	negs	r3, r3
 800661c:	454b      	cmp	r3, r9
 800661e:	dc01      	bgt.n	8006624 <_printf_float+0x2c4>
 8006620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006622:	e792      	b.n	800654a <_printf_float+0x1ea>
 8006624:	2301      	movs	r3, #1
 8006626:	4652      	mov	r2, sl
 8006628:	4631      	mov	r1, r6
 800662a:	4628      	mov	r0, r5
 800662c:	47b8      	blx	r7
 800662e:	3001      	adds	r0, #1
 8006630:	f43f aef7 	beq.w	8006422 <_printf_float+0xc2>
 8006634:	f109 0901 	add.w	r9, r9, #1
 8006638:	e7ee      	b.n	8006618 <_printf_float+0x2b8>
 800663a:	bf00      	nop
 800663c:	7fefffff 	.word	0x7fefffff
 8006640:	0800a544 	.word	0x0800a544
 8006644:	0800a548 	.word	0x0800a548
 8006648:	0800a550 	.word	0x0800a550
 800664c:	0800a54c 	.word	0x0800a54c
 8006650:	0800a554 	.word	0x0800a554
 8006654:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006656:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006658:	429a      	cmp	r2, r3
 800665a:	bfa8      	it	ge
 800665c:	461a      	movge	r2, r3
 800665e:	2a00      	cmp	r2, #0
 8006660:	4691      	mov	r9, r2
 8006662:	dc37      	bgt.n	80066d4 <_printf_float+0x374>
 8006664:	f04f 0b00 	mov.w	fp, #0
 8006668:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800666c:	f104 021a 	add.w	r2, r4, #26
 8006670:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006672:	9305      	str	r3, [sp, #20]
 8006674:	eba3 0309 	sub.w	r3, r3, r9
 8006678:	455b      	cmp	r3, fp
 800667a:	dc33      	bgt.n	80066e4 <_printf_float+0x384>
 800667c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006680:	429a      	cmp	r2, r3
 8006682:	db3b      	blt.n	80066fc <_printf_float+0x39c>
 8006684:	6823      	ldr	r3, [r4, #0]
 8006686:	07da      	lsls	r2, r3, #31
 8006688:	d438      	bmi.n	80066fc <_printf_float+0x39c>
 800668a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800668c:	9b05      	ldr	r3, [sp, #20]
 800668e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	eba2 0901 	sub.w	r9, r2, r1
 8006696:	4599      	cmp	r9, r3
 8006698:	bfa8      	it	ge
 800669a:	4699      	movge	r9, r3
 800669c:	f1b9 0f00 	cmp.w	r9, #0
 80066a0:	dc35      	bgt.n	800670e <_printf_float+0x3ae>
 80066a2:	f04f 0800 	mov.w	r8, #0
 80066a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066aa:	f104 0a1a 	add.w	sl, r4, #26
 80066ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066b2:	1a9b      	subs	r3, r3, r2
 80066b4:	eba3 0309 	sub.w	r3, r3, r9
 80066b8:	4543      	cmp	r3, r8
 80066ba:	f77f af79 	ble.w	80065b0 <_printf_float+0x250>
 80066be:	2301      	movs	r3, #1
 80066c0:	4652      	mov	r2, sl
 80066c2:	4631      	mov	r1, r6
 80066c4:	4628      	mov	r0, r5
 80066c6:	47b8      	blx	r7
 80066c8:	3001      	adds	r0, #1
 80066ca:	f43f aeaa 	beq.w	8006422 <_printf_float+0xc2>
 80066ce:	f108 0801 	add.w	r8, r8, #1
 80066d2:	e7ec      	b.n	80066ae <_printf_float+0x34e>
 80066d4:	4613      	mov	r3, r2
 80066d6:	4631      	mov	r1, r6
 80066d8:	4642      	mov	r2, r8
 80066da:	4628      	mov	r0, r5
 80066dc:	47b8      	blx	r7
 80066de:	3001      	adds	r0, #1
 80066e0:	d1c0      	bne.n	8006664 <_printf_float+0x304>
 80066e2:	e69e      	b.n	8006422 <_printf_float+0xc2>
 80066e4:	2301      	movs	r3, #1
 80066e6:	4631      	mov	r1, r6
 80066e8:	4628      	mov	r0, r5
 80066ea:	9205      	str	r2, [sp, #20]
 80066ec:	47b8      	blx	r7
 80066ee:	3001      	adds	r0, #1
 80066f0:	f43f ae97 	beq.w	8006422 <_printf_float+0xc2>
 80066f4:	9a05      	ldr	r2, [sp, #20]
 80066f6:	f10b 0b01 	add.w	fp, fp, #1
 80066fa:	e7b9      	b.n	8006670 <_printf_float+0x310>
 80066fc:	ee18 3a10 	vmov	r3, s16
 8006700:	4652      	mov	r2, sl
 8006702:	4631      	mov	r1, r6
 8006704:	4628      	mov	r0, r5
 8006706:	47b8      	blx	r7
 8006708:	3001      	adds	r0, #1
 800670a:	d1be      	bne.n	800668a <_printf_float+0x32a>
 800670c:	e689      	b.n	8006422 <_printf_float+0xc2>
 800670e:	9a05      	ldr	r2, [sp, #20]
 8006710:	464b      	mov	r3, r9
 8006712:	4442      	add	r2, r8
 8006714:	4631      	mov	r1, r6
 8006716:	4628      	mov	r0, r5
 8006718:	47b8      	blx	r7
 800671a:	3001      	adds	r0, #1
 800671c:	d1c1      	bne.n	80066a2 <_printf_float+0x342>
 800671e:	e680      	b.n	8006422 <_printf_float+0xc2>
 8006720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006722:	2a01      	cmp	r2, #1
 8006724:	dc01      	bgt.n	800672a <_printf_float+0x3ca>
 8006726:	07db      	lsls	r3, r3, #31
 8006728:	d538      	bpl.n	800679c <_printf_float+0x43c>
 800672a:	2301      	movs	r3, #1
 800672c:	4642      	mov	r2, r8
 800672e:	4631      	mov	r1, r6
 8006730:	4628      	mov	r0, r5
 8006732:	47b8      	blx	r7
 8006734:	3001      	adds	r0, #1
 8006736:	f43f ae74 	beq.w	8006422 <_printf_float+0xc2>
 800673a:	ee18 3a10 	vmov	r3, s16
 800673e:	4652      	mov	r2, sl
 8006740:	4631      	mov	r1, r6
 8006742:	4628      	mov	r0, r5
 8006744:	47b8      	blx	r7
 8006746:	3001      	adds	r0, #1
 8006748:	f43f ae6b 	beq.w	8006422 <_printf_float+0xc2>
 800674c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006750:	2200      	movs	r2, #0
 8006752:	2300      	movs	r3, #0
 8006754:	f7fa f9e0 	bl	8000b18 <__aeabi_dcmpeq>
 8006758:	b9d8      	cbnz	r0, 8006792 <_printf_float+0x432>
 800675a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800675c:	f108 0201 	add.w	r2, r8, #1
 8006760:	3b01      	subs	r3, #1
 8006762:	4631      	mov	r1, r6
 8006764:	4628      	mov	r0, r5
 8006766:	47b8      	blx	r7
 8006768:	3001      	adds	r0, #1
 800676a:	d10e      	bne.n	800678a <_printf_float+0x42a>
 800676c:	e659      	b.n	8006422 <_printf_float+0xc2>
 800676e:	2301      	movs	r3, #1
 8006770:	4652      	mov	r2, sl
 8006772:	4631      	mov	r1, r6
 8006774:	4628      	mov	r0, r5
 8006776:	47b8      	blx	r7
 8006778:	3001      	adds	r0, #1
 800677a:	f43f ae52 	beq.w	8006422 <_printf_float+0xc2>
 800677e:	f108 0801 	add.w	r8, r8, #1
 8006782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006784:	3b01      	subs	r3, #1
 8006786:	4543      	cmp	r3, r8
 8006788:	dcf1      	bgt.n	800676e <_printf_float+0x40e>
 800678a:	464b      	mov	r3, r9
 800678c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006790:	e6dc      	b.n	800654c <_printf_float+0x1ec>
 8006792:	f04f 0800 	mov.w	r8, #0
 8006796:	f104 0a1a 	add.w	sl, r4, #26
 800679a:	e7f2      	b.n	8006782 <_printf_float+0x422>
 800679c:	2301      	movs	r3, #1
 800679e:	4642      	mov	r2, r8
 80067a0:	e7df      	b.n	8006762 <_printf_float+0x402>
 80067a2:	2301      	movs	r3, #1
 80067a4:	464a      	mov	r2, r9
 80067a6:	4631      	mov	r1, r6
 80067a8:	4628      	mov	r0, r5
 80067aa:	47b8      	blx	r7
 80067ac:	3001      	adds	r0, #1
 80067ae:	f43f ae38 	beq.w	8006422 <_printf_float+0xc2>
 80067b2:	f108 0801 	add.w	r8, r8, #1
 80067b6:	68e3      	ldr	r3, [r4, #12]
 80067b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80067ba:	1a5b      	subs	r3, r3, r1
 80067bc:	4543      	cmp	r3, r8
 80067be:	dcf0      	bgt.n	80067a2 <_printf_float+0x442>
 80067c0:	e6fa      	b.n	80065b8 <_printf_float+0x258>
 80067c2:	f04f 0800 	mov.w	r8, #0
 80067c6:	f104 0919 	add.w	r9, r4, #25
 80067ca:	e7f4      	b.n	80067b6 <_printf_float+0x456>

080067cc <_printf_common>:
 80067cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d0:	4616      	mov	r6, r2
 80067d2:	4699      	mov	r9, r3
 80067d4:	688a      	ldr	r2, [r1, #8]
 80067d6:	690b      	ldr	r3, [r1, #16]
 80067d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067dc:	4293      	cmp	r3, r2
 80067de:	bfb8      	it	lt
 80067e0:	4613      	movlt	r3, r2
 80067e2:	6033      	str	r3, [r6, #0]
 80067e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067e8:	4607      	mov	r7, r0
 80067ea:	460c      	mov	r4, r1
 80067ec:	b10a      	cbz	r2, 80067f2 <_printf_common+0x26>
 80067ee:	3301      	adds	r3, #1
 80067f0:	6033      	str	r3, [r6, #0]
 80067f2:	6823      	ldr	r3, [r4, #0]
 80067f4:	0699      	lsls	r1, r3, #26
 80067f6:	bf42      	ittt	mi
 80067f8:	6833      	ldrmi	r3, [r6, #0]
 80067fa:	3302      	addmi	r3, #2
 80067fc:	6033      	strmi	r3, [r6, #0]
 80067fe:	6825      	ldr	r5, [r4, #0]
 8006800:	f015 0506 	ands.w	r5, r5, #6
 8006804:	d106      	bne.n	8006814 <_printf_common+0x48>
 8006806:	f104 0a19 	add.w	sl, r4, #25
 800680a:	68e3      	ldr	r3, [r4, #12]
 800680c:	6832      	ldr	r2, [r6, #0]
 800680e:	1a9b      	subs	r3, r3, r2
 8006810:	42ab      	cmp	r3, r5
 8006812:	dc26      	bgt.n	8006862 <_printf_common+0x96>
 8006814:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006818:	1e13      	subs	r3, r2, #0
 800681a:	6822      	ldr	r2, [r4, #0]
 800681c:	bf18      	it	ne
 800681e:	2301      	movne	r3, #1
 8006820:	0692      	lsls	r2, r2, #26
 8006822:	d42b      	bmi.n	800687c <_printf_common+0xb0>
 8006824:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006828:	4649      	mov	r1, r9
 800682a:	4638      	mov	r0, r7
 800682c:	47c0      	blx	r8
 800682e:	3001      	adds	r0, #1
 8006830:	d01e      	beq.n	8006870 <_printf_common+0xa4>
 8006832:	6823      	ldr	r3, [r4, #0]
 8006834:	68e5      	ldr	r5, [r4, #12]
 8006836:	6832      	ldr	r2, [r6, #0]
 8006838:	f003 0306 	and.w	r3, r3, #6
 800683c:	2b04      	cmp	r3, #4
 800683e:	bf08      	it	eq
 8006840:	1aad      	subeq	r5, r5, r2
 8006842:	68a3      	ldr	r3, [r4, #8]
 8006844:	6922      	ldr	r2, [r4, #16]
 8006846:	bf0c      	ite	eq
 8006848:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800684c:	2500      	movne	r5, #0
 800684e:	4293      	cmp	r3, r2
 8006850:	bfc4      	itt	gt
 8006852:	1a9b      	subgt	r3, r3, r2
 8006854:	18ed      	addgt	r5, r5, r3
 8006856:	2600      	movs	r6, #0
 8006858:	341a      	adds	r4, #26
 800685a:	42b5      	cmp	r5, r6
 800685c:	d11a      	bne.n	8006894 <_printf_common+0xc8>
 800685e:	2000      	movs	r0, #0
 8006860:	e008      	b.n	8006874 <_printf_common+0xa8>
 8006862:	2301      	movs	r3, #1
 8006864:	4652      	mov	r2, sl
 8006866:	4649      	mov	r1, r9
 8006868:	4638      	mov	r0, r7
 800686a:	47c0      	blx	r8
 800686c:	3001      	adds	r0, #1
 800686e:	d103      	bne.n	8006878 <_printf_common+0xac>
 8006870:	f04f 30ff 	mov.w	r0, #4294967295
 8006874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006878:	3501      	adds	r5, #1
 800687a:	e7c6      	b.n	800680a <_printf_common+0x3e>
 800687c:	18e1      	adds	r1, r4, r3
 800687e:	1c5a      	adds	r2, r3, #1
 8006880:	2030      	movs	r0, #48	; 0x30
 8006882:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006886:	4422      	add	r2, r4
 8006888:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800688c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006890:	3302      	adds	r3, #2
 8006892:	e7c7      	b.n	8006824 <_printf_common+0x58>
 8006894:	2301      	movs	r3, #1
 8006896:	4622      	mov	r2, r4
 8006898:	4649      	mov	r1, r9
 800689a:	4638      	mov	r0, r7
 800689c:	47c0      	blx	r8
 800689e:	3001      	adds	r0, #1
 80068a0:	d0e6      	beq.n	8006870 <_printf_common+0xa4>
 80068a2:	3601      	adds	r6, #1
 80068a4:	e7d9      	b.n	800685a <_printf_common+0x8e>
	...

080068a8 <_printf_i>:
 80068a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068ac:	460c      	mov	r4, r1
 80068ae:	4691      	mov	r9, r2
 80068b0:	7e27      	ldrb	r7, [r4, #24]
 80068b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80068b4:	2f78      	cmp	r7, #120	; 0x78
 80068b6:	4680      	mov	r8, r0
 80068b8:	469a      	mov	sl, r3
 80068ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068be:	d807      	bhi.n	80068d0 <_printf_i+0x28>
 80068c0:	2f62      	cmp	r7, #98	; 0x62
 80068c2:	d80a      	bhi.n	80068da <_printf_i+0x32>
 80068c4:	2f00      	cmp	r7, #0
 80068c6:	f000 80d8 	beq.w	8006a7a <_printf_i+0x1d2>
 80068ca:	2f58      	cmp	r7, #88	; 0x58
 80068cc:	f000 80a3 	beq.w	8006a16 <_printf_i+0x16e>
 80068d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80068d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068d8:	e03a      	b.n	8006950 <_printf_i+0xa8>
 80068da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068de:	2b15      	cmp	r3, #21
 80068e0:	d8f6      	bhi.n	80068d0 <_printf_i+0x28>
 80068e2:	a001      	add	r0, pc, #4	; (adr r0, 80068e8 <_printf_i+0x40>)
 80068e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80068e8:	08006941 	.word	0x08006941
 80068ec:	08006955 	.word	0x08006955
 80068f0:	080068d1 	.word	0x080068d1
 80068f4:	080068d1 	.word	0x080068d1
 80068f8:	080068d1 	.word	0x080068d1
 80068fc:	080068d1 	.word	0x080068d1
 8006900:	08006955 	.word	0x08006955
 8006904:	080068d1 	.word	0x080068d1
 8006908:	080068d1 	.word	0x080068d1
 800690c:	080068d1 	.word	0x080068d1
 8006910:	080068d1 	.word	0x080068d1
 8006914:	08006a61 	.word	0x08006a61
 8006918:	08006985 	.word	0x08006985
 800691c:	08006a43 	.word	0x08006a43
 8006920:	080068d1 	.word	0x080068d1
 8006924:	080068d1 	.word	0x080068d1
 8006928:	08006a83 	.word	0x08006a83
 800692c:	080068d1 	.word	0x080068d1
 8006930:	08006985 	.word	0x08006985
 8006934:	080068d1 	.word	0x080068d1
 8006938:	080068d1 	.word	0x080068d1
 800693c:	08006a4b 	.word	0x08006a4b
 8006940:	680b      	ldr	r3, [r1, #0]
 8006942:	1d1a      	adds	r2, r3, #4
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	600a      	str	r2, [r1, #0]
 8006948:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800694c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006950:	2301      	movs	r3, #1
 8006952:	e0a3      	b.n	8006a9c <_printf_i+0x1f4>
 8006954:	6825      	ldr	r5, [r4, #0]
 8006956:	6808      	ldr	r0, [r1, #0]
 8006958:	062e      	lsls	r6, r5, #24
 800695a:	f100 0304 	add.w	r3, r0, #4
 800695e:	d50a      	bpl.n	8006976 <_printf_i+0xce>
 8006960:	6805      	ldr	r5, [r0, #0]
 8006962:	600b      	str	r3, [r1, #0]
 8006964:	2d00      	cmp	r5, #0
 8006966:	da03      	bge.n	8006970 <_printf_i+0xc8>
 8006968:	232d      	movs	r3, #45	; 0x2d
 800696a:	426d      	negs	r5, r5
 800696c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006970:	485e      	ldr	r0, [pc, #376]	; (8006aec <_printf_i+0x244>)
 8006972:	230a      	movs	r3, #10
 8006974:	e019      	b.n	80069aa <_printf_i+0x102>
 8006976:	f015 0f40 	tst.w	r5, #64	; 0x40
 800697a:	6805      	ldr	r5, [r0, #0]
 800697c:	600b      	str	r3, [r1, #0]
 800697e:	bf18      	it	ne
 8006980:	b22d      	sxthne	r5, r5
 8006982:	e7ef      	b.n	8006964 <_printf_i+0xbc>
 8006984:	680b      	ldr	r3, [r1, #0]
 8006986:	6825      	ldr	r5, [r4, #0]
 8006988:	1d18      	adds	r0, r3, #4
 800698a:	6008      	str	r0, [r1, #0]
 800698c:	0628      	lsls	r0, r5, #24
 800698e:	d501      	bpl.n	8006994 <_printf_i+0xec>
 8006990:	681d      	ldr	r5, [r3, #0]
 8006992:	e002      	b.n	800699a <_printf_i+0xf2>
 8006994:	0669      	lsls	r1, r5, #25
 8006996:	d5fb      	bpl.n	8006990 <_printf_i+0xe8>
 8006998:	881d      	ldrh	r5, [r3, #0]
 800699a:	4854      	ldr	r0, [pc, #336]	; (8006aec <_printf_i+0x244>)
 800699c:	2f6f      	cmp	r7, #111	; 0x6f
 800699e:	bf0c      	ite	eq
 80069a0:	2308      	moveq	r3, #8
 80069a2:	230a      	movne	r3, #10
 80069a4:	2100      	movs	r1, #0
 80069a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069aa:	6866      	ldr	r6, [r4, #4]
 80069ac:	60a6      	str	r6, [r4, #8]
 80069ae:	2e00      	cmp	r6, #0
 80069b0:	bfa2      	ittt	ge
 80069b2:	6821      	ldrge	r1, [r4, #0]
 80069b4:	f021 0104 	bicge.w	r1, r1, #4
 80069b8:	6021      	strge	r1, [r4, #0]
 80069ba:	b90d      	cbnz	r5, 80069c0 <_printf_i+0x118>
 80069bc:	2e00      	cmp	r6, #0
 80069be:	d04d      	beq.n	8006a5c <_printf_i+0x1b4>
 80069c0:	4616      	mov	r6, r2
 80069c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80069c6:	fb03 5711 	mls	r7, r3, r1, r5
 80069ca:	5dc7      	ldrb	r7, [r0, r7]
 80069cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069d0:	462f      	mov	r7, r5
 80069d2:	42bb      	cmp	r3, r7
 80069d4:	460d      	mov	r5, r1
 80069d6:	d9f4      	bls.n	80069c2 <_printf_i+0x11a>
 80069d8:	2b08      	cmp	r3, #8
 80069da:	d10b      	bne.n	80069f4 <_printf_i+0x14c>
 80069dc:	6823      	ldr	r3, [r4, #0]
 80069de:	07df      	lsls	r7, r3, #31
 80069e0:	d508      	bpl.n	80069f4 <_printf_i+0x14c>
 80069e2:	6923      	ldr	r3, [r4, #16]
 80069e4:	6861      	ldr	r1, [r4, #4]
 80069e6:	4299      	cmp	r1, r3
 80069e8:	bfde      	ittt	le
 80069ea:	2330      	movle	r3, #48	; 0x30
 80069ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80069f4:	1b92      	subs	r2, r2, r6
 80069f6:	6122      	str	r2, [r4, #16]
 80069f8:	f8cd a000 	str.w	sl, [sp]
 80069fc:	464b      	mov	r3, r9
 80069fe:	aa03      	add	r2, sp, #12
 8006a00:	4621      	mov	r1, r4
 8006a02:	4640      	mov	r0, r8
 8006a04:	f7ff fee2 	bl	80067cc <_printf_common>
 8006a08:	3001      	adds	r0, #1
 8006a0a:	d14c      	bne.n	8006aa6 <_printf_i+0x1fe>
 8006a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a10:	b004      	add	sp, #16
 8006a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a16:	4835      	ldr	r0, [pc, #212]	; (8006aec <_printf_i+0x244>)
 8006a18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a1c:	6823      	ldr	r3, [r4, #0]
 8006a1e:	680e      	ldr	r6, [r1, #0]
 8006a20:	061f      	lsls	r7, r3, #24
 8006a22:	f856 5b04 	ldr.w	r5, [r6], #4
 8006a26:	600e      	str	r6, [r1, #0]
 8006a28:	d514      	bpl.n	8006a54 <_printf_i+0x1ac>
 8006a2a:	07d9      	lsls	r1, r3, #31
 8006a2c:	bf44      	itt	mi
 8006a2e:	f043 0320 	orrmi.w	r3, r3, #32
 8006a32:	6023      	strmi	r3, [r4, #0]
 8006a34:	b91d      	cbnz	r5, 8006a3e <_printf_i+0x196>
 8006a36:	6823      	ldr	r3, [r4, #0]
 8006a38:	f023 0320 	bic.w	r3, r3, #32
 8006a3c:	6023      	str	r3, [r4, #0]
 8006a3e:	2310      	movs	r3, #16
 8006a40:	e7b0      	b.n	80069a4 <_printf_i+0xfc>
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	f043 0320 	orr.w	r3, r3, #32
 8006a48:	6023      	str	r3, [r4, #0]
 8006a4a:	2378      	movs	r3, #120	; 0x78
 8006a4c:	4828      	ldr	r0, [pc, #160]	; (8006af0 <_printf_i+0x248>)
 8006a4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a52:	e7e3      	b.n	8006a1c <_printf_i+0x174>
 8006a54:	065e      	lsls	r6, r3, #25
 8006a56:	bf48      	it	mi
 8006a58:	b2ad      	uxthmi	r5, r5
 8006a5a:	e7e6      	b.n	8006a2a <_printf_i+0x182>
 8006a5c:	4616      	mov	r6, r2
 8006a5e:	e7bb      	b.n	80069d8 <_printf_i+0x130>
 8006a60:	680b      	ldr	r3, [r1, #0]
 8006a62:	6826      	ldr	r6, [r4, #0]
 8006a64:	6960      	ldr	r0, [r4, #20]
 8006a66:	1d1d      	adds	r5, r3, #4
 8006a68:	600d      	str	r5, [r1, #0]
 8006a6a:	0635      	lsls	r5, r6, #24
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	d501      	bpl.n	8006a74 <_printf_i+0x1cc>
 8006a70:	6018      	str	r0, [r3, #0]
 8006a72:	e002      	b.n	8006a7a <_printf_i+0x1d2>
 8006a74:	0671      	lsls	r1, r6, #25
 8006a76:	d5fb      	bpl.n	8006a70 <_printf_i+0x1c8>
 8006a78:	8018      	strh	r0, [r3, #0]
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	6123      	str	r3, [r4, #16]
 8006a7e:	4616      	mov	r6, r2
 8006a80:	e7ba      	b.n	80069f8 <_printf_i+0x150>
 8006a82:	680b      	ldr	r3, [r1, #0]
 8006a84:	1d1a      	adds	r2, r3, #4
 8006a86:	600a      	str	r2, [r1, #0]
 8006a88:	681e      	ldr	r6, [r3, #0]
 8006a8a:	6862      	ldr	r2, [r4, #4]
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	4630      	mov	r0, r6
 8006a90:	f7f9 fbce 	bl	8000230 <memchr>
 8006a94:	b108      	cbz	r0, 8006a9a <_printf_i+0x1f2>
 8006a96:	1b80      	subs	r0, r0, r6
 8006a98:	6060      	str	r0, [r4, #4]
 8006a9a:	6863      	ldr	r3, [r4, #4]
 8006a9c:	6123      	str	r3, [r4, #16]
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006aa4:	e7a8      	b.n	80069f8 <_printf_i+0x150>
 8006aa6:	6923      	ldr	r3, [r4, #16]
 8006aa8:	4632      	mov	r2, r6
 8006aaa:	4649      	mov	r1, r9
 8006aac:	4640      	mov	r0, r8
 8006aae:	47d0      	blx	sl
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	d0ab      	beq.n	8006a0c <_printf_i+0x164>
 8006ab4:	6823      	ldr	r3, [r4, #0]
 8006ab6:	079b      	lsls	r3, r3, #30
 8006ab8:	d413      	bmi.n	8006ae2 <_printf_i+0x23a>
 8006aba:	68e0      	ldr	r0, [r4, #12]
 8006abc:	9b03      	ldr	r3, [sp, #12]
 8006abe:	4298      	cmp	r0, r3
 8006ac0:	bfb8      	it	lt
 8006ac2:	4618      	movlt	r0, r3
 8006ac4:	e7a4      	b.n	8006a10 <_printf_i+0x168>
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	4632      	mov	r2, r6
 8006aca:	4649      	mov	r1, r9
 8006acc:	4640      	mov	r0, r8
 8006ace:	47d0      	blx	sl
 8006ad0:	3001      	adds	r0, #1
 8006ad2:	d09b      	beq.n	8006a0c <_printf_i+0x164>
 8006ad4:	3501      	adds	r5, #1
 8006ad6:	68e3      	ldr	r3, [r4, #12]
 8006ad8:	9903      	ldr	r1, [sp, #12]
 8006ada:	1a5b      	subs	r3, r3, r1
 8006adc:	42ab      	cmp	r3, r5
 8006ade:	dcf2      	bgt.n	8006ac6 <_printf_i+0x21e>
 8006ae0:	e7eb      	b.n	8006aba <_printf_i+0x212>
 8006ae2:	2500      	movs	r5, #0
 8006ae4:	f104 0619 	add.w	r6, r4, #25
 8006ae8:	e7f5      	b.n	8006ad6 <_printf_i+0x22e>
 8006aea:	bf00      	nop
 8006aec:	0800a556 	.word	0x0800a556
 8006af0:	0800a567 	.word	0x0800a567

08006af4 <iprintf>:
 8006af4:	b40f      	push	{r0, r1, r2, r3}
 8006af6:	4b0a      	ldr	r3, [pc, #40]	; (8006b20 <iprintf+0x2c>)
 8006af8:	b513      	push	{r0, r1, r4, lr}
 8006afa:	681c      	ldr	r4, [r3, #0]
 8006afc:	b124      	cbz	r4, 8006b08 <iprintf+0x14>
 8006afe:	69a3      	ldr	r3, [r4, #24]
 8006b00:	b913      	cbnz	r3, 8006b08 <iprintf+0x14>
 8006b02:	4620      	mov	r0, r4
 8006b04:	f001 ff96 	bl	8008a34 <__sinit>
 8006b08:	ab05      	add	r3, sp, #20
 8006b0a:	9a04      	ldr	r2, [sp, #16]
 8006b0c:	68a1      	ldr	r1, [r4, #8]
 8006b0e:	9301      	str	r3, [sp, #4]
 8006b10:	4620      	mov	r0, r4
 8006b12:	f003 f9cd 	bl	8009eb0 <_vfiprintf_r>
 8006b16:	b002      	add	sp, #8
 8006b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b1c:	b004      	add	sp, #16
 8006b1e:	4770      	bx	lr
 8006b20:	20000018 	.word	0x20000018

08006b24 <_puts_r>:
 8006b24:	b570      	push	{r4, r5, r6, lr}
 8006b26:	460e      	mov	r6, r1
 8006b28:	4605      	mov	r5, r0
 8006b2a:	b118      	cbz	r0, 8006b34 <_puts_r+0x10>
 8006b2c:	6983      	ldr	r3, [r0, #24]
 8006b2e:	b90b      	cbnz	r3, 8006b34 <_puts_r+0x10>
 8006b30:	f001 ff80 	bl	8008a34 <__sinit>
 8006b34:	69ab      	ldr	r3, [r5, #24]
 8006b36:	68ac      	ldr	r4, [r5, #8]
 8006b38:	b913      	cbnz	r3, 8006b40 <_puts_r+0x1c>
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	f001 ff7a 	bl	8008a34 <__sinit>
 8006b40:	4b2c      	ldr	r3, [pc, #176]	; (8006bf4 <_puts_r+0xd0>)
 8006b42:	429c      	cmp	r4, r3
 8006b44:	d120      	bne.n	8006b88 <_puts_r+0x64>
 8006b46:	686c      	ldr	r4, [r5, #4]
 8006b48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b4a:	07db      	lsls	r3, r3, #31
 8006b4c:	d405      	bmi.n	8006b5a <_puts_r+0x36>
 8006b4e:	89a3      	ldrh	r3, [r4, #12]
 8006b50:	0598      	lsls	r0, r3, #22
 8006b52:	d402      	bmi.n	8006b5a <_puts_r+0x36>
 8006b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b56:	f002 fb7e 	bl	8009256 <__retarget_lock_acquire_recursive>
 8006b5a:	89a3      	ldrh	r3, [r4, #12]
 8006b5c:	0719      	lsls	r1, r3, #28
 8006b5e:	d51d      	bpl.n	8006b9c <_puts_r+0x78>
 8006b60:	6923      	ldr	r3, [r4, #16]
 8006b62:	b1db      	cbz	r3, 8006b9c <_puts_r+0x78>
 8006b64:	3e01      	subs	r6, #1
 8006b66:	68a3      	ldr	r3, [r4, #8]
 8006b68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	60a3      	str	r3, [r4, #8]
 8006b70:	bb39      	cbnz	r1, 8006bc2 <_puts_r+0x9e>
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	da38      	bge.n	8006be8 <_puts_r+0xc4>
 8006b76:	4622      	mov	r2, r4
 8006b78:	210a      	movs	r1, #10
 8006b7a:	4628      	mov	r0, r5
 8006b7c:	f000 ff08 	bl	8007990 <__swbuf_r>
 8006b80:	3001      	adds	r0, #1
 8006b82:	d011      	beq.n	8006ba8 <_puts_r+0x84>
 8006b84:	250a      	movs	r5, #10
 8006b86:	e011      	b.n	8006bac <_puts_r+0x88>
 8006b88:	4b1b      	ldr	r3, [pc, #108]	; (8006bf8 <_puts_r+0xd4>)
 8006b8a:	429c      	cmp	r4, r3
 8006b8c:	d101      	bne.n	8006b92 <_puts_r+0x6e>
 8006b8e:	68ac      	ldr	r4, [r5, #8]
 8006b90:	e7da      	b.n	8006b48 <_puts_r+0x24>
 8006b92:	4b1a      	ldr	r3, [pc, #104]	; (8006bfc <_puts_r+0xd8>)
 8006b94:	429c      	cmp	r4, r3
 8006b96:	bf08      	it	eq
 8006b98:	68ec      	ldreq	r4, [r5, #12]
 8006b9a:	e7d5      	b.n	8006b48 <_puts_r+0x24>
 8006b9c:	4621      	mov	r1, r4
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	f000 ff48 	bl	8007a34 <__swsetup_r>
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	d0dd      	beq.n	8006b64 <_puts_r+0x40>
 8006ba8:	f04f 35ff 	mov.w	r5, #4294967295
 8006bac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bae:	07da      	lsls	r2, r3, #31
 8006bb0:	d405      	bmi.n	8006bbe <_puts_r+0x9a>
 8006bb2:	89a3      	ldrh	r3, [r4, #12]
 8006bb4:	059b      	lsls	r3, r3, #22
 8006bb6:	d402      	bmi.n	8006bbe <_puts_r+0x9a>
 8006bb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bba:	f002 fb4d 	bl	8009258 <__retarget_lock_release_recursive>
 8006bbe:	4628      	mov	r0, r5
 8006bc0:	bd70      	pop	{r4, r5, r6, pc}
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	da04      	bge.n	8006bd0 <_puts_r+0xac>
 8006bc6:	69a2      	ldr	r2, [r4, #24]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	dc06      	bgt.n	8006bda <_puts_r+0xb6>
 8006bcc:	290a      	cmp	r1, #10
 8006bce:	d004      	beq.n	8006bda <_puts_r+0xb6>
 8006bd0:	6823      	ldr	r3, [r4, #0]
 8006bd2:	1c5a      	adds	r2, r3, #1
 8006bd4:	6022      	str	r2, [r4, #0]
 8006bd6:	7019      	strb	r1, [r3, #0]
 8006bd8:	e7c5      	b.n	8006b66 <_puts_r+0x42>
 8006bda:	4622      	mov	r2, r4
 8006bdc:	4628      	mov	r0, r5
 8006bde:	f000 fed7 	bl	8007990 <__swbuf_r>
 8006be2:	3001      	adds	r0, #1
 8006be4:	d1bf      	bne.n	8006b66 <_puts_r+0x42>
 8006be6:	e7df      	b.n	8006ba8 <_puts_r+0x84>
 8006be8:	6823      	ldr	r3, [r4, #0]
 8006bea:	250a      	movs	r5, #10
 8006bec:	1c5a      	adds	r2, r3, #1
 8006bee:	6022      	str	r2, [r4, #0]
 8006bf0:	701d      	strb	r5, [r3, #0]
 8006bf2:	e7db      	b.n	8006bac <_puts_r+0x88>
 8006bf4:	0800a780 	.word	0x0800a780
 8006bf8:	0800a7a0 	.word	0x0800a7a0
 8006bfc:	0800a760 	.word	0x0800a760

08006c00 <puts>:
 8006c00:	4b02      	ldr	r3, [pc, #8]	; (8006c0c <puts+0xc>)
 8006c02:	4601      	mov	r1, r0
 8006c04:	6818      	ldr	r0, [r3, #0]
 8006c06:	f7ff bf8d 	b.w	8006b24 <_puts_r>
 8006c0a:	bf00      	nop
 8006c0c:	20000018 	.word	0x20000018

08006c10 <sulp>:
 8006c10:	b570      	push	{r4, r5, r6, lr}
 8006c12:	4604      	mov	r4, r0
 8006c14:	460d      	mov	r5, r1
 8006c16:	ec45 4b10 	vmov	d0, r4, r5
 8006c1a:	4616      	mov	r6, r2
 8006c1c:	f002 ff16 	bl	8009a4c <__ulp>
 8006c20:	ec51 0b10 	vmov	r0, r1, d0
 8006c24:	b17e      	cbz	r6, 8006c46 <sulp+0x36>
 8006c26:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006c2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	dd09      	ble.n	8006c46 <sulp+0x36>
 8006c32:	051b      	lsls	r3, r3, #20
 8006c34:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006c38:	2400      	movs	r4, #0
 8006c3a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006c3e:	4622      	mov	r2, r4
 8006c40:	462b      	mov	r3, r5
 8006c42:	f7f9 fd01 	bl	8000648 <__aeabi_dmul>
 8006c46:	bd70      	pop	{r4, r5, r6, pc}

08006c48 <_strtod_l>:
 8006c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c4c:	b0a3      	sub	sp, #140	; 0x8c
 8006c4e:	461f      	mov	r7, r3
 8006c50:	2300      	movs	r3, #0
 8006c52:	931e      	str	r3, [sp, #120]	; 0x78
 8006c54:	4ba4      	ldr	r3, [pc, #656]	; (8006ee8 <_strtod_l+0x2a0>)
 8006c56:	9219      	str	r2, [sp, #100]	; 0x64
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	9307      	str	r3, [sp, #28]
 8006c5c:	4604      	mov	r4, r0
 8006c5e:	4618      	mov	r0, r3
 8006c60:	4688      	mov	r8, r1
 8006c62:	f7f9 fadd 	bl	8000220 <strlen>
 8006c66:	f04f 0a00 	mov.w	sl, #0
 8006c6a:	4605      	mov	r5, r0
 8006c6c:	f04f 0b00 	mov.w	fp, #0
 8006c70:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006c74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006c76:	781a      	ldrb	r2, [r3, #0]
 8006c78:	2a2b      	cmp	r2, #43	; 0x2b
 8006c7a:	d04c      	beq.n	8006d16 <_strtod_l+0xce>
 8006c7c:	d839      	bhi.n	8006cf2 <_strtod_l+0xaa>
 8006c7e:	2a0d      	cmp	r2, #13
 8006c80:	d832      	bhi.n	8006ce8 <_strtod_l+0xa0>
 8006c82:	2a08      	cmp	r2, #8
 8006c84:	d832      	bhi.n	8006cec <_strtod_l+0xa4>
 8006c86:	2a00      	cmp	r2, #0
 8006c88:	d03c      	beq.n	8006d04 <_strtod_l+0xbc>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	930e      	str	r3, [sp, #56]	; 0x38
 8006c8e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006c90:	7833      	ldrb	r3, [r6, #0]
 8006c92:	2b30      	cmp	r3, #48	; 0x30
 8006c94:	f040 80b4 	bne.w	8006e00 <_strtod_l+0x1b8>
 8006c98:	7873      	ldrb	r3, [r6, #1]
 8006c9a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006c9e:	2b58      	cmp	r3, #88	; 0x58
 8006ca0:	d16c      	bne.n	8006d7c <_strtod_l+0x134>
 8006ca2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ca4:	9301      	str	r3, [sp, #4]
 8006ca6:	ab1e      	add	r3, sp, #120	; 0x78
 8006ca8:	9702      	str	r7, [sp, #8]
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	4a8f      	ldr	r2, [pc, #572]	; (8006eec <_strtod_l+0x2a4>)
 8006cae:	ab1f      	add	r3, sp, #124	; 0x7c
 8006cb0:	a91d      	add	r1, sp, #116	; 0x74
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f001 ffc2 	bl	8008c3c <__gethex>
 8006cb8:	f010 0707 	ands.w	r7, r0, #7
 8006cbc:	4605      	mov	r5, r0
 8006cbe:	d005      	beq.n	8006ccc <_strtod_l+0x84>
 8006cc0:	2f06      	cmp	r7, #6
 8006cc2:	d12a      	bne.n	8006d1a <_strtod_l+0xd2>
 8006cc4:	3601      	adds	r6, #1
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	961d      	str	r6, [sp, #116]	; 0x74
 8006cca:	930e      	str	r3, [sp, #56]	; 0x38
 8006ccc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f040 8596 	bne.w	8007800 <_strtod_l+0xbb8>
 8006cd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cd6:	b1db      	cbz	r3, 8006d10 <_strtod_l+0xc8>
 8006cd8:	4652      	mov	r2, sl
 8006cda:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006cde:	ec43 2b10 	vmov	d0, r2, r3
 8006ce2:	b023      	add	sp, #140	; 0x8c
 8006ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ce8:	2a20      	cmp	r2, #32
 8006cea:	d1ce      	bne.n	8006c8a <_strtod_l+0x42>
 8006cec:	3301      	adds	r3, #1
 8006cee:	931d      	str	r3, [sp, #116]	; 0x74
 8006cf0:	e7c0      	b.n	8006c74 <_strtod_l+0x2c>
 8006cf2:	2a2d      	cmp	r2, #45	; 0x2d
 8006cf4:	d1c9      	bne.n	8006c8a <_strtod_l+0x42>
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	920e      	str	r2, [sp, #56]	; 0x38
 8006cfa:	1c5a      	adds	r2, r3, #1
 8006cfc:	921d      	str	r2, [sp, #116]	; 0x74
 8006cfe:	785b      	ldrb	r3, [r3, #1]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1c4      	bne.n	8006c8e <_strtod_l+0x46>
 8006d04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006d06:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f040 8576 	bne.w	80077fc <_strtod_l+0xbb4>
 8006d10:	4652      	mov	r2, sl
 8006d12:	465b      	mov	r3, fp
 8006d14:	e7e3      	b.n	8006cde <_strtod_l+0x96>
 8006d16:	2200      	movs	r2, #0
 8006d18:	e7ee      	b.n	8006cf8 <_strtod_l+0xb0>
 8006d1a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006d1c:	b13a      	cbz	r2, 8006d2e <_strtod_l+0xe6>
 8006d1e:	2135      	movs	r1, #53	; 0x35
 8006d20:	a820      	add	r0, sp, #128	; 0x80
 8006d22:	f002 ff9e 	bl	8009c62 <__copybits>
 8006d26:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006d28:	4620      	mov	r0, r4
 8006d2a:	f002 fb63 	bl	80093f4 <_Bfree>
 8006d2e:	3f01      	subs	r7, #1
 8006d30:	2f05      	cmp	r7, #5
 8006d32:	d807      	bhi.n	8006d44 <_strtod_l+0xfc>
 8006d34:	e8df f007 	tbb	[pc, r7]
 8006d38:	1d180b0e 	.word	0x1d180b0e
 8006d3c:	030e      	.short	0x030e
 8006d3e:	f04f 0b00 	mov.w	fp, #0
 8006d42:	46da      	mov	sl, fp
 8006d44:	0728      	lsls	r0, r5, #28
 8006d46:	d5c1      	bpl.n	8006ccc <_strtod_l+0x84>
 8006d48:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006d4c:	e7be      	b.n	8006ccc <_strtod_l+0x84>
 8006d4e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8006d52:	e7f7      	b.n	8006d44 <_strtod_l+0xfc>
 8006d54:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8006d58:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006d5a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006d5e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006d62:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006d66:	e7ed      	b.n	8006d44 <_strtod_l+0xfc>
 8006d68:	f8df b184 	ldr.w	fp, [pc, #388]	; 8006ef0 <_strtod_l+0x2a8>
 8006d6c:	f04f 0a00 	mov.w	sl, #0
 8006d70:	e7e8      	b.n	8006d44 <_strtod_l+0xfc>
 8006d72:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006d76:	f04f 3aff 	mov.w	sl, #4294967295
 8006d7a:	e7e3      	b.n	8006d44 <_strtod_l+0xfc>
 8006d7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006d7e:	1c5a      	adds	r2, r3, #1
 8006d80:	921d      	str	r2, [sp, #116]	; 0x74
 8006d82:	785b      	ldrb	r3, [r3, #1]
 8006d84:	2b30      	cmp	r3, #48	; 0x30
 8006d86:	d0f9      	beq.n	8006d7c <_strtod_l+0x134>
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d09f      	beq.n	8006ccc <_strtod_l+0x84>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	f04f 0900 	mov.w	r9, #0
 8006d92:	9304      	str	r3, [sp, #16]
 8006d94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006d96:	930a      	str	r3, [sp, #40]	; 0x28
 8006d98:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006d9c:	464f      	mov	r7, r9
 8006d9e:	220a      	movs	r2, #10
 8006da0:	981d      	ldr	r0, [sp, #116]	; 0x74
 8006da2:	7806      	ldrb	r6, [r0, #0]
 8006da4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006da8:	b2d9      	uxtb	r1, r3
 8006daa:	2909      	cmp	r1, #9
 8006dac:	d92a      	bls.n	8006e04 <_strtod_l+0x1bc>
 8006dae:	9907      	ldr	r1, [sp, #28]
 8006db0:	462a      	mov	r2, r5
 8006db2:	f003 fa08 	bl	800a1c6 <strncmp>
 8006db6:	b398      	cbz	r0, 8006e20 <_strtod_l+0x1d8>
 8006db8:	2000      	movs	r0, #0
 8006dba:	4633      	mov	r3, r6
 8006dbc:	463d      	mov	r5, r7
 8006dbe:	9007      	str	r0, [sp, #28]
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	2b65      	cmp	r3, #101	; 0x65
 8006dc4:	d001      	beq.n	8006dca <_strtod_l+0x182>
 8006dc6:	2b45      	cmp	r3, #69	; 0x45
 8006dc8:	d118      	bne.n	8006dfc <_strtod_l+0x1b4>
 8006dca:	b91d      	cbnz	r5, 8006dd4 <_strtod_l+0x18c>
 8006dcc:	9b04      	ldr	r3, [sp, #16]
 8006dce:	4303      	orrs	r3, r0
 8006dd0:	d098      	beq.n	8006d04 <_strtod_l+0xbc>
 8006dd2:	2500      	movs	r5, #0
 8006dd4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8006dd8:	f108 0301 	add.w	r3, r8, #1
 8006ddc:	931d      	str	r3, [sp, #116]	; 0x74
 8006dde:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006de2:	2b2b      	cmp	r3, #43	; 0x2b
 8006de4:	d075      	beq.n	8006ed2 <_strtod_l+0x28a>
 8006de6:	2b2d      	cmp	r3, #45	; 0x2d
 8006de8:	d07b      	beq.n	8006ee2 <_strtod_l+0x29a>
 8006dea:	f04f 0c00 	mov.w	ip, #0
 8006dee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006df2:	2909      	cmp	r1, #9
 8006df4:	f240 8082 	bls.w	8006efc <_strtod_l+0x2b4>
 8006df8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006dfc:	2600      	movs	r6, #0
 8006dfe:	e09d      	b.n	8006f3c <_strtod_l+0x2f4>
 8006e00:	2300      	movs	r3, #0
 8006e02:	e7c4      	b.n	8006d8e <_strtod_l+0x146>
 8006e04:	2f08      	cmp	r7, #8
 8006e06:	bfd8      	it	le
 8006e08:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006e0a:	f100 0001 	add.w	r0, r0, #1
 8006e0e:	bfda      	itte	le
 8006e10:	fb02 3301 	mlale	r3, r2, r1, r3
 8006e14:	9309      	strle	r3, [sp, #36]	; 0x24
 8006e16:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006e1a:	3701      	adds	r7, #1
 8006e1c:	901d      	str	r0, [sp, #116]	; 0x74
 8006e1e:	e7bf      	b.n	8006da0 <_strtod_l+0x158>
 8006e20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006e22:	195a      	adds	r2, r3, r5
 8006e24:	921d      	str	r2, [sp, #116]	; 0x74
 8006e26:	5d5b      	ldrb	r3, [r3, r5]
 8006e28:	2f00      	cmp	r7, #0
 8006e2a:	d037      	beq.n	8006e9c <_strtod_l+0x254>
 8006e2c:	9007      	str	r0, [sp, #28]
 8006e2e:	463d      	mov	r5, r7
 8006e30:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006e34:	2a09      	cmp	r2, #9
 8006e36:	d912      	bls.n	8006e5e <_strtod_l+0x216>
 8006e38:	2201      	movs	r2, #1
 8006e3a:	e7c2      	b.n	8006dc2 <_strtod_l+0x17a>
 8006e3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006e3e:	1c5a      	adds	r2, r3, #1
 8006e40:	921d      	str	r2, [sp, #116]	; 0x74
 8006e42:	785b      	ldrb	r3, [r3, #1]
 8006e44:	3001      	adds	r0, #1
 8006e46:	2b30      	cmp	r3, #48	; 0x30
 8006e48:	d0f8      	beq.n	8006e3c <_strtod_l+0x1f4>
 8006e4a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006e4e:	2a08      	cmp	r2, #8
 8006e50:	f200 84db 	bhi.w	800780a <_strtod_l+0xbc2>
 8006e54:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006e56:	9007      	str	r0, [sp, #28]
 8006e58:	2000      	movs	r0, #0
 8006e5a:	920a      	str	r2, [sp, #40]	; 0x28
 8006e5c:	4605      	mov	r5, r0
 8006e5e:	3b30      	subs	r3, #48	; 0x30
 8006e60:	f100 0201 	add.w	r2, r0, #1
 8006e64:	d014      	beq.n	8006e90 <_strtod_l+0x248>
 8006e66:	9907      	ldr	r1, [sp, #28]
 8006e68:	4411      	add	r1, r2
 8006e6a:	9107      	str	r1, [sp, #28]
 8006e6c:	462a      	mov	r2, r5
 8006e6e:	eb00 0e05 	add.w	lr, r0, r5
 8006e72:	210a      	movs	r1, #10
 8006e74:	4572      	cmp	r2, lr
 8006e76:	d113      	bne.n	8006ea0 <_strtod_l+0x258>
 8006e78:	182a      	adds	r2, r5, r0
 8006e7a:	2a08      	cmp	r2, #8
 8006e7c:	f105 0501 	add.w	r5, r5, #1
 8006e80:	4405      	add	r5, r0
 8006e82:	dc1c      	bgt.n	8006ebe <_strtod_l+0x276>
 8006e84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e86:	220a      	movs	r2, #10
 8006e88:	fb02 3301 	mla	r3, r2, r1, r3
 8006e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e8e:	2200      	movs	r2, #0
 8006e90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006e92:	1c59      	adds	r1, r3, #1
 8006e94:	911d      	str	r1, [sp, #116]	; 0x74
 8006e96:	785b      	ldrb	r3, [r3, #1]
 8006e98:	4610      	mov	r0, r2
 8006e9a:	e7c9      	b.n	8006e30 <_strtod_l+0x1e8>
 8006e9c:	4638      	mov	r0, r7
 8006e9e:	e7d2      	b.n	8006e46 <_strtod_l+0x1fe>
 8006ea0:	2a08      	cmp	r2, #8
 8006ea2:	dc04      	bgt.n	8006eae <_strtod_l+0x266>
 8006ea4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006ea6:	434e      	muls	r6, r1
 8006ea8:	9609      	str	r6, [sp, #36]	; 0x24
 8006eaa:	3201      	adds	r2, #1
 8006eac:	e7e2      	b.n	8006e74 <_strtod_l+0x22c>
 8006eae:	f102 0c01 	add.w	ip, r2, #1
 8006eb2:	f1bc 0f10 	cmp.w	ip, #16
 8006eb6:	bfd8      	it	le
 8006eb8:	fb01 f909 	mulle.w	r9, r1, r9
 8006ebc:	e7f5      	b.n	8006eaa <_strtod_l+0x262>
 8006ebe:	2d10      	cmp	r5, #16
 8006ec0:	bfdc      	itt	le
 8006ec2:	220a      	movle	r2, #10
 8006ec4:	fb02 3909 	mlale	r9, r2, r9, r3
 8006ec8:	e7e1      	b.n	8006e8e <_strtod_l+0x246>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	9307      	str	r3, [sp, #28]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	e77c      	b.n	8006dcc <_strtod_l+0x184>
 8006ed2:	f04f 0c00 	mov.w	ip, #0
 8006ed6:	f108 0302 	add.w	r3, r8, #2
 8006eda:	931d      	str	r3, [sp, #116]	; 0x74
 8006edc:	f898 3002 	ldrb.w	r3, [r8, #2]
 8006ee0:	e785      	b.n	8006dee <_strtod_l+0x1a6>
 8006ee2:	f04f 0c01 	mov.w	ip, #1
 8006ee6:	e7f6      	b.n	8006ed6 <_strtod_l+0x28e>
 8006ee8:	0800a82c 	.word	0x0800a82c
 8006eec:	0800a578 	.word	0x0800a578
 8006ef0:	7ff00000 	.word	0x7ff00000
 8006ef4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006ef6:	1c59      	adds	r1, r3, #1
 8006ef8:	911d      	str	r1, [sp, #116]	; 0x74
 8006efa:	785b      	ldrb	r3, [r3, #1]
 8006efc:	2b30      	cmp	r3, #48	; 0x30
 8006efe:	d0f9      	beq.n	8006ef4 <_strtod_l+0x2ac>
 8006f00:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8006f04:	2908      	cmp	r1, #8
 8006f06:	f63f af79 	bhi.w	8006dfc <_strtod_l+0x1b4>
 8006f0a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006f0e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006f10:	9308      	str	r3, [sp, #32]
 8006f12:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006f14:	1c59      	adds	r1, r3, #1
 8006f16:	911d      	str	r1, [sp, #116]	; 0x74
 8006f18:	785b      	ldrb	r3, [r3, #1]
 8006f1a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8006f1e:	2e09      	cmp	r6, #9
 8006f20:	d937      	bls.n	8006f92 <_strtod_l+0x34a>
 8006f22:	9e08      	ldr	r6, [sp, #32]
 8006f24:	1b89      	subs	r1, r1, r6
 8006f26:	2908      	cmp	r1, #8
 8006f28:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006f2c:	dc02      	bgt.n	8006f34 <_strtod_l+0x2ec>
 8006f2e:	4576      	cmp	r6, lr
 8006f30:	bfa8      	it	ge
 8006f32:	4676      	movge	r6, lr
 8006f34:	f1bc 0f00 	cmp.w	ip, #0
 8006f38:	d000      	beq.n	8006f3c <_strtod_l+0x2f4>
 8006f3a:	4276      	negs	r6, r6
 8006f3c:	2d00      	cmp	r5, #0
 8006f3e:	d14f      	bne.n	8006fe0 <_strtod_l+0x398>
 8006f40:	9904      	ldr	r1, [sp, #16]
 8006f42:	4301      	orrs	r1, r0
 8006f44:	f47f aec2 	bne.w	8006ccc <_strtod_l+0x84>
 8006f48:	2a00      	cmp	r2, #0
 8006f4a:	f47f aedb 	bne.w	8006d04 <_strtod_l+0xbc>
 8006f4e:	2b69      	cmp	r3, #105	; 0x69
 8006f50:	d027      	beq.n	8006fa2 <_strtod_l+0x35a>
 8006f52:	dc24      	bgt.n	8006f9e <_strtod_l+0x356>
 8006f54:	2b49      	cmp	r3, #73	; 0x49
 8006f56:	d024      	beq.n	8006fa2 <_strtod_l+0x35a>
 8006f58:	2b4e      	cmp	r3, #78	; 0x4e
 8006f5a:	f47f aed3 	bne.w	8006d04 <_strtod_l+0xbc>
 8006f5e:	499e      	ldr	r1, [pc, #632]	; (80071d8 <_strtod_l+0x590>)
 8006f60:	a81d      	add	r0, sp, #116	; 0x74
 8006f62:	f002 f8c3 	bl	80090ec <__match>
 8006f66:	2800      	cmp	r0, #0
 8006f68:	f43f aecc 	beq.w	8006d04 <_strtod_l+0xbc>
 8006f6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	2b28      	cmp	r3, #40	; 0x28
 8006f72:	d12d      	bne.n	8006fd0 <_strtod_l+0x388>
 8006f74:	4999      	ldr	r1, [pc, #612]	; (80071dc <_strtod_l+0x594>)
 8006f76:	aa20      	add	r2, sp, #128	; 0x80
 8006f78:	a81d      	add	r0, sp, #116	; 0x74
 8006f7a:	f002 f8cb 	bl	8009114 <__hexnan>
 8006f7e:	2805      	cmp	r0, #5
 8006f80:	d126      	bne.n	8006fd0 <_strtod_l+0x388>
 8006f82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f84:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8006f88:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006f8c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006f90:	e69c      	b.n	8006ccc <_strtod_l+0x84>
 8006f92:	210a      	movs	r1, #10
 8006f94:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006f98:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006f9c:	e7b9      	b.n	8006f12 <_strtod_l+0x2ca>
 8006f9e:	2b6e      	cmp	r3, #110	; 0x6e
 8006fa0:	e7db      	b.n	8006f5a <_strtod_l+0x312>
 8006fa2:	498f      	ldr	r1, [pc, #572]	; (80071e0 <_strtod_l+0x598>)
 8006fa4:	a81d      	add	r0, sp, #116	; 0x74
 8006fa6:	f002 f8a1 	bl	80090ec <__match>
 8006faa:	2800      	cmp	r0, #0
 8006fac:	f43f aeaa 	beq.w	8006d04 <_strtod_l+0xbc>
 8006fb0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006fb2:	498c      	ldr	r1, [pc, #560]	; (80071e4 <_strtod_l+0x59c>)
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	a81d      	add	r0, sp, #116	; 0x74
 8006fb8:	931d      	str	r3, [sp, #116]	; 0x74
 8006fba:	f002 f897 	bl	80090ec <__match>
 8006fbe:	b910      	cbnz	r0, 8006fc6 <_strtod_l+0x37e>
 8006fc0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	931d      	str	r3, [sp, #116]	; 0x74
 8006fc6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80071f4 <_strtod_l+0x5ac>
 8006fca:	f04f 0a00 	mov.w	sl, #0
 8006fce:	e67d      	b.n	8006ccc <_strtod_l+0x84>
 8006fd0:	4885      	ldr	r0, [pc, #532]	; (80071e8 <_strtod_l+0x5a0>)
 8006fd2:	f003 f89d 	bl	800a110 <nan>
 8006fd6:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006fda:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006fde:	e675      	b.n	8006ccc <_strtod_l+0x84>
 8006fe0:	9b07      	ldr	r3, [sp, #28]
 8006fe2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fe4:	1af3      	subs	r3, r6, r3
 8006fe6:	2f00      	cmp	r7, #0
 8006fe8:	bf08      	it	eq
 8006fea:	462f      	moveq	r7, r5
 8006fec:	2d10      	cmp	r5, #16
 8006fee:	9308      	str	r3, [sp, #32]
 8006ff0:	46a8      	mov	r8, r5
 8006ff2:	bfa8      	it	ge
 8006ff4:	f04f 0810 	movge.w	r8, #16
 8006ff8:	f7f9 faac 	bl	8000554 <__aeabi_ui2d>
 8006ffc:	2d09      	cmp	r5, #9
 8006ffe:	4682      	mov	sl, r0
 8007000:	468b      	mov	fp, r1
 8007002:	dd13      	ble.n	800702c <_strtod_l+0x3e4>
 8007004:	4b79      	ldr	r3, [pc, #484]	; (80071ec <_strtod_l+0x5a4>)
 8007006:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800700a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800700e:	f7f9 fb1b 	bl	8000648 <__aeabi_dmul>
 8007012:	4682      	mov	sl, r0
 8007014:	4648      	mov	r0, r9
 8007016:	468b      	mov	fp, r1
 8007018:	f7f9 fa9c 	bl	8000554 <__aeabi_ui2d>
 800701c:	4602      	mov	r2, r0
 800701e:	460b      	mov	r3, r1
 8007020:	4650      	mov	r0, sl
 8007022:	4659      	mov	r1, fp
 8007024:	f7f9 f95a 	bl	80002dc <__adddf3>
 8007028:	4682      	mov	sl, r0
 800702a:	468b      	mov	fp, r1
 800702c:	2d0f      	cmp	r5, #15
 800702e:	dc38      	bgt.n	80070a2 <_strtod_l+0x45a>
 8007030:	9b08      	ldr	r3, [sp, #32]
 8007032:	2b00      	cmp	r3, #0
 8007034:	f43f ae4a 	beq.w	8006ccc <_strtod_l+0x84>
 8007038:	dd24      	ble.n	8007084 <_strtod_l+0x43c>
 800703a:	2b16      	cmp	r3, #22
 800703c:	dc0b      	bgt.n	8007056 <_strtod_l+0x40e>
 800703e:	4d6b      	ldr	r5, [pc, #428]	; (80071ec <_strtod_l+0x5a4>)
 8007040:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8007044:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007048:	4652      	mov	r2, sl
 800704a:	465b      	mov	r3, fp
 800704c:	f7f9 fafc 	bl	8000648 <__aeabi_dmul>
 8007050:	4682      	mov	sl, r0
 8007052:	468b      	mov	fp, r1
 8007054:	e63a      	b.n	8006ccc <_strtod_l+0x84>
 8007056:	9a08      	ldr	r2, [sp, #32]
 8007058:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800705c:	4293      	cmp	r3, r2
 800705e:	db20      	blt.n	80070a2 <_strtod_l+0x45a>
 8007060:	4c62      	ldr	r4, [pc, #392]	; (80071ec <_strtod_l+0x5a4>)
 8007062:	f1c5 050f 	rsb	r5, r5, #15
 8007066:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800706a:	4652      	mov	r2, sl
 800706c:	465b      	mov	r3, fp
 800706e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007072:	f7f9 fae9 	bl	8000648 <__aeabi_dmul>
 8007076:	9b08      	ldr	r3, [sp, #32]
 8007078:	1b5d      	subs	r5, r3, r5
 800707a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800707e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007082:	e7e3      	b.n	800704c <_strtod_l+0x404>
 8007084:	9b08      	ldr	r3, [sp, #32]
 8007086:	3316      	adds	r3, #22
 8007088:	db0b      	blt.n	80070a2 <_strtod_l+0x45a>
 800708a:	9b07      	ldr	r3, [sp, #28]
 800708c:	4a57      	ldr	r2, [pc, #348]	; (80071ec <_strtod_l+0x5a4>)
 800708e:	1b9e      	subs	r6, r3, r6
 8007090:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007094:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007098:	4650      	mov	r0, sl
 800709a:	4659      	mov	r1, fp
 800709c:	f7f9 fbfe 	bl	800089c <__aeabi_ddiv>
 80070a0:	e7d6      	b.n	8007050 <_strtod_l+0x408>
 80070a2:	9b08      	ldr	r3, [sp, #32]
 80070a4:	eba5 0808 	sub.w	r8, r5, r8
 80070a8:	4498      	add	r8, r3
 80070aa:	f1b8 0f00 	cmp.w	r8, #0
 80070ae:	dd71      	ble.n	8007194 <_strtod_l+0x54c>
 80070b0:	f018 030f 	ands.w	r3, r8, #15
 80070b4:	d00a      	beq.n	80070cc <_strtod_l+0x484>
 80070b6:	494d      	ldr	r1, [pc, #308]	; (80071ec <_strtod_l+0x5a4>)
 80070b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80070bc:	4652      	mov	r2, sl
 80070be:	465b      	mov	r3, fp
 80070c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070c4:	f7f9 fac0 	bl	8000648 <__aeabi_dmul>
 80070c8:	4682      	mov	sl, r0
 80070ca:	468b      	mov	fp, r1
 80070cc:	f038 080f 	bics.w	r8, r8, #15
 80070d0:	d04d      	beq.n	800716e <_strtod_l+0x526>
 80070d2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80070d6:	dd22      	ble.n	800711e <_strtod_l+0x4d6>
 80070d8:	2500      	movs	r5, #0
 80070da:	462e      	mov	r6, r5
 80070dc:	9509      	str	r5, [sp, #36]	; 0x24
 80070de:	9507      	str	r5, [sp, #28]
 80070e0:	2322      	movs	r3, #34	; 0x22
 80070e2:	f8df b110 	ldr.w	fp, [pc, #272]	; 80071f4 <_strtod_l+0x5ac>
 80070e6:	6023      	str	r3, [r4, #0]
 80070e8:	f04f 0a00 	mov.w	sl, #0
 80070ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f43f adec 	beq.w	8006ccc <_strtod_l+0x84>
 80070f4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80070f6:	4620      	mov	r0, r4
 80070f8:	f002 f97c 	bl	80093f4 <_Bfree>
 80070fc:	9907      	ldr	r1, [sp, #28]
 80070fe:	4620      	mov	r0, r4
 8007100:	f002 f978 	bl	80093f4 <_Bfree>
 8007104:	4631      	mov	r1, r6
 8007106:	4620      	mov	r0, r4
 8007108:	f002 f974 	bl	80093f4 <_Bfree>
 800710c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800710e:	4620      	mov	r0, r4
 8007110:	f002 f970 	bl	80093f4 <_Bfree>
 8007114:	4629      	mov	r1, r5
 8007116:	4620      	mov	r0, r4
 8007118:	f002 f96c 	bl	80093f4 <_Bfree>
 800711c:	e5d6      	b.n	8006ccc <_strtod_l+0x84>
 800711e:	2300      	movs	r3, #0
 8007120:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007124:	4650      	mov	r0, sl
 8007126:	4659      	mov	r1, fp
 8007128:	4699      	mov	r9, r3
 800712a:	f1b8 0f01 	cmp.w	r8, #1
 800712e:	dc21      	bgt.n	8007174 <_strtod_l+0x52c>
 8007130:	b10b      	cbz	r3, 8007136 <_strtod_l+0x4ee>
 8007132:	4682      	mov	sl, r0
 8007134:	468b      	mov	fp, r1
 8007136:	4b2e      	ldr	r3, [pc, #184]	; (80071f0 <_strtod_l+0x5a8>)
 8007138:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800713c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007140:	4652      	mov	r2, sl
 8007142:	465b      	mov	r3, fp
 8007144:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007148:	f7f9 fa7e 	bl	8000648 <__aeabi_dmul>
 800714c:	4b29      	ldr	r3, [pc, #164]	; (80071f4 <_strtod_l+0x5ac>)
 800714e:	460a      	mov	r2, r1
 8007150:	400b      	ands	r3, r1
 8007152:	4929      	ldr	r1, [pc, #164]	; (80071f8 <_strtod_l+0x5b0>)
 8007154:	428b      	cmp	r3, r1
 8007156:	4682      	mov	sl, r0
 8007158:	d8be      	bhi.n	80070d8 <_strtod_l+0x490>
 800715a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800715e:	428b      	cmp	r3, r1
 8007160:	bf86      	itte	hi
 8007162:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80071fc <_strtod_l+0x5b4>
 8007166:	f04f 3aff 	movhi.w	sl, #4294967295
 800716a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800716e:	2300      	movs	r3, #0
 8007170:	9304      	str	r3, [sp, #16]
 8007172:	e081      	b.n	8007278 <_strtod_l+0x630>
 8007174:	f018 0f01 	tst.w	r8, #1
 8007178:	d007      	beq.n	800718a <_strtod_l+0x542>
 800717a:	4b1d      	ldr	r3, [pc, #116]	; (80071f0 <_strtod_l+0x5a8>)
 800717c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007184:	f7f9 fa60 	bl	8000648 <__aeabi_dmul>
 8007188:	2301      	movs	r3, #1
 800718a:	f109 0901 	add.w	r9, r9, #1
 800718e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007192:	e7ca      	b.n	800712a <_strtod_l+0x4e2>
 8007194:	d0eb      	beq.n	800716e <_strtod_l+0x526>
 8007196:	f1c8 0800 	rsb	r8, r8, #0
 800719a:	f018 020f 	ands.w	r2, r8, #15
 800719e:	d00a      	beq.n	80071b6 <_strtod_l+0x56e>
 80071a0:	4b12      	ldr	r3, [pc, #72]	; (80071ec <_strtod_l+0x5a4>)
 80071a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071a6:	4650      	mov	r0, sl
 80071a8:	4659      	mov	r1, fp
 80071aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ae:	f7f9 fb75 	bl	800089c <__aeabi_ddiv>
 80071b2:	4682      	mov	sl, r0
 80071b4:	468b      	mov	fp, r1
 80071b6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80071ba:	d0d8      	beq.n	800716e <_strtod_l+0x526>
 80071bc:	f1b8 0f1f 	cmp.w	r8, #31
 80071c0:	dd1e      	ble.n	8007200 <_strtod_l+0x5b8>
 80071c2:	2500      	movs	r5, #0
 80071c4:	462e      	mov	r6, r5
 80071c6:	9509      	str	r5, [sp, #36]	; 0x24
 80071c8:	9507      	str	r5, [sp, #28]
 80071ca:	2322      	movs	r3, #34	; 0x22
 80071cc:	f04f 0a00 	mov.w	sl, #0
 80071d0:	f04f 0b00 	mov.w	fp, #0
 80071d4:	6023      	str	r3, [r4, #0]
 80071d6:	e789      	b.n	80070ec <_strtod_l+0x4a4>
 80071d8:	0800a551 	.word	0x0800a551
 80071dc:	0800a58c 	.word	0x0800a58c
 80071e0:	0800a549 	.word	0x0800a549
 80071e4:	0800a6cc 	.word	0x0800a6cc
 80071e8:	0800a9e8 	.word	0x0800a9e8
 80071ec:	0800a8c8 	.word	0x0800a8c8
 80071f0:	0800a8a0 	.word	0x0800a8a0
 80071f4:	7ff00000 	.word	0x7ff00000
 80071f8:	7ca00000 	.word	0x7ca00000
 80071fc:	7fefffff 	.word	0x7fefffff
 8007200:	f018 0310 	ands.w	r3, r8, #16
 8007204:	bf18      	it	ne
 8007206:	236a      	movne	r3, #106	; 0x6a
 8007208:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80075c0 <_strtod_l+0x978>
 800720c:	9304      	str	r3, [sp, #16]
 800720e:	4650      	mov	r0, sl
 8007210:	4659      	mov	r1, fp
 8007212:	2300      	movs	r3, #0
 8007214:	f018 0f01 	tst.w	r8, #1
 8007218:	d004      	beq.n	8007224 <_strtod_l+0x5dc>
 800721a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800721e:	f7f9 fa13 	bl	8000648 <__aeabi_dmul>
 8007222:	2301      	movs	r3, #1
 8007224:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007228:	f109 0908 	add.w	r9, r9, #8
 800722c:	d1f2      	bne.n	8007214 <_strtod_l+0x5cc>
 800722e:	b10b      	cbz	r3, 8007234 <_strtod_l+0x5ec>
 8007230:	4682      	mov	sl, r0
 8007232:	468b      	mov	fp, r1
 8007234:	9b04      	ldr	r3, [sp, #16]
 8007236:	b1bb      	cbz	r3, 8007268 <_strtod_l+0x620>
 8007238:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800723c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007240:	2b00      	cmp	r3, #0
 8007242:	4659      	mov	r1, fp
 8007244:	dd10      	ble.n	8007268 <_strtod_l+0x620>
 8007246:	2b1f      	cmp	r3, #31
 8007248:	f340 8128 	ble.w	800749c <_strtod_l+0x854>
 800724c:	2b34      	cmp	r3, #52	; 0x34
 800724e:	bfde      	ittt	le
 8007250:	3b20      	suble	r3, #32
 8007252:	f04f 32ff 	movle.w	r2, #4294967295
 8007256:	fa02 f303 	lslle.w	r3, r2, r3
 800725a:	f04f 0a00 	mov.w	sl, #0
 800725e:	bfcc      	ite	gt
 8007260:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007264:	ea03 0b01 	andle.w	fp, r3, r1
 8007268:	2200      	movs	r2, #0
 800726a:	2300      	movs	r3, #0
 800726c:	4650      	mov	r0, sl
 800726e:	4659      	mov	r1, fp
 8007270:	f7f9 fc52 	bl	8000b18 <__aeabi_dcmpeq>
 8007274:	2800      	cmp	r0, #0
 8007276:	d1a4      	bne.n	80071c2 <_strtod_l+0x57a>
 8007278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800727a:	9300      	str	r3, [sp, #0]
 800727c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800727e:	462b      	mov	r3, r5
 8007280:	463a      	mov	r2, r7
 8007282:	4620      	mov	r0, r4
 8007284:	f002 f922 	bl	80094cc <__s2b>
 8007288:	9009      	str	r0, [sp, #36]	; 0x24
 800728a:	2800      	cmp	r0, #0
 800728c:	f43f af24 	beq.w	80070d8 <_strtod_l+0x490>
 8007290:	9b07      	ldr	r3, [sp, #28]
 8007292:	1b9e      	subs	r6, r3, r6
 8007294:	9b08      	ldr	r3, [sp, #32]
 8007296:	2b00      	cmp	r3, #0
 8007298:	bfb4      	ite	lt
 800729a:	4633      	movlt	r3, r6
 800729c:	2300      	movge	r3, #0
 800729e:	9310      	str	r3, [sp, #64]	; 0x40
 80072a0:	9b08      	ldr	r3, [sp, #32]
 80072a2:	2500      	movs	r5, #0
 80072a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80072a8:	9318      	str	r3, [sp, #96]	; 0x60
 80072aa:	462e      	mov	r6, r5
 80072ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072ae:	4620      	mov	r0, r4
 80072b0:	6859      	ldr	r1, [r3, #4]
 80072b2:	f002 f85f 	bl	8009374 <_Balloc>
 80072b6:	9007      	str	r0, [sp, #28]
 80072b8:	2800      	cmp	r0, #0
 80072ba:	f43f af11 	beq.w	80070e0 <_strtod_l+0x498>
 80072be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072c0:	691a      	ldr	r2, [r3, #16]
 80072c2:	3202      	adds	r2, #2
 80072c4:	f103 010c 	add.w	r1, r3, #12
 80072c8:	0092      	lsls	r2, r2, #2
 80072ca:	300c      	adds	r0, #12
 80072cc:	f002 f844 	bl	8009358 <memcpy>
 80072d0:	ec4b ab10 	vmov	d0, sl, fp
 80072d4:	aa20      	add	r2, sp, #128	; 0x80
 80072d6:	a91f      	add	r1, sp, #124	; 0x7c
 80072d8:	4620      	mov	r0, r4
 80072da:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80072de:	f002 fc31 	bl	8009b44 <__d2b>
 80072e2:	901e      	str	r0, [sp, #120]	; 0x78
 80072e4:	2800      	cmp	r0, #0
 80072e6:	f43f aefb 	beq.w	80070e0 <_strtod_l+0x498>
 80072ea:	2101      	movs	r1, #1
 80072ec:	4620      	mov	r0, r4
 80072ee:	f002 f987 	bl	8009600 <__i2b>
 80072f2:	4606      	mov	r6, r0
 80072f4:	2800      	cmp	r0, #0
 80072f6:	f43f aef3 	beq.w	80070e0 <_strtod_l+0x498>
 80072fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80072fc:	9904      	ldr	r1, [sp, #16]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	bfab      	itete	ge
 8007302:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8007304:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8007306:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8007308:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800730c:	bfac      	ite	ge
 800730e:	eb03 0902 	addge.w	r9, r3, r2
 8007312:	1ad7      	sublt	r7, r2, r3
 8007314:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007316:	eba3 0801 	sub.w	r8, r3, r1
 800731a:	4490      	add	r8, r2
 800731c:	4ba3      	ldr	r3, [pc, #652]	; (80075ac <_strtod_l+0x964>)
 800731e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007322:	4598      	cmp	r8, r3
 8007324:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007328:	f280 80cc 	bge.w	80074c4 <_strtod_l+0x87c>
 800732c:	eba3 0308 	sub.w	r3, r3, r8
 8007330:	2b1f      	cmp	r3, #31
 8007332:	eba2 0203 	sub.w	r2, r2, r3
 8007336:	f04f 0101 	mov.w	r1, #1
 800733a:	f300 80b6 	bgt.w	80074aa <_strtod_l+0x862>
 800733e:	fa01 f303 	lsl.w	r3, r1, r3
 8007342:	9311      	str	r3, [sp, #68]	; 0x44
 8007344:	2300      	movs	r3, #0
 8007346:	930c      	str	r3, [sp, #48]	; 0x30
 8007348:	eb09 0802 	add.w	r8, r9, r2
 800734c:	9b04      	ldr	r3, [sp, #16]
 800734e:	45c1      	cmp	r9, r8
 8007350:	4417      	add	r7, r2
 8007352:	441f      	add	r7, r3
 8007354:	464b      	mov	r3, r9
 8007356:	bfa8      	it	ge
 8007358:	4643      	movge	r3, r8
 800735a:	42bb      	cmp	r3, r7
 800735c:	bfa8      	it	ge
 800735e:	463b      	movge	r3, r7
 8007360:	2b00      	cmp	r3, #0
 8007362:	bfc2      	ittt	gt
 8007364:	eba8 0803 	subgt.w	r8, r8, r3
 8007368:	1aff      	subgt	r7, r7, r3
 800736a:	eba9 0903 	subgt.w	r9, r9, r3
 800736e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007370:	2b00      	cmp	r3, #0
 8007372:	dd17      	ble.n	80073a4 <_strtod_l+0x75c>
 8007374:	4631      	mov	r1, r6
 8007376:	461a      	mov	r2, r3
 8007378:	4620      	mov	r0, r4
 800737a:	f002 f9fd 	bl	8009778 <__pow5mult>
 800737e:	4606      	mov	r6, r0
 8007380:	2800      	cmp	r0, #0
 8007382:	f43f aead 	beq.w	80070e0 <_strtod_l+0x498>
 8007386:	4601      	mov	r1, r0
 8007388:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800738a:	4620      	mov	r0, r4
 800738c:	f002 f94e 	bl	800962c <__multiply>
 8007390:	900f      	str	r0, [sp, #60]	; 0x3c
 8007392:	2800      	cmp	r0, #0
 8007394:	f43f aea4 	beq.w	80070e0 <_strtod_l+0x498>
 8007398:	991e      	ldr	r1, [sp, #120]	; 0x78
 800739a:	4620      	mov	r0, r4
 800739c:	f002 f82a 	bl	80093f4 <_Bfree>
 80073a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073a2:	931e      	str	r3, [sp, #120]	; 0x78
 80073a4:	f1b8 0f00 	cmp.w	r8, #0
 80073a8:	f300 8091 	bgt.w	80074ce <_strtod_l+0x886>
 80073ac:	9b08      	ldr	r3, [sp, #32]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	dd08      	ble.n	80073c4 <_strtod_l+0x77c>
 80073b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80073b4:	9907      	ldr	r1, [sp, #28]
 80073b6:	4620      	mov	r0, r4
 80073b8:	f002 f9de 	bl	8009778 <__pow5mult>
 80073bc:	9007      	str	r0, [sp, #28]
 80073be:	2800      	cmp	r0, #0
 80073c0:	f43f ae8e 	beq.w	80070e0 <_strtod_l+0x498>
 80073c4:	2f00      	cmp	r7, #0
 80073c6:	dd08      	ble.n	80073da <_strtod_l+0x792>
 80073c8:	9907      	ldr	r1, [sp, #28]
 80073ca:	463a      	mov	r2, r7
 80073cc:	4620      	mov	r0, r4
 80073ce:	f002 fa2d 	bl	800982c <__lshift>
 80073d2:	9007      	str	r0, [sp, #28]
 80073d4:	2800      	cmp	r0, #0
 80073d6:	f43f ae83 	beq.w	80070e0 <_strtod_l+0x498>
 80073da:	f1b9 0f00 	cmp.w	r9, #0
 80073de:	dd08      	ble.n	80073f2 <_strtod_l+0x7aa>
 80073e0:	4631      	mov	r1, r6
 80073e2:	464a      	mov	r2, r9
 80073e4:	4620      	mov	r0, r4
 80073e6:	f002 fa21 	bl	800982c <__lshift>
 80073ea:	4606      	mov	r6, r0
 80073ec:	2800      	cmp	r0, #0
 80073ee:	f43f ae77 	beq.w	80070e0 <_strtod_l+0x498>
 80073f2:	9a07      	ldr	r2, [sp, #28]
 80073f4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80073f6:	4620      	mov	r0, r4
 80073f8:	f002 faa0 	bl	800993c <__mdiff>
 80073fc:	4605      	mov	r5, r0
 80073fe:	2800      	cmp	r0, #0
 8007400:	f43f ae6e 	beq.w	80070e0 <_strtod_l+0x498>
 8007404:	68c3      	ldr	r3, [r0, #12]
 8007406:	930f      	str	r3, [sp, #60]	; 0x3c
 8007408:	2300      	movs	r3, #0
 800740a:	60c3      	str	r3, [r0, #12]
 800740c:	4631      	mov	r1, r6
 800740e:	f002 fa79 	bl	8009904 <__mcmp>
 8007412:	2800      	cmp	r0, #0
 8007414:	da65      	bge.n	80074e2 <_strtod_l+0x89a>
 8007416:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007418:	ea53 030a 	orrs.w	r3, r3, sl
 800741c:	f040 8087 	bne.w	800752e <_strtod_l+0x8e6>
 8007420:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007424:	2b00      	cmp	r3, #0
 8007426:	f040 8082 	bne.w	800752e <_strtod_l+0x8e6>
 800742a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800742e:	0d1b      	lsrs	r3, r3, #20
 8007430:	051b      	lsls	r3, r3, #20
 8007432:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007436:	d97a      	bls.n	800752e <_strtod_l+0x8e6>
 8007438:	696b      	ldr	r3, [r5, #20]
 800743a:	b913      	cbnz	r3, 8007442 <_strtod_l+0x7fa>
 800743c:	692b      	ldr	r3, [r5, #16]
 800743e:	2b01      	cmp	r3, #1
 8007440:	dd75      	ble.n	800752e <_strtod_l+0x8e6>
 8007442:	4629      	mov	r1, r5
 8007444:	2201      	movs	r2, #1
 8007446:	4620      	mov	r0, r4
 8007448:	f002 f9f0 	bl	800982c <__lshift>
 800744c:	4631      	mov	r1, r6
 800744e:	4605      	mov	r5, r0
 8007450:	f002 fa58 	bl	8009904 <__mcmp>
 8007454:	2800      	cmp	r0, #0
 8007456:	dd6a      	ble.n	800752e <_strtod_l+0x8e6>
 8007458:	9904      	ldr	r1, [sp, #16]
 800745a:	4a55      	ldr	r2, [pc, #340]	; (80075b0 <_strtod_l+0x968>)
 800745c:	465b      	mov	r3, fp
 800745e:	2900      	cmp	r1, #0
 8007460:	f000 8085 	beq.w	800756e <_strtod_l+0x926>
 8007464:	ea02 010b 	and.w	r1, r2, fp
 8007468:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800746c:	dc7f      	bgt.n	800756e <_strtod_l+0x926>
 800746e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007472:	f77f aeaa 	ble.w	80071ca <_strtod_l+0x582>
 8007476:	4a4f      	ldr	r2, [pc, #316]	; (80075b4 <_strtod_l+0x96c>)
 8007478:	2300      	movs	r3, #0
 800747a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800747e:	4650      	mov	r0, sl
 8007480:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8007484:	4659      	mov	r1, fp
 8007486:	f7f9 f8df 	bl	8000648 <__aeabi_dmul>
 800748a:	460b      	mov	r3, r1
 800748c:	4303      	orrs	r3, r0
 800748e:	bf08      	it	eq
 8007490:	2322      	moveq	r3, #34	; 0x22
 8007492:	4682      	mov	sl, r0
 8007494:	468b      	mov	fp, r1
 8007496:	bf08      	it	eq
 8007498:	6023      	streq	r3, [r4, #0]
 800749a:	e62b      	b.n	80070f4 <_strtod_l+0x4ac>
 800749c:	f04f 32ff 	mov.w	r2, #4294967295
 80074a0:	fa02 f303 	lsl.w	r3, r2, r3
 80074a4:	ea03 0a0a 	and.w	sl, r3, sl
 80074a8:	e6de      	b.n	8007268 <_strtod_l+0x620>
 80074aa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80074ae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80074b2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80074b6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80074ba:	fa01 f308 	lsl.w	r3, r1, r8
 80074be:	930c      	str	r3, [sp, #48]	; 0x30
 80074c0:	9111      	str	r1, [sp, #68]	; 0x44
 80074c2:	e741      	b.n	8007348 <_strtod_l+0x700>
 80074c4:	2300      	movs	r3, #0
 80074c6:	930c      	str	r3, [sp, #48]	; 0x30
 80074c8:	2301      	movs	r3, #1
 80074ca:	9311      	str	r3, [sp, #68]	; 0x44
 80074cc:	e73c      	b.n	8007348 <_strtod_l+0x700>
 80074ce:	991e      	ldr	r1, [sp, #120]	; 0x78
 80074d0:	4642      	mov	r2, r8
 80074d2:	4620      	mov	r0, r4
 80074d4:	f002 f9aa 	bl	800982c <__lshift>
 80074d8:	901e      	str	r0, [sp, #120]	; 0x78
 80074da:	2800      	cmp	r0, #0
 80074dc:	f47f af66 	bne.w	80073ac <_strtod_l+0x764>
 80074e0:	e5fe      	b.n	80070e0 <_strtod_l+0x498>
 80074e2:	465f      	mov	r7, fp
 80074e4:	d16e      	bne.n	80075c4 <_strtod_l+0x97c>
 80074e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80074e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80074ec:	b342      	cbz	r2, 8007540 <_strtod_l+0x8f8>
 80074ee:	4a32      	ldr	r2, [pc, #200]	; (80075b8 <_strtod_l+0x970>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d128      	bne.n	8007546 <_strtod_l+0x8fe>
 80074f4:	9b04      	ldr	r3, [sp, #16]
 80074f6:	4650      	mov	r0, sl
 80074f8:	b1eb      	cbz	r3, 8007536 <_strtod_l+0x8ee>
 80074fa:	4a2d      	ldr	r2, [pc, #180]	; (80075b0 <_strtod_l+0x968>)
 80074fc:	403a      	ands	r2, r7
 80074fe:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007502:	f04f 31ff 	mov.w	r1, #4294967295
 8007506:	d819      	bhi.n	800753c <_strtod_l+0x8f4>
 8007508:	0d12      	lsrs	r2, r2, #20
 800750a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800750e:	fa01 f303 	lsl.w	r3, r1, r3
 8007512:	4298      	cmp	r0, r3
 8007514:	d117      	bne.n	8007546 <_strtod_l+0x8fe>
 8007516:	4b29      	ldr	r3, [pc, #164]	; (80075bc <_strtod_l+0x974>)
 8007518:	429f      	cmp	r7, r3
 800751a:	d102      	bne.n	8007522 <_strtod_l+0x8da>
 800751c:	3001      	adds	r0, #1
 800751e:	f43f addf 	beq.w	80070e0 <_strtod_l+0x498>
 8007522:	4b23      	ldr	r3, [pc, #140]	; (80075b0 <_strtod_l+0x968>)
 8007524:	403b      	ands	r3, r7
 8007526:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800752a:	f04f 0a00 	mov.w	sl, #0
 800752e:	9b04      	ldr	r3, [sp, #16]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1a0      	bne.n	8007476 <_strtod_l+0x82e>
 8007534:	e5de      	b.n	80070f4 <_strtod_l+0x4ac>
 8007536:	f04f 33ff 	mov.w	r3, #4294967295
 800753a:	e7ea      	b.n	8007512 <_strtod_l+0x8ca>
 800753c:	460b      	mov	r3, r1
 800753e:	e7e8      	b.n	8007512 <_strtod_l+0x8ca>
 8007540:	ea53 030a 	orrs.w	r3, r3, sl
 8007544:	d088      	beq.n	8007458 <_strtod_l+0x810>
 8007546:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007548:	b1db      	cbz	r3, 8007582 <_strtod_l+0x93a>
 800754a:	423b      	tst	r3, r7
 800754c:	d0ef      	beq.n	800752e <_strtod_l+0x8e6>
 800754e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007550:	9a04      	ldr	r2, [sp, #16]
 8007552:	4650      	mov	r0, sl
 8007554:	4659      	mov	r1, fp
 8007556:	b1c3      	cbz	r3, 800758a <_strtod_l+0x942>
 8007558:	f7ff fb5a 	bl	8006c10 <sulp>
 800755c:	4602      	mov	r2, r0
 800755e:	460b      	mov	r3, r1
 8007560:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007564:	f7f8 feba 	bl	80002dc <__adddf3>
 8007568:	4682      	mov	sl, r0
 800756a:	468b      	mov	fp, r1
 800756c:	e7df      	b.n	800752e <_strtod_l+0x8e6>
 800756e:	4013      	ands	r3, r2
 8007570:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007574:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007578:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800757c:	f04f 3aff 	mov.w	sl, #4294967295
 8007580:	e7d5      	b.n	800752e <_strtod_l+0x8e6>
 8007582:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007584:	ea13 0f0a 	tst.w	r3, sl
 8007588:	e7e0      	b.n	800754c <_strtod_l+0x904>
 800758a:	f7ff fb41 	bl	8006c10 <sulp>
 800758e:	4602      	mov	r2, r0
 8007590:	460b      	mov	r3, r1
 8007592:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007596:	f7f8 fe9f 	bl	80002d8 <__aeabi_dsub>
 800759a:	2200      	movs	r2, #0
 800759c:	2300      	movs	r3, #0
 800759e:	4682      	mov	sl, r0
 80075a0:	468b      	mov	fp, r1
 80075a2:	f7f9 fab9 	bl	8000b18 <__aeabi_dcmpeq>
 80075a6:	2800      	cmp	r0, #0
 80075a8:	d0c1      	beq.n	800752e <_strtod_l+0x8e6>
 80075aa:	e60e      	b.n	80071ca <_strtod_l+0x582>
 80075ac:	fffffc02 	.word	0xfffffc02
 80075b0:	7ff00000 	.word	0x7ff00000
 80075b4:	39500000 	.word	0x39500000
 80075b8:	000fffff 	.word	0x000fffff
 80075bc:	7fefffff 	.word	0x7fefffff
 80075c0:	0800a5a0 	.word	0x0800a5a0
 80075c4:	4631      	mov	r1, r6
 80075c6:	4628      	mov	r0, r5
 80075c8:	f002 fb18 	bl	8009bfc <__ratio>
 80075cc:	ec59 8b10 	vmov	r8, r9, d0
 80075d0:	ee10 0a10 	vmov	r0, s0
 80075d4:	2200      	movs	r2, #0
 80075d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80075da:	4649      	mov	r1, r9
 80075dc:	f7f9 fab0 	bl	8000b40 <__aeabi_dcmple>
 80075e0:	2800      	cmp	r0, #0
 80075e2:	d07c      	beq.n	80076de <_strtod_l+0xa96>
 80075e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d04c      	beq.n	8007684 <_strtod_l+0xa3c>
 80075ea:	4b95      	ldr	r3, [pc, #596]	; (8007840 <_strtod_l+0xbf8>)
 80075ec:	2200      	movs	r2, #0
 80075ee:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80075f2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007840 <_strtod_l+0xbf8>
 80075f6:	f04f 0800 	mov.w	r8, #0
 80075fa:	4b92      	ldr	r3, [pc, #584]	; (8007844 <_strtod_l+0xbfc>)
 80075fc:	403b      	ands	r3, r7
 80075fe:	9311      	str	r3, [sp, #68]	; 0x44
 8007600:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007602:	4b91      	ldr	r3, [pc, #580]	; (8007848 <_strtod_l+0xc00>)
 8007604:	429a      	cmp	r2, r3
 8007606:	f040 80b2 	bne.w	800776e <_strtod_l+0xb26>
 800760a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800760e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007612:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007616:	ec4b ab10 	vmov	d0, sl, fp
 800761a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800761e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007622:	f002 fa13 	bl	8009a4c <__ulp>
 8007626:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800762a:	ec53 2b10 	vmov	r2, r3, d0
 800762e:	f7f9 f80b 	bl	8000648 <__aeabi_dmul>
 8007632:	4652      	mov	r2, sl
 8007634:	465b      	mov	r3, fp
 8007636:	f7f8 fe51 	bl	80002dc <__adddf3>
 800763a:	460b      	mov	r3, r1
 800763c:	4981      	ldr	r1, [pc, #516]	; (8007844 <_strtod_l+0xbfc>)
 800763e:	4a83      	ldr	r2, [pc, #524]	; (800784c <_strtod_l+0xc04>)
 8007640:	4019      	ands	r1, r3
 8007642:	4291      	cmp	r1, r2
 8007644:	4682      	mov	sl, r0
 8007646:	d95e      	bls.n	8007706 <_strtod_l+0xabe>
 8007648:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800764a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800764e:	4293      	cmp	r3, r2
 8007650:	d103      	bne.n	800765a <_strtod_l+0xa12>
 8007652:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007654:	3301      	adds	r3, #1
 8007656:	f43f ad43 	beq.w	80070e0 <_strtod_l+0x498>
 800765a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8007858 <_strtod_l+0xc10>
 800765e:	f04f 3aff 	mov.w	sl, #4294967295
 8007662:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007664:	4620      	mov	r0, r4
 8007666:	f001 fec5 	bl	80093f4 <_Bfree>
 800766a:	9907      	ldr	r1, [sp, #28]
 800766c:	4620      	mov	r0, r4
 800766e:	f001 fec1 	bl	80093f4 <_Bfree>
 8007672:	4631      	mov	r1, r6
 8007674:	4620      	mov	r0, r4
 8007676:	f001 febd 	bl	80093f4 <_Bfree>
 800767a:	4629      	mov	r1, r5
 800767c:	4620      	mov	r0, r4
 800767e:	f001 feb9 	bl	80093f4 <_Bfree>
 8007682:	e613      	b.n	80072ac <_strtod_l+0x664>
 8007684:	f1ba 0f00 	cmp.w	sl, #0
 8007688:	d11b      	bne.n	80076c2 <_strtod_l+0xa7a>
 800768a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800768e:	b9f3      	cbnz	r3, 80076ce <_strtod_l+0xa86>
 8007690:	4b6b      	ldr	r3, [pc, #428]	; (8007840 <_strtod_l+0xbf8>)
 8007692:	2200      	movs	r2, #0
 8007694:	4640      	mov	r0, r8
 8007696:	4649      	mov	r1, r9
 8007698:	f7f9 fa48 	bl	8000b2c <__aeabi_dcmplt>
 800769c:	b9d0      	cbnz	r0, 80076d4 <_strtod_l+0xa8c>
 800769e:	4640      	mov	r0, r8
 80076a0:	4649      	mov	r1, r9
 80076a2:	4b6b      	ldr	r3, [pc, #428]	; (8007850 <_strtod_l+0xc08>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	f7f8 ffcf 	bl	8000648 <__aeabi_dmul>
 80076aa:	4680      	mov	r8, r0
 80076ac:	4689      	mov	r9, r1
 80076ae:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80076b2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80076b6:	931b      	str	r3, [sp, #108]	; 0x6c
 80076b8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80076bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80076c0:	e79b      	b.n	80075fa <_strtod_l+0x9b2>
 80076c2:	f1ba 0f01 	cmp.w	sl, #1
 80076c6:	d102      	bne.n	80076ce <_strtod_l+0xa86>
 80076c8:	2f00      	cmp	r7, #0
 80076ca:	f43f ad7e 	beq.w	80071ca <_strtod_l+0x582>
 80076ce:	4b61      	ldr	r3, [pc, #388]	; (8007854 <_strtod_l+0xc0c>)
 80076d0:	2200      	movs	r2, #0
 80076d2:	e78c      	b.n	80075ee <_strtod_l+0x9a6>
 80076d4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007850 <_strtod_l+0xc08>
 80076d8:	f04f 0800 	mov.w	r8, #0
 80076dc:	e7e7      	b.n	80076ae <_strtod_l+0xa66>
 80076de:	4b5c      	ldr	r3, [pc, #368]	; (8007850 <_strtod_l+0xc08>)
 80076e0:	4640      	mov	r0, r8
 80076e2:	4649      	mov	r1, r9
 80076e4:	2200      	movs	r2, #0
 80076e6:	f7f8 ffaf 	bl	8000648 <__aeabi_dmul>
 80076ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076ec:	4680      	mov	r8, r0
 80076ee:	4689      	mov	r9, r1
 80076f0:	b933      	cbnz	r3, 8007700 <_strtod_l+0xab8>
 80076f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80076f6:	9012      	str	r0, [sp, #72]	; 0x48
 80076f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80076fa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80076fe:	e7dd      	b.n	80076bc <_strtod_l+0xa74>
 8007700:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8007704:	e7f9      	b.n	80076fa <_strtod_l+0xab2>
 8007706:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800770a:	9b04      	ldr	r3, [sp, #16]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1a8      	bne.n	8007662 <_strtod_l+0xa1a>
 8007710:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007714:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007716:	0d1b      	lsrs	r3, r3, #20
 8007718:	051b      	lsls	r3, r3, #20
 800771a:	429a      	cmp	r2, r3
 800771c:	d1a1      	bne.n	8007662 <_strtod_l+0xa1a>
 800771e:	4640      	mov	r0, r8
 8007720:	4649      	mov	r1, r9
 8007722:	f7f9 faf1 	bl	8000d08 <__aeabi_d2lz>
 8007726:	f7f8 ff61 	bl	80005ec <__aeabi_l2d>
 800772a:	4602      	mov	r2, r0
 800772c:	460b      	mov	r3, r1
 800772e:	4640      	mov	r0, r8
 8007730:	4649      	mov	r1, r9
 8007732:	f7f8 fdd1 	bl	80002d8 <__aeabi_dsub>
 8007736:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007738:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800773c:	ea43 030a 	orr.w	r3, r3, sl
 8007740:	4313      	orrs	r3, r2
 8007742:	4680      	mov	r8, r0
 8007744:	4689      	mov	r9, r1
 8007746:	d053      	beq.n	80077f0 <_strtod_l+0xba8>
 8007748:	a335      	add	r3, pc, #212	; (adr r3, 8007820 <_strtod_l+0xbd8>)
 800774a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774e:	f7f9 f9ed 	bl	8000b2c <__aeabi_dcmplt>
 8007752:	2800      	cmp	r0, #0
 8007754:	f47f acce 	bne.w	80070f4 <_strtod_l+0x4ac>
 8007758:	a333      	add	r3, pc, #204	; (adr r3, 8007828 <_strtod_l+0xbe0>)
 800775a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775e:	4640      	mov	r0, r8
 8007760:	4649      	mov	r1, r9
 8007762:	f7f9 fa01 	bl	8000b68 <__aeabi_dcmpgt>
 8007766:	2800      	cmp	r0, #0
 8007768:	f43f af7b 	beq.w	8007662 <_strtod_l+0xa1a>
 800776c:	e4c2      	b.n	80070f4 <_strtod_l+0x4ac>
 800776e:	9b04      	ldr	r3, [sp, #16]
 8007770:	b333      	cbz	r3, 80077c0 <_strtod_l+0xb78>
 8007772:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007774:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007778:	d822      	bhi.n	80077c0 <_strtod_l+0xb78>
 800777a:	a32d      	add	r3, pc, #180	; (adr r3, 8007830 <_strtod_l+0xbe8>)
 800777c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007780:	4640      	mov	r0, r8
 8007782:	4649      	mov	r1, r9
 8007784:	f7f9 f9dc 	bl	8000b40 <__aeabi_dcmple>
 8007788:	b1a0      	cbz	r0, 80077b4 <_strtod_l+0xb6c>
 800778a:	4649      	mov	r1, r9
 800778c:	4640      	mov	r0, r8
 800778e:	f7f9 fa33 	bl	8000bf8 <__aeabi_d2uiz>
 8007792:	2801      	cmp	r0, #1
 8007794:	bf38      	it	cc
 8007796:	2001      	movcc	r0, #1
 8007798:	f7f8 fedc 	bl	8000554 <__aeabi_ui2d>
 800779c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800779e:	4680      	mov	r8, r0
 80077a0:	4689      	mov	r9, r1
 80077a2:	bb13      	cbnz	r3, 80077ea <_strtod_l+0xba2>
 80077a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80077a8:	9014      	str	r0, [sp, #80]	; 0x50
 80077aa:	9315      	str	r3, [sp, #84]	; 0x54
 80077ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80077b0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80077b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80077b8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80077bc:	1a9b      	subs	r3, r3, r2
 80077be:	930d      	str	r3, [sp, #52]	; 0x34
 80077c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80077c4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80077c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80077cc:	f002 f93e 	bl	8009a4c <__ulp>
 80077d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80077d4:	ec53 2b10 	vmov	r2, r3, d0
 80077d8:	f7f8 ff36 	bl	8000648 <__aeabi_dmul>
 80077dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80077e0:	f7f8 fd7c 	bl	80002dc <__adddf3>
 80077e4:	4682      	mov	sl, r0
 80077e6:	468b      	mov	fp, r1
 80077e8:	e78f      	b.n	800770a <_strtod_l+0xac2>
 80077ea:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80077ee:	e7dd      	b.n	80077ac <_strtod_l+0xb64>
 80077f0:	a311      	add	r3, pc, #68	; (adr r3, 8007838 <_strtod_l+0xbf0>)
 80077f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f6:	f7f9 f999 	bl	8000b2c <__aeabi_dcmplt>
 80077fa:	e7b4      	b.n	8007766 <_strtod_l+0xb1e>
 80077fc:	2300      	movs	r3, #0
 80077fe:	930e      	str	r3, [sp, #56]	; 0x38
 8007800:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007802:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007804:	6013      	str	r3, [r2, #0]
 8007806:	f7ff ba65 	b.w	8006cd4 <_strtod_l+0x8c>
 800780a:	2b65      	cmp	r3, #101	; 0x65
 800780c:	f43f ab5d 	beq.w	8006eca <_strtod_l+0x282>
 8007810:	2b45      	cmp	r3, #69	; 0x45
 8007812:	f43f ab5a 	beq.w	8006eca <_strtod_l+0x282>
 8007816:	2201      	movs	r2, #1
 8007818:	f7ff bb92 	b.w	8006f40 <_strtod_l+0x2f8>
 800781c:	f3af 8000 	nop.w
 8007820:	94a03595 	.word	0x94a03595
 8007824:	3fdfffff 	.word	0x3fdfffff
 8007828:	35afe535 	.word	0x35afe535
 800782c:	3fe00000 	.word	0x3fe00000
 8007830:	ffc00000 	.word	0xffc00000
 8007834:	41dfffff 	.word	0x41dfffff
 8007838:	94a03595 	.word	0x94a03595
 800783c:	3fcfffff 	.word	0x3fcfffff
 8007840:	3ff00000 	.word	0x3ff00000
 8007844:	7ff00000 	.word	0x7ff00000
 8007848:	7fe00000 	.word	0x7fe00000
 800784c:	7c9fffff 	.word	0x7c9fffff
 8007850:	3fe00000 	.word	0x3fe00000
 8007854:	bff00000 	.word	0xbff00000
 8007858:	7fefffff 	.word	0x7fefffff

0800785c <strtod>:
 800785c:	460a      	mov	r2, r1
 800785e:	4601      	mov	r1, r0
 8007860:	4802      	ldr	r0, [pc, #8]	; (800786c <strtod+0x10>)
 8007862:	4b03      	ldr	r3, [pc, #12]	; (8007870 <strtod+0x14>)
 8007864:	6800      	ldr	r0, [r0, #0]
 8007866:	f7ff b9ef 	b.w	8006c48 <_strtod_l>
 800786a:	bf00      	nop
 800786c:	20000018 	.word	0x20000018
 8007870:	20000080 	.word	0x20000080

08007874 <_strtol_l.isra.0>:
 8007874:	2b01      	cmp	r3, #1
 8007876:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800787a:	d001      	beq.n	8007880 <_strtol_l.isra.0+0xc>
 800787c:	2b24      	cmp	r3, #36	; 0x24
 800787e:	d906      	bls.n	800788e <_strtol_l.isra.0+0x1a>
 8007880:	f7fe fc9c 	bl	80061bc <__errno>
 8007884:	2316      	movs	r3, #22
 8007886:	6003      	str	r3, [r0, #0]
 8007888:	2000      	movs	r0, #0
 800788a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800788e:	4f3a      	ldr	r7, [pc, #232]	; (8007978 <_strtol_l.isra.0+0x104>)
 8007890:	468e      	mov	lr, r1
 8007892:	4676      	mov	r6, lr
 8007894:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007898:	5de5      	ldrb	r5, [r4, r7]
 800789a:	f015 0508 	ands.w	r5, r5, #8
 800789e:	d1f8      	bne.n	8007892 <_strtol_l.isra.0+0x1e>
 80078a0:	2c2d      	cmp	r4, #45	; 0x2d
 80078a2:	d134      	bne.n	800790e <_strtol_l.isra.0+0x9a>
 80078a4:	f89e 4000 	ldrb.w	r4, [lr]
 80078a8:	f04f 0801 	mov.w	r8, #1
 80078ac:	f106 0e02 	add.w	lr, r6, #2
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d05c      	beq.n	800796e <_strtol_l.isra.0+0xfa>
 80078b4:	2b10      	cmp	r3, #16
 80078b6:	d10c      	bne.n	80078d2 <_strtol_l.isra.0+0x5e>
 80078b8:	2c30      	cmp	r4, #48	; 0x30
 80078ba:	d10a      	bne.n	80078d2 <_strtol_l.isra.0+0x5e>
 80078bc:	f89e 4000 	ldrb.w	r4, [lr]
 80078c0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80078c4:	2c58      	cmp	r4, #88	; 0x58
 80078c6:	d14d      	bne.n	8007964 <_strtol_l.isra.0+0xf0>
 80078c8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80078cc:	2310      	movs	r3, #16
 80078ce:	f10e 0e02 	add.w	lr, lr, #2
 80078d2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80078d6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80078da:	2600      	movs	r6, #0
 80078dc:	fbbc f9f3 	udiv	r9, ip, r3
 80078e0:	4635      	mov	r5, r6
 80078e2:	fb03 ca19 	mls	sl, r3, r9, ip
 80078e6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80078ea:	2f09      	cmp	r7, #9
 80078ec:	d818      	bhi.n	8007920 <_strtol_l.isra.0+0xac>
 80078ee:	463c      	mov	r4, r7
 80078f0:	42a3      	cmp	r3, r4
 80078f2:	dd24      	ble.n	800793e <_strtol_l.isra.0+0xca>
 80078f4:	2e00      	cmp	r6, #0
 80078f6:	db1f      	blt.n	8007938 <_strtol_l.isra.0+0xc4>
 80078f8:	45a9      	cmp	r9, r5
 80078fa:	d31d      	bcc.n	8007938 <_strtol_l.isra.0+0xc4>
 80078fc:	d101      	bne.n	8007902 <_strtol_l.isra.0+0x8e>
 80078fe:	45a2      	cmp	sl, r4
 8007900:	db1a      	blt.n	8007938 <_strtol_l.isra.0+0xc4>
 8007902:	fb05 4503 	mla	r5, r5, r3, r4
 8007906:	2601      	movs	r6, #1
 8007908:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800790c:	e7eb      	b.n	80078e6 <_strtol_l.isra.0+0x72>
 800790e:	2c2b      	cmp	r4, #43	; 0x2b
 8007910:	bf08      	it	eq
 8007912:	f89e 4000 	ldrbeq.w	r4, [lr]
 8007916:	46a8      	mov	r8, r5
 8007918:	bf08      	it	eq
 800791a:	f106 0e02 	addeq.w	lr, r6, #2
 800791e:	e7c7      	b.n	80078b0 <_strtol_l.isra.0+0x3c>
 8007920:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007924:	2f19      	cmp	r7, #25
 8007926:	d801      	bhi.n	800792c <_strtol_l.isra.0+0xb8>
 8007928:	3c37      	subs	r4, #55	; 0x37
 800792a:	e7e1      	b.n	80078f0 <_strtol_l.isra.0+0x7c>
 800792c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007930:	2f19      	cmp	r7, #25
 8007932:	d804      	bhi.n	800793e <_strtol_l.isra.0+0xca>
 8007934:	3c57      	subs	r4, #87	; 0x57
 8007936:	e7db      	b.n	80078f0 <_strtol_l.isra.0+0x7c>
 8007938:	f04f 36ff 	mov.w	r6, #4294967295
 800793c:	e7e4      	b.n	8007908 <_strtol_l.isra.0+0x94>
 800793e:	2e00      	cmp	r6, #0
 8007940:	da05      	bge.n	800794e <_strtol_l.isra.0+0xda>
 8007942:	2322      	movs	r3, #34	; 0x22
 8007944:	6003      	str	r3, [r0, #0]
 8007946:	4665      	mov	r5, ip
 8007948:	b942      	cbnz	r2, 800795c <_strtol_l.isra.0+0xe8>
 800794a:	4628      	mov	r0, r5
 800794c:	e79d      	b.n	800788a <_strtol_l.isra.0+0x16>
 800794e:	f1b8 0f00 	cmp.w	r8, #0
 8007952:	d000      	beq.n	8007956 <_strtol_l.isra.0+0xe2>
 8007954:	426d      	negs	r5, r5
 8007956:	2a00      	cmp	r2, #0
 8007958:	d0f7      	beq.n	800794a <_strtol_l.isra.0+0xd6>
 800795a:	b10e      	cbz	r6, 8007960 <_strtol_l.isra.0+0xec>
 800795c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8007960:	6011      	str	r1, [r2, #0]
 8007962:	e7f2      	b.n	800794a <_strtol_l.isra.0+0xd6>
 8007964:	2430      	movs	r4, #48	; 0x30
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1b3      	bne.n	80078d2 <_strtol_l.isra.0+0x5e>
 800796a:	2308      	movs	r3, #8
 800796c:	e7b1      	b.n	80078d2 <_strtol_l.isra.0+0x5e>
 800796e:	2c30      	cmp	r4, #48	; 0x30
 8007970:	d0a4      	beq.n	80078bc <_strtol_l.isra.0+0x48>
 8007972:	230a      	movs	r3, #10
 8007974:	e7ad      	b.n	80078d2 <_strtol_l.isra.0+0x5e>
 8007976:	bf00      	nop
 8007978:	0800a5c9 	.word	0x0800a5c9

0800797c <strtol>:
 800797c:	4613      	mov	r3, r2
 800797e:	460a      	mov	r2, r1
 8007980:	4601      	mov	r1, r0
 8007982:	4802      	ldr	r0, [pc, #8]	; (800798c <strtol+0x10>)
 8007984:	6800      	ldr	r0, [r0, #0]
 8007986:	f7ff bf75 	b.w	8007874 <_strtol_l.isra.0>
 800798a:	bf00      	nop
 800798c:	20000018 	.word	0x20000018

08007990 <__swbuf_r>:
 8007990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007992:	460e      	mov	r6, r1
 8007994:	4614      	mov	r4, r2
 8007996:	4605      	mov	r5, r0
 8007998:	b118      	cbz	r0, 80079a2 <__swbuf_r+0x12>
 800799a:	6983      	ldr	r3, [r0, #24]
 800799c:	b90b      	cbnz	r3, 80079a2 <__swbuf_r+0x12>
 800799e:	f001 f849 	bl	8008a34 <__sinit>
 80079a2:	4b21      	ldr	r3, [pc, #132]	; (8007a28 <__swbuf_r+0x98>)
 80079a4:	429c      	cmp	r4, r3
 80079a6:	d12b      	bne.n	8007a00 <__swbuf_r+0x70>
 80079a8:	686c      	ldr	r4, [r5, #4]
 80079aa:	69a3      	ldr	r3, [r4, #24]
 80079ac:	60a3      	str	r3, [r4, #8]
 80079ae:	89a3      	ldrh	r3, [r4, #12]
 80079b0:	071a      	lsls	r2, r3, #28
 80079b2:	d52f      	bpl.n	8007a14 <__swbuf_r+0x84>
 80079b4:	6923      	ldr	r3, [r4, #16]
 80079b6:	b36b      	cbz	r3, 8007a14 <__swbuf_r+0x84>
 80079b8:	6923      	ldr	r3, [r4, #16]
 80079ba:	6820      	ldr	r0, [r4, #0]
 80079bc:	1ac0      	subs	r0, r0, r3
 80079be:	6963      	ldr	r3, [r4, #20]
 80079c0:	b2f6      	uxtb	r6, r6
 80079c2:	4283      	cmp	r3, r0
 80079c4:	4637      	mov	r7, r6
 80079c6:	dc04      	bgt.n	80079d2 <__swbuf_r+0x42>
 80079c8:	4621      	mov	r1, r4
 80079ca:	4628      	mov	r0, r5
 80079cc:	f000 ff9e 	bl	800890c <_fflush_r>
 80079d0:	bb30      	cbnz	r0, 8007a20 <__swbuf_r+0x90>
 80079d2:	68a3      	ldr	r3, [r4, #8]
 80079d4:	3b01      	subs	r3, #1
 80079d6:	60a3      	str	r3, [r4, #8]
 80079d8:	6823      	ldr	r3, [r4, #0]
 80079da:	1c5a      	adds	r2, r3, #1
 80079dc:	6022      	str	r2, [r4, #0]
 80079de:	701e      	strb	r6, [r3, #0]
 80079e0:	6963      	ldr	r3, [r4, #20]
 80079e2:	3001      	adds	r0, #1
 80079e4:	4283      	cmp	r3, r0
 80079e6:	d004      	beq.n	80079f2 <__swbuf_r+0x62>
 80079e8:	89a3      	ldrh	r3, [r4, #12]
 80079ea:	07db      	lsls	r3, r3, #31
 80079ec:	d506      	bpl.n	80079fc <__swbuf_r+0x6c>
 80079ee:	2e0a      	cmp	r6, #10
 80079f0:	d104      	bne.n	80079fc <__swbuf_r+0x6c>
 80079f2:	4621      	mov	r1, r4
 80079f4:	4628      	mov	r0, r5
 80079f6:	f000 ff89 	bl	800890c <_fflush_r>
 80079fa:	b988      	cbnz	r0, 8007a20 <__swbuf_r+0x90>
 80079fc:	4638      	mov	r0, r7
 80079fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a00:	4b0a      	ldr	r3, [pc, #40]	; (8007a2c <__swbuf_r+0x9c>)
 8007a02:	429c      	cmp	r4, r3
 8007a04:	d101      	bne.n	8007a0a <__swbuf_r+0x7a>
 8007a06:	68ac      	ldr	r4, [r5, #8]
 8007a08:	e7cf      	b.n	80079aa <__swbuf_r+0x1a>
 8007a0a:	4b09      	ldr	r3, [pc, #36]	; (8007a30 <__swbuf_r+0xa0>)
 8007a0c:	429c      	cmp	r4, r3
 8007a0e:	bf08      	it	eq
 8007a10:	68ec      	ldreq	r4, [r5, #12]
 8007a12:	e7ca      	b.n	80079aa <__swbuf_r+0x1a>
 8007a14:	4621      	mov	r1, r4
 8007a16:	4628      	mov	r0, r5
 8007a18:	f000 f80c 	bl	8007a34 <__swsetup_r>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	d0cb      	beq.n	80079b8 <__swbuf_r+0x28>
 8007a20:	f04f 37ff 	mov.w	r7, #4294967295
 8007a24:	e7ea      	b.n	80079fc <__swbuf_r+0x6c>
 8007a26:	bf00      	nop
 8007a28:	0800a780 	.word	0x0800a780
 8007a2c:	0800a7a0 	.word	0x0800a7a0
 8007a30:	0800a760 	.word	0x0800a760

08007a34 <__swsetup_r>:
 8007a34:	4b32      	ldr	r3, [pc, #200]	; (8007b00 <__swsetup_r+0xcc>)
 8007a36:	b570      	push	{r4, r5, r6, lr}
 8007a38:	681d      	ldr	r5, [r3, #0]
 8007a3a:	4606      	mov	r6, r0
 8007a3c:	460c      	mov	r4, r1
 8007a3e:	b125      	cbz	r5, 8007a4a <__swsetup_r+0x16>
 8007a40:	69ab      	ldr	r3, [r5, #24]
 8007a42:	b913      	cbnz	r3, 8007a4a <__swsetup_r+0x16>
 8007a44:	4628      	mov	r0, r5
 8007a46:	f000 fff5 	bl	8008a34 <__sinit>
 8007a4a:	4b2e      	ldr	r3, [pc, #184]	; (8007b04 <__swsetup_r+0xd0>)
 8007a4c:	429c      	cmp	r4, r3
 8007a4e:	d10f      	bne.n	8007a70 <__swsetup_r+0x3c>
 8007a50:	686c      	ldr	r4, [r5, #4]
 8007a52:	89a3      	ldrh	r3, [r4, #12]
 8007a54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a58:	0719      	lsls	r1, r3, #28
 8007a5a:	d42c      	bmi.n	8007ab6 <__swsetup_r+0x82>
 8007a5c:	06dd      	lsls	r5, r3, #27
 8007a5e:	d411      	bmi.n	8007a84 <__swsetup_r+0x50>
 8007a60:	2309      	movs	r3, #9
 8007a62:	6033      	str	r3, [r6, #0]
 8007a64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a68:	81a3      	strh	r3, [r4, #12]
 8007a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a6e:	e03e      	b.n	8007aee <__swsetup_r+0xba>
 8007a70:	4b25      	ldr	r3, [pc, #148]	; (8007b08 <__swsetup_r+0xd4>)
 8007a72:	429c      	cmp	r4, r3
 8007a74:	d101      	bne.n	8007a7a <__swsetup_r+0x46>
 8007a76:	68ac      	ldr	r4, [r5, #8]
 8007a78:	e7eb      	b.n	8007a52 <__swsetup_r+0x1e>
 8007a7a:	4b24      	ldr	r3, [pc, #144]	; (8007b0c <__swsetup_r+0xd8>)
 8007a7c:	429c      	cmp	r4, r3
 8007a7e:	bf08      	it	eq
 8007a80:	68ec      	ldreq	r4, [r5, #12]
 8007a82:	e7e6      	b.n	8007a52 <__swsetup_r+0x1e>
 8007a84:	0758      	lsls	r0, r3, #29
 8007a86:	d512      	bpl.n	8007aae <__swsetup_r+0x7a>
 8007a88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a8a:	b141      	cbz	r1, 8007a9e <__swsetup_r+0x6a>
 8007a8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a90:	4299      	cmp	r1, r3
 8007a92:	d002      	beq.n	8007a9a <__swsetup_r+0x66>
 8007a94:	4630      	mov	r0, r6
 8007a96:	f002 f937 	bl	8009d08 <_free_r>
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	6363      	str	r3, [r4, #52]	; 0x34
 8007a9e:	89a3      	ldrh	r3, [r4, #12]
 8007aa0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007aa4:	81a3      	strh	r3, [r4, #12]
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	6063      	str	r3, [r4, #4]
 8007aaa:	6923      	ldr	r3, [r4, #16]
 8007aac:	6023      	str	r3, [r4, #0]
 8007aae:	89a3      	ldrh	r3, [r4, #12]
 8007ab0:	f043 0308 	orr.w	r3, r3, #8
 8007ab4:	81a3      	strh	r3, [r4, #12]
 8007ab6:	6923      	ldr	r3, [r4, #16]
 8007ab8:	b94b      	cbnz	r3, 8007ace <__swsetup_r+0x9a>
 8007aba:	89a3      	ldrh	r3, [r4, #12]
 8007abc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ac4:	d003      	beq.n	8007ace <__swsetup_r+0x9a>
 8007ac6:	4621      	mov	r1, r4
 8007ac8:	4630      	mov	r0, r6
 8007aca:	f001 fbeb 	bl	80092a4 <__smakebuf_r>
 8007ace:	89a0      	ldrh	r0, [r4, #12]
 8007ad0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ad4:	f010 0301 	ands.w	r3, r0, #1
 8007ad8:	d00a      	beq.n	8007af0 <__swsetup_r+0xbc>
 8007ada:	2300      	movs	r3, #0
 8007adc:	60a3      	str	r3, [r4, #8]
 8007ade:	6963      	ldr	r3, [r4, #20]
 8007ae0:	425b      	negs	r3, r3
 8007ae2:	61a3      	str	r3, [r4, #24]
 8007ae4:	6923      	ldr	r3, [r4, #16]
 8007ae6:	b943      	cbnz	r3, 8007afa <__swsetup_r+0xc6>
 8007ae8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007aec:	d1ba      	bne.n	8007a64 <__swsetup_r+0x30>
 8007aee:	bd70      	pop	{r4, r5, r6, pc}
 8007af0:	0781      	lsls	r1, r0, #30
 8007af2:	bf58      	it	pl
 8007af4:	6963      	ldrpl	r3, [r4, #20]
 8007af6:	60a3      	str	r3, [r4, #8]
 8007af8:	e7f4      	b.n	8007ae4 <__swsetup_r+0xb0>
 8007afa:	2000      	movs	r0, #0
 8007afc:	e7f7      	b.n	8007aee <__swsetup_r+0xba>
 8007afe:	bf00      	nop
 8007b00:	20000018 	.word	0x20000018
 8007b04:	0800a780 	.word	0x0800a780
 8007b08:	0800a7a0 	.word	0x0800a7a0
 8007b0c:	0800a760 	.word	0x0800a760

08007b10 <quorem>:
 8007b10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b14:	6903      	ldr	r3, [r0, #16]
 8007b16:	690c      	ldr	r4, [r1, #16]
 8007b18:	42a3      	cmp	r3, r4
 8007b1a:	4607      	mov	r7, r0
 8007b1c:	f2c0 8081 	blt.w	8007c22 <quorem+0x112>
 8007b20:	3c01      	subs	r4, #1
 8007b22:	f101 0814 	add.w	r8, r1, #20
 8007b26:	f100 0514 	add.w	r5, r0, #20
 8007b2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b2e:	9301      	str	r3, [sp, #4]
 8007b30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007b34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007b40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007b44:	fbb2 f6f3 	udiv	r6, r2, r3
 8007b48:	d331      	bcc.n	8007bae <quorem+0x9e>
 8007b4a:	f04f 0e00 	mov.w	lr, #0
 8007b4e:	4640      	mov	r0, r8
 8007b50:	46ac      	mov	ip, r5
 8007b52:	46f2      	mov	sl, lr
 8007b54:	f850 2b04 	ldr.w	r2, [r0], #4
 8007b58:	b293      	uxth	r3, r2
 8007b5a:	fb06 e303 	mla	r3, r6, r3, lr
 8007b5e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	ebaa 0303 	sub.w	r3, sl, r3
 8007b68:	0c12      	lsrs	r2, r2, #16
 8007b6a:	f8dc a000 	ldr.w	sl, [ip]
 8007b6e:	fb06 e202 	mla	r2, r6, r2, lr
 8007b72:	fa13 f38a 	uxtah	r3, r3, sl
 8007b76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007b7a:	fa1f fa82 	uxth.w	sl, r2
 8007b7e:	f8dc 2000 	ldr.w	r2, [ip]
 8007b82:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007b86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b90:	4581      	cmp	r9, r0
 8007b92:	f84c 3b04 	str.w	r3, [ip], #4
 8007b96:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007b9a:	d2db      	bcs.n	8007b54 <quorem+0x44>
 8007b9c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007ba0:	b92b      	cbnz	r3, 8007bae <quorem+0x9e>
 8007ba2:	9b01      	ldr	r3, [sp, #4]
 8007ba4:	3b04      	subs	r3, #4
 8007ba6:	429d      	cmp	r5, r3
 8007ba8:	461a      	mov	r2, r3
 8007baa:	d32e      	bcc.n	8007c0a <quorem+0xfa>
 8007bac:	613c      	str	r4, [r7, #16]
 8007bae:	4638      	mov	r0, r7
 8007bb0:	f001 fea8 	bl	8009904 <__mcmp>
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	db24      	blt.n	8007c02 <quorem+0xf2>
 8007bb8:	3601      	adds	r6, #1
 8007bba:	4628      	mov	r0, r5
 8007bbc:	f04f 0c00 	mov.w	ip, #0
 8007bc0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007bc4:	f8d0 e000 	ldr.w	lr, [r0]
 8007bc8:	b293      	uxth	r3, r2
 8007bca:	ebac 0303 	sub.w	r3, ip, r3
 8007bce:	0c12      	lsrs	r2, r2, #16
 8007bd0:	fa13 f38e 	uxtah	r3, r3, lr
 8007bd4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007bd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007be2:	45c1      	cmp	r9, r8
 8007be4:	f840 3b04 	str.w	r3, [r0], #4
 8007be8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007bec:	d2e8      	bcs.n	8007bc0 <quorem+0xb0>
 8007bee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bf6:	b922      	cbnz	r2, 8007c02 <quorem+0xf2>
 8007bf8:	3b04      	subs	r3, #4
 8007bfa:	429d      	cmp	r5, r3
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	d30a      	bcc.n	8007c16 <quorem+0x106>
 8007c00:	613c      	str	r4, [r7, #16]
 8007c02:	4630      	mov	r0, r6
 8007c04:	b003      	add	sp, #12
 8007c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c0a:	6812      	ldr	r2, [r2, #0]
 8007c0c:	3b04      	subs	r3, #4
 8007c0e:	2a00      	cmp	r2, #0
 8007c10:	d1cc      	bne.n	8007bac <quorem+0x9c>
 8007c12:	3c01      	subs	r4, #1
 8007c14:	e7c7      	b.n	8007ba6 <quorem+0x96>
 8007c16:	6812      	ldr	r2, [r2, #0]
 8007c18:	3b04      	subs	r3, #4
 8007c1a:	2a00      	cmp	r2, #0
 8007c1c:	d1f0      	bne.n	8007c00 <quorem+0xf0>
 8007c1e:	3c01      	subs	r4, #1
 8007c20:	e7eb      	b.n	8007bfa <quorem+0xea>
 8007c22:	2000      	movs	r0, #0
 8007c24:	e7ee      	b.n	8007c04 <quorem+0xf4>
	...

08007c28 <_dtoa_r>:
 8007c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c2c:	ed2d 8b02 	vpush	{d8}
 8007c30:	ec57 6b10 	vmov	r6, r7, d0
 8007c34:	b095      	sub	sp, #84	; 0x54
 8007c36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007c38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007c3c:	9105      	str	r1, [sp, #20]
 8007c3e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007c42:	4604      	mov	r4, r0
 8007c44:	9209      	str	r2, [sp, #36]	; 0x24
 8007c46:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c48:	b975      	cbnz	r5, 8007c68 <_dtoa_r+0x40>
 8007c4a:	2010      	movs	r0, #16
 8007c4c:	f001 fb6a 	bl	8009324 <malloc>
 8007c50:	4602      	mov	r2, r0
 8007c52:	6260      	str	r0, [r4, #36]	; 0x24
 8007c54:	b920      	cbnz	r0, 8007c60 <_dtoa_r+0x38>
 8007c56:	4bb2      	ldr	r3, [pc, #712]	; (8007f20 <_dtoa_r+0x2f8>)
 8007c58:	21ea      	movs	r1, #234	; 0xea
 8007c5a:	48b2      	ldr	r0, [pc, #712]	; (8007f24 <_dtoa_r+0x2fc>)
 8007c5c:	f002 fae4 	bl	800a228 <__assert_func>
 8007c60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007c64:	6005      	str	r5, [r0, #0]
 8007c66:	60c5      	str	r5, [r0, #12]
 8007c68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c6a:	6819      	ldr	r1, [r3, #0]
 8007c6c:	b151      	cbz	r1, 8007c84 <_dtoa_r+0x5c>
 8007c6e:	685a      	ldr	r2, [r3, #4]
 8007c70:	604a      	str	r2, [r1, #4]
 8007c72:	2301      	movs	r3, #1
 8007c74:	4093      	lsls	r3, r2
 8007c76:	608b      	str	r3, [r1, #8]
 8007c78:	4620      	mov	r0, r4
 8007c7a:	f001 fbbb 	bl	80093f4 <_Bfree>
 8007c7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c80:	2200      	movs	r2, #0
 8007c82:	601a      	str	r2, [r3, #0]
 8007c84:	1e3b      	subs	r3, r7, #0
 8007c86:	bfb9      	ittee	lt
 8007c88:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007c8c:	9303      	strlt	r3, [sp, #12]
 8007c8e:	2300      	movge	r3, #0
 8007c90:	f8c8 3000 	strge.w	r3, [r8]
 8007c94:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007c98:	4ba3      	ldr	r3, [pc, #652]	; (8007f28 <_dtoa_r+0x300>)
 8007c9a:	bfbc      	itt	lt
 8007c9c:	2201      	movlt	r2, #1
 8007c9e:	f8c8 2000 	strlt.w	r2, [r8]
 8007ca2:	ea33 0309 	bics.w	r3, r3, r9
 8007ca6:	d11b      	bne.n	8007ce0 <_dtoa_r+0xb8>
 8007ca8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007caa:	f242 730f 	movw	r3, #9999	; 0x270f
 8007cae:	6013      	str	r3, [r2, #0]
 8007cb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007cb4:	4333      	orrs	r3, r6
 8007cb6:	f000 857a 	beq.w	80087ae <_dtoa_r+0xb86>
 8007cba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cbc:	b963      	cbnz	r3, 8007cd8 <_dtoa_r+0xb0>
 8007cbe:	4b9b      	ldr	r3, [pc, #620]	; (8007f2c <_dtoa_r+0x304>)
 8007cc0:	e024      	b.n	8007d0c <_dtoa_r+0xe4>
 8007cc2:	4b9b      	ldr	r3, [pc, #620]	; (8007f30 <_dtoa_r+0x308>)
 8007cc4:	9300      	str	r3, [sp, #0]
 8007cc6:	3308      	adds	r3, #8
 8007cc8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007cca:	6013      	str	r3, [r2, #0]
 8007ccc:	9800      	ldr	r0, [sp, #0]
 8007cce:	b015      	add	sp, #84	; 0x54
 8007cd0:	ecbd 8b02 	vpop	{d8}
 8007cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd8:	4b94      	ldr	r3, [pc, #592]	; (8007f2c <_dtoa_r+0x304>)
 8007cda:	9300      	str	r3, [sp, #0]
 8007cdc:	3303      	adds	r3, #3
 8007cde:	e7f3      	b.n	8007cc8 <_dtoa_r+0xa0>
 8007ce0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	ec51 0b17 	vmov	r0, r1, d7
 8007cea:	2300      	movs	r3, #0
 8007cec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007cf0:	f7f8 ff12 	bl	8000b18 <__aeabi_dcmpeq>
 8007cf4:	4680      	mov	r8, r0
 8007cf6:	b158      	cbz	r0, 8007d10 <_dtoa_r+0xe8>
 8007cf8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	6013      	str	r3, [r2, #0]
 8007cfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f000 8551 	beq.w	80087a8 <_dtoa_r+0xb80>
 8007d06:	488b      	ldr	r0, [pc, #556]	; (8007f34 <_dtoa_r+0x30c>)
 8007d08:	6018      	str	r0, [r3, #0]
 8007d0a:	1e43      	subs	r3, r0, #1
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	e7dd      	b.n	8007ccc <_dtoa_r+0xa4>
 8007d10:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007d14:	aa12      	add	r2, sp, #72	; 0x48
 8007d16:	a913      	add	r1, sp, #76	; 0x4c
 8007d18:	4620      	mov	r0, r4
 8007d1a:	f001 ff13 	bl	8009b44 <__d2b>
 8007d1e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007d22:	4683      	mov	fp, r0
 8007d24:	2d00      	cmp	r5, #0
 8007d26:	d07c      	beq.n	8007e22 <_dtoa_r+0x1fa>
 8007d28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d2a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007d2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d32:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007d36:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007d3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007d3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007d42:	4b7d      	ldr	r3, [pc, #500]	; (8007f38 <_dtoa_r+0x310>)
 8007d44:	2200      	movs	r2, #0
 8007d46:	4630      	mov	r0, r6
 8007d48:	4639      	mov	r1, r7
 8007d4a:	f7f8 fac5 	bl	80002d8 <__aeabi_dsub>
 8007d4e:	a36e      	add	r3, pc, #440	; (adr r3, 8007f08 <_dtoa_r+0x2e0>)
 8007d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d54:	f7f8 fc78 	bl	8000648 <__aeabi_dmul>
 8007d58:	a36d      	add	r3, pc, #436	; (adr r3, 8007f10 <_dtoa_r+0x2e8>)
 8007d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5e:	f7f8 fabd 	bl	80002dc <__adddf3>
 8007d62:	4606      	mov	r6, r0
 8007d64:	4628      	mov	r0, r5
 8007d66:	460f      	mov	r7, r1
 8007d68:	f7f8 fc04 	bl	8000574 <__aeabi_i2d>
 8007d6c:	a36a      	add	r3, pc, #424	; (adr r3, 8007f18 <_dtoa_r+0x2f0>)
 8007d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d72:	f7f8 fc69 	bl	8000648 <__aeabi_dmul>
 8007d76:	4602      	mov	r2, r0
 8007d78:	460b      	mov	r3, r1
 8007d7a:	4630      	mov	r0, r6
 8007d7c:	4639      	mov	r1, r7
 8007d7e:	f7f8 faad 	bl	80002dc <__adddf3>
 8007d82:	4606      	mov	r6, r0
 8007d84:	460f      	mov	r7, r1
 8007d86:	f7f8 ff0f 	bl	8000ba8 <__aeabi_d2iz>
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	4682      	mov	sl, r0
 8007d8e:	2300      	movs	r3, #0
 8007d90:	4630      	mov	r0, r6
 8007d92:	4639      	mov	r1, r7
 8007d94:	f7f8 feca 	bl	8000b2c <__aeabi_dcmplt>
 8007d98:	b148      	cbz	r0, 8007dae <_dtoa_r+0x186>
 8007d9a:	4650      	mov	r0, sl
 8007d9c:	f7f8 fbea 	bl	8000574 <__aeabi_i2d>
 8007da0:	4632      	mov	r2, r6
 8007da2:	463b      	mov	r3, r7
 8007da4:	f7f8 feb8 	bl	8000b18 <__aeabi_dcmpeq>
 8007da8:	b908      	cbnz	r0, 8007dae <_dtoa_r+0x186>
 8007daa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007dae:	f1ba 0f16 	cmp.w	sl, #22
 8007db2:	d854      	bhi.n	8007e5e <_dtoa_r+0x236>
 8007db4:	4b61      	ldr	r3, [pc, #388]	; (8007f3c <_dtoa_r+0x314>)
 8007db6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007dc2:	f7f8 feb3 	bl	8000b2c <__aeabi_dcmplt>
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	d04b      	beq.n	8007e62 <_dtoa_r+0x23a>
 8007dca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007dce:	2300      	movs	r3, #0
 8007dd0:	930e      	str	r3, [sp, #56]	; 0x38
 8007dd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007dd4:	1b5d      	subs	r5, r3, r5
 8007dd6:	1e6b      	subs	r3, r5, #1
 8007dd8:	9304      	str	r3, [sp, #16]
 8007dda:	bf43      	ittte	mi
 8007ddc:	2300      	movmi	r3, #0
 8007dde:	f1c5 0801 	rsbmi	r8, r5, #1
 8007de2:	9304      	strmi	r3, [sp, #16]
 8007de4:	f04f 0800 	movpl.w	r8, #0
 8007de8:	f1ba 0f00 	cmp.w	sl, #0
 8007dec:	db3b      	blt.n	8007e66 <_dtoa_r+0x23e>
 8007dee:	9b04      	ldr	r3, [sp, #16]
 8007df0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007df4:	4453      	add	r3, sl
 8007df6:	9304      	str	r3, [sp, #16]
 8007df8:	2300      	movs	r3, #0
 8007dfa:	9306      	str	r3, [sp, #24]
 8007dfc:	9b05      	ldr	r3, [sp, #20]
 8007dfe:	2b09      	cmp	r3, #9
 8007e00:	d869      	bhi.n	8007ed6 <_dtoa_r+0x2ae>
 8007e02:	2b05      	cmp	r3, #5
 8007e04:	bfc4      	itt	gt
 8007e06:	3b04      	subgt	r3, #4
 8007e08:	9305      	strgt	r3, [sp, #20]
 8007e0a:	9b05      	ldr	r3, [sp, #20]
 8007e0c:	f1a3 0302 	sub.w	r3, r3, #2
 8007e10:	bfcc      	ite	gt
 8007e12:	2500      	movgt	r5, #0
 8007e14:	2501      	movle	r5, #1
 8007e16:	2b03      	cmp	r3, #3
 8007e18:	d869      	bhi.n	8007eee <_dtoa_r+0x2c6>
 8007e1a:	e8df f003 	tbb	[pc, r3]
 8007e1e:	4e2c      	.short	0x4e2c
 8007e20:	5a4c      	.short	0x5a4c
 8007e22:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007e26:	441d      	add	r5, r3
 8007e28:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007e2c:	2b20      	cmp	r3, #32
 8007e2e:	bfc1      	itttt	gt
 8007e30:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007e34:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007e38:	fa09 f303 	lslgt.w	r3, r9, r3
 8007e3c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007e40:	bfda      	itte	le
 8007e42:	f1c3 0320 	rsble	r3, r3, #32
 8007e46:	fa06 f003 	lslle.w	r0, r6, r3
 8007e4a:	4318      	orrgt	r0, r3
 8007e4c:	f7f8 fb82 	bl	8000554 <__aeabi_ui2d>
 8007e50:	2301      	movs	r3, #1
 8007e52:	4606      	mov	r6, r0
 8007e54:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007e58:	3d01      	subs	r5, #1
 8007e5a:	9310      	str	r3, [sp, #64]	; 0x40
 8007e5c:	e771      	b.n	8007d42 <_dtoa_r+0x11a>
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e7b6      	b.n	8007dd0 <_dtoa_r+0x1a8>
 8007e62:	900e      	str	r0, [sp, #56]	; 0x38
 8007e64:	e7b5      	b.n	8007dd2 <_dtoa_r+0x1aa>
 8007e66:	f1ca 0300 	rsb	r3, sl, #0
 8007e6a:	9306      	str	r3, [sp, #24]
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	eba8 080a 	sub.w	r8, r8, sl
 8007e72:	930d      	str	r3, [sp, #52]	; 0x34
 8007e74:	e7c2      	b.n	8007dfc <_dtoa_r+0x1d4>
 8007e76:	2300      	movs	r3, #0
 8007e78:	9308      	str	r3, [sp, #32]
 8007e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	dc39      	bgt.n	8007ef4 <_dtoa_r+0x2cc>
 8007e80:	f04f 0901 	mov.w	r9, #1
 8007e84:	f8cd 9004 	str.w	r9, [sp, #4]
 8007e88:	464b      	mov	r3, r9
 8007e8a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007e8e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007e90:	2200      	movs	r2, #0
 8007e92:	6042      	str	r2, [r0, #4]
 8007e94:	2204      	movs	r2, #4
 8007e96:	f102 0614 	add.w	r6, r2, #20
 8007e9a:	429e      	cmp	r6, r3
 8007e9c:	6841      	ldr	r1, [r0, #4]
 8007e9e:	d92f      	bls.n	8007f00 <_dtoa_r+0x2d8>
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	f001 fa67 	bl	8009374 <_Balloc>
 8007ea6:	9000      	str	r0, [sp, #0]
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	d14b      	bne.n	8007f44 <_dtoa_r+0x31c>
 8007eac:	4b24      	ldr	r3, [pc, #144]	; (8007f40 <_dtoa_r+0x318>)
 8007eae:	4602      	mov	r2, r0
 8007eb0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007eb4:	e6d1      	b.n	8007c5a <_dtoa_r+0x32>
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e7de      	b.n	8007e78 <_dtoa_r+0x250>
 8007eba:	2300      	movs	r3, #0
 8007ebc:	9308      	str	r3, [sp, #32]
 8007ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ec0:	eb0a 0903 	add.w	r9, sl, r3
 8007ec4:	f109 0301 	add.w	r3, r9, #1
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	9301      	str	r3, [sp, #4]
 8007ecc:	bfb8      	it	lt
 8007ece:	2301      	movlt	r3, #1
 8007ed0:	e7dd      	b.n	8007e8e <_dtoa_r+0x266>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e7f2      	b.n	8007ebc <_dtoa_r+0x294>
 8007ed6:	2501      	movs	r5, #1
 8007ed8:	2300      	movs	r3, #0
 8007eda:	9305      	str	r3, [sp, #20]
 8007edc:	9508      	str	r5, [sp, #32]
 8007ede:	f04f 39ff 	mov.w	r9, #4294967295
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f8cd 9004 	str.w	r9, [sp, #4]
 8007ee8:	2312      	movs	r3, #18
 8007eea:	9209      	str	r2, [sp, #36]	; 0x24
 8007eec:	e7cf      	b.n	8007e8e <_dtoa_r+0x266>
 8007eee:	2301      	movs	r3, #1
 8007ef0:	9308      	str	r3, [sp, #32]
 8007ef2:	e7f4      	b.n	8007ede <_dtoa_r+0x2b6>
 8007ef4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007ef8:	f8cd 9004 	str.w	r9, [sp, #4]
 8007efc:	464b      	mov	r3, r9
 8007efe:	e7c6      	b.n	8007e8e <_dtoa_r+0x266>
 8007f00:	3101      	adds	r1, #1
 8007f02:	6041      	str	r1, [r0, #4]
 8007f04:	0052      	lsls	r2, r2, #1
 8007f06:	e7c6      	b.n	8007e96 <_dtoa_r+0x26e>
 8007f08:	636f4361 	.word	0x636f4361
 8007f0c:	3fd287a7 	.word	0x3fd287a7
 8007f10:	8b60c8b3 	.word	0x8b60c8b3
 8007f14:	3fc68a28 	.word	0x3fc68a28
 8007f18:	509f79fb 	.word	0x509f79fb
 8007f1c:	3fd34413 	.word	0x3fd34413
 8007f20:	0800a6d6 	.word	0x0800a6d6
 8007f24:	0800a6ed 	.word	0x0800a6ed
 8007f28:	7ff00000 	.word	0x7ff00000
 8007f2c:	0800a6d2 	.word	0x0800a6d2
 8007f30:	0800a6c9 	.word	0x0800a6c9
 8007f34:	0800a555 	.word	0x0800a555
 8007f38:	3ff80000 	.word	0x3ff80000
 8007f3c:	0800a8c8 	.word	0x0800a8c8
 8007f40:	0800a74c 	.word	0x0800a74c
 8007f44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f46:	9a00      	ldr	r2, [sp, #0]
 8007f48:	601a      	str	r2, [r3, #0]
 8007f4a:	9b01      	ldr	r3, [sp, #4]
 8007f4c:	2b0e      	cmp	r3, #14
 8007f4e:	f200 80ad 	bhi.w	80080ac <_dtoa_r+0x484>
 8007f52:	2d00      	cmp	r5, #0
 8007f54:	f000 80aa 	beq.w	80080ac <_dtoa_r+0x484>
 8007f58:	f1ba 0f00 	cmp.w	sl, #0
 8007f5c:	dd36      	ble.n	8007fcc <_dtoa_r+0x3a4>
 8007f5e:	4ac3      	ldr	r2, [pc, #780]	; (800826c <_dtoa_r+0x644>)
 8007f60:	f00a 030f 	and.w	r3, sl, #15
 8007f64:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007f68:	ed93 7b00 	vldr	d7, [r3]
 8007f6c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007f70:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007f74:	eeb0 8a47 	vmov.f32	s16, s14
 8007f78:	eef0 8a67 	vmov.f32	s17, s15
 8007f7c:	d016      	beq.n	8007fac <_dtoa_r+0x384>
 8007f7e:	4bbc      	ldr	r3, [pc, #752]	; (8008270 <_dtoa_r+0x648>)
 8007f80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007f84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f88:	f7f8 fc88 	bl	800089c <__aeabi_ddiv>
 8007f8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f90:	f007 070f 	and.w	r7, r7, #15
 8007f94:	2503      	movs	r5, #3
 8007f96:	4eb6      	ldr	r6, [pc, #728]	; (8008270 <_dtoa_r+0x648>)
 8007f98:	b957      	cbnz	r7, 8007fb0 <_dtoa_r+0x388>
 8007f9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f9e:	ec53 2b18 	vmov	r2, r3, d8
 8007fa2:	f7f8 fc7b 	bl	800089c <__aeabi_ddiv>
 8007fa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007faa:	e029      	b.n	8008000 <_dtoa_r+0x3d8>
 8007fac:	2502      	movs	r5, #2
 8007fae:	e7f2      	b.n	8007f96 <_dtoa_r+0x36e>
 8007fb0:	07f9      	lsls	r1, r7, #31
 8007fb2:	d508      	bpl.n	8007fc6 <_dtoa_r+0x39e>
 8007fb4:	ec51 0b18 	vmov	r0, r1, d8
 8007fb8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007fbc:	f7f8 fb44 	bl	8000648 <__aeabi_dmul>
 8007fc0:	ec41 0b18 	vmov	d8, r0, r1
 8007fc4:	3501      	adds	r5, #1
 8007fc6:	107f      	asrs	r7, r7, #1
 8007fc8:	3608      	adds	r6, #8
 8007fca:	e7e5      	b.n	8007f98 <_dtoa_r+0x370>
 8007fcc:	f000 80a6 	beq.w	800811c <_dtoa_r+0x4f4>
 8007fd0:	f1ca 0600 	rsb	r6, sl, #0
 8007fd4:	4ba5      	ldr	r3, [pc, #660]	; (800826c <_dtoa_r+0x644>)
 8007fd6:	4fa6      	ldr	r7, [pc, #664]	; (8008270 <_dtoa_r+0x648>)
 8007fd8:	f006 020f 	and.w	r2, r6, #15
 8007fdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007fe8:	f7f8 fb2e 	bl	8000648 <__aeabi_dmul>
 8007fec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ff0:	1136      	asrs	r6, r6, #4
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	2502      	movs	r5, #2
 8007ff6:	2e00      	cmp	r6, #0
 8007ff8:	f040 8085 	bne.w	8008106 <_dtoa_r+0x4de>
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1d2      	bne.n	8007fa6 <_dtoa_r+0x37e>
 8008000:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008002:	2b00      	cmp	r3, #0
 8008004:	f000 808c 	beq.w	8008120 <_dtoa_r+0x4f8>
 8008008:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800800c:	4b99      	ldr	r3, [pc, #612]	; (8008274 <_dtoa_r+0x64c>)
 800800e:	2200      	movs	r2, #0
 8008010:	4630      	mov	r0, r6
 8008012:	4639      	mov	r1, r7
 8008014:	f7f8 fd8a 	bl	8000b2c <__aeabi_dcmplt>
 8008018:	2800      	cmp	r0, #0
 800801a:	f000 8081 	beq.w	8008120 <_dtoa_r+0x4f8>
 800801e:	9b01      	ldr	r3, [sp, #4]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d07d      	beq.n	8008120 <_dtoa_r+0x4f8>
 8008024:	f1b9 0f00 	cmp.w	r9, #0
 8008028:	dd3c      	ble.n	80080a4 <_dtoa_r+0x47c>
 800802a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800802e:	9307      	str	r3, [sp, #28]
 8008030:	2200      	movs	r2, #0
 8008032:	4b91      	ldr	r3, [pc, #580]	; (8008278 <_dtoa_r+0x650>)
 8008034:	4630      	mov	r0, r6
 8008036:	4639      	mov	r1, r7
 8008038:	f7f8 fb06 	bl	8000648 <__aeabi_dmul>
 800803c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008040:	3501      	adds	r5, #1
 8008042:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008046:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800804a:	4628      	mov	r0, r5
 800804c:	f7f8 fa92 	bl	8000574 <__aeabi_i2d>
 8008050:	4632      	mov	r2, r6
 8008052:	463b      	mov	r3, r7
 8008054:	f7f8 faf8 	bl	8000648 <__aeabi_dmul>
 8008058:	4b88      	ldr	r3, [pc, #544]	; (800827c <_dtoa_r+0x654>)
 800805a:	2200      	movs	r2, #0
 800805c:	f7f8 f93e 	bl	80002dc <__adddf3>
 8008060:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008064:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008068:	9303      	str	r3, [sp, #12]
 800806a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800806c:	2b00      	cmp	r3, #0
 800806e:	d15c      	bne.n	800812a <_dtoa_r+0x502>
 8008070:	4b83      	ldr	r3, [pc, #524]	; (8008280 <_dtoa_r+0x658>)
 8008072:	2200      	movs	r2, #0
 8008074:	4630      	mov	r0, r6
 8008076:	4639      	mov	r1, r7
 8008078:	f7f8 f92e 	bl	80002d8 <__aeabi_dsub>
 800807c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008080:	4606      	mov	r6, r0
 8008082:	460f      	mov	r7, r1
 8008084:	f7f8 fd70 	bl	8000b68 <__aeabi_dcmpgt>
 8008088:	2800      	cmp	r0, #0
 800808a:	f040 8296 	bne.w	80085ba <_dtoa_r+0x992>
 800808e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008092:	4630      	mov	r0, r6
 8008094:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008098:	4639      	mov	r1, r7
 800809a:	f7f8 fd47 	bl	8000b2c <__aeabi_dcmplt>
 800809e:	2800      	cmp	r0, #0
 80080a0:	f040 8288 	bne.w	80085b4 <_dtoa_r+0x98c>
 80080a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80080a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80080ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	f2c0 8158 	blt.w	8008364 <_dtoa_r+0x73c>
 80080b4:	f1ba 0f0e 	cmp.w	sl, #14
 80080b8:	f300 8154 	bgt.w	8008364 <_dtoa_r+0x73c>
 80080bc:	4b6b      	ldr	r3, [pc, #428]	; (800826c <_dtoa_r+0x644>)
 80080be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80080c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80080c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f280 80e3 	bge.w	8008294 <_dtoa_r+0x66c>
 80080ce:	9b01      	ldr	r3, [sp, #4]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f300 80df 	bgt.w	8008294 <_dtoa_r+0x66c>
 80080d6:	f040 826d 	bne.w	80085b4 <_dtoa_r+0x98c>
 80080da:	4b69      	ldr	r3, [pc, #420]	; (8008280 <_dtoa_r+0x658>)
 80080dc:	2200      	movs	r2, #0
 80080de:	4640      	mov	r0, r8
 80080e0:	4649      	mov	r1, r9
 80080e2:	f7f8 fab1 	bl	8000648 <__aeabi_dmul>
 80080e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080ea:	f7f8 fd33 	bl	8000b54 <__aeabi_dcmpge>
 80080ee:	9e01      	ldr	r6, [sp, #4]
 80080f0:	4637      	mov	r7, r6
 80080f2:	2800      	cmp	r0, #0
 80080f4:	f040 8243 	bne.w	800857e <_dtoa_r+0x956>
 80080f8:	9d00      	ldr	r5, [sp, #0]
 80080fa:	2331      	movs	r3, #49	; 0x31
 80080fc:	f805 3b01 	strb.w	r3, [r5], #1
 8008100:	f10a 0a01 	add.w	sl, sl, #1
 8008104:	e23f      	b.n	8008586 <_dtoa_r+0x95e>
 8008106:	07f2      	lsls	r2, r6, #31
 8008108:	d505      	bpl.n	8008116 <_dtoa_r+0x4ee>
 800810a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800810e:	f7f8 fa9b 	bl	8000648 <__aeabi_dmul>
 8008112:	3501      	adds	r5, #1
 8008114:	2301      	movs	r3, #1
 8008116:	1076      	asrs	r6, r6, #1
 8008118:	3708      	adds	r7, #8
 800811a:	e76c      	b.n	8007ff6 <_dtoa_r+0x3ce>
 800811c:	2502      	movs	r5, #2
 800811e:	e76f      	b.n	8008000 <_dtoa_r+0x3d8>
 8008120:	9b01      	ldr	r3, [sp, #4]
 8008122:	f8cd a01c 	str.w	sl, [sp, #28]
 8008126:	930c      	str	r3, [sp, #48]	; 0x30
 8008128:	e78d      	b.n	8008046 <_dtoa_r+0x41e>
 800812a:	9900      	ldr	r1, [sp, #0]
 800812c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800812e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008130:	4b4e      	ldr	r3, [pc, #312]	; (800826c <_dtoa_r+0x644>)
 8008132:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008136:	4401      	add	r1, r0
 8008138:	9102      	str	r1, [sp, #8]
 800813a:	9908      	ldr	r1, [sp, #32]
 800813c:	eeb0 8a47 	vmov.f32	s16, s14
 8008140:	eef0 8a67 	vmov.f32	s17, s15
 8008144:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008148:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800814c:	2900      	cmp	r1, #0
 800814e:	d045      	beq.n	80081dc <_dtoa_r+0x5b4>
 8008150:	494c      	ldr	r1, [pc, #304]	; (8008284 <_dtoa_r+0x65c>)
 8008152:	2000      	movs	r0, #0
 8008154:	f7f8 fba2 	bl	800089c <__aeabi_ddiv>
 8008158:	ec53 2b18 	vmov	r2, r3, d8
 800815c:	f7f8 f8bc 	bl	80002d8 <__aeabi_dsub>
 8008160:	9d00      	ldr	r5, [sp, #0]
 8008162:	ec41 0b18 	vmov	d8, r0, r1
 8008166:	4639      	mov	r1, r7
 8008168:	4630      	mov	r0, r6
 800816a:	f7f8 fd1d 	bl	8000ba8 <__aeabi_d2iz>
 800816e:	900c      	str	r0, [sp, #48]	; 0x30
 8008170:	f7f8 fa00 	bl	8000574 <__aeabi_i2d>
 8008174:	4602      	mov	r2, r0
 8008176:	460b      	mov	r3, r1
 8008178:	4630      	mov	r0, r6
 800817a:	4639      	mov	r1, r7
 800817c:	f7f8 f8ac 	bl	80002d8 <__aeabi_dsub>
 8008180:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008182:	3330      	adds	r3, #48	; 0x30
 8008184:	f805 3b01 	strb.w	r3, [r5], #1
 8008188:	ec53 2b18 	vmov	r2, r3, d8
 800818c:	4606      	mov	r6, r0
 800818e:	460f      	mov	r7, r1
 8008190:	f7f8 fccc 	bl	8000b2c <__aeabi_dcmplt>
 8008194:	2800      	cmp	r0, #0
 8008196:	d165      	bne.n	8008264 <_dtoa_r+0x63c>
 8008198:	4632      	mov	r2, r6
 800819a:	463b      	mov	r3, r7
 800819c:	4935      	ldr	r1, [pc, #212]	; (8008274 <_dtoa_r+0x64c>)
 800819e:	2000      	movs	r0, #0
 80081a0:	f7f8 f89a 	bl	80002d8 <__aeabi_dsub>
 80081a4:	ec53 2b18 	vmov	r2, r3, d8
 80081a8:	f7f8 fcc0 	bl	8000b2c <__aeabi_dcmplt>
 80081ac:	2800      	cmp	r0, #0
 80081ae:	f040 80b9 	bne.w	8008324 <_dtoa_r+0x6fc>
 80081b2:	9b02      	ldr	r3, [sp, #8]
 80081b4:	429d      	cmp	r5, r3
 80081b6:	f43f af75 	beq.w	80080a4 <_dtoa_r+0x47c>
 80081ba:	4b2f      	ldr	r3, [pc, #188]	; (8008278 <_dtoa_r+0x650>)
 80081bc:	ec51 0b18 	vmov	r0, r1, d8
 80081c0:	2200      	movs	r2, #0
 80081c2:	f7f8 fa41 	bl	8000648 <__aeabi_dmul>
 80081c6:	4b2c      	ldr	r3, [pc, #176]	; (8008278 <_dtoa_r+0x650>)
 80081c8:	ec41 0b18 	vmov	d8, r0, r1
 80081cc:	2200      	movs	r2, #0
 80081ce:	4630      	mov	r0, r6
 80081d0:	4639      	mov	r1, r7
 80081d2:	f7f8 fa39 	bl	8000648 <__aeabi_dmul>
 80081d6:	4606      	mov	r6, r0
 80081d8:	460f      	mov	r7, r1
 80081da:	e7c4      	b.n	8008166 <_dtoa_r+0x53e>
 80081dc:	ec51 0b17 	vmov	r0, r1, d7
 80081e0:	f7f8 fa32 	bl	8000648 <__aeabi_dmul>
 80081e4:	9b02      	ldr	r3, [sp, #8]
 80081e6:	9d00      	ldr	r5, [sp, #0]
 80081e8:	930c      	str	r3, [sp, #48]	; 0x30
 80081ea:	ec41 0b18 	vmov	d8, r0, r1
 80081ee:	4639      	mov	r1, r7
 80081f0:	4630      	mov	r0, r6
 80081f2:	f7f8 fcd9 	bl	8000ba8 <__aeabi_d2iz>
 80081f6:	9011      	str	r0, [sp, #68]	; 0x44
 80081f8:	f7f8 f9bc 	bl	8000574 <__aeabi_i2d>
 80081fc:	4602      	mov	r2, r0
 80081fe:	460b      	mov	r3, r1
 8008200:	4630      	mov	r0, r6
 8008202:	4639      	mov	r1, r7
 8008204:	f7f8 f868 	bl	80002d8 <__aeabi_dsub>
 8008208:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800820a:	3330      	adds	r3, #48	; 0x30
 800820c:	f805 3b01 	strb.w	r3, [r5], #1
 8008210:	9b02      	ldr	r3, [sp, #8]
 8008212:	429d      	cmp	r5, r3
 8008214:	4606      	mov	r6, r0
 8008216:	460f      	mov	r7, r1
 8008218:	f04f 0200 	mov.w	r2, #0
 800821c:	d134      	bne.n	8008288 <_dtoa_r+0x660>
 800821e:	4b19      	ldr	r3, [pc, #100]	; (8008284 <_dtoa_r+0x65c>)
 8008220:	ec51 0b18 	vmov	r0, r1, d8
 8008224:	f7f8 f85a 	bl	80002dc <__adddf3>
 8008228:	4602      	mov	r2, r0
 800822a:	460b      	mov	r3, r1
 800822c:	4630      	mov	r0, r6
 800822e:	4639      	mov	r1, r7
 8008230:	f7f8 fc9a 	bl	8000b68 <__aeabi_dcmpgt>
 8008234:	2800      	cmp	r0, #0
 8008236:	d175      	bne.n	8008324 <_dtoa_r+0x6fc>
 8008238:	ec53 2b18 	vmov	r2, r3, d8
 800823c:	4911      	ldr	r1, [pc, #68]	; (8008284 <_dtoa_r+0x65c>)
 800823e:	2000      	movs	r0, #0
 8008240:	f7f8 f84a 	bl	80002d8 <__aeabi_dsub>
 8008244:	4602      	mov	r2, r0
 8008246:	460b      	mov	r3, r1
 8008248:	4630      	mov	r0, r6
 800824a:	4639      	mov	r1, r7
 800824c:	f7f8 fc6e 	bl	8000b2c <__aeabi_dcmplt>
 8008250:	2800      	cmp	r0, #0
 8008252:	f43f af27 	beq.w	80080a4 <_dtoa_r+0x47c>
 8008256:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008258:	1e6b      	subs	r3, r5, #1
 800825a:	930c      	str	r3, [sp, #48]	; 0x30
 800825c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008260:	2b30      	cmp	r3, #48	; 0x30
 8008262:	d0f8      	beq.n	8008256 <_dtoa_r+0x62e>
 8008264:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008268:	e04a      	b.n	8008300 <_dtoa_r+0x6d8>
 800826a:	bf00      	nop
 800826c:	0800a8c8 	.word	0x0800a8c8
 8008270:	0800a8a0 	.word	0x0800a8a0
 8008274:	3ff00000 	.word	0x3ff00000
 8008278:	40240000 	.word	0x40240000
 800827c:	401c0000 	.word	0x401c0000
 8008280:	40140000 	.word	0x40140000
 8008284:	3fe00000 	.word	0x3fe00000
 8008288:	4baf      	ldr	r3, [pc, #700]	; (8008548 <_dtoa_r+0x920>)
 800828a:	f7f8 f9dd 	bl	8000648 <__aeabi_dmul>
 800828e:	4606      	mov	r6, r0
 8008290:	460f      	mov	r7, r1
 8008292:	e7ac      	b.n	80081ee <_dtoa_r+0x5c6>
 8008294:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008298:	9d00      	ldr	r5, [sp, #0]
 800829a:	4642      	mov	r2, r8
 800829c:	464b      	mov	r3, r9
 800829e:	4630      	mov	r0, r6
 80082a0:	4639      	mov	r1, r7
 80082a2:	f7f8 fafb 	bl	800089c <__aeabi_ddiv>
 80082a6:	f7f8 fc7f 	bl	8000ba8 <__aeabi_d2iz>
 80082aa:	9002      	str	r0, [sp, #8]
 80082ac:	f7f8 f962 	bl	8000574 <__aeabi_i2d>
 80082b0:	4642      	mov	r2, r8
 80082b2:	464b      	mov	r3, r9
 80082b4:	f7f8 f9c8 	bl	8000648 <__aeabi_dmul>
 80082b8:	4602      	mov	r2, r0
 80082ba:	460b      	mov	r3, r1
 80082bc:	4630      	mov	r0, r6
 80082be:	4639      	mov	r1, r7
 80082c0:	f7f8 f80a 	bl	80002d8 <__aeabi_dsub>
 80082c4:	9e02      	ldr	r6, [sp, #8]
 80082c6:	9f01      	ldr	r7, [sp, #4]
 80082c8:	3630      	adds	r6, #48	; 0x30
 80082ca:	f805 6b01 	strb.w	r6, [r5], #1
 80082ce:	9e00      	ldr	r6, [sp, #0]
 80082d0:	1bae      	subs	r6, r5, r6
 80082d2:	42b7      	cmp	r7, r6
 80082d4:	4602      	mov	r2, r0
 80082d6:	460b      	mov	r3, r1
 80082d8:	d137      	bne.n	800834a <_dtoa_r+0x722>
 80082da:	f7f7 ffff 	bl	80002dc <__adddf3>
 80082de:	4642      	mov	r2, r8
 80082e0:	464b      	mov	r3, r9
 80082e2:	4606      	mov	r6, r0
 80082e4:	460f      	mov	r7, r1
 80082e6:	f7f8 fc3f 	bl	8000b68 <__aeabi_dcmpgt>
 80082ea:	b9c8      	cbnz	r0, 8008320 <_dtoa_r+0x6f8>
 80082ec:	4642      	mov	r2, r8
 80082ee:	464b      	mov	r3, r9
 80082f0:	4630      	mov	r0, r6
 80082f2:	4639      	mov	r1, r7
 80082f4:	f7f8 fc10 	bl	8000b18 <__aeabi_dcmpeq>
 80082f8:	b110      	cbz	r0, 8008300 <_dtoa_r+0x6d8>
 80082fa:	9b02      	ldr	r3, [sp, #8]
 80082fc:	07d9      	lsls	r1, r3, #31
 80082fe:	d40f      	bmi.n	8008320 <_dtoa_r+0x6f8>
 8008300:	4620      	mov	r0, r4
 8008302:	4659      	mov	r1, fp
 8008304:	f001 f876 	bl	80093f4 <_Bfree>
 8008308:	2300      	movs	r3, #0
 800830a:	702b      	strb	r3, [r5, #0]
 800830c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800830e:	f10a 0001 	add.w	r0, sl, #1
 8008312:	6018      	str	r0, [r3, #0]
 8008314:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008316:	2b00      	cmp	r3, #0
 8008318:	f43f acd8 	beq.w	8007ccc <_dtoa_r+0xa4>
 800831c:	601d      	str	r5, [r3, #0]
 800831e:	e4d5      	b.n	8007ccc <_dtoa_r+0xa4>
 8008320:	f8cd a01c 	str.w	sl, [sp, #28]
 8008324:	462b      	mov	r3, r5
 8008326:	461d      	mov	r5, r3
 8008328:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800832c:	2a39      	cmp	r2, #57	; 0x39
 800832e:	d108      	bne.n	8008342 <_dtoa_r+0x71a>
 8008330:	9a00      	ldr	r2, [sp, #0]
 8008332:	429a      	cmp	r2, r3
 8008334:	d1f7      	bne.n	8008326 <_dtoa_r+0x6fe>
 8008336:	9a07      	ldr	r2, [sp, #28]
 8008338:	9900      	ldr	r1, [sp, #0]
 800833a:	3201      	adds	r2, #1
 800833c:	9207      	str	r2, [sp, #28]
 800833e:	2230      	movs	r2, #48	; 0x30
 8008340:	700a      	strb	r2, [r1, #0]
 8008342:	781a      	ldrb	r2, [r3, #0]
 8008344:	3201      	adds	r2, #1
 8008346:	701a      	strb	r2, [r3, #0]
 8008348:	e78c      	b.n	8008264 <_dtoa_r+0x63c>
 800834a:	4b7f      	ldr	r3, [pc, #508]	; (8008548 <_dtoa_r+0x920>)
 800834c:	2200      	movs	r2, #0
 800834e:	f7f8 f97b 	bl	8000648 <__aeabi_dmul>
 8008352:	2200      	movs	r2, #0
 8008354:	2300      	movs	r3, #0
 8008356:	4606      	mov	r6, r0
 8008358:	460f      	mov	r7, r1
 800835a:	f7f8 fbdd 	bl	8000b18 <__aeabi_dcmpeq>
 800835e:	2800      	cmp	r0, #0
 8008360:	d09b      	beq.n	800829a <_dtoa_r+0x672>
 8008362:	e7cd      	b.n	8008300 <_dtoa_r+0x6d8>
 8008364:	9a08      	ldr	r2, [sp, #32]
 8008366:	2a00      	cmp	r2, #0
 8008368:	f000 80c4 	beq.w	80084f4 <_dtoa_r+0x8cc>
 800836c:	9a05      	ldr	r2, [sp, #20]
 800836e:	2a01      	cmp	r2, #1
 8008370:	f300 80a8 	bgt.w	80084c4 <_dtoa_r+0x89c>
 8008374:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008376:	2a00      	cmp	r2, #0
 8008378:	f000 80a0 	beq.w	80084bc <_dtoa_r+0x894>
 800837c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008380:	9e06      	ldr	r6, [sp, #24]
 8008382:	4645      	mov	r5, r8
 8008384:	9a04      	ldr	r2, [sp, #16]
 8008386:	2101      	movs	r1, #1
 8008388:	441a      	add	r2, r3
 800838a:	4620      	mov	r0, r4
 800838c:	4498      	add	r8, r3
 800838e:	9204      	str	r2, [sp, #16]
 8008390:	f001 f936 	bl	8009600 <__i2b>
 8008394:	4607      	mov	r7, r0
 8008396:	2d00      	cmp	r5, #0
 8008398:	dd0b      	ble.n	80083b2 <_dtoa_r+0x78a>
 800839a:	9b04      	ldr	r3, [sp, #16]
 800839c:	2b00      	cmp	r3, #0
 800839e:	dd08      	ble.n	80083b2 <_dtoa_r+0x78a>
 80083a0:	42ab      	cmp	r3, r5
 80083a2:	9a04      	ldr	r2, [sp, #16]
 80083a4:	bfa8      	it	ge
 80083a6:	462b      	movge	r3, r5
 80083a8:	eba8 0803 	sub.w	r8, r8, r3
 80083ac:	1aed      	subs	r5, r5, r3
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	9304      	str	r3, [sp, #16]
 80083b2:	9b06      	ldr	r3, [sp, #24]
 80083b4:	b1fb      	cbz	r3, 80083f6 <_dtoa_r+0x7ce>
 80083b6:	9b08      	ldr	r3, [sp, #32]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	f000 809f 	beq.w	80084fc <_dtoa_r+0x8d4>
 80083be:	2e00      	cmp	r6, #0
 80083c0:	dd11      	ble.n	80083e6 <_dtoa_r+0x7be>
 80083c2:	4639      	mov	r1, r7
 80083c4:	4632      	mov	r2, r6
 80083c6:	4620      	mov	r0, r4
 80083c8:	f001 f9d6 	bl	8009778 <__pow5mult>
 80083cc:	465a      	mov	r2, fp
 80083ce:	4601      	mov	r1, r0
 80083d0:	4607      	mov	r7, r0
 80083d2:	4620      	mov	r0, r4
 80083d4:	f001 f92a 	bl	800962c <__multiply>
 80083d8:	4659      	mov	r1, fp
 80083da:	9007      	str	r0, [sp, #28]
 80083dc:	4620      	mov	r0, r4
 80083de:	f001 f809 	bl	80093f4 <_Bfree>
 80083e2:	9b07      	ldr	r3, [sp, #28]
 80083e4:	469b      	mov	fp, r3
 80083e6:	9b06      	ldr	r3, [sp, #24]
 80083e8:	1b9a      	subs	r2, r3, r6
 80083ea:	d004      	beq.n	80083f6 <_dtoa_r+0x7ce>
 80083ec:	4659      	mov	r1, fp
 80083ee:	4620      	mov	r0, r4
 80083f0:	f001 f9c2 	bl	8009778 <__pow5mult>
 80083f4:	4683      	mov	fp, r0
 80083f6:	2101      	movs	r1, #1
 80083f8:	4620      	mov	r0, r4
 80083fa:	f001 f901 	bl	8009600 <__i2b>
 80083fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008400:	2b00      	cmp	r3, #0
 8008402:	4606      	mov	r6, r0
 8008404:	dd7c      	ble.n	8008500 <_dtoa_r+0x8d8>
 8008406:	461a      	mov	r2, r3
 8008408:	4601      	mov	r1, r0
 800840a:	4620      	mov	r0, r4
 800840c:	f001 f9b4 	bl	8009778 <__pow5mult>
 8008410:	9b05      	ldr	r3, [sp, #20]
 8008412:	2b01      	cmp	r3, #1
 8008414:	4606      	mov	r6, r0
 8008416:	dd76      	ble.n	8008506 <_dtoa_r+0x8de>
 8008418:	2300      	movs	r3, #0
 800841a:	9306      	str	r3, [sp, #24]
 800841c:	6933      	ldr	r3, [r6, #16]
 800841e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008422:	6918      	ldr	r0, [r3, #16]
 8008424:	f001 f89c 	bl	8009560 <__hi0bits>
 8008428:	f1c0 0020 	rsb	r0, r0, #32
 800842c:	9b04      	ldr	r3, [sp, #16]
 800842e:	4418      	add	r0, r3
 8008430:	f010 001f 	ands.w	r0, r0, #31
 8008434:	f000 8086 	beq.w	8008544 <_dtoa_r+0x91c>
 8008438:	f1c0 0320 	rsb	r3, r0, #32
 800843c:	2b04      	cmp	r3, #4
 800843e:	dd7f      	ble.n	8008540 <_dtoa_r+0x918>
 8008440:	f1c0 001c 	rsb	r0, r0, #28
 8008444:	9b04      	ldr	r3, [sp, #16]
 8008446:	4403      	add	r3, r0
 8008448:	4480      	add	r8, r0
 800844a:	4405      	add	r5, r0
 800844c:	9304      	str	r3, [sp, #16]
 800844e:	f1b8 0f00 	cmp.w	r8, #0
 8008452:	dd05      	ble.n	8008460 <_dtoa_r+0x838>
 8008454:	4659      	mov	r1, fp
 8008456:	4642      	mov	r2, r8
 8008458:	4620      	mov	r0, r4
 800845a:	f001 f9e7 	bl	800982c <__lshift>
 800845e:	4683      	mov	fp, r0
 8008460:	9b04      	ldr	r3, [sp, #16]
 8008462:	2b00      	cmp	r3, #0
 8008464:	dd05      	ble.n	8008472 <_dtoa_r+0x84a>
 8008466:	4631      	mov	r1, r6
 8008468:	461a      	mov	r2, r3
 800846a:	4620      	mov	r0, r4
 800846c:	f001 f9de 	bl	800982c <__lshift>
 8008470:	4606      	mov	r6, r0
 8008472:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008474:	2b00      	cmp	r3, #0
 8008476:	d069      	beq.n	800854c <_dtoa_r+0x924>
 8008478:	4631      	mov	r1, r6
 800847a:	4658      	mov	r0, fp
 800847c:	f001 fa42 	bl	8009904 <__mcmp>
 8008480:	2800      	cmp	r0, #0
 8008482:	da63      	bge.n	800854c <_dtoa_r+0x924>
 8008484:	2300      	movs	r3, #0
 8008486:	4659      	mov	r1, fp
 8008488:	220a      	movs	r2, #10
 800848a:	4620      	mov	r0, r4
 800848c:	f000 ffd4 	bl	8009438 <__multadd>
 8008490:	9b08      	ldr	r3, [sp, #32]
 8008492:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008496:	4683      	mov	fp, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	f000 818f 	beq.w	80087bc <_dtoa_r+0xb94>
 800849e:	4639      	mov	r1, r7
 80084a0:	2300      	movs	r3, #0
 80084a2:	220a      	movs	r2, #10
 80084a4:	4620      	mov	r0, r4
 80084a6:	f000 ffc7 	bl	8009438 <__multadd>
 80084aa:	f1b9 0f00 	cmp.w	r9, #0
 80084ae:	4607      	mov	r7, r0
 80084b0:	f300 808e 	bgt.w	80085d0 <_dtoa_r+0x9a8>
 80084b4:	9b05      	ldr	r3, [sp, #20]
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	dc50      	bgt.n	800855c <_dtoa_r+0x934>
 80084ba:	e089      	b.n	80085d0 <_dtoa_r+0x9a8>
 80084bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80084be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80084c2:	e75d      	b.n	8008380 <_dtoa_r+0x758>
 80084c4:	9b01      	ldr	r3, [sp, #4]
 80084c6:	1e5e      	subs	r6, r3, #1
 80084c8:	9b06      	ldr	r3, [sp, #24]
 80084ca:	42b3      	cmp	r3, r6
 80084cc:	bfbf      	itttt	lt
 80084ce:	9b06      	ldrlt	r3, [sp, #24]
 80084d0:	9606      	strlt	r6, [sp, #24]
 80084d2:	1af2      	sublt	r2, r6, r3
 80084d4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80084d6:	bfb6      	itet	lt
 80084d8:	189b      	addlt	r3, r3, r2
 80084da:	1b9e      	subge	r6, r3, r6
 80084dc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80084de:	9b01      	ldr	r3, [sp, #4]
 80084e0:	bfb8      	it	lt
 80084e2:	2600      	movlt	r6, #0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	bfb5      	itete	lt
 80084e8:	eba8 0503 	sublt.w	r5, r8, r3
 80084ec:	9b01      	ldrge	r3, [sp, #4]
 80084ee:	2300      	movlt	r3, #0
 80084f0:	4645      	movge	r5, r8
 80084f2:	e747      	b.n	8008384 <_dtoa_r+0x75c>
 80084f4:	9e06      	ldr	r6, [sp, #24]
 80084f6:	9f08      	ldr	r7, [sp, #32]
 80084f8:	4645      	mov	r5, r8
 80084fa:	e74c      	b.n	8008396 <_dtoa_r+0x76e>
 80084fc:	9a06      	ldr	r2, [sp, #24]
 80084fe:	e775      	b.n	80083ec <_dtoa_r+0x7c4>
 8008500:	9b05      	ldr	r3, [sp, #20]
 8008502:	2b01      	cmp	r3, #1
 8008504:	dc18      	bgt.n	8008538 <_dtoa_r+0x910>
 8008506:	9b02      	ldr	r3, [sp, #8]
 8008508:	b9b3      	cbnz	r3, 8008538 <_dtoa_r+0x910>
 800850a:	9b03      	ldr	r3, [sp, #12]
 800850c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008510:	b9a3      	cbnz	r3, 800853c <_dtoa_r+0x914>
 8008512:	9b03      	ldr	r3, [sp, #12]
 8008514:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008518:	0d1b      	lsrs	r3, r3, #20
 800851a:	051b      	lsls	r3, r3, #20
 800851c:	b12b      	cbz	r3, 800852a <_dtoa_r+0x902>
 800851e:	9b04      	ldr	r3, [sp, #16]
 8008520:	3301      	adds	r3, #1
 8008522:	9304      	str	r3, [sp, #16]
 8008524:	f108 0801 	add.w	r8, r8, #1
 8008528:	2301      	movs	r3, #1
 800852a:	9306      	str	r3, [sp, #24]
 800852c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800852e:	2b00      	cmp	r3, #0
 8008530:	f47f af74 	bne.w	800841c <_dtoa_r+0x7f4>
 8008534:	2001      	movs	r0, #1
 8008536:	e779      	b.n	800842c <_dtoa_r+0x804>
 8008538:	2300      	movs	r3, #0
 800853a:	e7f6      	b.n	800852a <_dtoa_r+0x902>
 800853c:	9b02      	ldr	r3, [sp, #8]
 800853e:	e7f4      	b.n	800852a <_dtoa_r+0x902>
 8008540:	d085      	beq.n	800844e <_dtoa_r+0x826>
 8008542:	4618      	mov	r0, r3
 8008544:	301c      	adds	r0, #28
 8008546:	e77d      	b.n	8008444 <_dtoa_r+0x81c>
 8008548:	40240000 	.word	0x40240000
 800854c:	9b01      	ldr	r3, [sp, #4]
 800854e:	2b00      	cmp	r3, #0
 8008550:	dc38      	bgt.n	80085c4 <_dtoa_r+0x99c>
 8008552:	9b05      	ldr	r3, [sp, #20]
 8008554:	2b02      	cmp	r3, #2
 8008556:	dd35      	ble.n	80085c4 <_dtoa_r+0x99c>
 8008558:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800855c:	f1b9 0f00 	cmp.w	r9, #0
 8008560:	d10d      	bne.n	800857e <_dtoa_r+0x956>
 8008562:	4631      	mov	r1, r6
 8008564:	464b      	mov	r3, r9
 8008566:	2205      	movs	r2, #5
 8008568:	4620      	mov	r0, r4
 800856a:	f000 ff65 	bl	8009438 <__multadd>
 800856e:	4601      	mov	r1, r0
 8008570:	4606      	mov	r6, r0
 8008572:	4658      	mov	r0, fp
 8008574:	f001 f9c6 	bl	8009904 <__mcmp>
 8008578:	2800      	cmp	r0, #0
 800857a:	f73f adbd 	bgt.w	80080f8 <_dtoa_r+0x4d0>
 800857e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008580:	9d00      	ldr	r5, [sp, #0]
 8008582:	ea6f 0a03 	mvn.w	sl, r3
 8008586:	f04f 0800 	mov.w	r8, #0
 800858a:	4631      	mov	r1, r6
 800858c:	4620      	mov	r0, r4
 800858e:	f000 ff31 	bl	80093f4 <_Bfree>
 8008592:	2f00      	cmp	r7, #0
 8008594:	f43f aeb4 	beq.w	8008300 <_dtoa_r+0x6d8>
 8008598:	f1b8 0f00 	cmp.w	r8, #0
 800859c:	d005      	beq.n	80085aa <_dtoa_r+0x982>
 800859e:	45b8      	cmp	r8, r7
 80085a0:	d003      	beq.n	80085aa <_dtoa_r+0x982>
 80085a2:	4641      	mov	r1, r8
 80085a4:	4620      	mov	r0, r4
 80085a6:	f000 ff25 	bl	80093f4 <_Bfree>
 80085aa:	4639      	mov	r1, r7
 80085ac:	4620      	mov	r0, r4
 80085ae:	f000 ff21 	bl	80093f4 <_Bfree>
 80085b2:	e6a5      	b.n	8008300 <_dtoa_r+0x6d8>
 80085b4:	2600      	movs	r6, #0
 80085b6:	4637      	mov	r7, r6
 80085b8:	e7e1      	b.n	800857e <_dtoa_r+0x956>
 80085ba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80085bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80085c0:	4637      	mov	r7, r6
 80085c2:	e599      	b.n	80080f8 <_dtoa_r+0x4d0>
 80085c4:	9b08      	ldr	r3, [sp, #32]
 80085c6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f000 80fd 	beq.w	80087ca <_dtoa_r+0xba2>
 80085d0:	2d00      	cmp	r5, #0
 80085d2:	dd05      	ble.n	80085e0 <_dtoa_r+0x9b8>
 80085d4:	4639      	mov	r1, r7
 80085d6:	462a      	mov	r2, r5
 80085d8:	4620      	mov	r0, r4
 80085da:	f001 f927 	bl	800982c <__lshift>
 80085de:	4607      	mov	r7, r0
 80085e0:	9b06      	ldr	r3, [sp, #24]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d05c      	beq.n	80086a0 <_dtoa_r+0xa78>
 80085e6:	6879      	ldr	r1, [r7, #4]
 80085e8:	4620      	mov	r0, r4
 80085ea:	f000 fec3 	bl	8009374 <_Balloc>
 80085ee:	4605      	mov	r5, r0
 80085f0:	b928      	cbnz	r0, 80085fe <_dtoa_r+0x9d6>
 80085f2:	4b80      	ldr	r3, [pc, #512]	; (80087f4 <_dtoa_r+0xbcc>)
 80085f4:	4602      	mov	r2, r0
 80085f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80085fa:	f7ff bb2e 	b.w	8007c5a <_dtoa_r+0x32>
 80085fe:	693a      	ldr	r2, [r7, #16]
 8008600:	3202      	adds	r2, #2
 8008602:	0092      	lsls	r2, r2, #2
 8008604:	f107 010c 	add.w	r1, r7, #12
 8008608:	300c      	adds	r0, #12
 800860a:	f000 fea5 	bl	8009358 <memcpy>
 800860e:	2201      	movs	r2, #1
 8008610:	4629      	mov	r1, r5
 8008612:	4620      	mov	r0, r4
 8008614:	f001 f90a 	bl	800982c <__lshift>
 8008618:	9b00      	ldr	r3, [sp, #0]
 800861a:	3301      	adds	r3, #1
 800861c:	9301      	str	r3, [sp, #4]
 800861e:	9b00      	ldr	r3, [sp, #0]
 8008620:	444b      	add	r3, r9
 8008622:	9307      	str	r3, [sp, #28]
 8008624:	9b02      	ldr	r3, [sp, #8]
 8008626:	f003 0301 	and.w	r3, r3, #1
 800862a:	46b8      	mov	r8, r7
 800862c:	9306      	str	r3, [sp, #24]
 800862e:	4607      	mov	r7, r0
 8008630:	9b01      	ldr	r3, [sp, #4]
 8008632:	4631      	mov	r1, r6
 8008634:	3b01      	subs	r3, #1
 8008636:	4658      	mov	r0, fp
 8008638:	9302      	str	r3, [sp, #8]
 800863a:	f7ff fa69 	bl	8007b10 <quorem>
 800863e:	4603      	mov	r3, r0
 8008640:	3330      	adds	r3, #48	; 0x30
 8008642:	9004      	str	r0, [sp, #16]
 8008644:	4641      	mov	r1, r8
 8008646:	4658      	mov	r0, fp
 8008648:	9308      	str	r3, [sp, #32]
 800864a:	f001 f95b 	bl	8009904 <__mcmp>
 800864e:	463a      	mov	r2, r7
 8008650:	4681      	mov	r9, r0
 8008652:	4631      	mov	r1, r6
 8008654:	4620      	mov	r0, r4
 8008656:	f001 f971 	bl	800993c <__mdiff>
 800865a:	68c2      	ldr	r2, [r0, #12]
 800865c:	9b08      	ldr	r3, [sp, #32]
 800865e:	4605      	mov	r5, r0
 8008660:	bb02      	cbnz	r2, 80086a4 <_dtoa_r+0xa7c>
 8008662:	4601      	mov	r1, r0
 8008664:	4658      	mov	r0, fp
 8008666:	f001 f94d 	bl	8009904 <__mcmp>
 800866a:	9b08      	ldr	r3, [sp, #32]
 800866c:	4602      	mov	r2, r0
 800866e:	4629      	mov	r1, r5
 8008670:	4620      	mov	r0, r4
 8008672:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008676:	f000 febd 	bl	80093f4 <_Bfree>
 800867a:	9b05      	ldr	r3, [sp, #20]
 800867c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800867e:	9d01      	ldr	r5, [sp, #4]
 8008680:	ea43 0102 	orr.w	r1, r3, r2
 8008684:	9b06      	ldr	r3, [sp, #24]
 8008686:	430b      	orrs	r3, r1
 8008688:	9b08      	ldr	r3, [sp, #32]
 800868a:	d10d      	bne.n	80086a8 <_dtoa_r+0xa80>
 800868c:	2b39      	cmp	r3, #57	; 0x39
 800868e:	d029      	beq.n	80086e4 <_dtoa_r+0xabc>
 8008690:	f1b9 0f00 	cmp.w	r9, #0
 8008694:	dd01      	ble.n	800869a <_dtoa_r+0xa72>
 8008696:	9b04      	ldr	r3, [sp, #16]
 8008698:	3331      	adds	r3, #49	; 0x31
 800869a:	9a02      	ldr	r2, [sp, #8]
 800869c:	7013      	strb	r3, [r2, #0]
 800869e:	e774      	b.n	800858a <_dtoa_r+0x962>
 80086a0:	4638      	mov	r0, r7
 80086a2:	e7b9      	b.n	8008618 <_dtoa_r+0x9f0>
 80086a4:	2201      	movs	r2, #1
 80086a6:	e7e2      	b.n	800866e <_dtoa_r+0xa46>
 80086a8:	f1b9 0f00 	cmp.w	r9, #0
 80086ac:	db06      	blt.n	80086bc <_dtoa_r+0xa94>
 80086ae:	9905      	ldr	r1, [sp, #20]
 80086b0:	ea41 0909 	orr.w	r9, r1, r9
 80086b4:	9906      	ldr	r1, [sp, #24]
 80086b6:	ea59 0101 	orrs.w	r1, r9, r1
 80086ba:	d120      	bne.n	80086fe <_dtoa_r+0xad6>
 80086bc:	2a00      	cmp	r2, #0
 80086be:	ddec      	ble.n	800869a <_dtoa_r+0xa72>
 80086c0:	4659      	mov	r1, fp
 80086c2:	2201      	movs	r2, #1
 80086c4:	4620      	mov	r0, r4
 80086c6:	9301      	str	r3, [sp, #4]
 80086c8:	f001 f8b0 	bl	800982c <__lshift>
 80086cc:	4631      	mov	r1, r6
 80086ce:	4683      	mov	fp, r0
 80086d0:	f001 f918 	bl	8009904 <__mcmp>
 80086d4:	2800      	cmp	r0, #0
 80086d6:	9b01      	ldr	r3, [sp, #4]
 80086d8:	dc02      	bgt.n	80086e0 <_dtoa_r+0xab8>
 80086da:	d1de      	bne.n	800869a <_dtoa_r+0xa72>
 80086dc:	07da      	lsls	r2, r3, #31
 80086de:	d5dc      	bpl.n	800869a <_dtoa_r+0xa72>
 80086e0:	2b39      	cmp	r3, #57	; 0x39
 80086e2:	d1d8      	bne.n	8008696 <_dtoa_r+0xa6e>
 80086e4:	9a02      	ldr	r2, [sp, #8]
 80086e6:	2339      	movs	r3, #57	; 0x39
 80086e8:	7013      	strb	r3, [r2, #0]
 80086ea:	462b      	mov	r3, r5
 80086ec:	461d      	mov	r5, r3
 80086ee:	3b01      	subs	r3, #1
 80086f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80086f4:	2a39      	cmp	r2, #57	; 0x39
 80086f6:	d050      	beq.n	800879a <_dtoa_r+0xb72>
 80086f8:	3201      	adds	r2, #1
 80086fa:	701a      	strb	r2, [r3, #0]
 80086fc:	e745      	b.n	800858a <_dtoa_r+0x962>
 80086fe:	2a00      	cmp	r2, #0
 8008700:	dd03      	ble.n	800870a <_dtoa_r+0xae2>
 8008702:	2b39      	cmp	r3, #57	; 0x39
 8008704:	d0ee      	beq.n	80086e4 <_dtoa_r+0xabc>
 8008706:	3301      	adds	r3, #1
 8008708:	e7c7      	b.n	800869a <_dtoa_r+0xa72>
 800870a:	9a01      	ldr	r2, [sp, #4]
 800870c:	9907      	ldr	r1, [sp, #28]
 800870e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008712:	428a      	cmp	r2, r1
 8008714:	d02a      	beq.n	800876c <_dtoa_r+0xb44>
 8008716:	4659      	mov	r1, fp
 8008718:	2300      	movs	r3, #0
 800871a:	220a      	movs	r2, #10
 800871c:	4620      	mov	r0, r4
 800871e:	f000 fe8b 	bl	8009438 <__multadd>
 8008722:	45b8      	cmp	r8, r7
 8008724:	4683      	mov	fp, r0
 8008726:	f04f 0300 	mov.w	r3, #0
 800872a:	f04f 020a 	mov.w	r2, #10
 800872e:	4641      	mov	r1, r8
 8008730:	4620      	mov	r0, r4
 8008732:	d107      	bne.n	8008744 <_dtoa_r+0xb1c>
 8008734:	f000 fe80 	bl	8009438 <__multadd>
 8008738:	4680      	mov	r8, r0
 800873a:	4607      	mov	r7, r0
 800873c:	9b01      	ldr	r3, [sp, #4]
 800873e:	3301      	adds	r3, #1
 8008740:	9301      	str	r3, [sp, #4]
 8008742:	e775      	b.n	8008630 <_dtoa_r+0xa08>
 8008744:	f000 fe78 	bl	8009438 <__multadd>
 8008748:	4639      	mov	r1, r7
 800874a:	4680      	mov	r8, r0
 800874c:	2300      	movs	r3, #0
 800874e:	220a      	movs	r2, #10
 8008750:	4620      	mov	r0, r4
 8008752:	f000 fe71 	bl	8009438 <__multadd>
 8008756:	4607      	mov	r7, r0
 8008758:	e7f0      	b.n	800873c <_dtoa_r+0xb14>
 800875a:	f1b9 0f00 	cmp.w	r9, #0
 800875e:	9a00      	ldr	r2, [sp, #0]
 8008760:	bfcc      	ite	gt
 8008762:	464d      	movgt	r5, r9
 8008764:	2501      	movle	r5, #1
 8008766:	4415      	add	r5, r2
 8008768:	f04f 0800 	mov.w	r8, #0
 800876c:	4659      	mov	r1, fp
 800876e:	2201      	movs	r2, #1
 8008770:	4620      	mov	r0, r4
 8008772:	9301      	str	r3, [sp, #4]
 8008774:	f001 f85a 	bl	800982c <__lshift>
 8008778:	4631      	mov	r1, r6
 800877a:	4683      	mov	fp, r0
 800877c:	f001 f8c2 	bl	8009904 <__mcmp>
 8008780:	2800      	cmp	r0, #0
 8008782:	dcb2      	bgt.n	80086ea <_dtoa_r+0xac2>
 8008784:	d102      	bne.n	800878c <_dtoa_r+0xb64>
 8008786:	9b01      	ldr	r3, [sp, #4]
 8008788:	07db      	lsls	r3, r3, #31
 800878a:	d4ae      	bmi.n	80086ea <_dtoa_r+0xac2>
 800878c:	462b      	mov	r3, r5
 800878e:	461d      	mov	r5, r3
 8008790:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008794:	2a30      	cmp	r2, #48	; 0x30
 8008796:	d0fa      	beq.n	800878e <_dtoa_r+0xb66>
 8008798:	e6f7      	b.n	800858a <_dtoa_r+0x962>
 800879a:	9a00      	ldr	r2, [sp, #0]
 800879c:	429a      	cmp	r2, r3
 800879e:	d1a5      	bne.n	80086ec <_dtoa_r+0xac4>
 80087a0:	f10a 0a01 	add.w	sl, sl, #1
 80087a4:	2331      	movs	r3, #49	; 0x31
 80087a6:	e779      	b.n	800869c <_dtoa_r+0xa74>
 80087a8:	4b13      	ldr	r3, [pc, #76]	; (80087f8 <_dtoa_r+0xbd0>)
 80087aa:	f7ff baaf 	b.w	8007d0c <_dtoa_r+0xe4>
 80087ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	f47f aa86 	bne.w	8007cc2 <_dtoa_r+0x9a>
 80087b6:	4b11      	ldr	r3, [pc, #68]	; (80087fc <_dtoa_r+0xbd4>)
 80087b8:	f7ff baa8 	b.w	8007d0c <_dtoa_r+0xe4>
 80087bc:	f1b9 0f00 	cmp.w	r9, #0
 80087c0:	dc03      	bgt.n	80087ca <_dtoa_r+0xba2>
 80087c2:	9b05      	ldr	r3, [sp, #20]
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	f73f aec9 	bgt.w	800855c <_dtoa_r+0x934>
 80087ca:	9d00      	ldr	r5, [sp, #0]
 80087cc:	4631      	mov	r1, r6
 80087ce:	4658      	mov	r0, fp
 80087d0:	f7ff f99e 	bl	8007b10 <quorem>
 80087d4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80087d8:	f805 3b01 	strb.w	r3, [r5], #1
 80087dc:	9a00      	ldr	r2, [sp, #0]
 80087de:	1aaa      	subs	r2, r5, r2
 80087e0:	4591      	cmp	r9, r2
 80087e2:	ddba      	ble.n	800875a <_dtoa_r+0xb32>
 80087e4:	4659      	mov	r1, fp
 80087e6:	2300      	movs	r3, #0
 80087e8:	220a      	movs	r2, #10
 80087ea:	4620      	mov	r0, r4
 80087ec:	f000 fe24 	bl	8009438 <__multadd>
 80087f0:	4683      	mov	fp, r0
 80087f2:	e7eb      	b.n	80087cc <_dtoa_r+0xba4>
 80087f4:	0800a74c 	.word	0x0800a74c
 80087f8:	0800a554 	.word	0x0800a554
 80087fc:	0800a6c9 	.word	0x0800a6c9

08008800 <__sflush_r>:
 8008800:	898a      	ldrh	r2, [r1, #12]
 8008802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008806:	4605      	mov	r5, r0
 8008808:	0710      	lsls	r0, r2, #28
 800880a:	460c      	mov	r4, r1
 800880c:	d458      	bmi.n	80088c0 <__sflush_r+0xc0>
 800880e:	684b      	ldr	r3, [r1, #4]
 8008810:	2b00      	cmp	r3, #0
 8008812:	dc05      	bgt.n	8008820 <__sflush_r+0x20>
 8008814:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008816:	2b00      	cmp	r3, #0
 8008818:	dc02      	bgt.n	8008820 <__sflush_r+0x20>
 800881a:	2000      	movs	r0, #0
 800881c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008820:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008822:	2e00      	cmp	r6, #0
 8008824:	d0f9      	beq.n	800881a <__sflush_r+0x1a>
 8008826:	2300      	movs	r3, #0
 8008828:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800882c:	682f      	ldr	r7, [r5, #0]
 800882e:	602b      	str	r3, [r5, #0]
 8008830:	d032      	beq.n	8008898 <__sflush_r+0x98>
 8008832:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008834:	89a3      	ldrh	r3, [r4, #12]
 8008836:	075a      	lsls	r2, r3, #29
 8008838:	d505      	bpl.n	8008846 <__sflush_r+0x46>
 800883a:	6863      	ldr	r3, [r4, #4]
 800883c:	1ac0      	subs	r0, r0, r3
 800883e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008840:	b10b      	cbz	r3, 8008846 <__sflush_r+0x46>
 8008842:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008844:	1ac0      	subs	r0, r0, r3
 8008846:	2300      	movs	r3, #0
 8008848:	4602      	mov	r2, r0
 800884a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800884c:	6a21      	ldr	r1, [r4, #32]
 800884e:	4628      	mov	r0, r5
 8008850:	47b0      	blx	r6
 8008852:	1c43      	adds	r3, r0, #1
 8008854:	89a3      	ldrh	r3, [r4, #12]
 8008856:	d106      	bne.n	8008866 <__sflush_r+0x66>
 8008858:	6829      	ldr	r1, [r5, #0]
 800885a:	291d      	cmp	r1, #29
 800885c:	d82c      	bhi.n	80088b8 <__sflush_r+0xb8>
 800885e:	4a2a      	ldr	r2, [pc, #168]	; (8008908 <__sflush_r+0x108>)
 8008860:	40ca      	lsrs	r2, r1
 8008862:	07d6      	lsls	r6, r2, #31
 8008864:	d528      	bpl.n	80088b8 <__sflush_r+0xb8>
 8008866:	2200      	movs	r2, #0
 8008868:	6062      	str	r2, [r4, #4]
 800886a:	04d9      	lsls	r1, r3, #19
 800886c:	6922      	ldr	r2, [r4, #16]
 800886e:	6022      	str	r2, [r4, #0]
 8008870:	d504      	bpl.n	800887c <__sflush_r+0x7c>
 8008872:	1c42      	adds	r2, r0, #1
 8008874:	d101      	bne.n	800887a <__sflush_r+0x7a>
 8008876:	682b      	ldr	r3, [r5, #0]
 8008878:	b903      	cbnz	r3, 800887c <__sflush_r+0x7c>
 800887a:	6560      	str	r0, [r4, #84]	; 0x54
 800887c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800887e:	602f      	str	r7, [r5, #0]
 8008880:	2900      	cmp	r1, #0
 8008882:	d0ca      	beq.n	800881a <__sflush_r+0x1a>
 8008884:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008888:	4299      	cmp	r1, r3
 800888a:	d002      	beq.n	8008892 <__sflush_r+0x92>
 800888c:	4628      	mov	r0, r5
 800888e:	f001 fa3b 	bl	8009d08 <_free_r>
 8008892:	2000      	movs	r0, #0
 8008894:	6360      	str	r0, [r4, #52]	; 0x34
 8008896:	e7c1      	b.n	800881c <__sflush_r+0x1c>
 8008898:	6a21      	ldr	r1, [r4, #32]
 800889a:	2301      	movs	r3, #1
 800889c:	4628      	mov	r0, r5
 800889e:	47b0      	blx	r6
 80088a0:	1c41      	adds	r1, r0, #1
 80088a2:	d1c7      	bne.n	8008834 <__sflush_r+0x34>
 80088a4:	682b      	ldr	r3, [r5, #0]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d0c4      	beq.n	8008834 <__sflush_r+0x34>
 80088aa:	2b1d      	cmp	r3, #29
 80088ac:	d001      	beq.n	80088b2 <__sflush_r+0xb2>
 80088ae:	2b16      	cmp	r3, #22
 80088b0:	d101      	bne.n	80088b6 <__sflush_r+0xb6>
 80088b2:	602f      	str	r7, [r5, #0]
 80088b4:	e7b1      	b.n	800881a <__sflush_r+0x1a>
 80088b6:	89a3      	ldrh	r3, [r4, #12]
 80088b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088bc:	81a3      	strh	r3, [r4, #12]
 80088be:	e7ad      	b.n	800881c <__sflush_r+0x1c>
 80088c0:	690f      	ldr	r7, [r1, #16]
 80088c2:	2f00      	cmp	r7, #0
 80088c4:	d0a9      	beq.n	800881a <__sflush_r+0x1a>
 80088c6:	0793      	lsls	r3, r2, #30
 80088c8:	680e      	ldr	r6, [r1, #0]
 80088ca:	bf08      	it	eq
 80088cc:	694b      	ldreq	r3, [r1, #20]
 80088ce:	600f      	str	r7, [r1, #0]
 80088d0:	bf18      	it	ne
 80088d2:	2300      	movne	r3, #0
 80088d4:	eba6 0807 	sub.w	r8, r6, r7
 80088d8:	608b      	str	r3, [r1, #8]
 80088da:	f1b8 0f00 	cmp.w	r8, #0
 80088de:	dd9c      	ble.n	800881a <__sflush_r+0x1a>
 80088e0:	6a21      	ldr	r1, [r4, #32]
 80088e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80088e4:	4643      	mov	r3, r8
 80088e6:	463a      	mov	r2, r7
 80088e8:	4628      	mov	r0, r5
 80088ea:	47b0      	blx	r6
 80088ec:	2800      	cmp	r0, #0
 80088ee:	dc06      	bgt.n	80088fe <__sflush_r+0xfe>
 80088f0:	89a3      	ldrh	r3, [r4, #12]
 80088f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088f6:	81a3      	strh	r3, [r4, #12]
 80088f8:	f04f 30ff 	mov.w	r0, #4294967295
 80088fc:	e78e      	b.n	800881c <__sflush_r+0x1c>
 80088fe:	4407      	add	r7, r0
 8008900:	eba8 0800 	sub.w	r8, r8, r0
 8008904:	e7e9      	b.n	80088da <__sflush_r+0xda>
 8008906:	bf00      	nop
 8008908:	20400001 	.word	0x20400001

0800890c <_fflush_r>:
 800890c:	b538      	push	{r3, r4, r5, lr}
 800890e:	690b      	ldr	r3, [r1, #16]
 8008910:	4605      	mov	r5, r0
 8008912:	460c      	mov	r4, r1
 8008914:	b913      	cbnz	r3, 800891c <_fflush_r+0x10>
 8008916:	2500      	movs	r5, #0
 8008918:	4628      	mov	r0, r5
 800891a:	bd38      	pop	{r3, r4, r5, pc}
 800891c:	b118      	cbz	r0, 8008926 <_fflush_r+0x1a>
 800891e:	6983      	ldr	r3, [r0, #24]
 8008920:	b90b      	cbnz	r3, 8008926 <_fflush_r+0x1a>
 8008922:	f000 f887 	bl	8008a34 <__sinit>
 8008926:	4b14      	ldr	r3, [pc, #80]	; (8008978 <_fflush_r+0x6c>)
 8008928:	429c      	cmp	r4, r3
 800892a:	d11b      	bne.n	8008964 <_fflush_r+0x58>
 800892c:	686c      	ldr	r4, [r5, #4]
 800892e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d0ef      	beq.n	8008916 <_fflush_r+0xa>
 8008936:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008938:	07d0      	lsls	r0, r2, #31
 800893a:	d404      	bmi.n	8008946 <_fflush_r+0x3a>
 800893c:	0599      	lsls	r1, r3, #22
 800893e:	d402      	bmi.n	8008946 <_fflush_r+0x3a>
 8008940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008942:	f000 fc88 	bl	8009256 <__retarget_lock_acquire_recursive>
 8008946:	4628      	mov	r0, r5
 8008948:	4621      	mov	r1, r4
 800894a:	f7ff ff59 	bl	8008800 <__sflush_r>
 800894e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008950:	07da      	lsls	r2, r3, #31
 8008952:	4605      	mov	r5, r0
 8008954:	d4e0      	bmi.n	8008918 <_fflush_r+0xc>
 8008956:	89a3      	ldrh	r3, [r4, #12]
 8008958:	059b      	lsls	r3, r3, #22
 800895a:	d4dd      	bmi.n	8008918 <_fflush_r+0xc>
 800895c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800895e:	f000 fc7b 	bl	8009258 <__retarget_lock_release_recursive>
 8008962:	e7d9      	b.n	8008918 <_fflush_r+0xc>
 8008964:	4b05      	ldr	r3, [pc, #20]	; (800897c <_fflush_r+0x70>)
 8008966:	429c      	cmp	r4, r3
 8008968:	d101      	bne.n	800896e <_fflush_r+0x62>
 800896a:	68ac      	ldr	r4, [r5, #8]
 800896c:	e7df      	b.n	800892e <_fflush_r+0x22>
 800896e:	4b04      	ldr	r3, [pc, #16]	; (8008980 <_fflush_r+0x74>)
 8008970:	429c      	cmp	r4, r3
 8008972:	bf08      	it	eq
 8008974:	68ec      	ldreq	r4, [r5, #12]
 8008976:	e7da      	b.n	800892e <_fflush_r+0x22>
 8008978:	0800a780 	.word	0x0800a780
 800897c:	0800a7a0 	.word	0x0800a7a0
 8008980:	0800a760 	.word	0x0800a760

08008984 <std>:
 8008984:	2300      	movs	r3, #0
 8008986:	b510      	push	{r4, lr}
 8008988:	4604      	mov	r4, r0
 800898a:	e9c0 3300 	strd	r3, r3, [r0]
 800898e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008992:	6083      	str	r3, [r0, #8]
 8008994:	8181      	strh	r1, [r0, #12]
 8008996:	6643      	str	r3, [r0, #100]	; 0x64
 8008998:	81c2      	strh	r2, [r0, #14]
 800899a:	6183      	str	r3, [r0, #24]
 800899c:	4619      	mov	r1, r3
 800899e:	2208      	movs	r2, #8
 80089a0:	305c      	adds	r0, #92	; 0x5c
 80089a2:	f7fd fc35 	bl	8006210 <memset>
 80089a6:	4b05      	ldr	r3, [pc, #20]	; (80089bc <std+0x38>)
 80089a8:	6263      	str	r3, [r4, #36]	; 0x24
 80089aa:	4b05      	ldr	r3, [pc, #20]	; (80089c0 <std+0x3c>)
 80089ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80089ae:	4b05      	ldr	r3, [pc, #20]	; (80089c4 <std+0x40>)
 80089b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80089b2:	4b05      	ldr	r3, [pc, #20]	; (80089c8 <std+0x44>)
 80089b4:	6224      	str	r4, [r4, #32]
 80089b6:	6323      	str	r3, [r4, #48]	; 0x30
 80089b8:	bd10      	pop	{r4, pc}
 80089ba:	bf00      	nop
 80089bc:	0800a141 	.word	0x0800a141
 80089c0:	0800a163 	.word	0x0800a163
 80089c4:	0800a19b 	.word	0x0800a19b
 80089c8:	0800a1bf 	.word	0x0800a1bf

080089cc <_cleanup_r>:
 80089cc:	4901      	ldr	r1, [pc, #4]	; (80089d4 <_cleanup_r+0x8>)
 80089ce:	f000 b8af 	b.w	8008b30 <_fwalk_reent>
 80089d2:	bf00      	nop
 80089d4:	0800890d 	.word	0x0800890d

080089d8 <__sfmoreglue>:
 80089d8:	b570      	push	{r4, r5, r6, lr}
 80089da:	1e4a      	subs	r2, r1, #1
 80089dc:	2568      	movs	r5, #104	; 0x68
 80089de:	4355      	muls	r5, r2
 80089e0:	460e      	mov	r6, r1
 80089e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80089e6:	f001 f9df 	bl	8009da8 <_malloc_r>
 80089ea:	4604      	mov	r4, r0
 80089ec:	b140      	cbz	r0, 8008a00 <__sfmoreglue+0x28>
 80089ee:	2100      	movs	r1, #0
 80089f0:	e9c0 1600 	strd	r1, r6, [r0]
 80089f4:	300c      	adds	r0, #12
 80089f6:	60a0      	str	r0, [r4, #8]
 80089f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80089fc:	f7fd fc08 	bl	8006210 <memset>
 8008a00:	4620      	mov	r0, r4
 8008a02:	bd70      	pop	{r4, r5, r6, pc}

08008a04 <__sfp_lock_acquire>:
 8008a04:	4801      	ldr	r0, [pc, #4]	; (8008a0c <__sfp_lock_acquire+0x8>)
 8008a06:	f000 bc26 	b.w	8009256 <__retarget_lock_acquire_recursive>
 8008a0a:	bf00      	nop
 8008a0c:	20000630 	.word	0x20000630

08008a10 <__sfp_lock_release>:
 8008a10:	4801      	ldr	r0, [pc, #4]	; (8008a18 <__sfp_lock_release+0x8>)
 8008a12:	f000 bc21 	b.w	8009258 <__retarget_lock_release_recursive>
 8008a16:	bf00      	nop
 8008a18:	20000630 	.word	0x20000630

08008a1c <__sinit_lock_acquire>:
 8008a1c:	4801      	ldr	r0, [pc, #4]	; (8008a24 <__sinit_lock_acquire+0x8>)
 8008a1e:	f000 bc1a 	b.w	8009256 <__retarget_lock_acquire_recursive>
 8008a22:	bf00      	nop
 8008a24:	2000062b 	.word	0x2000062b

08008a28 <__sinit_lock_release>:
 8008a28:	4801      	ldr	r0, [pc, #4]	; (8008a30 <__sinit_lock_release+0x8>)
 8008a2a:	f000 bc15 	b.w	8009258 <__retarget_lock_release_recursive>
 8008a2e:	bf00      	nop
 8008a30:	2000062b 	.word	0x2000062b

08008a34 <__sinit>:
 8008a34:	b510      	push	{r4, lr}
 8008a36:	4604      	mov	r4, r0
 8008a38:	f7ff fff0 	bl	8008a1c <__sinit_lock_acquire>
 8008a3c:	69a3      	ldr	r3, [r4, #24]
 8008a3e:	b11b      	cbz	r3, 8008a48 <__sinit+0x14>
 8008a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a44:	f7ff bff0 	b.w	8008a28 <__sinit_lock_release>
 8008a48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008a4c:	6523      	str	r3, [r4, #80]	; 0x50
 8008a4e:	4b13      	ldr	r3, [pc, #76]	; (8008a9c <__sinit+0x68>)
 8008a50:	4a13      	ldr	r2, [pc, #76]	; (8008aa0 <__sinit+0x6c>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	62a2      	str	r2, [r4, #40]	; 0x28
 8008a56:	42a3      	cmp	r3, r4
 8008a58:	bf04      	itt	eq
 8008a5a:	2301      	moveq	r3, #1
 8008a5c:	61a3      	streq	r3, [r4, #24]
 8008a5e:	4620      	mov	r0, r4
 8008a60:	f000 f820 	bl	8008aa4 <__sfp>
 8008a64:	6060      	str	r0, [r4, #4]
 8008a66:	4620      	mov	r0, r4
 8008a68:	f000 f81c 	bl	8008aa4 <__sfp>
 8008a6c:	60a0      	str	r0, [r4, #8]
 8008a6e:	4620      	mov	r0, r4
 8008a70:	f000 f818 	bl	8008aa4 <__sfp>
 8008a74:	2200      	movs	r2, #0
 8008a76:	60e0      	str	r0, [r4, #12]
 8008a78:	2104      	movs	r1, #4
 8008a7a:	6860      	ldr	r0, [r4, #4]
 8008a7c:	f7ff ff82 	bl	8008984 <std>
 8008a80:	68a0      	ldr	r0, [r4, #8]
 8008a82:	2201      	movs	r2, #1
 8008a84:	2109      	movs	r1, #9
 8008a86:	f7ff ff7d 	bl	8008984 <std>
 8008a8a:	68e0      	ldr	r0, [r4, #12]
 8008a8c:	2202      	movs	r2, #2
 8008a8e:	2112      	movs	r1, #18
 8008a90:	f7ff ff78 	bl	8008984 <std>
 8008a94:	2301      	movs	r3, #1
 8008a96:	61a3      	str	r3, [r4, #24]
 8008a98:	e7d2      	b.n	8008a40 <__sinit+0xc>
 8008a9a:	bf00      	nop
 8008a9c:	0800a540 	.word	0x0800a540
 8008aa0:	080089cd 	.word	0x080089cd

08008aa4 <__sfp>:
 8008aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa6:	4607      	mov	r7, r0
 8008aa8:	f7ff ffac 	bl	8008a04 <__sfp_lock_acquire>
 8008aac:	4b1e      	ldr	r3, [pc, #120]	; (8008b28 <__sfp+0x84>)
 8008aae:	681e      	ldr	r6, [r3, #0]
 8008ab0:	69b3      	ldr	r3, [r6, #24]
 8008ab2:	b913      	cbnz	r3, 8008aba <__sfp+0x16>
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	f7ff ffbd 	bl	8008a34 <__sinit>
 8008aba:	3648      	adds	r6, #72	; 0x48
 8008abc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ac0:	3b01      	subs	r3, #1
 8008ac2:	d503      	bpl.n	8008acc <__sfp+0x28>
 8008ac4:	6833      	ldr	r3, [r6, #0]
 8008ac6:	b30b      	cbz	r3, 8008b0c <__sfp+0x68>
 8008ac8:	6836      	ldr	r6, [r6, #0]
 8008aca:	e7f7      	b.n	8008abc <__sfp+0x18>
 8008acc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ad0:	b9d5      	cbnz	r5, 8008b08 <__sfp+0x64>
 8008ad2:	4b16      	ldr	r3, [pc, #88]	; (8008b2c <__sfp+0x88>)
 8008ad4:	60e3      	str	r3, [r4, #12]
 8008ad6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008ada:	6665      	str	r5, [r4, #100]	; 0x64
 8008adc:	f000 fbba 	bl	8009254 <__retarget_lock_init_recursive>
 8008ae0:	f7ff ff96 	bl	8008a10 <__sfp_lock_release>
 8008ae4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008ae8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008aec:	6025      	str	r5, [r4, #0]
 8008aee:	61a5      	str	r5, [r4, #24]
 8008af0:	2208      	movs	r2, #8
 8008af2:	4629      	mov	r1, r5
 8008af4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008af8:	f7fd fb8a 	bl	8006210 <memset>
 8008afc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008b00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008b04:	4620      	mov	r0, r4
 8008b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b08:	3468      	adds	r4, #104	; 0x68
 8008b0a:	e7d9      	b.n	8008ac0 <__sfp+0x1c>
 8008b0c:	2104      	movs	r1, #4
 8008b0e:	4638      	mov	r0, r7
 8008b10:	f7ff ff62 	bl	80089d8 <__sfmoreglue>
 8008b14:	4604      	mov	r4, r0
 8008b16:	6030      	str	r0, [r6, #0]
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	d1d5      	bne.n	8008ac8 <__sfp+0x24>
 8008b1c:	f7ff ff78 	bl	8008a10 <__sfp_lock_release>
 8008b20:	230c      	movs	r3, #12
 8008b22:	603b      	str	r3, [r7, #0]
 8008b24:	e7ee      	b.n	8008b04 <__sfp+0x60>
 8008b26:	bf00      	nop
 8008b28:	0800a540 	.word	0x0800a540
 8008b2c:	ffff0001 	.word	0xffff0001

08008b30 <_fwalk_reent>:
 8008b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b34:	4606      	mov	r6, r0
 8008b36:	4688      	mov	r8, r1
 8008b38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008b3c:	2700      	movs	r7, #0
 8008b3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b42:	f1b9 0901 	subs.w	r9, r9, #1
 8008b46:	d505      	bpl.n	8008b54 <_fwalk_reent+0x24>
 8008b48:	6824      	ldr	r4, [r4, #0]
 8008b4a:	2c00      	cmp	r4, #0
 8008b4c:	d1f7      	bne.n	8008b3e <_fwalk_reent+0xe>
 8008b4e:	4638      	mov	r0, r7
 8008b50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b54:	89ab      	ldrh	r3, [r5, #12]
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d907      	bls.n	8008b6a <_fwalk_reent+0x3a>
 8008b5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b5e:	3301      	adds	r3, #1
 8008b60:	d003      	beq.n	8008b6a <_fwalk_reent+0x3a>
 8008b62:	4629      	mov	r1, r5
 8008b64:	4630      	mov	r0, r6
 8008b66:	47c0      	blx	r8
 8008b68:	4307      	orrs	r7, r0
 8008b6a:	3568      	adds	r5, #104	; 0x68
 8008b6c:	e7e9      	b.n	8008b42 <_fwalk_reent+0x12>

08008b6e <rshift>:
 8008b6e:	6903      	ldr	r3, [r0, #16]
 8008b70:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008b74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b78:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008b7c:	f100 0414 	add.w	r4, r0, #20
 8008b80:	dd45      	ble.n	8008c0e <rshift+0xa0>
 8008b82:	f011 011f 	ands.w	r1, r1, #31
 8008b86:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008b8a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008b8e:	d10c      	bne.n	8008baa <rshift+0x3c>
 8008b90:	f100 0710 	add.w	r7, r0, #16
 8008b94:	4629      	mov	r1, r5
 8008b96:	42b1      	cmp	r1, r6
 8008b98:	d334      	bcc.n	8008c04 <rshift+0x96>
 8008b9a:	1a9b      	subs	r3, r3, r2
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	1eea      	subs	r2, r5, #3
 8008ba0:	4296      	cmp	r6, r2
 8008ba2:	bf38      	it	cc
 8008ba4:	2300      	movcc	r3, #0
 8008ba6:	4423      	add	r3, r4
 8008ba8:	e015      	b.n	8008bd6 <rshift+0x68>
 8008baa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008bae:	f1c1 0820 	rsb	r8, r1, #32
 8008bb2:	40cf      	lsrs	r7, r1
 8008bb4:	f105 0e04 	add.w	lr, r5, #4
 8008bb8:	46a1      	mov	r9, r4
 8008bba:	4576      	cmp	r6, lr
 8008bbc:	46f4      	mov	ip, lr
 8008bbe:	d815      	bhi.n	8008bec <rshift+0x7e>
 8008bc0:	1a9b      	subs	r3, r3, r2
 8008bc2:	009a      	lsls	r2, r3, #2
 8008bc4:	3a04      	subs	r2, #4
 8008bc6:	3501      	adds	r5, #1
 8008bc8:	42ae      	cmp	r6, r5
 8008bca:	bf38      	it	cc
 8008bcc:	2200      	movcc	r2, #0
 8008bce:	18a3      	adds	r3, r4, r2
 8008bd0:	50a7      	str	r7, [r4, r2]
 8008bd2:	b107      	cbz	r7, 8008bd6 <rshift+0x68>
 8008bd4:	3304      	adds	r3, #4
 8008bd6:	1b1a      	subs	r2, r3, r4
 8008bd8:	42a3      	cmp	r3, r4
 8008bda:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008bde:	bf08      	it	eq
 8008be0:	2300      	moveq	r3, #0
 8008be2:	6102      	str	r2, [r0, #16]
 8008be4:	bf08      	it	eq
 8008be6:	6143      	streq	r3, [r0, #20]
 8008be8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bec:	f8dc c000 	ldr.w	ip, [ip]
 8008bf0:	fa0c fc08 	lsl.w	ip, ip, r8
 8008bf4:	ea4c 0707 	orr.w	r7, ip, r7
 8008bf8:	f849 7b04 	str.w	r7, [r9], #4
 8008bfc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008c00:	40cf      	lsrs	r7, r1
 8008c02:	e7da      	b.n	8008bba <rshift+0x4c>
 8008c04:	f851 cb04 	ldr.w	ip, [r1], #4
 8008c08:	f847 cf04 	str.w	ip, [r7, #4]!
 8008c0c:	e7c3      	b.n	8008b96 <rshift+0x28>
 8008c0e:	4623      	mov	r3, r4
 8008c10:	e7e1      	b.n	8008bd6 <rshift+0x68>

08008c12 <__hexdig_fun>:
 8008c12:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008c16:	2b09      	cmp	r3, #9
 8008c18:	d802      	bhi.n	8008c20 <__hexdig_fun+0xe>
 8008c1a:	3820      	subs	r0, #32
 8008c1c:	b2c0      	uxtb	r0, r0
 8008c1e:	4770      	bx	lr
 8008c20:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008c24:	2b05      	cmp	r3, #5
 8008c26:	d801      	bhi.n	8008c2c <__hexdig_fun+0x1a>
 8008c28:	3847      	subs	r0, #71	; 0x47
 8008c2a:	e7f7      	b.n	8008c1c <__hexdig_fun+0xa>
 8008c2c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008c30:	2b05      	cmp	r3, #5
 8008c32:	d801      	bhi.n	8008c38 <__hexdig_fun+0x26>
 8008c34:	3827      	subs	r0, #39	; 0x27
 8008c36:	e7f1      	b.n	8008c1c <__hexdig_fun+0xa>
 8008c38:	2000      	movs	r0, #0
 8008c3a:	4770      	bx	lr

08008c3c <__gethex>:
 8008c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c40:	ed2d 8b02 	vpush	{d8}
 8008c44:	b089      	sub	sp, #36	; 0x24
 8008c46:	ee08 0a10 	vmov	s16, r0
 8008c4a:	9304      	str	r3, [sp, #16]
 8008c4c:	4bbc      	ldr	r3, [pc, #752]	; (8008f40 <__gethex+0x304>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	9301      	str	r3, [sp, #4]
 8008c52:	4618      	mov	r0, r3
 8008c54:	468b      	mov	fp, r1
 8008c56:	4690      	mov	r8, r2
 8008c58:	f7f7 fae2 	bl	8000220 <strlen>
 8008c5c:	9b01      	ldr	r3, [sp, #4]
 8008c5e:	f8db 2000 	ldr.w	r2, [fp]
 8008c62:	4403      	add	r3, r0
 8008c64:	4682      	mov	sl, r0
 8008c66:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008c6a:	9305      	str	r3, [sp, #20]
 8008c6c:	1c93      	adds	r3, r2, #2
 8008c6e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008c72:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008c76:	32fe      	adds	r2, #254	; 0xfe
 8008c78:	18d1      	adds	r1, r2, r3
 8008c7a:	461f      	mov	r7, r3
 8008c7c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008c80:	9100      	str	r1, [sp, #0]
 8008c82:	2830      	cmp	r0, #48	; 0x30
 8008c84:	d0f8      	beq.n	8008c78 <__gethex+0x3c>
 8008c86:	f7ff ffc4 	bl	8008c12 <__hexdig_fun>
 8008c8a:	4604      	mov	r4, r0
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	d13a      	bne.n	8008d06 <__gethex+0xca>
 8008c90:	9901      	ldr	r1, [sp, #4]
 8008c92:	4652      	mov	r2, sl
 8008c94:	4638      	mov	r0, r7
 8008c96:	f001 fa96 	bl	800a1c6 <strncmp>
 8008c9a:	4605      	mov	r5, r0
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	d168      	bne.n	8008d72 <__gethex+0x136>
 8008ca0:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008ca4:	eb07 060a 	add.w	r6, r7, sl
 8008ca8:	f7ff ffb3 	bl	8008c12 <__hexdig_fun>
 8008cac:	2800      	cmp	r0, #0
 8008cae:	d062      	beq.n	8008d76 <__gethex+0x13a>
 8008cb0:	4633      	mov	r3, r6
 8008cb2:	7818      	ldrb	r0, [r3, #0]
 8008cb4:	2830      	cmp	r0, #48	; 0x30
 8008cb6:	461f      	mov	r7, r3
 8008cb8:	f103 0301 	add.w	r3, r3, #1
 8008cbc:	d0f9      	beq.n	8008cb2 <__gethex+0x76>
 8008cbe:	f7ff ffa8 	bl	8008c12 <__hexdig_fun>
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	fab0 f480 	clz	r4, r0
 8008cc8:	0964      	lsrs	r4, r4, #5
 8008cca:	4635      	mov	r5, r6
 8008ccc:	9300      	str	r3, [sp, #0]
 8008cce:	463a      	mov	r2, r7
 8008cd0:	4616      	mov	r6, r2
 8008cd2:	3201      	adds	r2, #1
 8008cd4:	7830      	ldrb	r0, [r6, #0]
 8008cd6:	f7ff ff9c 	bl	8008c12 <__hexdig_fun>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	d1f8      	bne.n	8008cd0 <__gethex+0x94>
 8008cde:	9901      	ldr	r1, [sp, #4]
 8008ce0:	4652      	mov	r2, sl
 8008ce2:	4630      	mov	r0, r6
 8008ce4:	f001 fa6f 	bl	800a1c6 <strncmp>
 8008ce8:	b980      	cbnz	r0, 8008d0c <__gethex+0xd0>
 8008cea:	b94d      	cbnz	r5, 8008d00 <__gethex+0xc4>
 8008cec:	eb06 050a 	add.w	r5, r6, sl
 8008cf0:	462a      	mov	r2, r5
 8008cf2:	4616      	mov	r6, r2
 8008cf4:	3201      	adds	r2, #1
 8008cf6:	7830      	ldrb	r0, [r6, #0]
 8008cf8:	f7ff ff8b 	bl	8008c12 <__hexdig_fun>
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	d1f8      	bne.n	8008cf2 <__gethex+0xb6>
 8008d00:	1bad      	subs	r5, r5, r6
 8008d02:	00ad      	lsls	r5, r5, #2
 8008d04:	e004      	b.n	8008d10 <__gethex+0xd4>
 8008d06:	2400      	movs	r4, #0
 8008d08:	4625      	mov	r5, r4
 8008d0a:	e7e0      	b.n	8008cce <__gethex+0x92>
 8008d0c:	2d00      	cmp	r5, #0
 8008d0e:	d1f7      	bne.n	8008d00 <__gethex+0xc4>
 8008d10:	7833      	ldrb	r3, [r6, #0]
 8008d12:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008d16:	2b50      	cmp	r3, #80	; 0x50
 8008d18:	d13b      	bne.n	8008d92 <__gethex+0x156>
 8008d1a:	7873      	ldrb	r3, [r6, #1]
 8008d1c:	2b2b      	cmp	r3, #43	; 0x2b
 8008d1e:	d02c      	beq.n	8008d7a <__gethex+0x13e>
 8008d20:	2b2d      	cmp	r3, #45	; 0x2d
 8008d22:	d02e      	beq.n	8008d82 <__gethex+0x146>
 8008d24:	1c71      	adds	r1, r6, #1
 8008d26:	f04f 0900 	mov.w	r9, #0
 8008d2a:	7808      	ldrb	r0, [r1, #0]
 8008d2c:	f7ff ff71 	bl	8008c12 <__hexdig_fun>
 8008d30:	1e43      	subs	r3, r0, #1
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	2b18      	cmp	r3, #24
 8008d36:	d82c      	bhi.n	8008d92 <__gethex+0x156>
 8008d38:	f1a0 0210 	sub.w	r2, r0, #16
 8008d3c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008d40:	f7ff ff67 	bl	8008c12 <__hexdig_fun>
 8008d44:	1e43      	subs	r3, r0, #1
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	2b18      	cmp	r3, #24
 8008d4a:	d91d      	bls.n	8008d88 <__gethex+0x14c>
 8008d4c:	f1b9 0f00 	cmp.w	r9, #0
 8008d50:	d000      	beq.n	8008d54 <__gethex+0x118>
 8008d52:	4252      	negs	r2, r2
 8008d54:	4415      	add	r5, r2
 8008d56:	f8cb 1000 	str.w	r1, [fp]
 8008d5a:	b1e4      	cbz	r4, 8008d96 <__gethex+0x15a>
 8008d5c:	9b00      	ldr	r3, [sp, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	bf14      	ite	ne
 8008d62:	2700      	movne	r7, #0
 8008d64:	2706      	moveq	r7, #6
 8008d66:	4638      	mov	r0, r7
 8008d68:	b009      	add	sp, #36	; 0x24
 8008d6a:	ecbd 8b02 	vpop	{d8}
 8008d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d72:	463e      	mov	r6, r7
 8008d74:	4625      	mov	r5, r4
 8008d76:	2401      	movs	r4, #1
 8008d78:	e7ca      	b.n	8008d10 <__gethex+0xd4>
 8008d7a:	f04f 0900 	mov.w	r9, #0
 8008d7e:	1cb1      	adds	r1, r6, #2
 8008d80:	e7d3      	b.n	8008d2a <__gethex+0xee>
 8008d82:	f04f 0901 	mov.w	r9, #1
 8008d86:	e7fa      	b.n	8008d7e <__gethex+0x142>
 8008d88:	230a      	movs	r3, #10
 8008d8a:	fb03 0202 	mla	r2, r3, r2, r0
 8008d8e:	3a10      	subs	r2, #16
 8008d90:	e7d4      	b.n	8008d3c <__gethex+0x100>
 8008d92:	4631      	mov	r1, r6
 8008d94:	e7df      	b.n	8008d56 <__gethex+0x11a>
 8008d96:	1bf3      	subs	r3, r6, r7
 8008d98:	3b01      	subs	r3, #1
 8008d9a:	4621      	mov	r1, r4
 8008d9c:	2b07      	cmp	r3, #7
 8008d9e:	dc0b      	bgt.n	8008db8 <__gethex+0x17c>
 8008da0:	ee18 0a10 	vmov	r0, s16
 8008da4:	f000 fae6 	bl	8009374 <_Balloc>
 8008da8:	4604      	mov	r4, r0
 8008daa:	b940      	cbnz	r0, 8008dbe <__gethex+0x182>
 8008dac:	4b65      	ldr	r3, [pc, #404]	; (8008f44 <__gethex+0x308>)
 8008dae:	4602      	mov	r2, r0
 8008db0:	21de      	movs	r1, #222	; 0xde
 8008db2:	4865      	ldr	r0, [pc, #404]	; (8008f48 <__gethex+0x30c>)
 8008db4:	f001 fa38 	bl	800a228 <__assert_func>
 8008db8:	3101      	adds	r1, #1
 8008dba:	105b      	asrs	r3, r3, #1
 8008dbc:	e7ee      	b.n	8008d9c <__gethex+0x160>
 8008dbe:	f100 0914 	add.w	r9, r0, #20
 8008dc2:	f04f 0b00 	mov.w	fp, #0
 8008dc6:	f1ca 0301 	rsb	r3, sl, #1
 8008dca:	f8cd 9008 	str.w	r9, [sp, #8]
 8008dce:	f8cd b000 	str.w	fp, [sp]
 8008dd2:	9306      	str	r3, [sp, #24]
 8008dd4:	42b7      	cmp	r7, r6
 8008dd6:	d340      	bcc.n	8008e5a <__gethex+0x21e>
 8008dd8:	9802      	ldr	r0, [sp, #8]
 8008dda:	9b00      	ldr	r3, [sp, #0]
 8008ddc:	f840 3b04 	str.w	r3, [r0], #4
 8008de0:	eba0 0009 	sub.w	r0, r0, r9
 8008de4:	1080      	asrs	r0, r0, #2
 8008de6:	0146      	lsls	r6, r0, #5
 8008de8:	6120      	str	r0, [r4, #16]
 8008dea:	4618      	mov	r0, r3
 8008dec:	f000 fbb8 	bl	8009560 <__hi0bits>
 8008df0:	1a30      	subs	r0, r6, r0
 8008df2:	f8d8 6000 	ldr.w	r6, [r8]
 8008df6:	42b0      	cmp	r0, r6
 8008df8:	dd63      	ble.n	8008ec2 <__gethex+0x286>
 8008dfa:	1b87      	subs	r7, r0, r6
 8008dfc:	4639      	mov	r1, r7
 8008dfe:	4620      	mov	r0, r4
 8008e00:	f000 ff52 	bl	8009ca8 <__any_on>
 8008e04:	4682      	mov	sl, r0
 8008e06:	b1a8      	cbz	r0, 8008e34 <__gethex+0x1f8>
 8008e08:	1e7b      	subs	r3, r7, #1
 8008e0a:	1159      	asrs	r1, r3, #5
 8008e0c:	f003 021f 	and.w	r2, r3, #31
 8008e10:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008e14:	f04f 0a01 	mov.w	sl, #1
 8008e18:	fa0a f202 	lsl.w	r2, sl, r2
 8008e1c:	420a      	tst	r2, r1
 8008e1e:	d009      	beq.n	8008e34 <__gethex+0x1f8>
 8008e20:	4553      	cmp	r3, sl
 8008e22:	dd05      	ble.n	8008e30 <__gethex+0x1f4>
 8008e24:	1eb9      	subs	r1, r7, #2
 8008e26:	4620      	mov	r0, r4
 8008e28:	f000 ff3e 	bl	8009ca8 <__any_on>
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	d145      	bne.n	8008ebc <__gethex+0x280>
 8008e30:	f04f 0a02 	mov.w	sl, #2
 8008e34:	4639      	mov	r1, r7
 8008e36:	4620      	mov	r0, r4
 8008e38:	f7ff fe99 	bl	8008b6e <rshift>
 8008e3c:	443d      	add	r5, r7
 8008e3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e42:	42ab      	cmp	r3, r5
 8008e44:	da4c      	bge.n	8008ee0 <__gethex+0x2a4>
 8008e46:	ee18 0a10 	vmov	r0, s16
 8008e4a:	4621      	mov	r1, r4
 8008e4c:	f000 fad2 	bl	80093f4 <_Bfree>
 8008e50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008e52:	2300      	movs	r3, #0
 8008e54:	6013      	str	r3, [r2, #0]
 8008e56:	27a3      	movs	r7, #163	; 0xa3
 8008e58:	e785      	b.n	8008d66 <__gethex+0x12a>
 8008e5a:	1e73      	subs	r3, r6, #1
 8008e5c:	9a05      	ldr	r2, [sp, #20]
 8008e5e:	9303      	str	r3, [sp, #12]
 8008e60:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d019      	beq.n	8008e9c <__gethex+0x260>
 8008e68:	f1bb 0f20 	cmp.w	fp, #32
 8008e6c:	d107      	bne.n	8008e7e <__gethex+0x242>
 8008e6e:	9b02      	ldr	r3, [sp, #8]
 8008e70:	9a00      	ldr	r2, [sp, #0]
 8008e72:	f843 2b04 	str.w	r2, [r3], #4
 8008e76:	9302      	str	r3, [sp, #8]
 8008e78:	2300      	movs	r3, #0
 8008e7a:	9300      	str	r3, [sp, #0]
 8008e7c:	469b      	mov	fp, r3
 8008e7e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008e82:	f7ff fec6 	bl	8008c12 <__hexdig_fun>
 8008e86:	9b00      	ldr	r3, [sp, #0]
 8008e88:	f000 000f 	and.w	r0, r0, #15
 8008e8c:	fa00 f00b 	lsl.w	r0, r0, fp
 8008e90:	4303      	orrs	r3, r0
 8008e92:	9300      	str	r3, [sp, #0]
 8008e94:	f10b 0b04 	add.w	fp, fp, #4
 8008e98:	9b03      	ldr	r3, [sp, #12]
 8008e9a:	e00d      	b.n	8008eb8 <__gethex+0x27c>
 8008e9c:	9b03      	ldr	r3, [sp, #12]
 8008e9e:	9a06      	ldr	r2, [sp, #24]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	42bb      	cmp	r3, r7
 8008ea4:	d3e0      	bcc.n	8008e68 <__gethex+0x22c>
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	9901      	ldr	r1, [sp, #4]
 8008eaa:	9307      	str	r3, [sp, #28]
 8008eac:	4652      	mov	r2, sl
 8008eae:	f001 f98a 	bl	800a1c6 <strncmp>
 8008eb2:	9b07      	ldr	r3, [sp, #28]
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	d1d7      	bne.n	8008e68 <__gethex+0x22c>
 8008eb8:	461e      	mov	r6, r3
 8008eba:	e78b      	b.n	8008dd4 <__gethex+0x198>
 8008ebc:	f04f 0a03 	mov.w	sl, #3
 8008ec0:	e7b8      	b.n	8008e34 <__gethex+0x1f8>
 8008ec2:	da0a      	bge.n	8008eda <__gethex+0x29e>
 8008ec4:	1a37      	subs	r7, r6, r0
 8008ec6:	4621      	mov	r1, r4
 8008ec8:	ee18 0a10 	vmov	r0, s16
 8008ecc:	463a      	mov	r2, r7
 8008ece:	f000 fcad 	bl	800982c <__lshift>
 8008ed2:	1bed      	subs	r5, r5, r7
 8008ed4:	4604      	mov	r4, r0
 8008ed6:	f100 0914 	add.w	r9, r0, #20
 8008eda:	f04f 0a00 	mov.w	sl, #0
 8008ede:	e7ae      	b.n	8008e3e <__gethex+0x202>
 8008ee0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008ee4:	42a8      	cmp	r0, r5
 8008ee6:	dd72      	ble.n	8008fce <__gethex+0x392>
 8008ee8:	1b45      	subs	r5, r0, r5
 8008eea:	42ae      	cmp	r6, r5
 8008eec:	dc36      	bgt.n	8008f5c <__gethex+0x320>
 8008eee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ef2:	2b02      	cmp	r3, #2
 8008ef4:	d02a      	beq.n	8008f4c <__gethex+0x310>
 8008ef6:	2b03      	cmp	r3, #3
 8008ef8:	d02c      	beq.n	8008f54 <__gethex+0x318>
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d115      	bne.n	8008f2a <__gethex+0x2ee>
 8008efe:	42ae      	cmp	r6, r5
 8008f00:	d113      	bne.n	8008f2a <__gethex+0x2ee>
 8008f02:	2e01      	cmp	r6, #1
 8008f04:	d10b      	bne.n	8008f1e <__gethex+0x2e2>
 8008f06:	9a04      	ldr	r2, [sp, #16]
 8008f08:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008f0c:	6013      	str	r3, [r2, #0]
 8008f0e:	2301      	movs	r3, #1
 8008f10:	6123      	str	r3, [r4, #16]
 8008f12:	f8c9 3000 	str.w	r3, [r9]
 8008f16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f18:	2762      	movs	r7, #98	; 0x62
 8008f1a:	601c      	str	r4, [r3, #0]
 8008f1c:	e723      	b.n	8008d66 <__gethex+0x12a>
 8008f1e:	1e71      	subs	r1, r6, #1
 8008f20:	4620      	mov	r0, r4
 8008f22:	f000 fec1 	bl	8009ca8 <__any_on>
 8008f26:	2800      	cmp	r0, #0
 8008f28:	d1ed      	bne.n	8008f06 <__gethex+0x2ca>
 8008f2a:	ee18 0a10 	vmov	r0, s16
 8008f2e:	4621      	mov	r1, r4
 8008f30:	f000 fa60 	bl	80093f4 <_Bfree>
 8008f34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008f36:	2300      	movs	r3, #0
 8008f38:	6013      	str	r3, [r2, #0]
 8008f3a:	2750      	movs	r7, #80	; 0x50
 8008f3c:	e713      	b.n	8008d66 <__gethex+0x12a>
 8008f3e:	bf00      	nop
 8008f40:	0800a82c 	.word	0x0800a82c
 8008f44:	0800a74c 	.word	0x0800a74c
 8008f48:	0800a7c0 	.word	0x0800a7c0
 8008f4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d1eb      	bne.n	8008f2a <__gethex+0x2ee>
 8008f52:	e7d8      	b.n	8008f06 <__gethex+0x2ca>
 8008f54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d1d5      	bne.n	8008f06 <__gethex+0x2ca>
 8008f5a:	e7e6      	b.n	8008f2a <__gethex+0x2ee>
 8008f5c:	1e6f      	subs	r7, r5, #1
 8008f5e:	f1ba 0f00 	cmp.w	sl, #0
 8008f62:	d131      	bne.n	8008fc8 <__gethex+0x38c>
 8008f64:	b127      	cbz	r7, 8008f70 <__gethex+0x334>
 8008f66:	4639      	mov	r1, r7
 8008f68:	4620      	mov	r0, r4
 8008f6a:	f000 fe9d 	bl	8009ca8 <__any_on>
 8008f6e:	4682      	mov	sl, r0
 8008f70:	117b      	asrs	r3, r7, #5
 8008f72:	2101      	movs	r1, #1
 8008f74:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008f78:	f007 071f 	and.w	r7, r7, #31
 8008f7c:	fa01 f707 	lsl.w	r7, r1, r7
 8008f80:	421f      	tst	r7, r3
 8008f82:	4629      	mov	r1, r5
 8008f84:	4620      	mov	r0, r4
 8008f86:	bf18      	it	ne
 8008f88:	f04a 0a02 	orrne.w	sl, sl, #2
 8008f8c:	1b76      	subs	r6, r6, r5
 8008f8e:	f7ff fdee 	bl	8008b6e <rshift>
 8008f92:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008f96:	2702      	movs	r7, #2
 8008f98:	f1ba 0f00 	cmp.w	sl, #0
 8008f9c:	d048      	beq.n	8009030 <__gethex+0x3f4>
 8008f9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008fa2:	2b02      	cmp	r3, #2
 8008fa4:	d015      	beq.n	8008fd2 <__gethex+0x396>
 8008fa6:	2b03      	cmp	r3, #3
 8008fa8:	d017      	beq.n	8008fda <__gethex+0x39e>
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d109      	bne.n	8008fc2 <__gethex+0x386>
 8008fae:	f01a 0f02 	tst.w	sl, #2
 8008fb2:	d006      	beq.n	8008fc2 <__gethex+0x386>
 8008fb4:	f8d9 0000 	ldr.w	r0, [r9]
 8008fb8:	ea4a 0a00 	orr.w	sl, sl, r0
 8008fbc:	f01a 0f01 	tst.w	sl, #1
 8008fc0:	d10e      	bne.n	8008fe0 <__gethex+0x3a4>
 8008fc2:	f047 0710 	orr.w	r7, r7, #16
 8008fc6:	e033      	b.n	8009030 <__gethex+0x3f4>
 8008fc8:	f04f 0a01 	mov.w	sl, #1
 8008fcc:	e7d0      	b.n	8008f70 <__gethex+0x334>
 8008fce:	2701      	movs	r7, #1
 8008fd0:	e7e2      	b.n	8008f98 <__gethex+0x35c>
 8008fd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fd4:	f1c3 0301 	rsb	r3, r3, #1
 8008fd8:	9315      	str	r3, [sp, #84]	; 0x54
 8008fda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d0f0      	beq.n	8008fc2 <__gethex+0x386>
 8008fe0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008fe4:	f104 0314 	add.w	r3, r4, #20
 8008fe8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008fec:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008ff0:	f04f 0c00 	mov.w	ip, #0
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ffa:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008ffe:	d01c      	beq.n	800903a <__gethex+0x3fe>
 8009000:	3201      	adds	r2, #1
 8009002:	6002      	str	r2, [r0, #0]
 8009004:	2f02      	cmp	r7, #2
 8009006:	f104 0314 	add.w	r3, r4, #20
 800900a:	d13f      	bne.n	800908c <__gethex+0x450>
 800900c:	f8d8 2000 	ldr.w	r2, [r8]
 8009010:	3a01      	subs	r2, #1
 8009012:	42b2      	cmp	r2, r6
 8009014:	d10a      	bne.n	800902c <__gethex+0x3f0>
 8009016:	1171      	asrs	r1, r6, #5
 8009018:	2201      	movs	r2, #1
 800901a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800901e:	f006 061f 	and.w	r6, r6, #31
 8009022:	fa02 f606 	lsl.w	r6, r2, r6
 8009026:	421e      	tst	r6, r3
 8009028:	bf18      	it	ne
 800902a:	4617      	movne	r7, r2
 800902c:	f047 0720 	orr.w	r7, r7, #32
 8009030:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009032:	601c      	str	r4, [r3, #0]
 8009034:	9b04      	ldr	r3, [sp, #16]
 8009036:	601d      	str	r5, [r3, #0]
 8009038:	e695      	b.n	8008d66 <__gethex+0x12a>
 800903a:	4299      	cmp	r1, r3
 800903c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009040:	d8d8      	bhi.n	8008ff4 <__gethex+0x3b8>
 8009042:	68a3      	ldr	r3, [r4, #8]
 8009044:	459b      	cmp	fp, r3
 8009046:	db19      	blt.n	800907c <__gethex+0x440>
 8009048:	6861      	ldr	r1, [r4, #4]
 800904a:	ee18 0a10 	vmov	r0, s16
 800904e:	3101      	adds	r1, #1
 8009050:	f000 f990 	bl	8009374 <_Balloc>
 8009054:	4681      	mov	r9, r0
 8009056:	b918      	cbnz	r0, 8009060 <__gethex+0x424>
 8009058:	4b1a      	ldr	r3, [pc, #104]	; (80090c4 <__gethex+0x488>)
 800905a:	4602      	mov	r2, r0
 800905c:	2184      	movs	r1, #132	; 0x84
 800905e:	e6a8      	b.n	8008db2 <__gethex+0x176>
 8009060:	6922      	ldr	r2, [r4, #16]
 8009062:	3202      	adds	r2, #2
 8009064:	f104 010c 	add.w	r1, r4, #12
 8009068:	0092      	lsls	r2, r2, #2
 800906a:	300c      	adds	r0, #12
 800906c:	f000 f974 	bl	8009358 <memcpy>
 8009070:	4621      	mov	r1, r4
 8009072:	ee18 0a10 	vmov	r0, s16
 8009076:	f000 f9bd 	bl	80093f4 <_Bfree>
 800907a:	464c      	mov	r4, r9
 800907c:	6923      	ldr	r3, [r4, #16]
 800907e:	1c5a      	adds	r2, r3, #1
 8009080:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009084:	6122      	str	r2, [r4, #16]
 8009086:	2201      	movs	r2, #1
 8009088:	615a      	str	r2, [r3, #20]
 800908a:	e7bb      	b.n	8009004 <__gethex+0x3c8>
 800908c:	6922      	ldr	r2, [r4, #16]
 800908e:	455a      	cmp	r2, fp
 8009090:	dd0b      	ble.n	80090aa <__gethex+0x46e>
 8009092:	2101      	movs	r1, #1
 8009094:	4620      	mov	r0, r4
 8009096:	f7ff fd6a 	bl	8008b6e <rshift>
 800909a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800909e:	3501      	adds	r5, #1
 80090a0:	42ab      	cmp	r3, r5
 80090a2:	f6ff aed0 	blt.w	8008e46 <__gethex+0x20a>
 80090a6:	2701      	movs	r7, #1
 80090a8:	e7c0      	b.n	800902c <__gethex+0x3f0>
 80090aa:	f016 061f 	ands.w	r6, r6, #31
 80090ae:	d0fa      	beq.n	80090a6 <__gethex+0x46a>
 80090b0:	449a      	add	sl, r3
 80090b2:	f1c6 0620 	rsb	r6, r6, #32
 80090b6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80090ba:	f000 fa51 	bl	8009560 <__hi0bits>
 80090be:	42b0      	cmp	r0, r6
 80090c0:	dbe7      	blt.n	8009092 <__gethex+0x456>
 80090c2:	e7f0      	b.n	80090a6 <__gethex+0x46a>
 80090c4:	0800a74c 	.word	0x0800a74c

080090c8 <L_shift>:
 80090c8:	f1c2 0208 	rsb	r2, r2, #8
 80090cc:	0092      	lsls	r2, r2, #2
 80090ce:	b570      	push	{r4, r5, r6, lr}
 80090d0:	f1c2 0620 	rsb	r6, r2, #32
 80090d4:	6843      	ldr	r3, [r0, #4]
 80090d6:	6804      	ldr	r4, [r0, #0]
 80090d8:	fa03 f506 	lsl.w	r5, r3, r6
 80090dc:	432c      	orrs	r4, r5
 80090de:	40d3      	lsrs	r3, r2
 80090e0:	6004      	str	r4, [r0, #0]
 80090e2:	f840 3f04 	str.w	r3, [r0, #4]!
 80090e6:	4288      	cmp	r0, r1
 80090e8:	d3f4      	bcc.n	80090d4 <L_shift+0xc>
 80090ea:	bd70      	pop	{r4, r5, r6, pc}

080090ec <__match>:
 80090ec:	b530      	push	{r4, r5, lr}
 80090ee:	6803      	ldr	r3, [r0, #0]
 80090f0:	3301      	adds	r3, #1
 80090f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090f6:	b914      	cbnz	r4, 80090fe <__match+0x12>
 80090f8:	6003      	str	r3, [r0, #0]
 80090fa:	2001      	movs	r0, #1
 80090fc:	bd30      	pop	{r4, r5, pc}
 80090fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009102:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009106:	2d19      	cmp	r5, #25
 8009108:	bf98      	it	ls
 800910a:	3220      	addls	r2, #32
 800910c:	42a2      	cmp	r2, r4
 800910e:	d0f0      	beq.n	80090f2 <__match+0x6>
 8009110:	2000      	movs	r0, #0
 8009112:	e7f3      	b.n	80090fc <__match+0x10>

08009114 <__hexnan>:
 8009114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009118:	680b      	ldr	r3, [r1, #0]
 800911a:	6801      	ldr	r1, [r0, #0]
 800911c:	115e      	asrs	r6, r3, #5
 800911e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009122:	f013 031f 	ands.w	r3, r3, #31
 8009126:	b087      	sub	sp, #28
 8009128:	bf18      	it	ne
 800912a:	3604      	addne	r6, #4
 800912c:	2500      	movs	r5, #0
 800912e:	1f37      	subs	r7, r6, #4
 8009130:	4682      	mov	sl, r0
 8009132:	4690      	mov	r8, r2
 8009134:	9301      	str	r3, [sp, #4]
 8009136:	f846 5c04 	str.w	r5, [r6, #-4]
 800913a:	46b9      	mov	r9, r7
 800913c:	463c      	mov	r4, r7
 800913e:	9502      	str	r5, [sp, #8]
 8009140:	46ab      	mov	fp, r5
 8009142:	784a      	ldrb	r2, [r1, #1]
 8009144:	1c4b      	adds	r3, r1, #1
 8009146:	9303      	str	r3, [sp, #12]
 8009148:	b342      	cbz	r2, 800919c <__hexnan+0x88>
 800914a:	4610      	mov	r0, r2
 800914c:	9105      	str	r1, [sp, #20]
 800914e:	9204      	str	r2, [sp, #16]
 8009150:	f7ff fd5f 	bl	8008c12 <__hexdig_fun>
 8009154:	2800      	cmp	r0, #0
 8009156:	d14f      	bne.n	80091f8 <__hexnan+0xe4>
 8009158:	9a04      	ldr	r2, [sp, #16]
 800915a:	9905      	ldr	r1, [sp, #20]
 800915c:	2a20      	cmp	r2, #32
 800915e:	d818      	bhi.n	8009192 <__hexnan+0x7e>
 8009160:	9b02      	ldr	r3, [sp, #8]
 8009162:	459b      	cmp	fp, r3
 8009164:	dd13      	ble.n	800918e <__hexnan+0x7a>
 8009166:	454c      	cmp	r4, r9
 8009168:	d206      	bcs.n	8009178 <__hexnan+0x64>
 800916a:	2d07      	cmp	r5, #7
 800916c:	dc04      	bgt.n	8009178 <__hexnan+0x64>
 800916e:	462a      	mov	r2, r5
 8009170:	4649      	mov	r1, r9
 8009172:	4620      	mov	r0, r4
 8009174:	f7ff ffa8 	bl	80090c8 <L_shift>
 8009178:	4544      	cmp	r4, r8
 800917a:	d950      	bls.n	800921e <__hexnan+0x10a>
 800917c:	2300      	movs	r3, #0
 800917e:	f1a4 0904 	sub.w	r9, r4, #4
 8009182:	f844 3c04 	str.w	r3, [r4, #-4]
 8009186:	f8cd b008 	str.w	fp, [sp, #8]
 800918a:	464c      	mov	r4, r9
 800918c:	461d      	mov	r5, r3
 800918e:	9903      	ldr	r1, [sp, #12]
 8009190:	e7d7      	b.n	8009142 <__hexnan+0x2e>
 8009192:	2a29      	cmp	r2, #41	; 0x29
 8009194:	d156      	bne.n	8009244 <__hexnan+0x130>
 8009196:	3102      	adds	r1, #2
 8009198:	f8ca 1000 	str.w	r1, [sl]
 800919c:	f1bb 0f00 	cmp.w	fp, #0
 80091a0:	d050      	beq.n	8009244 <__hexnan+0x130>
 80091a2:	454c      	cmp	r4, r9
 80091a4:	d206      	bcs.n	80091b4 <__hexnan+0xa0>
 80091a6:	2d07      	cmp	r5, #7
 80091a8:	dc04      	bgt.n	80091b4 <__hexnan+0xa0>
 80091aa:	462a      	mov	r2, r5
 80091ac:	4649      	mov	r1, r9
 80091ae:	4620      	mov	r0, r4
 80091b0:	f7ff ff8a 	bl	80090c8 <L_shift>
 80091b4:	4544      	cmp	r4, r8
 80091b6:	d934      	bls.n	8009222 <__hexnan+0x10e>
 80091b8:	f1a8 0204 	sub.w	r2, r8, #4
 80091bc:	4623      	mov	r3, r4
 80091be:	f853 1b04 	ldr.w	r1, [r3], #4
 80091c2:	f842 1f04 	str.w	r1, [r2, #4]!
 80091c6:	429f      	cmp	r7, r3
 80091c8:	d2f9      	bcs.n	80091be <__hexnan+0xaa>
 80091ca:	1b3b      	subs	r3, r7, r4
 80091cc:	f023 0303 	bic.w	r3, r3, #3
 80091d0:	3304      	adds	r3, #4
 80091d2:	3401      	adds	r4, #1
 80091d4:	3e03      	subs	r6, #3
 80091d6:	42b4      	cmp	r4, r6
 80091d8:	bf88      	it	hi
 80091da:	2304      	movhi	r3, #4
 80091dc:	4443      	add	r3, r8
 80091de:	2200      	movs	r2, #0
 80091e0:	f843 2b04 	str.w	r2, [r3], #4
 80091e4:	429f      	cmp	r7, r3
 80091e6:	d2fb      	bcs.n	80091e0 <__hexnan+0xcc>
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	b91b      	cbnz	r3, 80091f4 <__hexnan+0xe0>
 80091ec:	4547      	cmp	r7, r8
 80091ee:	d127      	bne.n	8009240 <__hexnan+0x12c>
 80091f0:	2301      	movs	r3, #1
 80091f2:	603b      	str	r3, [r7, #0]
 80091f4:	2005      	movs	r0, #5
 80091f6:	e026      	b.n	8009246 <__hexnan+0x132>
 80091f8:	3501      	adds	r5, #1
 80091fa:	2d08      	cmp	r5, #8
 80091fc:	f10b 0b01 	add.w	fp, fp, #1
 8009200:	dd06      	ble.n	8009210 <__hexnan+0xfc>
 8009202:	4544      	cmp	r4, r8
 8009204:	d9c3      	bls.n	800918e <__hexnan+0x7a>
 8009206:	2300      	movs	r3, #0
 8009208:	f844 3c04 	str.w	r3, [r4, #-4]
 800920c:	2501      	movs	r5, #1
 800920e:	3c04      	subs	r4, #4
 8009210:	6822      	ldr	r2, [r4, #0]
 8009212:	f000 000f 	and.w	r0, r0, #15
 8009216:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800921a:	6022      	str	r2, [r4, #0]
 800921c:	e7b7      	b.n	800918e <__hexnan+0x7a>
 800921e:	2508      	movs	r5, #8
 8009220:	e7b5      	b.n	800918e <__hexnan+0x7a>
 8009222:	9b01      	ldr	r3, [sp, #4]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d0df      	beq.n	80091e8 <__hexnan+0xd4>
 8009228:	f04f 32ff 	mov.w	r2, #4294967295
 800922c:	f1c3 0320 	rsb	r3, r3, #32
 8009230:	fa22 f303 	lsr.w	r3, r2, r3
 8009234:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009238:	401a      	ands	r2, r3
 800923a:	f846 2c04 	str.w	r2, [r6, #-4]
 800923e:	e7d3      	b.n	80091e8 <__hexnan+0xd4>
 8009240:	3f04      	subs	r7, #4
 8009242:	e7d1      	b.n	80091e8 <__hexnan+0xd4>
 8009244:	2004      	movs	r0, #4
 8009246:	b007      	add	sp, #28
 8009248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800924c <_localeconv_r>:
 800924c:	4800      	ldr	r0, [pc, #0]	; (8009250 <_localeconv_r+0x4>)
 800924e:	4770      	bx	lr
 8009250:	20000170 	.word	0x20000170

08009254 <__retarget_lock_init_recursive>:
 8009254:	4770      	bx	lr

08009256 <__retarget_lock_acquire_recursive>:
 8009256:	4770      	bx	lr

08009258 <__retarget_lock_release_recursive>:
 8009258:	4770      	bx	lr

0800925a <__swhatbuf_r>:
 800925a:	b570      	push	{r4, r5, r6, lr}
 800925c:	460e      	mov	r6, r1
 800925e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009262:	2900      	cmp	r1, #0
 8009264:	b096      	sub	sp, #88	; 0x58
 8009266:	4614      	mov	r4, r2
 8009268:	461d      	mov	r5, r3
 800926a:	da07      	bge.n	800927c <__swhatbuf_r+0x22>
 800926c:	2300      	movs	r3, #0
 800926e:	602b      	str	r3, [r5, #0]
 8009270:	89b3      	ldrh	r3, [r6, #12]
 8009272:	061a      	lsls	r2, r3, #24
 8009274:	d410      	bmi.n	8009298 <__swhatbuf_r+0x3e>
 8009276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800927a:	e00e      	b.n	800929a <__swhatbuf_r+0x40>
 800927c:	466a      	mov	r2, sp
 800927e:	f001 f813 	bl	800a2a8 <_fstat_r>
 8009282:	2800      	cmp	r0, #0
 8009284:	dbf2      	blt.n	800926c <__swhatbuf_r+0x12>
 8009286:	9a01      	ldr	r2, [sp, #4]
 8009288:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800928c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009290:	425a      	negs	r2, r3
 8009292:	415a      	adcs	r2, r3
 8009294:	602a      	str	r2, [r5, #0]
 8009296:	e7ee      	b.n	8009276 <__swhatbuf_r+0x1c>
 8009298:	2340      	movs	r3, #64	; 0x40
 800929a:	2000      	movs	r0, #0
 800929c:	6023      	str	r3, [r4, #0]
 800929e:	b016      	add	sp, #88	; 0x58
 80092a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080092a4 <__smakebuf_r>:
 80092a4:	898b      	ldrh	r3, [r1, #12]
 80092a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092a8:	079d      	lsls	r5, r3, #30
 80092aa:	4606      	mov	r6, r0
 80092ac:	460c      	mov	r4, r1
 80092ae:	d507      	bpl.n	80092c0 <__smakebuf_r+0x1c>
 80092b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092b4:	6023      	str	r3, [r4, #0]
 80092b6:	6123      	str	r3, [r4, #16]
 80092b8:	2301      	movs	r3, #1
 80092ba:	6163      	str	r3, [r4, #20]
 80092bc:	b002      	add	sp, #8
 80092be:	bd70      	pop	{r4, r5, r6, pc}
 80092c0:	ab01      	add	r3, sp, #4
 80092c2:	466a      	mov	r2, sp
 80092c4:	f7ff ffc9 	bl	800925a <__swhatbuf_r>
 80092c8:	9900      	ldr	r1, [sp, #0]
 80092ca:	4605      	mov	r5, r0
 80092cc:	4630      	mov	r0, r6
 80092ce:	f000 fd6b 	bl	8009da8 <_malloc_r>
 80092d2:	b948      	cbnz	r0, 80092e8 <__smakebuf_r+0x44>
 80092d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092d8:	059a      	lsls	r2, r3, #22
 80092da:	d4ef      	bmi.n	80092bc <__smakebuf_r+0x18>
 80092dc:	f023 0303 	bic.w	r3, r3, #3
 80092e0:	f043 0302 	orr.w	r3, r3, #2
 80092e4:	81a3      	strh	r3, [r4, #12]
 80092e6:	e7e3      	b.n	80092b0 <__smakebuf_r+0xc>
 80092e8:	4b0d      	ldr	r3, [pc, #52]	; (8009320 <__smakebuf_r+0x7c>)
 80092ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80092ec:	89a3      	ldrh	r3, [r4, #12]
 80092ee:	6020      	str	r0, [r4, #0]
 80092f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092f4:	81a3      	strh	r3, [r4, #12]
 80092f6:	9b00      	ldr	r3, [sp, #0]
 80092f8:	6163      	str	r3, [r4, #20]
 80092fa:	9b01      	ldr	r3, [sp, #4]
 80092fc:	6120      	str	r0, [r4, #16]
 80092fe:	b15b      	cbz	r3, 8009318 <__smakebuf_r+0x74>
 8009300:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009304:	4630      	mov	r0, r6
 8009306:	f000 ffe1 	bl	800a2cc <_isatty_r>
 800930a:	b128      	cbz	r0, 8009318 <__smakebuf_r+0x74>
 800930c:	89a3      	ldrh	r3, [r4, #12]
 800930e:	f023 0303 	bic.w	r3, r3, #3
 8009312:	f043 0301 	orr.w	r3, r3, #1
 8009316:	81a3      	strh	r3, [r4, #12]
 8009318:	89a0      	ldrh	r0, [r4, #12]
 800931a:	4305      	orrs	r5, r0
 800931c:	81a5      	strh	r5, [r4, #12]
 800931e:	e7cd      	b.n	80092bc <__smakebuf_r+0x18>
 8009320:	080089cd 	.word	0x080089cd

08009324 <malloc>:
 8009324:	4b02      	ldr	r3, [pc, #8]	; (8009330 <malloc+0xc>)
 8009326:	4601      	mov	r1, r0
 8009328:	6818      	ldr	r0, [r3, #0]
 800932a:	f000 bd3d 	b.w	8009da8 <_malloc_r>
 800932e:	bf00      	nop
 8009330:	20000018 	.word	0x20000018

08009334 <__ascii_mbtowc>:
 8009334:	b082      	sub	sp, #8
 8009336:	b901      	cbnz	r1, 800933a <__ascii_mbtowc+0x6>
 8009338:	a901      	add	r1, sp, #4
 800933a:	b142      	cbz	r2, 800934e <__ascii_mbtowc+0x1a>
 800933c:	b14b      	cbz	r3, 8009352 <__ascii_mbtowc+0x1e>
 800933e:	7813      	ldrb	r3, [r2, #0]
 8009340:	600b      	str	r3, [r1, #0]
 8009342:	7812      	ldrb	r2, [r2, #0]
 8009344:	1e10      	subs	r0, r2, #0
 8009346:	bf18      	it	ne
 8009348:	2001      	movne	r0, #1
 800934a:	b002      	add	sp, #8
 800934c:	4770      	bx	lr
 800934e:	4610      	mov	r0, r2
 8009350:	e7fb      	b.n	800934a <__ascii_mbtowc+0x16>
 8009352:	f06f 0001 	mvn.w	r0, #1
 8009356:	e7f8      	b.n	800934a <__ascii_mbtowc+0x16>

08009358 <memcpy>:
 8009358:	440a      	add	r2, r1
 800935a:	4291      	cmp	r1, r2
 800935c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009360:	d100      	bne.n	8009364 <memcpy+0xc>
 8009362:	4770      	bx	lr
 8009364:	b510      	push	{r4, lr}
 8009366:	f811 4b01 	ldrb.w	r4, [r1], #1
 800936a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800936e:	4291      	cmp	r1, r2
 8009370:	d1f9      	bne.n	8009366 <memcpy+0xe>
 8009372:	bd10      	pop	{r4, pc}

08009374 <_Balloc>:
 8009374:	b570      	push	{r4, r5, r6, lr}
 8009376:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009378:	4604      	mov	r4, r0
 800937a:	460d      	mov	r5, r1
 800937c:	b976      	cbnz	r6, 800939c <_Balloc+0x28>
 800937e:	2010      	movs	r0, #16
 8009380:	f7ff ffd0 	bl	8009324 <malloc>
 8009384:	4602      	mov	r2, r0
 8009386:	6260      	str	r0, [r4, #36]	; 0x24
 8009388:	b920      	cbnz	r0, 8009394 <_Balloc+0x20>
 800938a:	4b18      	ldr	r3, [pc, #96]	; (80093ec <_Balloc+0x78>)
 800938c:	4818      	ldr	r0, [pc, #96]	; (80093f0 <_Balloc+0x7c>)
 800938e:	2166      	movs	r1, #102	; 0x66
 8009390:	f000 ff4a 	bl	800a228 <__assert_func>
 8009394:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009398:	6006      	str	r6, [r0, #0]
 800939a:	60c6      	str	r6, [r0, #12]
 800939c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800939e:	68f3      	ldr	r3, [r6, #12]
 80093a0:	b183      	cbz	r3, 80093c4 <_Balloc+0x50>
 80093a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093a4:	68db      	ldr	r3, [r3, #12]
 80093a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80093aa:	b9b8      	cbnz	r0, 80093dc <_Balloc+0x68>
 80093ac:	2101      	movs	r1, #1
 80093ae:	fa01 f605 	lsl.w	r6, r1, r5
 80093b2:	1d72      	adds	r2, r6, #5
 80093b4:	0092      	lsls	r2, r2, #2
 80093b6:	4620      	mov	r0, r4
 80093b8:	f000 fc97 	bl	8009cea <_calloc_r>
 80093bc:	b160      	cbz	r0, 80093d8 <_Balloc+0x64>
 80093be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80093c2:	e00e      	b.n	80093e2 <_Balloc+0x6e>
 80093c4:	2221      	movs	r2, #33	; 0x21
 80093c6:	2104      	movs	r1, #4
 80093c8:	4620      	mov	r0, r4
 80093ca:	f000 fc8e 	bl	8009cea <_calloc_r>
 80093ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093d0:	60f0      	str	r0, [r6, #12]
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d1e4      	bne.n	80093a2 <_Balloc+0x2e>
 80093d8:	2000      	movs	r0, #0
 80093da:	bd70      	pop	{r4, r5, r6, pc}
 80093dc:	6802      	ldr	r2, [r0, #0]
 80093de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80093e2:	2300      	movs	r3, #0
 80093e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80093e8:	e7f7      	b.n	80093da <_Balloc+0x66>
 80093ea:	bf00      	nop
 80093ec:	0800a6d6 	.word	0x0800a6d6
 80093f0:	0800a840 	.word	0x0800a840

080093f4 <_Bfree>:
 80093f4:	b570      	push	{r4, r5, r6, lr}
 80093f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80093f8:	4605      	mov	r5, r0
 80093fa:	460c      	mov	r4, r1
 80093fc:	b976      	cbnz	r6, 800941c <_Bfree+0x28>
 80093fe:	2010      	movs	r0, #16
 8009400:	f7ff ff90 	bl	8009324 <malloc>
 8009404:	4602      	mov	r2, r0
 8009406:	6268      	str	r0, [r5, #36]	; 0x24
 8009408:	b920      	cbnz	r0, 8009414 <_Bfree+0x20>
 800940a:	4b09      	ldr	r3, [pc, #36]	; (8009430 <_Bfree+0x3c>)
 800940c:	4809      	ldr	r0, [pc, #36]	; (8009434 <_Bfree+0x40>)
 800940e:	218a      	movs	r1, #138	; 0x8a
 8009410:	f000 ff0a 	bl	800a228 <__assert_func>
 8009414:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009418:	6006      	str	r6, [r0, #0]
 800941a:	60c6      	str	r6, [r0, #12]
 800941c:	b13c      	cbz	r4, 800942e <_Bfree+0x3a>
 800941e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009420:	6862      	ldr	r2, [r4, #4]
 8009422:	68db      	ldr	r3, [r3, #12]
 8009424:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009428:	6021      	str	r1, [r4, #0]
 800942a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800942e:	bd70      	pop	{r4, r5, r6, pc}
 8009430:	0800a6d6 	.word	0x0800a6d6
 8009434:	0800a840 	.word	0x0800a840

08009438 <__multadd>:
 8009438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800943c:	690e      	ldr	r6, [r1, #16]
 800943e:	4607      	mov	r7, r0
 8009440:	4698      	mov	r8, r3
 8009442:	460c      	mov	r4, r1
 8009444:	f101 0014 	add.w	r0, r1, #20
 8009448:	2300      	movs	r3, #0
 800944a:	6805      	ldr	r5, [r0, #0]
 800944c:	b2a9      	uxth	r1, r5
 800944e:	fb02 8101 	mla	r1, r2, r1, r8
 8009452:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009456:	0c2d      	lsrs	r5, r5, #16
 8009458:	fb02 c505 	mla	r5, r2, r5, ip
 800945c:	b289      	uxth	r1, r1
 800945e:	3301      	adds	r3, #1
 8009460:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009464:	429e      	cmp	r6, r3
 8009466:	f840 1b04 	str.w	r1, [r0], #4
 800946a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800946e:	dcec      	bgt.n	800944a <__multadd+0x12>
 8009470:	f1b8 0f00 	cmp.w	r8, #0
 8009474:	d022      	beq.n	80094bc <__multadd+0x84>
 8009476:	68a3      	ldr	r3, [r4, #8]
 8009478:	42b3      	cmp	r3, r6
 800947a:	dc19      	bgt.n	80094b0 <__multadd+0x78>
 800947c:	6861      	ldr	r1, [r4, #4]
 800947e:	4638      	mov	r0, r7
 8009480:	3101      	adds	r1, #1
 8009482:	f7ff ff77 	bl	8009374 <_Balloc>
 8009486:	4605      	mov	r5, r0
 8009488:	b928      	cbnz	r0, 8009496 <__multadd+0x5e>
 800948a:	4602      	mov	r2, r0
 800948c:	4b0d      	ldr	r3, [pc, #52]	; (80094c4 <__multadd+0x8c>)
 800948e:	480e      	ldr	r0, [pc, #56]	; (80094c8 <__multadd+0x90>)
 8009490:	21b5      	movs	r1, #181	; 0xb5
 8009492:	f000 fec9 	bl	800a228 <__assert_func>
 8009496:	6922      	ldr	r2, [r4, #16]
 8009498:	3202      	adds	r2, #2
 800949a:	f104 010c 	add.w	r1, r4, #12
 800949e:	0092      	lsls	r2, r2, #2
 80094a0:	300c      	adds	r0, #12
 80094a2:	f7ff ff59 	bl	8009358 <memcpy>
 80094a6:	4621      	mov	r1, r4
 80094a8:	4638      	mov	r0, r7
 80094aa:	f7ff ffa3 	bl	80093f4 <_Bfree>
 80094ae:	462c      	mov	r4, r5
 80094b0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80094b4:	3601      	adds	r6, #1
 80094b6:	f8c3 8014 	str.w	r8, [r3, #20]
 80094ba:	6126      	str	r6, [r4, #16]
 80094bc:	4620      	mov	r0, r4
 80094be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094c2:	bf00      	nop
 80094c4:	0800a74c 	.word	0x0800a74c
 80094c8:	0800a840 	.word	0x0800a840

080094cc <__s2b>:
 80094cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094d0:	460c      	mov	r4, r1
 80094d2:	4615      	mov	r5, r2
 80094d4:	461f      	mov	r7, r3
 80094d6:	2209      	movs	r2, #9
 80094d8:	3308      	adds	r3, #8
 80094da:	4606      	mov	r6, r0
 80094dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80094e0:	2100      	movs	r1, #0
 80094e2:	2201      	movs	r2, #1
 80094e4:	429a      	cmp	r2, r3
 80094e6:	db09      	blt.n	80094fc <__s2b+0x30>
 80094e8:	4630      	mov	r0, r6
 80094ea:	f7ff ff43 	bl	8009374 <_Balloc>
 80094ee:	b940      	cbnz	r0, 8009502 <__s2b+0x36>
 80094f0:	4602      	mov	r2, r0
 80094f2:	4b19      	ldr	r3, [pc, #100]	; (8009558 <__s2b+0x8c>)
 80094f4:	4819      	ldr	r0, [pc, #100]	; (800955c <__s2b+0x90>)
 80094f6:	21ce      	movs	r1, #206	; 0xce
 80094f8:	f000 fe96 	bl	800a228 <__assert_func>
 80094fc:	0052      	lsls	r2, r2, #1
 80094fe:	3101      	adds	r1, #1
 8009500:	e7f0      	b.n	80094e4 <__s2b+0x18>
 8009502:	9b08      	ldr	r3, [sp, #32]
 8009504:	6143      	str	r3, [r0, #20]
 8009506:	2d09      	cmp	r5, #9
 8009508:	f04f 0301 	mov.w	r3, #1
 800950c:	6103      	str	r3, [r0, #16]
 800950e:	dd16      	ble.n	800953e <__s2b+0x72>
 8009510:	f104 0909 	add.w	r9, r4, #9
 8009514:	46c8      	mov	r8, r9
 8009516:	442c      	add	r4, r5
 8009518:	f818 3b01 	ldrb.w	r3, [r8], #1
 800951c:	4601      	mov	r1, r0
 800951e:	3b30      	subs	r3, #48	; 0x30
 8009520:	220a      	movs	r2, #10
 8009522:	4630      	mov	r0, r6
 8009524:	f7ff ff88 	bl	8009438 <__multadd>
 8009528:	45a0      	cmp	r8, r4
 800952a:	d1f5      	bne.n	8009518 <__s2b+0x4c>
 800952c:	f1a5 0408 	sub.w	r4, r5, #8
 8009530:	444c      	add	r4, r9
 8009532:	1b2d      	subs	r5, r5, r4
 8009534:	1963      	adds	r3, r4, r5
 8009536:	42bb      	cmp	r3, r7
 8009538:	db04      	blt.n	8009544 <__s2b+0x78>
 800953a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800953e:	340a      	adds	r4, #10
 8009540:	2509      	movs	r5, #9
 8009542:	e7f6      	b.n	8009532 <__s2b+0x66>
 8009544:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009548:	4601      	mov	r1, r0
 800954a:	3b30      	subs	r3, #48	; 0x30
 800954c:	220a      	movs	r2, #10
 800954e:	4630      	mov	r0, r6
 8009550:	f7ff ff72 	bl	8009438 <__multadd>
 8009554:	e7ee      	b.n	8009534 <__s2b+0x68>
 8009556:	bf00      	nop
 8009558:	0800a74c 	.word	0x0800a74c
 800955c:	0800a840 	.word	0x0800a840

08009560 <__hi0bits>:
 8009560:	0c03      	lsrs	r3, r0, #16
 8009562:	041b      	lsls	r3, r3, #16
 8009564:	b9d3      	cbnz	r3, 800959c <__hi0bits+0x3c>
 8009566:	0400      	lsls	r0, r0, #16
 8009568:	2310      	movs	r3, #16
 800956a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800956e:	bf04      	itt	eq
 8009570:	0200      	lsleq	r0, r0, #8
 8009572:	3308      	addeq	r3, #8
 8009574:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009578:	bf04      	itt	eq
 800957a:	0100      	lsleq	r0, r0, #4
 800957c:	3304      	addeq	r3, #4
 800957e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009582:	bf04      	itt	eq
 8009584:	0080      	lsleq	r0, r0, #2
 8009586:	3302      	addeq	r3, #2
 8009588:	2800      	cmp	r0, #0
 800958a:	db05      	blt.n	8009598 <__hi0bits+0x38>
 800958c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009590:	f103 0301 	add.w	r3, r3, #1
 8009594:	bf08      	it	eq
 8009596:	2320      	moveq	r3, #32
 8009598:	4618      	mov	r0, r3
 800959a:	4770      	bx	lr
 800959c:	2300      	movs	r3, #0
 800959e:	e7e4      	b.n	800956a <__hi0bits+0xa>

080095a0 <__lo0bits>:
 80095a0:	6803      	ldr	r3, [r0, #0]
 80095a2:	f013 0207 	ands.w	r2, r3, #7
 80095a6:	4601      	mov	r1, r0
 80095a8:	d00b      	beq.n	80095c2 <__lo0bits+0x22>
 80095aa:	07da      	lsls	r2, r3, #31
 80095ac:	d424      	bmi.n	80095f8 <__lo0bits+0x58>
 80095ae:	0798      	lsls	r0, r3, #30
 80095b0:	bf49      	itett	mi
 80095b2:	085b      	lsrmi	r3, r3, #1
 80095b4:	089b      	lsrpl	r3, r3, #2
 80095b6:	2001      	movmi	r0, #1
 80095b8:	600b      	strmi	r3, [r1, #0]
 80095ba:	bf5c      	itt	pl
 80095bc:	600b      	strpl	r3, [r1, #0]
 80095be:	2002      	movpl	r0, #2
 80095c0:	4770      	bx	lr
 80095c2:	b298      	uxth	r0, r3
 80095c4:	b9b0      	cbnz	r0, 80095f4 <__lo0bits+0x54>
 80095c6:	0c1b      	lsrs	r3, r3, #16
 80095c8:	2010      	movs	r0, #16
 80095ca:	f013 0fff 	tst.w	r3, #255	; 0xff
 80095ce:	bf04      	itt	eq
 80095d0:	0a1b      	lsreq	r3, r3, #8
 80095d2:	3008      	addeq	r0, #8
 80095d4:	071a      	lsls	r2, r3, #28
 80095d6:	bf04      	itt	eq
 80095d8:	091b      	lsreq	r3, r3, #4
 80095da:	3004      	addeq	r0, #4
 80095dc:	079a      	lsls	r2, r3, #30
 80095de:	bf04      	itt	eq
 80095e0:	089b      	lsreq	r3, r3, #2
 80095e2:	3002      	addeq	r0, #2
 80095e4:	07da      	lsls	r2, r3, #31
 80095e6:	d403      	bmi.n	80095f0 <__lo0bits+0x50>
 80095e8:	085b      	lsrs	r3, r3, #1
 80095ea:	f100 0001 	add.w	r0, r0, #1
 80095ee:	d005      	beq.n	80095fc <__lo0bits+0x5c>
 80095f0:	600b      	str	r3, [r1, #0]
 80095f2:	4770      	bx	lr
 80095f4:	4610      	mov	r0, r2
 80095f6:	e7e8      	b.n	80095ca <__lo0bits+0x2a>
 80095f8:	2000      	movs	r0, #0
 80095fa:	4770      	bx	lr
 80095fc:	2020      	movs	r0, #32
 80095fe:	4770      	bx	lr

08009600 <__i2b>:
 8009600:	b510      	push	{r4, lr}
 8009602:	460c      	mov	r4, r1
 8009604:	2101      	movs	r1, #1
 8009606:	f7ff feb5 	bl	8009374 <_Balloc>
 800960a:	4602      	mov	r2, r0
 800960c:	b928      	cbnz	r0, 800961a <__i2b+0x1a>
 800960e:	4b05      	ldr	r3, [pc, #20]	; (8009624 <__i2b+0x24>)
 8009610:	4805      	ldr	r0, [pc, #20]	; (8009628 <__i2b+0x28>)
 8009612:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009616:	f000 fe07 	bl	800a228 <__assert_func>
 800961a:	2301      	movs	r3, #1
 800961c:	6144      	str	r4, [r0, #20]
 800961e:	6103      	str	r3, [r0, #16]
 8009620:	bd10      	pop	{r4, pc}
 8009622:	bf00      	nop
 8009624:	0800a74c 	.word	0x0800a74c
 8009628:	0800a840 	.word	0x0800a840

0800962c <__multiply>:
 800962c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009630:	4614      	mov	r4, r2
 8009632:	690a      	ldr	r2, [r1, #16]
 8009634:	6923      	ldr	r3, [r4, #16]
 8009636:	429a      	cmp	r2, r3
 8009638:	bfb8      	it	lt
 800963a:	460b      	movlt	r3, r1
 800963c:	460d      	mov	r5, r1
 800963e:	bfbc      	itt	lt
 8009640:	4625      	movlt	r5, r4
 8009642:	461c      	movlt	r4, r3
 8009644:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009648:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800964c:	68ab      	ldr	r3, [r5, #8]
 800964e:	6869      	ldr	r1, [r5, #4]
 8009650:	eb0a 0709 	add.w	r7, sl, r9
 8009654:	42bb      	cmp	r3, r7
 8009656:	b085      	sub	sp, #20
 8009658:	bfb8      	it	lt
 800965a:	3101      	addlt	r1, #1
 800965c:	f7ff fe8a 	bl	8009374 <_Balloc>
 8009660:	b930      	cbnz	r0, 8009670 <__multiply+0x44>
 8009662:	4602      	mov	r2, r0
 8009664:	4b42      	ldr	r3, [pc, #264]	; (8009770 <__multiply+0x144>)
 8009666:	4843      	ldr	r0, [pc, #268]	; (8009774 <__multiply+0x148>)
 8009668:	f240 115d 	movw	r1, #349	; 0x15d
 800966c:	f000 fddc 	bl	800a228 <__assert_func>
 8009670:	f100 0614 	add.w	r6, r0, #20
 8009674:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009678:	4633      	mov	r3, r6
 800967a:	2200      	movs	r2, #0
 800967c:	4543      	cmp	r3, r8
 800967e:	d31e      	bcc.n	80096be <__multiply+0x92>
 8009680:	f105 0c14 	add.w	ip, r5, #20
 8009684:	f104 0314 	add.w	r3, r4, #20
 8009688:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800968c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009690:	9202      	str	r2, [sp, #8]
 8009692:	ebac 0205 	sub.w	r2, ip, r5
 8009696:	3a15      	subs	r2, #21
 8009698:	f022 0203 	bic.w	r2, r2, #3
 800969c:	3204      	adds	r2, #4
 800969e:	f105 0115 	add.w	r1, r5, #21
 80096a2:	458c      	cmp	ip, r1
 80096a4:	bf38      	it	cc
 80096a6:	2204      	movcc	r2, #4
 80096a8:	9201      	str	r2, [sp, #4]
 80096aa:	9a02      	ldr	r2, [sp, #8]
 80096ac:	9303      	str	r3, [sp, #12]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d808      	bhi.n	80096c4 <__multiply+0x98>
 80096b2:	2f00      	cmp	r7, #0
 80096b4:	dc55      	bgt.n	8009762 <__multiply+0x136>
 80096b6:	6107      	str	r7, [r0, #16]
 80096b8:	b005      	add	sp, #20
 80096ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096be:	f843 2b04 	str.w	r2, [r3], #4
 80096c2:	e7db      	b.n	800967c <__multiply+0x50>
 80096c4:	f8b3 a000 	ldrh.w	sl, [r3]
 80096c8:	f1ba 0f00 	cmp.w	sl, #0
 80096cc:	d020      	beq.n	8009710 <__multiply+0xe4>
 80096ce:	f105 0e14 	add.w	lr, r5, #20
 80096d2:	46b1      	mov	r9, r6
 80096d4:	2200      	movs	r2, #0
 80096d6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80096da:	f8d9 b000 	ldr.w	fp, [r9]
 80096de:	b2a1      	uxth	r1, r4
 80096e0:	fa1f fb8b 	uxth.w	fp, fp
 80096e4:	fb0a b101 	mla	r1, sl, r1, fp
 80096e8:	4411      	add	r1, r2
 80096ea:	f8d9 2000 	ldr.w	r2, [r9]
 80096ee:	0c24      	lsrs	r4, r4, #16
 80096f0:	0c12      	lsrs	r2, r2, #16
 80096f2:	fb0a 2404 	mla	r4, sl, r4, r2
 80096f6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80096fa:	b289      	uxth	r1, r1
 80096fc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009700:	45f4      	cmp	ip, lr
 8009702:	f849 1b04 	str.w	r1, [r9], #4
 8009706:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800970a:	d8e4      	bhi.n	80096d6 <__multiply+0xaa>
 800970c:	9901      	ldr	r1, [sp, #4]
 800970e:	5072      	str	r2, [r6, r1]
 8009710:	9a03      	ldr	r2, [sp, #12]
 8009712:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009716:	3304      	adds	r3, #4
 8009718:	f1b9 0f00 	cmp.w	r9, #0
 800971c:	d01f      	beq.n	800975e <__multiply+0x132>
 800971e:	6834      	ldr	r4, [r6, #0]
 8009720:	f105 0114 	add.w	r1, r5, #20
 8009724:	46b6      	mov	lr, r6
 8009726:	f04f 0a00 	mov.w	sl, #0
 800972a:	880a      	ldrh	r2, [r1, #0]
 800972c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009730:	fb09 b202 	mla	r2, r9, r2, fp
 8009734:	4492      	add	sl, r2
 8009736:	b2a4      	uxth	r4, r4
 8009738:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800973c:	f84e 4b04 	str.w	r4, [lr], #4
 8009740:	f851 4b04 	ldr.w	r4, [r1], #4
 8009744:	f8be 2000 	ldrh.w	r2, [lr]
 8009748:	0c24      	lsrs	r4, r4, #16
 800974a:	fb09 2404 	mla	r4, r9, r4, r2
 800974e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009752:	458c      	cmp	ip, r1
 8009754:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009758:	d8e7      	bhi.n	800972a <__multiply+0xfe>
 800975a:	9a01      	ldr	r2, [sp, #4]
 800975c:	50b4      	str	r4, [r6, r2]
 800975e:	3604      	adds	r6, #4
 8009760:	e7a3      	b.n	80096aa <__multiply+0x7e>
 8009762:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009766:	2b00      	cmp	r3, #0
 8009768:	d1a5      	bne.n	80096b6 <__multiply+0x8a>
 800976a:	3f01      	subs	r7, #1
 800976c:	e7a1      	b.n	80096b2 <__multiply+0x86>
 800976e:	bf00      	nop
 8009770:	0800a74c 	.word	0x0800a74c
 8009774:	0800a840 	.word	0x0800a840

08009778 <__pow5mult>:
 8009778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800977c:	4615      	mov	r5, r2
 800977e:	f012 0203 	ands.w	r2, r2, #3
 8009782:	4606      	mov	r6, r0
 8009784:	460f      	mov	r7, r1
 8009786:	d007      	beq.n	8009798 <__pow5mult+0x20>
 8009788:	4c25      	ldr	r4, [pc, #148]	; (8009820 <__pow5mult+0xa8>)
 800978a:	3a01      	subs	r2, #1
 800978c:	2300      	movs	r3, #0
 800978e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009792:	f7ff fe51 	bl	8009438 <__multadd>
 8009796:	4607      	mov	r7, r0
 8009798:	10ad      	asrs	r5, r5, #2
 800979a:	d03d      	beq.n	8009818 <__pow5mult+0xa0>
 800979c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800979e:	b97c      	cbnz	r4, 80097c0 <__pow5mult+0x48>
 80097a0:	2010      	movs	r0, #16
 80097a2:	f7ff fdbf 	bl	8009324 <malloc>
 80097a6:	4602      	mov	r2, r0
 80097a8:	6270      	str	r0, [r6, #36]	; 0x24
 80097aa:	b928      	cbnz	r0, 80097b8 <__pow5mult+0x40>
 80097ac:	4b1d      	ldr	r3, [pc, #116]	; (8009824 <__pow5mult+0xac>)
 80097ae:	481e      	ldr	r0, [pc, #120]	; (8009828 <__pow5mult+0xb0>)
 80097b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80097b4:	f000 fd38 	bl	800a228 <__assert_func>
 80097b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80097bc:	6004      	str	r4, [r0, #0]
 80097be:	60c4      	str	r4, [r0, #12]
 80097c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80097c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80097c8:	b94c      	cbnz	r4, 80097de <__pow5mult+0x66>
 80097ca:	f240 2171 	movw	r1, #625	; 0x271
 80097ce:	4630      	mov	r0, r6
 80097d0:	f7ff ff16 	bl	8009600 <__i2b>
 80097d4:	2300      	movs	r3, #0
 80097d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80097da:	4604      	mov	r4, r0
 80097dc:	6003      	str	r3, [r0, #0]
 80097de:	f04f 0900 	mov.w	r9, #0
 80097e2:	07eb      	lsls	r3, r5, #31
 80097e4:	d50a      	bpl.n	80097fc <__pow5mult+0x84>
 80097e6:	4639      	mov	r1, r7
 80097e8:	4622      	mov	r2, r4
 80097ea:	4630      	mov	r0, r6
 80097ec:	f7ff ff1e 	bl	800962c <__multiply>
 80097f0:	4639      	mov	r1, r7
 80097f2:	4680      	mov	r8, r0
 80097f4:	4630      	mov	r0, r6
 80097f6:	f7ff fdfd 	bl	80093f4 <_Bfree>
 80097fa:	4647      	mov	r7, r8
 80097fc:	106d      	asrs	r5, r5, #1
 80097fe:	d00b      	beq.n	8009818 <__pow5mult+0xa0>
 8009800:	6820      	ldr	r0, [r4, #0]
 8009802:	b938      	cbnz	r0, 8009814 <__pow5mult+0x9c>
 8009804:	4622      	mov	r2, r4
 8009806:	4621      	mov	r1, r4
 8009808:	4630      	mov	r0, r6
 800980a:	f7ff ff0f 	bl	800962c <__multiply>
 800980e:	6020      	str	r0, [r4, #0]
 8009810:	f8c0 9000 	str.w	r9, [r0]
 8009814:	4604      	mov	r4, r0
 8009816:	e7e4      	b.n	80097e2 <__pow5mult+0x6a>
 8009818:	4638      	mov	r0, r7
 800981a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800981e:	bf00      	nop
 8009820:	0800a990 	.word	0x0800a990
 8009824:	0800a6d6 	.word	0x0800a6d6
 8009828:	0800a840 	.word	0x0800a840

0800982c <__lshift>:
 800982c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009830:	460c      	mov	r4, r1
 8009832:	6849      	ldr	r1, [r1, #4]
 8009834:	6923      	ldr	r3, [r4, #16]
 8009836:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800983a:	68a3      	ldr	r3, [r4, #8]
 800983c:	4607      	mov	r7, r0
 800983e:	4691      	mov	r9, r2
 8009840:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009844:	f108 0601 	add.w	r6, r8, #1
 8009848:	42b3      	cmp	r3, r6
 800984a:	db0b      	blt.n	8009864 <__lshift+0x38>
 800984c:	4638      	mov	r0, r7
 800984e:	f7ff fd91 	bl	8009374 <_Balloc>
 8009852:	4605      	mov	r5, r0
 8009854:	b948      	cbnz	r0, 800986a <__lshift+0x3e>
 8009856:	4602      	mov	r2, r0
 8009858:	4b28      	ldr	r3, [pc, #160]	; (80098fc <__lshift+0xd0>)
 800985a:	4829      	ldr	r0, [pc, #164]	; (8009900 <__lshift+0xd4>)
 800985c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009860:	f000 fce2 	bl	800a228 <__assert_func>
 8009864:	3101      	adds	r1, #1
 8009866:	005b      	lsls	r3, r3, #1
 8009868:	e7ee      	b.n	8009848 <__lshift+0x1c>
 800986a:	2300      	movs	r3, #0
 800986c:	f100 0114 	add.w	r1, r0, #20
 8009870:	f100 0210 	add.w	r2, r0, #16
 8009874:	4618      	mov	r0, r3
 8009876:	4553      	cmp	r3, sl
 8009878:	db33      	blt.n	80098e2 <__lshift+0xb6>
 800987a:	6920      	ldr	r0, [r4, #16]
 800987c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009880:	f104 0314 	add.w	r3, r4, #20
 8009884:	f019 091f 	ands.w	r9, r9, #31
 8009888:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800988c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009890:	d02b      	beq.n	80098ea <__lshift+0xbe>
 8009892:	f1c9 0e20 	rsb	lr, r9, #32
 8009896:	468a      	mov	sl, r1
 8009898:	2200      	movs	r2, #0
 800989a:	6818      	ldr	r0, [r3, #0]
 800989c:	fa00 f009 	lsl.w	r0, r0, r9
 80098a0:	4302      	orrs	r2, r0
 80098a2:	f84a 2b04 	str.w	r2, [sl], #4
 80098a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80098aa:	459c      	cmp	ip, r3
 80098ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80098b0:	d8f3      	bhi.n	800989a <__lshift+0x6e>
 80098b2:	ebac 0304 	sub.w	r3, ip, r4
 80098b6:	3b15      	subs	r3, #21
 80098b8:	f023 0303 	bic.w	r3, r3, #3
 80098bc:	3304      	adds	r3, #4
 80098be:	f104 0015 	add.w	r0, r4, #21
 80098c2:	4584      	cmp	ip, r0
 80098c4:	bf38      	it	cc
 80098c6:	2304      	movcc	r3, #4
 80098c8:	50ca      	str	r2, [r1, r3]
 80098ca:	b10a      	cbz	r2, 80098d0 <__lshift+0xa4>
 80098cc:	f108 0602 	add.w	r6, r8, #2
 80098d0:	3e01      	subs	r6, #1
 80098d2:	4638      	mov	r0, r7
 80098d4:	612e      	str	r6, [r5, #16]
 80098d6:	4621      	mov	r1, r4
 80098d8:	f7ff fd8c 	bl	80093f4 <_Bfree>
 80098dc:	4628      	mov	r0, r5
 80098de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80098e6:	3301      	adds	r3, #1
 80098e8:	e7c5      	b.n	8009876 <__lshift+0x4a>
 80098ea:	3904      	subs	r1, #4
 80098ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80098f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80098f4:	459c      	cmp	ip, r3
 80098f6:	d8f9      	bhi.n	80098ec <__lshift+0xc0>
 80098f8:	e7ea      	b.n	80098d0 <__lshift+0xa4>
 80098fa:	bf00      	nop
 80098fc:	0800a74c 	.word	0x0800a74c
 8009900:	0800a840 	.word	0x0800a840

08009904 <__mcmp>:
 8009904:	b530      	push	{r4, r5, lr}
 8009906:	6902      	ldr	r2, [r0, #16]
 8009908:	690c      	ldr	r4, [r1, #16]
 800990a:	1b12      	subs	r2, r2, r4
 800990c:	d10e      	bne.n	800992c <__mcmp+0x28>
 800990e:	f100 0314 	add.w	r3, r0, #20
 8009912:	3114      	adds	r1, #20
 8009914:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009918:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800991c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009920:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009924:	42a5      	cmp	r5, r4
 8009926:	d003      	beq.n	8009930 <__mcmp+0x2c>
 8009928:	d305      	bcc.n	8009936 <__mcmp+0x32>
 800992a:	2201      	movs	r2, #1
 800992c:	4610      	mov	r0, r2
 800992e:	bd30      	pop	{r4, r5, pc}
 8009930:	4283      	cmp	r3, r0
 8009932:	d3f3      	bcc.n	800991c <__mcmp+0x18>
 8009934:	e7fa      	b.n	800992c <__mcmp+0x28>
 8009936:	f04f 32ff 	mov.w	r2, #4294967295
 800993a:	e7f7      	b.n	800992c <__mcmp+0x28>

0800993c <__mdiff>:
 800993c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009940:	460c      	mov	r4, r1
 8009942:	4606      	mov	r6, r0
 8009944:	4611      	mov	r1, r2
 8009946:	4620      	mov	r0, r4
 8009948:	4617      	mov	r7, r2
 800994a:	f7ff ffdb 	bl	8009904 <__mcmp>
 800994e:	1e05      	subs	r5, r0, #0
 8009950:	d110      	bne.n	8009974 <__mdiff+0x38>
 8009952:	4629      	mov	r1, r5
 8009954:	4630      	mov	r0, r6
 8009956:	f7ff fd0d 	bl	8009374 <_Balloc>
 800995a:	b930      	cbnz	r0, 800996a <__mdiff+0x2e>
 800995c:	4b39      	ldr	r3, [pc, #228]	; (8009a44 <__mdiff+0x108>)
 800995e:	4602      	mov	r2, r0
 8009960:	f240 2132 	movw	r1, #562	; 0x232
 8009964:	4838      	ldr	r0, [pc, #224]	; (8009a48 <__mdiff+0x10c>)
 8009966:	f000 fc5f 	bl	800a228 <__assert_func>
 800996a:	2301      	movs	r3, #1
 800996c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009970:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009974:	bfa4      	itt	ge
 8009976:	463b      	movge	r3, r7
 8009978:	4627      	movge	r7, r4
 800997a:	4630      	mov	r0, r6
 800997c:	6879      	ldr	r1, [r7, #4]
 800997e:	bfa6      	itte	ge
 8009980:	461c      	movge	r4, r3
 8009982:	2500      	movge	r5, #0
 8009984:	2501      	movlt	r5, #1
 8009986:	f7ff fcf5 	bl	8009374 <_Balloc>
 800998a:	b920      	cbnz	r0, 8009996 <__mdiff+0x5a>
 800998c:	4b2d      	ldr	r3, [pc, #180]	; (8009a44 <__mdiff+0x108>)
 800998e:	4602      	mov	r2, r0
 8009990:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009994:	e7e6      	b.n	8009964 <__mdiff+0x28>
 8009996:	693e      	ldr	r6, [r7, #16]
 8009998:	60c5      	str	r5, [r0, #12]
 800999a:	6925      	ldr	r5, [r4, #16]
 800999c:	f107 0114 	add.w	r1, r7, #20
 80099a0:	f104 0914 	add.w	r9, r4, #20
 80099a4:	f100 0e14 	add.w	lr, r0, #20
 80099a8:	f107 0210 	add.w	r2, r7, #16
 80099ac:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80099b0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80099b4:	46f2      	mov	sl, lr
 80099b6:	2700      	movs	r7, #0
 80099b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80099bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80099c0:	fa1f f883 	uxth.w	r8, r3
 80099c4:	fa17 f78b 	uxtah	r7, r7, fp
 80099c8:	0c1b      	lsrs	r3, r3, #16
 80099ca:	eba7 0808 	sub.w	r8, r7, r8
 80099ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80099d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80099d6:	fa1f f888 	uxth.w	r8, r8
 80099da:	141f      	asrs	r7, r3, #16
 80099dc:	454d      	cmp	r5, r9
 80099de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80099e2:	f84a 3b04 	str.w	r3, [sl], #4
 80099e6:	d8e7      	bhi.n	80099b8 <__mdiff+0x7c>
 80099e8:	1b2b      	subs	r3, r5, r4
 80099ea:	3b15      	subs	r3, #21
 80099ec:	f023 0303 	bic.w	r3, r3, #3
 80099f0:	3304      	adds	r3, #4
 80099f2:	3415      	adds	r4, #21
 80099f4:	42a5      	cmp	r5, r4
 80099f6:	bf38      	it	cc
 80099f8:	2304      	movcc	r3, #4
 80099fa:	4419      	add	r1, r3
 80099fc:	4473      	add	r3, lr
 80099fe:	469e      	mov	lr, r3
 8009a00:	460d      	mov	r5, r1
 8009a02:	4565      	cmp	r5, ip
 8009a04:	d30e      	bcc.n	8009a24 <__mdiff+0xe8>
 8009a06:	f10c 0203 	add.w	r2, ip, #3
 8009a0a:	1a52      	subs	r2, r2, r1
 8009a0c:	f022 0203 	bic.w	r2, r2, #3
 8009a10:	3903      	subs	r1, #3
 8009a12:	458c      	cmp	ip, r1
 8009a14:	bf38      	it	cc
 8009a16:	2200      	movcc	r2, #0
 8009a18:	441a      	add	r2, r3
 8009a1a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009a1e:	b17b      	cbz	r3, 8009a40 <__mdiff+0x104>
 8009a20:	6106      	str	r6, [r0, #16]
 8009a22:	e7a5      	b.n	8009970 <__mdiff+0x34>
 8009a24:	f855 8b04 	ldr.w	r8, [r5], #4
 8009a28:	fa17 f488 	uxtah	r4, r7, r8
 8009a2c:	1422      	asrs	r2, r4, #16
 8009a2e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009a32:	b2a4      	uxth	r4, r4
 8009a34:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009a38:	f84e 4b04 	str.w	r4, [lr], #4
 8009a3c:	1417      	asrs	r7, r2, #16
 8009a3e:	e7e0      	b.n	8009a02 <__mdiff+0xc6>
 8009a40:	3e01      	subs	r6, #1
 8009a42:	e7ea      	b.n	8009a1a <__mdiff+0xde>
 8009a44:	0800a74c 	.word	0x0800a74c
 8009a48:	0800a840 	.word	0x0800a840

08009a4c <__ulp>:
 8009a4c:	b082      	sub	sp, #8
 8009a4e:	ed8d 0b00 	vstr	d0, [sp]
 8009a52:	9b01      	ldr	r3, [sp, #4]
 8009a54:	4912      	ldr	r1, [pc, #72]	; (8009aa0 <__ulp+0x54>)
 8009a56:	4019      	ands	r1, r3
 8009a58:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009a5c:	2900      	cmp	r1, #0
 8009a5e:	dd05      	ble.n	8009a6c <__ulp+0x20>
 8009a60:	2200      	movs	r2, #0
 8009a62:	460b      	mov	r3, r1
 8009a64:	ec43 2b10 	vmov	d0, r2, r3
 8009a68:	b002      	add	sp, #8
 8009a6a:	4770      	bx	lr
 8009a6c:	4249      	negs	r1, r1
 8009a6e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009a72:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009a76:	f04f 0200 	mov.w	r2, #0
 8009a7a:	f04f 0300 	mov.w	r3, #0
 8009a7e:	da04      	bge.n	8009a8a <__ulp+0x3e>
 8009a80:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009a84:	fa41 f300 	asr.w	r3, r1, r0
 8009a88:	e7ec      	b.n	8009a64 <__ulp+0x18>
 8009a8a:	f1a0 0114 	sub.w	r1, r0, #20
 8009a8e:	291e      	cmp	r1, #30
 8009a90:	bfda      	itte	le
 8009a92:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009a96:	fa20 f101 	lsrle.w	r1, r0, r1
 8009a9a:	2101      	movgt	r1, #1
 8009a9c:	460a      	mov	r2, r1
 8009a9e:	e7e1      	b.n	8009a64 <__ulp+0x18>
 8009aa0:	7ff00000 	.word	0x7ff00000

08009aa4 <__b2d>:
 8009aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aa6:	6905      	ldr	r5, [r0, #16]
 8009aa8:	f100 0714 	add.w	r7, r0, #20
 8009aac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009ab0:	1f2e      	subs	r6, r5, #4
 8009ab2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	f7ff fd52 	bl	8009560 <__hi0bits>
 8009abc:	f1c0 0320 	rsb	r3, r0, #32
 8009ac0:	280a      	cmp	r0, #10
 8009ac2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009b40 <__b2d+0x9c>
 8009ac6:	600b      	str	r3, [r1, #0]
 8009ac8:	dc14      	bgt.n	8009af4 <__b2d+0x50>
 8009aca:	f1c0 0e0b 	rsb	lr, r0, #11
 8009ace:	fa24 f10e 	lsr.w	r1, r4, lr
 8009ad2:	42b7      	cmp	r7, r6
 8009ad4:	ea41 030c 	orr.w	r3, r1, ip
 8009ad8:	bf34      	ite	cc
 8009ada:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009ade:	2100      	movcs	r1, #0
 8009ae0:	3015      	adds	r0, #21
 8009ae2:	fa04 f000 	lsl.w	r0, r4, r0
 8009ae6:	fa21 f10e 	lsr.w	r1, r1, lr
 8009aea:	ea40 0201 	orr.w	r2, r0, r1
 8009aee:	ec43 2b10 	vmov	d0, r2, r3
 8009af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009af4:	42b7      	cmp	r7, r6
 8009af6:	bf3a      	itte	cc
 8009af8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009afc:	f1a5 0608 	subcc.w	r6, r5, #8
 8009b00:	2100      	movcs	r1, #0
 8009b02:	380b      	subs	r0, #11
 8009b04:	d017      	beq.n	8009b36 <__b2d+0x92>
 8009b06:	f1c0 0c20 	rsb	ip, r0, #32
 8009b0a:	fa04 f500 	lsl.w	r5, r4, r0
 8009b0e:	42be      	cmp	r6, r7
 8009b10:	fa21 f40c 	lsr.w	r4, r1, ip
 8009b14:	ea45 0504 	orr.w	r5, r5, r4
 8009b18:	bf8c      	ite	hi
 8009b1a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009b1e:	2400      	movls	r4, #0
 8009b20:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009b24:	fa01 f000 	lsl.w	r0, r1, r0
 8009b28:	fa24 f40c 	lsr.w	r4, r4, ip
 8009b2c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009b30:	ea40 0204 	orr.w	r2, r0, r4
 8009b34:	e7db      	b.n	8009aee <__b2d+0x4a>
 8009b36:	ea44 030c 	orr.w	r3, r4, ip
 8009b3a:	460a      	mov	r2, r1
 8009b3c:	e7d7      	b.n	8009aee <__b2d+0x4a>
 8009b3e:	bf00      	nop
 8009b40:	3ff00000 	.word	0x3ff00000

08009b44 <__d2b>:
 8009b44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009b48:	4689      	mov	r9, r1
 8009b4a:	2101      	movs	r1, #1
 8009b4c:	ec57 6b10 	vmov	r6, r7, d0
 8009b50:	4690      	mov	r8, r2
 8009b52:	f7ff fc0f 	bl	8009374 <_Balloc>
 8009b56:	4604      	mov	r4, r0
 8009b58:	b930      	cbnz	r0, 8009b68 <__d2b+0x24>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	4b25      	ldr	r3, [pc, #148]	; (8009bf4 <__d2b+0xb0>)
 8009b5e:	4826      	ldr	r0, [pc, #152]	; (8009bf8 <__d2b+0xb4>)
 8009b60:	f240 310a 	movw	r1, #778	; 0x30a
 8009b64:	f000 fb60 	bl	800a228 <__assert_func>
 8009b68:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009b6c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009b70:	bb35      	cbnz	r5, 8009bc0 <__d2b+0x7c>
 8009b72:	2e00      	cmp	r6, #0
 8009b74:	9301      	str	r3, [sp, #4]
 8009b76:	d028      	beq.n	8009bca <__d2b+0x86>
 8009b78:	4668      	mov	r0, sp
 8009b7a:	9600      	str	r6, [sp, #0]
 8009b7c:	f7ff fd10 	bl	80095a0 <__lo0bits>
 8009b80:	9900      	ldr	r1, [sp, #0]
 8009b82:	b300      	cbz	r0, 8009bc6 <__d2b+0x82>
 8009b84:	9a01      	ldr	r2, [sp, #4]
 8009b86:	f1c0 0320 	rsb	r3, r0, #32
 8009b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b8e:	430b      	orrs	r3, r1
 8009b90:	40c2      	lsrs	r2, r0
 8009b92:	6163      	str	r3, [r4, #20]
 8009b94:	9201      	str	r2, [sp, #4]
 8009b96:	9b01      	ldr	r3, [sp, #4]
 8009b98:	61a3      	str	r3, [r4, #24]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	bf14      	ite	ne
 8009b9e:	2202      	movne	r2, #2
 8009ba0:	2201      	moveq	r2, #1
 8009ba2:	6122      	str	r2, [r4, #16]
 8009ba4:	b1d5      	cbz	r5, 8009bdc <__d2b+0x98>
 8009ba6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009baa:	4405      	add	r5, r0
 8009bac:	f8c9 5000 	str.w	r5, [r9]
 8009bb0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009bb4:	f8c8 0000 	str.w	r0, [r8]
 8009bb8:	4620      	mov	r0, r4
 8009bba:	b003      	add	sp, #12
 8009bbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009bc4:	e7d5      	b.n	8009b72 <__d2b+0x2e>
 8009bc6:	6161      	str	r1, [r4, #20]
 8009bc8:	e7e5      	b.n	8009b96 <__d2b+0x52>
 8009bca:	a801      	add	r0, sp, #4
 8009bcc:	f7ff fce8 	bl	80095a0 <__lo0bits>
 8009bd0:	9b01      	ldr	r3, [sp, #4]
 8009bd2:	6163      	str	r3, [r4, #20]
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	6122      	str	r2, [r4, #16]
 8009bd8:	3020      	adds	r0, #32
 8009bda:	e7e3      	b.n	8009ba4 <__d2b+0x60>
 8009bdc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009be0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009be4:	f8c9 0000 	str.w	r0, [r9]
 8009be8:	6918      	ldr	r0, [r3, #16]
 8009bea:	f7ff fcb9 	bl	8009560 <__hi0bits>
 8009bee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009bf2:	e7df      	b.n	8009bb4 <__d2b+0x70>
 8009bf4:	0800a74c 	.word	0x0800a74c
 8009bf8:	0800a840 	.word	0x0800a840

08009bfc <__ratio>:
 8009bfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c00:	4688      	mov	r8, r1
 8009c02:	4669      	mov	r1, sp
 8009c04:	4681      	mov	r9, r0
 8009c06:	f7ff ff4d 	bl	8009aa4 <__b2d>
 8009c0a:	a901      	add	r1, sp, #4
 8009c0c:	4640      	mov	r0, r8
 8009c0e:	ec55 4b10 	vmov	r4, r5, d0
 8009c12:	f7ff ff47 	bl	8009aa4 <__b2d>
 8009c16:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c1a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009c1e:	eba3 0c02 	sub.w	ip, r3, r2
 8009c22:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009c26:	1a9b      	subs	r3, r3, r2
 8009c28:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009c2c:	ec51 0b10 	vmov	r0, r1, d0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	bfd6      	itet	le
 8009c34:	460a      	movle	r2, r1
 8009c36:	462a      	movgt	r2, r5
 8009c38:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009c3c:	468b      	mov	fp, r1
 8009c3e:	462f      	mov	r7, r5
 8009c40:	bfd4      	ite	le
 8009c42:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009c46:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	ee10 2a10 	vmov	r2, s0
 8009c50:	465b      	mov	r3, fp
 8009c52:	4639      	mov	r1, r7
 8009c54:	f7f6 fe22 	bl	800089c <__aeabi_ddiv>
 8009c58:	ec41 0b10 	vmov	d0, r0, r1
 8009c5c:	b003      	add	sp, #12
 8009c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009c62 <__copybits>:
 8009c62:	3901      	subs	r1, #1
 8009c64:	b570      	push	{r4, r5, r6, lr}
 8009c66:	1149      	asrs	r1, r1, #5
 8009c68:	6914      	ldr	r4, [r2, #16]
 8009c6a:	3101      	adds	r1, #1
 8009c6c:	f102 0314 	add.w	r3, r2, #20
 8009c70:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009c74:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009c78:	1f05      	subs	r5, r0, #4
 8009c7a:	42a3      	cmp	r3, r4
 8009c7c:	d30c      	bcc.n	8009c98 <__copybits+0x36>
 8009c7e:	1aa3      	subs	r3, r4, r2
 8009c80:	3b11      	subs	r3, #17
 8009c82:	f023 0303 	bic.w	r3, r3, #3
 8009c86:	3211      	adds	r2, #17
 8009c88:	42a2      	cmp	r2, r4
 8009c8a:	bf88      	it	hi
 8009c8c:	2300      	movhi	r3, #0
 8009c8e:	4418      	add	r0, r3
 8009c90:	2300      	movs	r3, #0
 8009c92:	4288      	cmp	r0, r1
 8009c94:	d305      	bcc.n	8009ca2 <__copybits+0x40>
 8009c96:	bd70      	pop	{r4, r5, r6, pc}
 8009c98:	f853 6b04 	ldr.w	r6, [r3], #4
 8009c9c:	f845 6f04 	str.w	r6, [r5, #4]!
 8009ca0:	e7eb      	b.n	8009c7a <__copybits+0x18>
 8009ca2:	f840 3b04 	str.w	r3, [r0], #4
 8009ca6:	e7f4      	b.n	8009c92 <__copybits+0x30>

08009ca8 <__any_on>:
 8009ca8:	f100 0214 	add.w	r2, r0, #20
 8009cac:	6900      	ldr	r0, [r0, #16]
 8009cae:	114b      	asrs	r3, r1, #5
 8009cb0:	4298      	cmp	r0, r3
 8009cb2:	b510      	push	{r4, lr}
 8009cb4:	db11      	blt.n	8009cda <__any_on+0x32>
 8009cb6:	dd0a      	ble.n	8009cce <__any_on+0x26>
 8009cb8:	f011 011f 	ands.w	r1, r1, #31
 8009cbc:	d007      	beq.n	8009cce <__any_on+0x26>
 8009cbe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009cc2:	fa24 f001 	lsr.w	r0, r4, r1
 8009cc6:	fa00 f101 	lsl.w	r1, r0, r1
 8009cca:	428c      	cmp	r4, r1
 8009ccc:	d10b      	bne.n	8009ce6 <__any_on+0x3e>
 8009cce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d803      	bhi.n	8009cde <__any_on+0x36>
 8009cd6:	2000      	movs	r0, #0
 8009cd8:	bd10      	pop	{r4, pc}
 8009cda:	4603      	mov	r3, r0
 8009cdc:	e7f7      	b.n	8009cce <__any_on+0x26>
 8009cde:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009ce2:	2900      	cmp	r1, #0
 8009ce4:	d0f5      	beq.n	8009cd2 <__any_on+0x2a>
 8009ce6:	2001      	movs	r0, #1
 8009ce8:	e7f6      	b.n	8009cd8 <__any_on+0x30>

08009cea <_calloc_r>:
 8009cea:	b513      	push	{r0, r1, r4, lr}
 8009cec:	434a      	muls	r2, r1
 8009cee:	4611      	mov	r1, r2
 8009cf0:	9201      	str	r2, [sp, #4]
 8009cf2:	f000 f859 	bl	8009da8 <_malloc_r>
 8009cf6:	4604      	mov	r4, r0
 8009cf8:	b118      	cbz	r0, 8009d02 <_calloc_r+0x18>
 8009cfa:	9a01      	ldr	r2, [sp, #4]
 8009cfc:	2100      	movs	r1, #0
 8009cfe:	f7fc fa87 	bl	8006210 <memset>
 8009d02:	4620      	mov	r0, r4
 8009d04:	b002      	add	sp, #8
 8009d06:	bd10      	pop	{r4, pc}

08009d08 <_free_r>:
 8009d08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d0a:	2900      	cmp	r1, #0
 8009d0c:	d048      	beq.n	8009da0 <_free_r+0x98>
 8009d0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d12:	9001      	str	r0, [sp, #4]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	f1a1 0404 	sub.w	r4, r1, #4
 8009d1a:	bfb8      	it	lt
 8009d1c:	18e4      	addlt	r4, r4, r3
 8009d1e:	f000 faf7 	bl	800a310 <__malloc_lock>
 8009d22:	4a20      	ldr	r2, [pc, #128]	; (8009da4 <_free_r+0x9c>)
 8009d24:	9801      	ldr	r0, [sp, #4]
 8009d26:	6813      	ldr	r3, [r2, #0]
 8009d28:	4615      	mov	r5, r2
 8009d2a:	b933      	cbnz	r3, 8009d3a <_free_r+0x32>
 8009d2c:	6063      	str	r3, [r4, #4]
 8009d2e:	6014      	str	r4, [r2, #0]
 8009d30:	b003      	add	sp, #12
 8009d32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d36:	f000 baf1 	b.w	800a31c <__malloc_unlock>
 8009d3a:	42a3      	cmp	r3, r4
 8009d3c:	d90b      	bls.n	8009d56 <_free_r+0x4e>
 8009d3e:	6821      	ldr	r1, [r4, #0]
 8009d40:	1862      	adds	r2, r4, r1
 8009d42:	4293      	cmp	r3, r2
 8009d44:	bf04      	itt	eq
 8009d46:	681a      	ldreq	r2, [r3, #0]
 8009d48:	685b      	ldreq	r3, [r3, #4]
 8009d4a:	6063      	str	r3, [r4, #4]
 8009d4c:	bf04      	itt	eq
 8009d4e:	1852      	addeq	r2, r2, r1
 8009d50:	6022      	streq	r2, [r4, #0]
 8009d52:	602c      	str	r4, [r5, #0]
 8009d54:	e7ec      	b.n	8009d30 <_free_r+0x28>
 8009d56:	461a      	mov	r2, r3
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	b10b      	cbz	r3, 8009d60 <_free_r+0x58>
 8009d5c:	42a3      	cmp	r3, r4
 8009d5e:	d9fa      	bls.n	8009d56 <_free_r+0x4e>
 8009d60:	6811      	ldr	r1, [r2, #0]
 8009d62:	1855      	adds	r5, r2, r1
 8009d64:	42a5      	cmp	r5, r4
 8009d66:	d10b      	bne.n	8009d80 <_free_r+0x78>
 8009d68:	6824      	ldr	r4, [r4, #0]
 8009d6a:	4421      	add	r1, r4
 8009d6c:	1854      	adds	r4, r2, r1
 8009d6e:	42a3      	cmp	r3, r4
 8009d70:	6011      	str	r1, [r2, #0]
 8009d72:	d1dd      	bne.n	8009d30 <_free_r+0x28>
 8009d74:	681c      	ldr	r4, [r3, #0]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	6053      	str	r3, [r2, #4]
 8009d7a:	4421      	add	r1, r4
 8009d7c:	6011      	str	r1, [r2, #0]
 8009d7e:	e7d7      	b.n	8009d30 <_free_r+0x28>
 8009d80:	d902      	bls.n	8009d88 <_free_r+0x80>
 8009d82:	230c      	movs	r3, #12
 8009d84:	6003      	str	r3, [r0, #0]
 8009d86:	e7d3      	b.n	8009d30 <_free_r+0x28>
 8009d88:	6825      	ldr	r5, [r4, #0]
 8009d8a:	1961      	adds	r1, r4, r5
 8009d8c:	428b      	cmp	r3, r1
 8009d8e:	bf04      	itt	eq
 8009d90:	6819      	ldreq	r1, [r3, #0]
 8009d92:	685b      	ldreq	r3, [r3, #4]
 8009d94:	6063      	str	r3, [r4, #4]
 8009d96:	bf04      	itt	eq
 8009d98:	1949      	addeq	r1, r1, r5
 8009d9a:	6021      	streq	r1, [r4, #0]
 8009d9c:	6054      	str	r4, [r2, #4]
 8009d9e:	e7c7      	b.n	8009d30 <_free_r+0x28>
 8009da0:	b003      	add	sp, #12
 8009da2:	bd30      	pop	{r4, r5, pc}
 8009da4:	20000540 	.word	0x20000540

08009da8 <_malloc_r>:
 8009da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009daa:	1ccd      	adds	r5, r1, #3
 8009dac:	f025 0503 	bic.w	r5, r5, #3
 8009db0:	3508      	adds	r5, #8
 8009db2:	2d0c      	cmp	r5, #12
 8009db4:	bf38      	it	cc
 8009db6:	250c      	movcc	r5, #12
 8009db8:	2d00      	cmp	r5, #0
 8009dba:	4606      	mov	r6, r0
 8009dbc:	db01      	blt.n	8009dc2 <_malloc_r+0x1a>
 8009dbe:	42a9      	cmp	r1, r5
 8009dc0:	d903      	bls.n	8009dca <_malloc_r+0x22>
 8009dc2:	230c      	movs	r3, #12
 8009dc4:	6033      	str	r3, [r6, #0]
 8009dc6:	2000      	movs	r0, #0
 8009dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dca:	f000 faa1 	bl	800a310 <__malloc_lock>
 8009dce:	4921      	ldr	r1, [pc, #132]	; (8009e54 <_malloc_r+0xac>)
 8009dd0:	680a      	ldr	r2, [r1, #0]
 8009dd2:	4614      	mov	r4, r2
 8009dd4:	b99c      	cbnz	r4, 8009dfe <_malloc_r+0x56>
 8009dd6:	4f20      	ldr	r7, [pc, #128]	; (8009e58 <_malloc_r+0xb0>)
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	b923      	cbnz	r3, 8009de6 <_malloc_r+0x3e>
 8009ddc:	4621      	mov	r1, r4
 8009dde:	4630      	mov	r0, r6
 8009de0:	f000 f99e 	bl	800a120 <_sbrk_r>
 8009de4:	6038      	str	r0, [r7, #0]
 8009de6:	4629      	mov	r1, r5
 8009de8:	4630      	mov	r0, r6
 8009dea:	f000 f999 	bl	800a120 <_sbrk_r>
 8009dee:	1c43      	adds	r3, r0, #1
 8009df0:	d123      	bne.n	8009e3a <_malloc_r+0x92>
 8009df2:	230c      	movs	r3, #12
 8009df4:	6033      	str	r3, [r6, #0]
 8009df6:	4630      	mov	r0, r6
 8009df8:	f000 fa90 	bl	800a31c <__malloc_unlock>
 8009dfc:	e7e3      	b.n	8009dc6 <_malloc_r+0x1e>
 8009dfe:	6823      	ldr	r3, [r4, #0]
 8009e00:	1b5b      	subs	r3, r3, r5
 8009e02:	d417      	bmi.n	8009e34 <_malloc_r+0x8c>
 8009e04:	2b0b      	cmp	r3, #11
 8009e06:	d903      	bls.n	8009e10 <_malloc_r+0x68>
 8009e08:	6023      	str	r3, [r4, #0]
 8009e0a:	441c      	add	r4, r3
 8009e0c:	6025      	str	r5, [r4, #0]
 8009e0e:	e004      	b.n	8009e1a <_malloc_r+0x72>
 8009e10:	6863      	ldr	r3, [r4, #4]
 8009e12:	42a2      	cmp	r2, r4
 8009e14:	bf0c      	ite	eq
 8009e16:	600b      	streq	r3, [r1, #0]
 8009e18:	6053      	strne	r3, [r2, #4]
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	f000 fa7e 	bl	800a31c <__malloc_unlock>
 8009e20:	f104 000b 	add.w	r0, r4, #11
 8009e24:	1d23      	adds	r3, r4, #4
 8009e26:	f020 0007 	bic.w	r0, r0, #7
 8009e2a:	1ac2      	subs	r2, r0, r3
 8009e2c:	d0cc      	beq.n	8009dc8 <_malloc_r+0x20>
 8009e2e:	1a1b      	subs	r3, r3, r0
 8009e30:	50a3      	str	r3, [r4, r2]
 8009e32:	e7c9      	b.n	8009dc8 <_malloc_r+0x20>
 8009e34:	4622      	mov	r2, r4
 8009e36:	6864      	ldr	r4, [r4, #4]
 8009e38:	e7cc      	b.n	8009dd4 <_malloc_r+0x2c>
 8009e3a:	1cc4      	adds	r4, r0, #3
 8009e3c:	f024 0403 	bic.w	r4, r4, #3
 8009e40:	42a0      	cmp	r0, r4
 8009e42:	d0e3      	beq.n	8009e0c <_malloc_r+0x64>
 8009e44:	1a21      	subs	r1, r4, r0
 8009e46:	4630      	mov	r0, r6
 8009e48:	f000 f96a 	bl	800a120 <_sbrk_r>
 8009e4c:	3001      	adds	r0, #1
 8009e4e:	d1dd      	bne.n	8009e0c <_malloc_r+0x64>
 8009e50:	e7cf      	b.n	8009df2 <_malloc_r+0x4a>
 8009e52:	bf00      	nop
 8009e54:	20000540 	.word	0x20000540
 8009e58:	20000544 	.word	0x20000544

08009e5c <__sfputc_r>:
 8009e5c:	6893      	ldr	r3, [r2, #8]
 8009e5e:	3b01      	subs	r3, #1
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	b410      	push	{r4}
 8009e64:	6093      	str	r3, [r2, #8]
 8009e66:	da08      	bge.n	8009e7a <__sfputc_r+0x1e>
 8009e68:	6994      	ldr	r4, [r2, #24]
 8009e6a:	42a3      	cmp	r3, r4
 8009e6c:	db01      	blt.n	8009e72 <__sfputc_r+0x16>
 8009e6e:	290a      	cmp	r1, #10
 8009e70:	d103      	bne.n	8009e7a <__sfputc_r+0x1e>
 8009e72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e76:	f7fd bd8b 	b.w	8007990 <__swbuf_r>
 8009e7a:	6813      	ldr	r3, [r2, #0]
 8009e7c:	1c58      	adds	r0, r3, #1
 8009e7e:	6010      	str	r0, [r2, #0]
 8009e80:	7019      	strb	r1, [r3, #0]
 8009e82:	4608      	mov	r0, r1
 8009e84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e88:	4770      	bx	lr

08009e8a <__sfputs_r>:
 8009e8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e8c:	4606      	mov	r6, r0
 8009e8e:	460f      	mov	r7, r1
 8009e90:	4614      	mov	r4, r2
 8009e92:	18d5      	adds	r5, r2, r3
 8009e94:	42ac      	cmp	r4, r5
 8009e96:	d101      	bne.n	8009e9c <__sfputs_r+0x12>
 8009e98:	2000      	movs	r0, #0
 8009e9a:	e007      	b.n	8009eac <__sfputs_r+0x22>
 8009e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ea0:	463a      	mov	r2, r7
 8009ea2:	4630      	mov	r0, r6
 8009ea4:	f7ff ffda 	bl	8009e5c <__sfputc_r>
 8009ea8:	1c43      	adds	r3, r0, #1
 8009eaa:	d1f3      	bne.n	8009e94 <__sfputs_r+0xa>
 8009eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009eb0 <_vfiprintf_r>:
 8009eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb4:	460d      	mov	r5, r1
 8009eb6:	b09d      	sub	sp, #116	; 0x74
 8009eb8:	4614      	mov	r4, r2
 8009eba:	4698      	mov	r8, r3
 8009ebc:	4606      	mov	r6, r0
 8009ebe:	b118      	cbz	r0, 8009ec8 <_vfiprintf_r+0x18>
 8009ec0:	6983      	ldr	r3, [r0, #24]
 8009ec2:	b90b      	cbnz	r3, 8009ec8 <_vfiprintf_r+0x18>
 8009ec4:	f7fe fdb6 	bl	8008a34 <__sinit>
 8009ec8:	4b89      	ldr	r3, [pc, #548]	; (800a0f0 <_vfiprintf_r+0x240>)
 8009eca:	429d      	cmp	r5, r3
 8009ecc:	d11b      	bne.n	8009f06 <_vfiprintf_r+0x56>
 8009ece:	6875      	ldr	r5, [r6, #4]
 8009ed0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ed2:	07d9      	lsls	r1, r3, #31
 8009ed4:	d405      	bmi.n	8009ee2 <_vfiprintf_r+0x32>
 8009ed6:	89ab      	ldrh	r3, [r5, #12]
 8009ed8:	059a      	lsls	r2, r3, #22
 8009eda:	d402      	bmi.n	8009ee2 <_vfiprintf_r+0x32>
 8009edc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ede:	f7ff f9ba 	bl	8009256 <__retarget_lock_acquire_recursive>
 8009ee2:	89ab      	ldrh	r3, [r5, #12]
 8009ee4:	071b      	lsls	r3, r3, #28
 8009ee6:	d501      	bpl.n	8009eec <_vfiprintf_r+0x3c>
 8009ee8:	692b      	ldr	r3, [r5, #16]
 8009eea:	b9eb      	cbnz	r3, 8009f28 <_vfiprintf_r+0x78>
 8009eec:	4629      	mov	r1, r5
 8009eee:	4630      	mov	r0, r6
 8009ef0:	f7fd fda0 	bl	8007a34 <__swsetup_r>
 8009ef4:	b1c0      	cbz	r0, 8009f28 <_vfiprintf_r+0x78>
 8009ef6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ef8:	07dc      	lsls	r4, r3, #31
 8009efa:	d50e      	bpl.n	8009f1a <_vfiprintf_r+0x6a>
 8009efc:	f04f 30ff 	mov.w	r0, #4294967295
 8009f00:	b01d      	add	sp, #116	; 0x74
 8009f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f06:	4b7b      	ldr	r3, [pc, #492]	; (800a0f4 <_vfiprintf_r+0x244>)
 8009f08:	429d      	cmp	r5, r3
 8009f0a:	d101      	bne.n	8009f10 <_vfiprintf_r+0x60>
 8009f0c:	68b5      	ldr	r5, [r6, #8]
 8009f0e:	e7df      	b.n	8009ed0 <_vfiprintf_r+0x20>
 8009f10:	4b79      	ldr	r3, [pc, #484]	; (800a0f8 <_vfiprintf_r+0x248>)
 8009f12:	429d      	cmp	r5, r3
 8009f14:	bf08      	it	eq
 8009f16:	68f5      	ldreq	r5, [r6, #12]
 8009f18:	e7da      	b.n	8009ed0 <_vfiprintf_r+0x20>
 8009f1a:	89ab      	ldrh	r3, [r5, #12]
 8009f1c:	0598      	lsls	r0, r3, #22
 8009f1e:	d4ed      	bmi.n	8009efc <_vfiprintf_r+0x4c>
 8009f20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f22:	f7ff f999 	bl	8009258 <__retarget_lock_release_recursive>
 8009f26:	e7e9      	b.n	8009efc <_vfiprintf_r+0x4c>
 8009f28:	2300      	movs	r3, #0
 8009f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8009f2c:	2320      	movs	r3, #32
 8009f2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f32:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f36:	2330      	movs	r3, #48	; 0x30
 8009f38:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a0fc <_vfiprintf_r+0x24c>
 8009f3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f40:	f04f 0901 	mov.w	r9, #1
 8009f44:	4623      	mov	r3, r4
 8009f46:	469a      	mov	sl, r3
 8009f48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f4c:	b10a      	cbz	r2, 8009f52 <_vfiprintf_r+0xa2>
 8009f4e:	2a25      	cmp	r2, #37	; 0x25
 8009f50:	d1f9      	bne.n	8009f46 <_vfiprintf_r+0x96>
 8009f52:	ebba 0b04 	subs.w	fp, sl, r4
 8009f56:	d00b      	beq.n	8009f70 <_vfiprintf_r+0xc0>
 8009f58:	465b      	mov	r3, fp
 8009f5a:	4622      	mov	r2, r4
 8009f5c:	4629      	mov	r1, r5
 8009f5e:	4630      	mov	r0, r6
 8009f60:	f7ff ff93 	bl	8009e8a <__sfputs_r>
 8009f64:	3001      	adds	r0, #1
 8009f66:	f000 80aa 	beq.w	800a0be <_vfiprintf_r+0x20e>
 8009f6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f6c:	445a      	add	r2, fp
 8009f6e:	9209      	str	r2, [sp, #36]	; 0x24
 8009f70:	f89a 3000 	ldrb.w	r3, [sl]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	f000 80a2 	beq.w	800a0be <_vfiprintf_r+0x20e>
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f84:	f10a 0a01 	add.w	sl, sl, #1
 8009f88:	9304      	str	r3, [sp, #16]
 8009f8a:	9307      	str	r3, [sp, #28]
 8009f8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f90:	931a      	str	r3, [sp, #104]	; 0x68
 8009f92:	4654      	mov	r4, sl
 8009f94:	2205      	movs	r2, #5
 8009f96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f9a:	4858      	ldr	r0, [pc, #352]	; (800a0fc <_vfiprintf_r+0x24c>)
 8009f9c:	f7f6 f948 	bl	8000230 <memchr>
 8009fa0:	9a04      	ldr	r2, [sp, #16]
 8009fa2:	b9d8      	cbnz	r0, 8009fdc <_vfiprintf_r+0x12c>
 8009fa4:	06d1      	lsls	r1, r2, #27
 8009fa6:	bf44      	itt	mi
 8009fa8:	2320      	movmi	r3, #32
 8009faa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fae:	0713      	lsls	r3, r2, #28
 8009fb0:	bf44      	itt	mi
 8009fb2:	232b      	movmi	r3, #43	; 0x2b
 8009fb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fb8:	f89a 3000 	ldrb.w	r3, [sl]
 8009fbc:	2b2a      	cmp	r3, #42	; 0x2a
 8009fbe:	d015      	beq.n	8009fec <_vfiprintf_r+0x13c>
 8009fc0:	9a07      	ldr	r2, [sp, #28]
 8009fc2:	4654      	mov	r4, sl
 8009fc4:	2000      	movs	r0, #0
 8009fc6:	f04f 0c0a 	mov.w	ip, #10
 8009fca:	4621      	mov	r1, r4
 8009fcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fd0:	3b30      	subs	r3, #48	; 0x30
 8009fd2:	2b09      	cmp	r3, #9
 8009fd4:	d94e      	bls.n	800a074 <_vfiprintf_r+0x1c4>
 8009fd6:	b1b0      	cbz	r0, 800a006 <_vfiprintf_r+0x156>
 8009fd8:	9207      	str	r2, [sp, #28]
 8009fda:	e014      	b.n	800a006 <_vfiprintf_r+0x156>
 8009fdc:	eba0 0308 	sub.w	r3, r0, r8
 8009fe0:	fa09 f303 	lsl.w	r3, r9, r3
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	9304      	str	r3, [sp, #16]
 8009fe8:	46a2      	mov	sl, r4
 8009fea:	e7d2      	b.n	8009f92 <_vfiprintf_r+0xe2>
 8009fec:	9b03      	ldr	r3, [sp, #12]
 8009fee:	1d19      	adds	r1, r3, #4
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	9103      	str	r1, [sp, #12]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	bfbb      	ittet	lt
 8009ff8:	425b      	neglt	r3, r3
 8009ffa:	f042 0202 	orrlt.w	r2, r2, #2
 8009ffe:	9307      	strge	r3, [sp, #28]
 800a000:	9307      	strlt	r3, [sp, #28]
 800a002:	bfb8      	it	lt
 800a004:	9204      	strlt	r2, [sp, #16]
 800a006:	7823      	ldrb	r3, [r4, #0]
 800a008:	2b2e      	cmp	r3, #46	; 0x2e
 800a00a:	d10c      	bne.n	800a026 <_vfiprintf_r+0x176>
 800a00c:	7863      	ldrb	r3, [r4, #1]
 800a00e:	2b2a      	cmp	r3, #42	; 0x2a
 800a010:	d135      	bne.n	800a07e <_vfiprintf_r+0x1ce>
 800a012:	9b03      	ldr	r3, [sp, #12]
 800a014:	1d1a      	adds	r2, r3, #4
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	9203      	str	r2, [sp, #12]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	bfb8      	it	lt
 800a01e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a022:	3402      	adds	r4, #2
 800a024:	9305      	str	r3, [sp, #20]
 800a026:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a10c <_vfiprintf_r+0x25c>
 800a02a:	7821      	ldrb	r1, [r4, #0]
 800a02c:	2203      	movs	r2, #3
 800a02e:	4650      	mov	r0, sl
 800a030:	f7f6 f8fe 	bl	8000230 <memchr>
 800a034:	b140      	cbz	r0, 800a048 <_vfiprintf_r+0x198>
 800a036:	2340      	movs	r3, #64	; 0x40
 800a038:	eba0 000a 	sub.w	r0, r0, sl
 800a03c:	fa03 f000 	lsl.w	r0, r3, r0
 800a040:	9b04      	ldr	r3, [sp, #16]
 800a042:	4303      	orrs	r3, r0
 800a044:	3401      	adds	r4, #1
 800a046:	9304      	str	r3, [sp, #16]
 800a048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a04c:	482c      	ldr	r0, [pc, #176]	; (800a100 <_vfiprintf_r+0x250>)
 800a04e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a052:	2206      	movs	r2, #6
 800a054:	f7f6 f8ec 	bl	8000230 <memchr>
 800a058:	2800      	cmp	r0, #0
 800a05a:	d03f      	beq.n	800a0dc <_vfiprintf_r+0x22c>
 800a05c:	4b29      	ldr	r3, [pc, #164]	; (800a104 <_vfiprintf_r+0x254>)
 800a05e:	bb1b      	cbnz	r3, 800a0a8 <_vfiprintf_r+0x1f8>
 800a060:	9b03      	ldr	r3, [sp, #12]
 800a062:	3307      	adds	r3, #7
 800a064:	f023 0307 	bic.w	r3, r3, #7
 800a068:	3308      	adds	r3, #8
 800a06a:	9303      	str	r3, [sp, #12]
 800a06c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a06e:	443b      	add	r3, r7
 800a070:	9309      	str	r3, [sp, #36]	; 0x24
 800a072:	e767      	b.n	8009f44 <_vfiprintf_r+0x94>
 800a074:	fb0c 3202 	mla	r2, ip, r2, r3
 800a078:	460c      	mov	r4, r1
 800a07a:	2001      	movs	r0, #1
 800a07c:	e7a5      	b.n	8009fca <_vfiprintf_r+0x11a>
 800a07e:	2300      	movs	r3, #0
 800a080:	3401      	adds	r4, #1
 800a082:	9305      	str	r3, [sp, #20]
 800a084:	4619      	mov	r1, r3
 800a086:	f04f 0c0a 	mov.w	ip, #10
 800a08a:	4620      	mov	r0, r4
 800a08c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a090:	3a30      	subs	r2, #48	; 0x30
 800a092:	2a09      	cmp	r2, #9
 800a094:	d903      	bls.n	800a09e <_vfiprintf_r+0x1ee>
 800a096:	2b00      	cmp	r3, #0
 800a098:	d0c5      	beq.n	800a026 <_vfiprintf_r+0x176>
 800a09a:	9105      	str	r1, [sp, #20]
 800a09c:	e7c3      	b.n	800a026 <_vfiprintf_r+0x176>
 800a09e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0a2:	4604      	mov	r4, r0
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	e7f0      	b.n	800a08a <_vfiprintf_r+0x1da>
 800a0a8:	ab03      	add	r3, sp, #12
 800a0aa:	9300      	str	r3, [sp, #0]
 800a0ac:	462a      	mov	r2, r5
 800a0ae:	4b16      	ldr	r3, [pc, #88]	; (800a108 <_vfiprintf_r+0x258>)
 800a0b0:	a904      	add	r1, sp, #16
 800a0b2:	4630      	mov	r0, r6
 800a0b4:	f7fc f954 	bl	8006360 <_printf_float>
 800a0b8:	4607      	mov	r7, r0
 800a0ba:	1c78      	adds	r0, r7, #1
 800a0bc:	d1d6      	bne.n	800a06c <_vfiprintf_r+0x1bc>
 800a0be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0c0:	07d9      	lsls	r1, r3, #31
 800a0c2:	d405      	bmi.n	800a0d0 <_vfiprintf_r+0x220>
 800a0c4:	89ab      	ldrh	r3, [r5, #12]
 800a0c6:	059a      	lsls	r2, r3, #22
 800a0c8:	d402      	bmi.n	800a0d0 <_vfiprintf_r+0x220>
 800a0ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0cc:	f7ff f8c4 	bl	8009258 <__retarget_lock_release_recursive>
 800a0d0:	89ab      	ldrh	r3, [r5, #12]
 800a0d2:	065b      	lsls	r3, r3, #25
 800a0d4:	f53f af12 	bmi.w	8009efc <_vfiprintf_r+0x4c>
 800a0d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0da:	e711      	b.n	8009f00 <_vfiprintf_r+0x50>
 800a0dc:	ab03      	add	r3, sp, #12
 800a0de:	9300      	str	r3, [sp, #0]
 800a0e0:	462a      	mov	r2, r5
 800a0e2:	4b09      	ldr	r3, [pc, #36]	; (800a108 <_vfiprintf_r+0x258>)
 800a0e4:	a904      	add	r1, sp, #16
 800a0e6:	4630      	mov	r0, r6
 800a0e8:	f7fc fbde 	bl	80068a8 <_printf_i>
 800a0ec:	e7e4      	b.n	800a0b8 <_vfiprintf_r+0x208>
 800a0ee:	bf00      	nop
 800a0f0:	0800a780 	.word	0x0800a780
 800a0f4:	0800a7a0 	.word	0x0800a7a0
 800a0f8:	0800a760 	.word	0x0800a760
 800a0fc:	0800a99c 	.word	0x0800a99c
 800a100:	0800a9a6 	.word	0x0800a9a6
 800a104:	08006361 	.word	0x08006361
 800a108:	08009e8b 	.word	0x08009e8b
 800a10c:	0800a9a2 	.word	0x0800a9a2

0800a110 <nan>:
 800a110:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a118 <nan+0x8>
 800a114:	4770      	bx	lr
 800a116:	bf00      	nop
 800a118:	00000000 	.word	0x00000000
 800a11c:	7ff80000 	.word	0x7ff80000

0800a120 <_sbrk_r>:
 800a120:	b538      	push	{r3, r4, r5, lr}
 800a122:	4d06      	ldr	r5, [pc, #24]	; (800a13c <_sbrk_r+0x1c>)
 800a124:	2300      	movs	r3, #0
 800a126:	4604      	mov	r4, r0
 800a128:	4608      	mov	r0, r1
 800a12a:	602b      	str	r3, [r5, #0]
 800a12c:	f7f7 fc6a 	bl	8001a04 <_sbrk>
 800a130:	1c43      	adds	r3, r0, #1
 800a132:	d102      	bne.n	800a13a <_sbrk_r+0x1a>
 800a134:	682b      	ldr	r3, [r5, #0]
 800a136:	b103      	cbz	r3, 800a13a <_sbrk_r+0x1a>
 800a138:	6023      	str	r3, [r4, #0]
 800a13a:	bd38      	pop	{r3, r4, r5, pc}
 800a13c:	20000634 	.word	0x20000634

0800a140 <__sread>:
 800a140:	b510      	push	{r4, lr}
 800a142:	460c      	mov	r4, r1
 800a144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a148:	f000 f8ee 	bl	800a328 <_read_r>
 800a14c:	2800      	cmp	r0, #0
 800a14e:	bfab      	itete	ge
 800a150:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a152:	89a3      	ldrhlt	r3, [r4, #12]
 800a154:	181b      	addge	r3, r3, r0
 800a156:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a15a:	bfac      	ite	ge
 800a15c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a15e:	81a3      	strhlt	r3, [r4, #12]
 800a160:	bd10      	pop	{r4, pc}

0800a162 <__swrite>:
 800a162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a166:	461f      	mov	r7, r3
 800a168:	898b      	ldrh	r3, [r1, #12]
 800a16a:	05db      	lsls	r3, r3, #23
 800a16c:	4605      	mov	r5, r0
 800a16e:	460c      	mov	r4, r1
 800a170:	4616      	mov	r6, r2
 800a172:	d505      	bpl.n	800a180 <__swrite+0x1e>
 800a174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a178:	2302      	movs	r3, #2
 800a17a:	2200      	movs	r2, #0
 800a17c:	f000 f8b6 	bl	800a2ec <_lseek_r>
 800a180:	89a3      	ldrh	r3, [r4, #12]
 800a182:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a186:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a18a:	81a3      	strh	r3, [r4, #12]
 800a18c:	4632      	mov	r2, r6
 800a18e:	463b      	mov	r3, r7
 800a190:	4628      	mov	r0, r5
 800a192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a196:	f000 b835 	b.w	800a204 <_write_r>

0800a19a <__sseek>:
 800a19a:	b510      	push	{r4, lr}
 800a19c:	460c      	mov	r4, r1
 800a19e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1a2:	f000 f8a3 	bl	800a2ec <_lseek_r>
 800a1a6:	1c43      	adds	r3, r0, #1
 800a1a8:	89a3      	ldrh	r3, [r4, #12]
 800a1aa:	bf15      	itete	ne
 800a1ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800a1ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a1b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a1b6:	81a3      	strheq	r3, [r4, #12]
 800a1b8:	bf18      	it	ne
 800a1ba:	81a3      	strhne	r3, [r4, #12]
 800a1bc:	bd10      	pop	{r4, pc}

0800a1be <__sclose>:
 800a1be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1c2:	f000 b84f 	b.w	800a264 <_close_r>

0800a1c6 <strncmp>:
 800a1c6:	b510      	push	{r4, lr}
 800a1c8:	b16a      	cbz	r2, 800a1e6 <strncmp+0x20>
 800a1ca:	3901      	subs	r1, #1
 800a1cc:	1884      	adds	r4, r0, r2
 800a1ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a1d2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d103      	bne.n	800a1e2 <strncmp+0x1c>
 800a1da:	42a0      	cmp	r0, r4
 800a1dc:	d001      	beq.n	800a1e2 <strncmp+0x1c>
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d1f5      	bne.n	800a1ce <strncmp+0x8>
 800a1e2:	1a98      	subs	r0, r3, r2
 800a1e4:	bd10      	pop	{r4, pc}
 800a1e6:	4610      	mov	r0, r2
 800a1e8:	e7fc      	b.n	800a1e4 <strncmp+0x1e>

0800a1ea <__ascii_wctomb>:
 800a1ea:	b149      	cbz	r1, 800a200 <__ascii_wctomb+0x16>
 800a1ec:	2aff      	cmp	r2, #255	; 0xff
 800a1ee:	bf85      	ittet	hi
 800a1f0:	238a      	movhi	r3, #138	; 0x8a
 800a1f2:	6003      	strhi	r3, [r0, #0]
 800a1f4:	700a      	strbls	r2, [r1, #0]
 800a1f6:	f04f 30ff 	movhi.w	r0, #4294967295
 800a1fa:	bf98      	it	ls
 800a1fc:	2001      	movls	r0, #1
 800a1fe:	4770      	bx	lr
 800a200:	4608      	mov	r0, r1
 800a202:	4770      	bx	lr

0800a204 <_write_r>:
 800a204:	b538      	push	{r3, r4, r5, lr}
 800a206:	4d07      	ldr	r5, [pc, #28]	; (800a224 <_write_r+0x20>)
 800a208:	4604      	mov	r4, r0
 800a20a:	4608      	mov	r0, r1
 800a20c:	4611      	mov	r1, r2
 800a20e:	2200      	movs	r2, #0
 800a210:	602a      	str	r2, [r5, #0]
 800a212:	461a      	mov	r2, r3
 800a214:	f7f7 fba5 	bl	8001962 <_write>
 800a218:	1c43      	adds	r3, r0, #1
 800a21a:	d102      	bne.n	800a222 <_write_r+0x1e>
 800a21c:	682b      	ldr	r3, [r5, #0]
 800a21e:	b103      	cbz	r3, 800a222 <_write_r+0x1e>
 800a220:	6023      	str	r3, [r4, #0]
 800a222:	bd38      	pop	{r3, r4, r5, pc}
 800a224:	20000634 	.word	0x20000634

0800a228 <__assert_func>:
 800a228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a22a:	4614      	mov	r4, r2
 800a22c:	461a      	mov	r2, r3
 800a22e:	4b09      	ldr	r3, [pc, #36]	; (800a254 <__assert_func+0x2c>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4605      	mov	r5, r0
 800a234:	68d8      	ldr	r0, [r3, #12]
 800a236:	b14c      	cbz	r4, 800a24c <__assert_func+0x24>
 800a238:	4b07      	ldr	r3, [pc, #28]	; (800a258 <__assert_func+0x30>)
 800a23a:	9100      	str	r1, [sp, #0]
 800a23c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a240:	4906      	ldr	r1, [pc, #24]	; (800a25c <__assert_func+0x34>)
 800a242:	462b      	mov	r3, r5
 800a244:	f000 f81e 	bl	800a284 <fiprintf>
 800a248:	f000 f880 	bl	800a34c <abort>
 800a24c:	4b04      	ldr	r3, [pc, #16]	; (800a260 <__assert_func+0x38>)
 800a24e:	461c      	mov	r4, r3
 800a250:	e7f3      	b.n	800a23a <__assert_func+0x12>
 800a252:	bf00      	nop
 800a254:	20000018 	.word	0x20000018
 800a258:	0800a9ad 	.word	0x0800a9ad
 800a25c:	0800a9ba 	.word	0x0800a9ba
 800a260:	0800a9e8 	.word	0x0800a9e8

0800a264 <_close_r>:
 800a264:	b538      	push	{r3, r4, r5, lr}
 800a266:	4d06      	ldr	r5, [pc, #24]	; (800a280 <_close_r+0x1c>)
 800a268:	2300      	movs	r3, #0
 800a26a:	4604      	mov	r4, r0
 800a26c:	4608      	mov	r0, r1
 800a26e:	602b      	str	r3, [r5, #0]
 800a270:	f7f7 fb93 	bl	800199a <_close>
 800a274:	1c43      	adds	r3, r0, #1
 800a276:	d102      	bne.n	800a27e <_close_r+0x1a>
 800a278:	682b      	ldr	r3, [r5, #0]
 800a27a:	b103      	cbz	r3, 800a27e <_close_r+0x1a>
 800a27c:	6023      	str	r3, [r4, #0]
 800a27e:	bd38      	pop	{r3, r4, r5, pc}
 800a280:	20000634 	.word	0x20000634

0800a284 <fiprintf>:
 800a284:	b40e      	push	{r1, r2, r3}
 800a286:	b503      	push	{r0, r1, lr}
 800a288:	4601      	mov	r1, r0
 800a28a:	ab03      	add	r3, sp, #12
 800a28c:	4805      	ldr	r0, [pc, #20]	; (800a2a4 <fiprintf+0x20>)
 800a28e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a292:	6800      	ldr	r0, [r0, #0]
 800a294:	9301      	str	r3, [sp, #4]
 800a296:	f7ff fe0b 	bl	8009eb0 <_vfiprintf_r>
 800a29a:	b002      	add	sp, #8
 800a29c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2a0:	b003      	add	sp, #12
 800a2a2:	4770      	bx	lr
 800a2a4:	20000018 	.word	0x20000018

0800a2a8 <_fstat_r>:
 800a2a8:	b538      	push	{r3, r4, r5, lr}
 800a2aa:	4d07      	ldr	r5, [pc, #28]	; (800a2c8 <_fstat_r+0x20>)
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	4604      	mov	r4, r0
 800a2b0:	4608      	mov	r0, r1
 800a2b2:	4611      	mov	r1, r2
 800a2b4:	602b      	str	r3, [r5, #0]
 800a2b6:	f7f7 fb7c 	bl	80019b2 <_fstat>
 800a2ba:	1c43      	adds	r3, r0, #1
 800a2bc:	d102      	bne.n	800a2c4 <_fstat_r+0x1c>
 800a2be:	682b      	ldr	r3, [r5, #0]
 800a2c0:	b103      	cbz	r3, 800a2c4 <_fstat_r+0x1c>
 800a2c2:	6023      	str	r3, [r4, #0]
 800a2c4:	bd38      	pop	{r3, r4, r5, pc}
 800a2c6:	bf00      	nop
 800a2c8:	20000634 	.word	0x20000634

0800a2cc <_isatty_r>:
 800a2cc:	b538      	push	{r3, r4, r5, lr}
 800a2ce:	4d06      	ldr	r5, [pc, #24]	; (800a2e8 <_isatty_r+0x1c>)
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	4604      	mov	r4, r0
 800a2d4:	4608      	mov	r0, r1
 800a2d6:	602b      	str	r3, [r5, #0]
 800a2d8:	f7f7 fb7b 	bl	80019d2 <_isatty>
 800a2dc:	1c43      	adds	r3, r0, #1
 800a2de:	d102      	bne.n	800a2e6 <_isatty_r+0x1a>
 800a2e0:	682b      	ldr	r3, [r5, #0]
 800a2e2:	b103      	cbz	r3, 800a2e6 <_isatty_r+0x1a>
 800a2e4:	6023      	str	r3, [r4, #0]
 800a2e6:	bd38      	pop	{r3, r4, r5, pc}
 800a2e8:	20000634 	.word	0x20000634

0800a2ec <_lseek_r>:
 800a2ec:	b538      	push	{r3, r4, r5, lr}
 800a2ee:	4d07      	ldr	r5, [pc, #28]	; (800a30c <_lseek_r+0x20>)
 800a2f0:	4604      	mov	r4, r0
 800a2f2:	4608      	mov	r0, r1
 800a2f4:	4611      	mov	r1, r2
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	602a      	str	r2, [r5, #0]
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	f7f7 fb74 	bl	80019e8 <_lseek>
 800a300:	1c43      	adds	r3, r0, #1
 800a302:	d102      	bne.n	800a30a <_lseek_r+0x1e>
 800a304:	682b      	ldr	r3, [r5, #0]
 800a306:	b103      	cbz	r3, 800a30a <_lseek_r+0x1e>
 800a308:	6023      	str	r3, [r4, #0]
 800a30a:	bd38      	pop	{r3, r4, r5, pc}
 800a30c:	20000634 	.word	0x20000634

0800a310 <__malloc_lock>:
 800a310:	4801      	ldr	r0, [pc, #4]	; (800a318 <__malloc_lock+0x8>)
 800a312:	f7fe bfa0 	b.w	8009256 <__retarget_lock_acquire_recursive>
 800a316:	bf00      	nop
 800a318:	2000062c 	.word	0x2000062c

0800a31c <__malloc_unlock>:
 800a31c:	4801      	ldr	r0, [pc, #4]	; (800a324 <__malloc_unlock+0x8>)
 800a31e:	f7fe bf9b 	b.w	8009258 <__retarget_lock_release_recursive>
 800a322:	bf00      	nop
 800a324:	2000062c 	.word	0x2000062c

0800a328 <_read_r>:
 800a328:	b538      	push	{r3, r4, r5, lr}
 800a32a:	4d07      	ldr	r5, [pc, #28]	; (800a348 <_read_r+0x20>)
 800a32c:	4604      	mov	r4, r0
 800a32e:	4608      	mov	r0, r1
 800a330:	4611      	mov	r1, r2
 800a332:	2200      	movs	r2, #0
 800a334:	602a      	str	r2, [r5, #0]
 800a336:	461a      	mov	r2, r3
 800a338:	f7f7 faf6 	bl	8001928 <_read>
 800a33c:	1c43      	adds	r3, r0, #1
 800a33e:	d102      	bne.n	800a346 <_read_r+0x1e>
 800a340:	682b      	ldr	r3, [r5, #0]
 800a342:	b103      	cbz	r3, 800a346 <_read_r+0x1e>
 800a344:	6023      	str	r3, [r4, #0]
 800a346:	bd38      	pop	{r3, r4, r5, pc}
 800a348:	20000634 	.word	0x20000634

0800a34c <abort>:
 800a34c:	b508      	push	{r3, lr}
 800a34e:	2006      	movs	r0, #6
 800a350:	f000 f82c 	bl	800a3ac <raise>
 800a354:	2001      	movs	r0, #1
 800a356:	f7f7 fadd 	bl	8001914 <_exit>

0800a35a <_raise_r>:
 800a35a:	291f      	cmp	r1, #31
 800a35c:	b538      	push	{r3, r4, r5, lr}
 800a35e:	4604      	mov	r4, r0
 800a360:	460d      	mov	r5, r1
 800a362:	d904      	bls.n	800a36e <_raise_r+0x14>
 800a364:	2316      	movs	r3, #22
 800a366:	6003      	str	r3, [r0, #0]
 800a368:	f04f 30ff 	mov.w	r0, #4294967295
 800a36c:	bd38      	pop	{r3, r4, r5, pc}
 800a36e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a370:	b112      	cbz	r2, 800a378 <_raise_r+0x1e>
 800a372:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a376:	b94b      	cbnz	r3, 800a38c <_raise_r+0x32>
 800a378:	4620      	mov	r0, r4
 800a37a:	f000 f831 	bl	800a3e0 <_getpid_r>
 800a37e:	462a      	mov	r2, r5
 800a380:	4601      	mov	r1, r0
 800a382:	4620      	mov	r0, r4
 800a384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a388:	f000 b818 	b.w	800a3bc <_kill_r>
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d00a      	beq.n	800a3a6 <_raise_r+0x4c>
 800a390:	1c59      	adds	r1, r3, #1
 800a392:	d103      	bne.n	800a39c <_raise_r+0x42>
 800a394:	2316      	movs	r3, #22
 800a396:	6003      	str	r3, [r0, #0]
 800a398:	2001      	movs	r0, #1
 800a39a:	e7e7      	b.n	800a36c <_raise_r+0x12>
 800a39c:	2400      	movs	r4, #0
 800a39e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a3a2:	4628      	mov	r0, r5
 800a3a4:	4798      	blx	r3
 800a3a6:	2000      	movs	r0, #0
 800a3a8:	e7e0      	b.n	800a36c <_raise_r+0x12>
	...

0800a3ac <raise>:
 800a3ac:	4b02      	ldr	r3, [pc, #8]	; (800a3b8 <raise+0xc>)
 800a3ae:	4601      	mov	r1, r0
 800a3b0:	6818      	ldr	r0, [r3, #0]
 800a3b2:	f7ff bfd2 	b.w	800a35a <_raise_r>
 800a3b6:	bf00      	nop
 800a3b8:	20000018 	.word	0x20000018

0800a3bc <_kill_r>:
 800a3bc:	b538      	push	{r3, r4, r5, lr}
 800a3be:	4d07      	ldr	r5, [pc, #28]	; (800a3dc <_kill_r+0x20>)
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	4604      	mov	r4, r0
 800a3c4:	4608      	mov	r0, r1
 800a3c6:	4611      	mov	r1, r2
 800a3c8:	602b      	str	r3, [r5, #0]
 800a3ca:	f7f7 fa93 	bl	80018f4 <_kill>
 800a3ce:	1c43      	adds	r3, r0, #1
 800a3d0:	d102      	bne.n	800a3d8 <_kill_r+0x1c>
 800a3d2:	682b      	ldr	r3, [r5, #0]
 800a3d4:	b103      	cbz	r3, 800a3d8 <_kill_r+0x1c>
 800a3d6:	6023      	str	r3, [r4, #0]
 800a3d8:	bd38      	pop	{r3, r4, r5, pc}
 800a3da:	bf00      	nop
 800a3dc:	20000634 	.word	0x20000634

0800a3e0 <_getpid_r>:
 800a3e0:	f7f7 ba80 	b.w	80018e4 <_getpid>

0800a3e4 <_init>:
 800a3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3e6:	bf00      	nop
 800a3e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3ea:	bc08      	pop	{r3}
 800a3ec:	469e      	mov	lr, r3
 800a3ee:	4770      	bx	lr

0800a3f0 <_fini>:
 800a3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3f2:	bf00      	nop
 800a3f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3f6:	bc08      	pop	{r3}
 800a3f8:	469e      	mov	lr, r3
 800a3fa:	4770      	bx	lr
