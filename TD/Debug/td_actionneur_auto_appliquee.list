
td_actionneur_auto_appliquee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008aec  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  08008cd0  08008cd0  00018cd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091b4  080091b4  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  080091b4  080091b4  000191b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091bc  080091bc  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091bc  080091bc  000191bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091c0  080091c0  000191c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  080091c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  200001f4  080093b8  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  080093b8  00020494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016048  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d5d  00000000  00000000  0003626c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  00038fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001090  00000000  00000000  0003a188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f1b3  00000000  00000000  0003b218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013689  00000000  00000000  0005a3cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7251  00000000  00000000  0006da54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00134ca5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005aac  00000000  00000000  00134cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f4 	.word	0x200001f4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008cb4 	.word	0x08008cb4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f8 	.word	0x200001f8
 800021c:	08008cb4 	.word	0x08008cb4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b96e 	b.w	8000f0c <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	4604      	mov	r4, r0
 8000c50:	468c      	mov	ip, r1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f040 8083 	bne.w	8000d5e <__udivmoddi4+0x116>
 8000c58:	428a      	cmp	r2, r1
 8000c5a:	4617      	mov	r7, r2
 8000c5c:	d947      	bls.n	8000cee <__udivmoddi4+0xa6>
 8000c5e:	fab2 f282 	clz	r2, r2
 8000c62:	b142      	cbz	r2, 8000c76 <__udivmoddi4+0x2e>
 8000c64:	f1c2 0020 	rsb	r0, r2, #32
 8000c68:	fa24 f000 	lsr.w	r0, r4, r0
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	4097      	lsls	r7, r2
 8000c70:	ea40 0c01 	orr.w	ip, r0, r1
 8000c74:	4094      	lsls	r4, r2
 8000c76:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c7a:	0c23      	lsrs	r3, r4, #16
 8000c7c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c80:	fa1f fe87 	uxth.w	lr, r7
 8000c84:	fb08 c116 	mls	r1, r8, r6, ip
 8000c88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c90:	4299      	cmp	r1, r3
 8000c92:	d909      	bls.n	8000ca8 <__udivmoddi4+0x60>
 8000c94:	18fb      	adds	r3, r7, r3
 8000c96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c9a:	f080 8119 	bcs.w	8000ed0 <__udivmoddi4+0x288>
 8000c9e:	4299      	cmp	r1, r3
 8000ca0:	f240 8116 	bls.w	8000ed0 <__udivmoddi4+0x288>
 8000ca4:	3e02      	subs	r6, #2
 8000ca6:	443b      	add	r3, r7
 8000ca8:	1a5b      	subs	r3, r3, r1
 8000caa:	b2a4      	uxth	r4, r4
 8000cac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cbc:	45a6      	cmp	lr, r4
 8000cbe:	d909      	bls.n	8000cd4 <__udivmoddi4+0x8c>
 8000cc0:	193c      	adds	r4, r7, r4
 8000cc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc6:	f080 8105 	bcs.w	8000ed4 <__udivmoddi4+0x28c>
 8000cca:	45a6      	cmp	lr, r4
 8000ccc:	f240 8102 	bls.w	8000ed4 <__udivmoddi4+0x28c>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	443c      	add	r4, r7
 8000cd4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd8:	eba4 040e 	sub.w	r4, r4, lr
 8000cdc:	2600      	movs	r6, #0
 8000cde:	b11d      	cbz	r5, 8000ce8 <__udivmoddi4+0xa0>
 8000ce0:	40d4      	lsrs	r4, r2
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ce8:	4631      	mov	r1, r6
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	b902      	cbnz	r2, 8000cf2 <__udivmoddi4+0xaa>
 8000cf0:	deff      	udf	#255	; 0xff
 8000cf2:	fab2 f282 	clz	r2, r2
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	d150      	bne.n	8000d9c <__udivmoddi4+0x154>
 8000cfa:	1bcb      	subs	r3, r1, r7
 8000cfc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d00:	fa1f f887 	uxth.w	r8, r7
 8000d04:	2601      	movs	r6, #1
 8000d06:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d0a:	0c21      	lsrs	r1, r4, #16
 8000d0c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d14:	fb08 f30c 	mul.w	r3, r8, ip
 8000d18:	428b      	cmp	r3, r1
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0xe4>
 8000d1c:	1879      	adds	r1, r7, r1
 8000d1e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0xe2>
 8000d24:	428b      	cmp	r3, r1
 8000d26:	f200 80e9 	bhi.w	8000efc <__udivmoddi4+0x2b4>
 8000d2a:	4684      	mov	ip, r0
 8000d2c:	1ac9      	subs	r1, r1, r3
 8000d2e:	b2a3      	uxth	r3, r4
 8000d30:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d34:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d38:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d3c:	fb08 f800 	mul.w	r8, r8, r0
 8000d40:	45a0      	cmp	r8, r4
 8000d42:	d907      	bls.n	8000d54 <__udivmoddi4+0x10c>
 8000d44:	193c      	adds	r4, r7, r4
 8000d46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x10a>
 8000d4c:	45a0      	cmp	r8, r4
 8000d4e:	f200 80d9 	bhi.w	8000f04 <__udivmoddi4+0x2bc>
 8000d52:	4618      	mov	r0, r3
 8000d54:	eba4 0408 	sub.w	r4, r4, r8
 8000d58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d5c:	e7bf      	b.n	8000cde <__udivmoddi4+0x96>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0x12e>
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	f000 80b1 	beq.w	8000eca <__udivmoddi4+0x282>
 8000d68:	2600      	movs	r6, #0
 8000d6a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6e:	4630      	mov	r0, r6
 8000d70:	4631      	mov	r1, r6
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f683 	clz	r6, r3
 8000d7a:	2e00      	cmp	r6, #0
 8000d7c:	d14a      	bne.n	8000e14 <__udivmoddi4+0x1cc>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0x140>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80b8 	bhi.w	8000ef8 <__udivmoddi4+0x2b0>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	468c      	mov	ip, r1
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	d0a8      	beq.n	8000ce8 <__udivmoddi4+0xa0>
 8000d96:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d9a:	e7a5      	b.n	8000ce8 <__udivmoddi4+0xa0>
 8000d9c:	f1c2 0320 	rsb	r3, r2, #32
 8000da0:	fa20 f603 	lsr.w	r6, r0, r3
 8000da4:	4097      	lsls	r7, r2
 8000da6:	fa01 f002 	lsl.w	r0, r1, r2
 8000daa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dae:	40d9      	lsrs	r1, r3
 8000db0:	4330      	orrs	r0, r6
 8000db2:	0c03      	lsrs	r3, r0, #16
 8000db4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000db8:	fa1f f887 	uxth.w	r8, r7
 8000dbc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb06 f108 	mul.w	r1, r6, r8
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	fa04 f402 	lsl.w	r4, r4, r2
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x19c>
 8000dd0:	18fb      	adds	r3, r7, r3
 8000dd2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dd6:	f080 808d 	bcs.w	8000ef4 <__udivmoddi4+0x2ac>
 8000dda:	4299      	cmp	r1, r3
 8000ddc:	f240 808a 	bls.w	8000ef4 <__udivmoddi4+0x2ac>
 8000de0:	3e02      	subs	r6, #2
 8000de2:	443b      	add	r3, r7
 8000de4:	1a5b      	subs	r3, r3, r1
 8000de6:	b281      	uxth	r1, r0
 8000de8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dec:	fb0e 3310 	mls	r3, lr, r0, r3
 8000df0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df4:	fb00 f308 	mul.w	r3, r0, r8
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x1c4>
 8000dfc:	1879      	adds	r1, r7, r1
 8000dfe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e02:	d273      	bcs.n	8000eec <__udivmoddi4+0x2a4>
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d971      	bls.n	8000eec <__udivmoddi4+0x2a4>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	4439      	add	r1, r7
 8000e0c:	1acb      	subs	r3, r1, r3
 8000e0e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e12:	e778      	b.n	8000d06 <__udivmoddi4+0xbe>
 8000e14:	f1c6 0c20 	rsb	ip, r6, #32
 8000e18:	fa03 f406 	lsl.w	r4, r3, r6
 8000e1c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e20:	431c      	orrs	r4, r3
 8000e22:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e26:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e2e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e32:	431f      	orrs	r7, r3
 8000e34:	0c3b      	lsrs	r3, r7, #16
 8000e36:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e3a:	fa1f f884 	uxth.w	r8, r4
 8000e3e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e42:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e46:	fb09 fa08 	mul.w	sl, r9, r8
 8000e4a:	458a      	cmp	sl, r1
 8000e4c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e50:	fa00 f306 	lsl.w	r3, r0, r6
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x220>
 8000e56:	1861      	adds	r1, r4, r1
 8000e58:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e5c:	d248      	bcs.n	8000ef0 <__udivmoddi4+0x2a8>
 8000e5e:	458a      	cmp	sl, r1
 8000e60:	d946      	bls.n	8000ef0 <__udivmoddi4+0x2a8>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4421      	add	r1, r4
 8000e68:	eba1 010a 	sub.w	r1, r1, sl
 8000e6c:	b2bf      	uxth	r7, r7
 8000e6e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e72:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e76:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e7a:	fb00 f808 	mul.w	r8, r0, r8
 8000e7e:	45b8      	cmp	r8, r7
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x24a>
 8000e82:	19e7      	adds	r7, r4, r7
 8000e84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e88:	d22e      	bcs.n	8000ee8 <__udivmoddi4+0x2a0>
 8000e8a:	45b8      	cmp	r8, r7
 8000e8c:	d92c      	bls.n	8000ee8 <__udivmoddi4+0x2a0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4427      	add	r7, r4
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	eba7 0708 	sub.w	r7, r7, r8
 8000e9a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9e:	454f      	cmp	r7, r9
 8000ea0:	46c6      	mov	lr, r8
 8000ea2:	4649      	mov	r1, r9
 8000ea4:	d31a      	bcc.n	8000edc <__udivmoddi4+0x294>
 8000ea6:	d017      	beq.n	8000ed8 <__udivmoddi4+0x290>
 8000ea8:	b15d      	cbz	r5, 8000ec2 <__udivmoddi4+0x27a>
 8000eaa:	ebb3 020e 	subs.w	r2, r3, lr
 8000eae:	eb67 0701 	sbc.w	r7, r7, r1
 8000eb2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eb6:	40f2      	lsrs	r2, r6
 8000eb8:	ea4c 0202 	orr.w	r2, ip, r2
 8000ebc:	40f7      	lsrs	r7, r6
 8000ebe:	e9c5 2700 	strd	r2, r7, [r5]
 8000ec2:	2600      	movs	r6, #0
 8000ec4:	4631      	mov	r1, r6
 8000ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eca:	462e      	mov	r6, r5
 8000ecc:	4628      	mov	r0, r5
 8000ece:	e70b      	b.n	8000ce8 <__udivmoddi4+0xa0>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	e6e9      	b.n	8000ca8 <__udivmoddi4+0x60>
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	e6fd      	b.n	8000cd4 <__udivmoddi4+0x8c>
 8000ed8:	4543      	cmp	r3, r8
 8000eda:	d2e5      	bcs.n	8000ea8 <__udivmoddi4+0x260>
 8000edc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ee0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ee4:	3801      	subs	r0, #1
 8000ee6:	e7df      	b.n	8000ea8 <__udivmoddi4+0x260>
 8000ee8:	4608      	mov	r0, r1
 8000eea:	e7d2      	b.n	8000e92 <__udivmoddi4+0x24a>
 8000eec:	4660      	mov	r0, ip
 8000eee:	e78d      	b.n	8000e0c <__udivmoddi4+0x1c4>
 8000ef0:	4681      	mov	r9, r0
 8000ef2:	e7b9      	b.n	8000e68 <__udivmoddi4+0x220>
 8000ef4:	4666      	mov	r6, ip
 8000ef6:	e775      	b.n	8000de4 <__udivmoddi4+0x19c>
 8000ef8:	4630      	mov	r0, r6
 8000efa:	e74a      	b.n	8000d92 <__udivmoddi4+0x14a>
 8000efc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f00:	4439      	add	r1, r7
 8000f02:	e713      	b.n	8000d2c <__udivmoddi4+0xe4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	443c      	add	r4, r7
 8000f08:	e724      	b.n	8000d54 <__udivmoddi4+0x10c>
 8000f0a:	bf00      	nop

08000f0c <__aeabi_idiv0>:
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f26:	4b3e      	ldr	r3, [pc, #248]	; (8001020 <MX_GPIO_Init+0x110>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2a:	4a3d      	ldr	r2, [pc, #244]	; (8001020 <MX_GPIO_Init+0x110>)
 8000f2c:	f043 0304 	orr.w	r3, r3, #4
 8000f30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f32:	4b3b      	ldr	r3, [pc, #236]	; (8001020 <MX_GPIO_Init+0x110>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f36:	f003 0304 	and.w	r3, r3, #4
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f3e:	4b38      	ldr	r3, [pc, #224]	; (8001020 <MX_GPIO_Init+0x110>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f42:	4a37      	ldr	r2, [pc, #220]	; (8001020 <MX_GPIO_Init+0x110>)
 8000f44:	f043 0320 	orr.w	r3, r3, #32
 8000f48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f4a:	4b35      	ldr	r3, [pc, #212]	; (8001020 <MX_GPIO_Init+0x110>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	f003 0320 	and.w	r3, r3, #32
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	4b32      	ldr	r3, [pc, #200]	; (8001020 <MX_GPIO_Init+0x110>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	4a31      	ldr	r2, [pc, #196]	; (8001020 <MX_GPIO_Init+0x110>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f62:	4b2f      	ldr	r3, [pc, #188]	; (8001020 <MX_GPIO_Init+0x110>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6e:	4b2c      	ldr	r3, [pc, #176]	; (8001020 <MX_GPIO_Init+0x110>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	4a2b      	ldr	r2, [pc, #172]	; (8001020 <MX_GPIO_Init+0x110>)
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7a:	4b29      	ldr	r3, [pc, #164]	; (8001020 <MX_GPIO_Init+0x110>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2103      	movs	r1, #3
 8000f8a:	4826      	ldr	r0, [pc, #152]	; (8001024 <MX_GPIO_Init+0x114>)
 8000f8c:	f001 fae0 	bl	8002550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN4_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2130      	movs	r1, #48	; 0x30
 8000f94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f98:	f001 fada 	bl	8002550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	4821      	ldr	r0, [pc, #132]	; (8001028 <MX_GPIO_Init+0x118>)
 8000fa2:	f001 fad5 	bl	8002550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000faa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fac:	4b1f      	ldr	r3, [pc, #124]	; (800102c <MX_GPIO_Init+0x11c>)
 8000fae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	4619      	mov	r1, r3
 8000fba:	481a      	ldr	r0, [pc, #104]	; (8001024 <MX_GPIO_Init+0x114>)
 8000fbc:	f001 f946 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4813      	ldr	r0, [pc, #76]	; (8001024 <MX_GPIO_Init+0x114>)
 8000fd8:	f001 f938 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IN4_Pin|LD2_Pin;
 8000fdc:	2330      	movs	r3, #48	; 0x30
 8000fde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff6:	f001 f929 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN3_Pin;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffe:	2301      	movs	r3, #1
 8001000:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN3_GPIO_Port, &GPIO_InitStruct);
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	4619      	mov	r1, r3
 8001010:	4805      	ldr	r0, [pc, #20]	; (8001028 <MX_GPIO_Init+0x118>)
 8001012:	f001 f91b 	bl	800224c <HAL_GPIO_Init>

}
 8001016:	bf00      	nop
 8001018:	3728      	adds	r7, #40	; 0x28
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40021000 	.word	0x40021000
 8001024:	48000800 	.word	0x48000800
 8001028:	48000400 	.word	0x48000400
 800102c:	10110000 	.word	0x10110000

08001030 <fonction>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int fonction(int argc, char ** argv) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
	printf("Fonction exemple\r\n");
 800103a:	4810      	ldr	r0, [pc, #64]	; (800107c <fonction+0x4c>)
 800103c:	f005 fdca 	bl	8006bd4 <puts>

	printf("argc = %d\r\n", argc);
 8001040:	6879      	ldr	r1, [r7, #4]
 8001042:	480f      	ldr	r0, [pc, #60]	; (8001080 <fonction+0x50>)
 8001044:	f005 fd40 	bl	8006ac8 <iprintf>

	for (int i = 0 ; i < argc ; i++) {
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	e00c      	b.n	8001068 <fonction+0x38>
		printf("arg numero %d = %s\r\n", i, argv[i]);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	4413      	add	r3, r2
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	68f9      	ldr	r1, [r7, #12]
 800105c:	4809      	ldr	r0, [pc, #36]	; (8001084 <fonction+0x54>)
 800105e:	f005 fd33 	bl	8006ac8 <iprintf>
	for (int i = 0 ; i < argc ; i++) {
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3301      	adds	r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fa      	ldr	r2, [r7, #12]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	429a      	cmp	r2, r3
 800106e:	dbee      	blt.n	800104e <fonction+0x1e>
	}

	return 0;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	08008cd0 	.word	0x08008cd0
 8001080:	08008ce4 	.word	0x08008ce4
 8001084:	08008cf0 	.word	0x08008cf0

08001088 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800108c:	f000 fe7b 	bl	8001d86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001090:	f000 f81e 	bl	80010d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001094:	f7ff ff3c 	bl	8000f10 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001098:	f000 fdb8 	bl	8001c0c <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 800109c:	f000 fbae 	bl	80017fc <MX_TIM1_Init>
  MX_TIM2_Init();
 80010a0:	f000 fc4c 	bl	800193c <MX_TIM2_Init>
  MX_TIM6_Init();
 80010a4:	f000 fc9e 	bl	80019e4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  shell_init();
 80010a8:	f000 f922 	bl	80012f0 <shell_init>
  shell_add("fonction", fonction, "Fonction exemple");
 80010ac:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <main+0x38>)
 80010ae:	4905      	ldr	r1, [pc, #20]	; (80010c4 <main+0x3c>)
 80010b0:	4805      	ldr	r0, [pc, #20]	; (80010c8 <main+0x40>)
 80010b2:	f000 f94f 	bl	8001354 <shell_add>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80010b6:	2100      	movs	r1, #0
 80010b8:	4804      	ldr	r0, [pc, #16]	; (80010cc <main+0x44>)
 80010ba:	f002 fae7 	bl	800368c <HAL_TIM_PWM_Start>
  //HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010be:	e7fe      	b.n	80010be <main+0x36>
 80010c0:	08008d08 	.word	0x08008d08
 80010c4:	08001031 	.word	0x08001031
 80010c8:	08008d1c 	.word	0x08008d1c
 80010cc:	20000358 	.word	0x20000358

080010d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b0a4      	sub	sp, #144	; 0x90
 80010d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010da:	2238      	movs	r2, #56	; 0x38
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f005 f880 	bl	80061e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010f4:	463b      	mov	r3, r7
 80010f6:	2244      	movs	r2, #68	; 0x44
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f005 f872 	bl	80061e4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001100:	2000      	movs	r0, #0
 8001102:	f001 fa3d 	bl	8002580 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001106:	2302      	movs	r3, #2
 8001108:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800110a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800110e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001110:	2340      	movs	r3, #64	; 0x40
 8001112:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001114:	2302      	movs	r3, #2
 8001116:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001118:	2302      	movs	r3, #2
 800111a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800111c:	2304      	movs	r3, #4
 800111e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001120:	2355      	movs	r3, #85	; 0x55
 8001122:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001126:	2302      	movs	r3, #2
 8001128:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800112c:	2302      	movs	r3, #2
 800112e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001132:	2302      	movs	r3, #2
 8001134:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001138:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800113c:	4618      	mov	r0, r3
 800113e:	f001 fad3 	bl	80026e8 <HAL_RCC_OscConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001148:	f000 f876 	bl	8001238 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800114c:	230f      	movs	r3, #15
 800114e:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001150:	2303      	movs	r3, #3
 8001152:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800115c:	2300      	movs	r3, #0
 800115e:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001160:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001164:	2104      	movs	r1, #4
 8001166:	4618      	mov	r0, r3
 8001168:	f001 fdd6 	bl	8002d18 <HAL_RCC_ClockConfig>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001172:	f000 f861 	bl	8001238 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001176:	2320      	movs	r3, #32
 8001178:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800117e:	463b      	mov	r3, r7
 8001180:	4618      	mov	r0, r3
 8001182:	f001 ffe5 	bl	8003150 <HAL_RCCEx_PeriphCLKConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800118c:	f000 f854 	bl	8001238 <Error_Handler>
  }
}
 8001190:	bf00      	nop
 8001192:	3790      	adds	r7, #144	; 0x90
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == LPUART1){
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a06      	ldr	r2, [pc, #24]	; (80011c0 <HAL_UART_RxCpltCallback+0x28>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d106      	bne.n	80011b8 <HAL_UART_RxCpltCallback+0x20>
		shell_char_received();
 80011aa:	f000 f911 	bl	80013d0 <shell_char_received>
		HAL_UART_Receive_IT(&hlpuart1, (uint8_t*)&c, 1);
 80011ae:	2201      	movs	r2, #1
 80011b0:	4904      	ldr	r1, [pc, #16]	; (80011c4 <HAL_UART_RxCpltCallback+0x2c>)
 80011b2:	4805      	ldr	r0, [pc, #20]	; (80011c8 <HAL_UART_RxCpltCallback+0x30>)
 80011b4:	f003 fc28 	bl	8004a08 <HAL_UART_Receive_IT>
	}
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40008000 	.word	0x40008000
 80011c4:	20000210 	.word	0x20000210
 80011c8:	200003f0 	.word	0x200003f0

080011cc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80011cc:	b590      	push	{r4, r7, lr}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a14      	ldr	r2, [pc, #80]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x60>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d121      	bne.n	8001222 <HAL_TIM_PeriodElapsedCallback+0x56>
		int16_t ticks = TIM2->CNT;
 80011de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e4:	81fb      	strh	r3, [r7, #14]
		TIM2->CNT = 0;
 80011e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011ea:	2200      	movs	r2, #0
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
		printf("ticks = %d\t speed = %0.2f tr/s\r\n",ticks,(float)(ticks*10)/40);
 80011ee:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 80011f2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80011f6:	4613      	mov	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	ee07 3a90 	vmov	s15, r3
 8001202:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001206:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001230 <HAL_TIM_PeriodElapsedCallback+0x64>
 800120a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800120e:	ee16 0a90 	vmov	r0, s13
 8001212:	f7ff f9d1 	bl	80005b8 <__aeabi_f2d>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4621      	mov	r1, r4
 800121c:	4805      	ldr	r0, [pc, #20]	; (8001234 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800121e:	f005 fc53 	bl	8006ac8 <iprintf>
	}
}
 8001222:	bf00      	nop
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	bd90      	pop	{r4, r7, pc}
 800122a:	bf00      	nop
 800122c:	40001000 	.word	0x40001000
 8001230:	42200000 	.word	0x42200000
 8001234:	08008d28 	.word	0x08008d28

08001238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800123c:	b672      	cpsid	i
}
 800123e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001240:	e7fe      	b.n	8001240 <Error_Handler+0x8>
	...

08001244 <__io_putchar>:
/**
 * Fonction indispensable pour utiliser printf() sur la liaison uart
 * @param ch Caractère à écrire sur la liaison uart
 * @return Caractère écrit sur la liaison uart
 */
int __io_putchar(int ch) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&SHELL_UART_DEVICE, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800124c:	1d39      	adds	r1, r7, #4
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	2201      	movs	r2, #1
 8001254:	4803      	ldr	r0, [pc, #12]	; (8001264 <__io_putchar+0x20>)
 8001256:	f003 fb41 	bl	80048dc <HAL_UART_Transmit>
	return ch;
 800125a:	687b      	ldr	r3, [r7, #4]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	200003f0 	.word	0x200003f0

08001268 <uart_write>:
 * Écriture sur la liaison uart
 * @param s Chaîne de caractères à écrire sur la liaison uart
 * @param size Longueur de la chaîne de caractère
 * @return size
 */
int uart_write(char *s, uint16_t size) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&SHELL_UART_DEVICE, (uint8_t*)s, size, 0xFFFF);
 8001274:	887a      	ldrh	r2, [r7, #2]
 8001276:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	4803      	ldr	r0, [pc, #12]	; (800128c <uart_write+0x24>)
 800127e:	f003 fb2d 	bl	80048dc <HAL_UART_Transmit>
	return size;
 8001282:	887b      	ldrh	r3, [r7, #2]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	200003f0 	.word	0x200003f0

08001290 <sh_help>:
 * @brief	Affichage du menu d'aide sur le shell
 * @param	argc
 * @param	argv
 * @retval	0
 */
int sh_help(int argc, char ** argv) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	e017      	b.n	80012d0 <sh_help+0x40>
		printf("%s : %s\r\n", shell_func_list[i].cmd, shell_func_list[i].description);
 80012a0:	4910      	ldr	r1, [pc, #64]	; (80012e4 <sh_help+0x54>)
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	4613      	mov	r3, r2
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	4413      	add	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	6819      	ldr	r1, [r3, #0]
 80012b0:	480c      	ldr	r0, [pc, #48]	; (80012e4 <sh_help+0x54>)
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	4613      	mov	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4413      	add	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4403      	add	r3, r0
 80012be:	3308      	adds	r3, #8
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	4808      	ldr	r0, [pc, #32]	; (80012e8 <sh_help+0x58>)
 80012c6:	f005 fbff 	bl	8006ac8 <iprintf>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	3301      	adds	r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <sh_help+0x5c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	68fa      	ldr	r2, [r7, #12]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	dbe2      	blt.n	80012a0 <sh_help+0x10>
	}
	return 0;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000240 	.word	0x20000240
 80012e8:	08008d4c 	.word	0x08008d4c
 80012ec:	2000023c 	.word	0x2000023c

080012f0 <shell_init>:

/**
 * @brief	Initialisation du shell
 */
void shell_init() {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
	printf("\r\n\r\n===== Shell =====\r\n");
 80012f6:	4811      	ldr	r0, [pc, #68]	; (800133c <shell_init+0x4c>)
 80012f8:	f005 fc6c 	bl	8006bd4 <puts>
	uart_write(prompt,sizeof(prompt));
 80012fc:	2111      	movs	r1, #17
 80012fe:	4810      	ldr	r0, [pc, #64]	; (8001340 <shell_init+0x50>)
 8001300:	f7ff ffb2 	bl	8001268 <uart_write>

	HAL_UART_Receive_IT(&SHELL_UART_DEVICE, (uint8_t*)&c, 1);
 8001304:	2201      	movs	r2, #1
 8001306:	490f      	ldr	r1, [pc, #60]	; (8001344 <shell_init+0x54>)
 8001308:	480f      	ldr	r0, [pc, #60]	; (8001348 <shell_init+0x58>)
 800130a:	f003 fb7d 	bl	8004a08 <HAL_UART_Receive_IT>

	shell_add("help", sh_help, (char *)"help");
 800130e:	4a0f      	ldr	r2, [pc, #60]	; (800134c <shell_init+0x5c>)
 8001310:	490f      	ldr	r1, [pc, #60]	; (8001350 <shell_init+0x60>)
 8001312:	480e      	ldr	r0, [pc, #56]	; (800134c <shell_init+0x5c>)
 8001314:	f000 f81e 	bl	8001354 <shell_add>

	for (int i = 0 ; i < 3 ; i++) {
 8001318:	2300      	movs	r3, #0
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	e005      	b.n	800132a <shell_init+0x3a>
		HAL_Delay(200);
 800131e:	20c8      	movs	r0, #200	; 0xc8
 8001320:	f000 fda2 	bl	8001e68 <HAL_Delay>
	for (int i = 0 ; i < 3 ; i++) {
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3301      	adds	r3, #1
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b02      	cmp	r3, #2
 800132e:	ddf6      	ble.n	800131e <shell_init+0x2e>
	}
}
 8001330:	bf00      	nop
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	08008d58 	.word	0x08008d58
 8001340:	20000000 	.word	0x20000000
 8001344:	20000210 	.word	0x20000210
 8001348:	200003f0 	.word	0x200003f0
 800134c:	08008d70 	.word	0x08008d70
 8001350:	08001291 	.word	0x08001291

08001354 <shell_add>:
 *	@param	c
 *	@param
 *	@param
 *	@retval	0
 */
int shell_add(char * cmd, int (* pfunc)(int argc, char ** argv), char * description) {
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
	if (shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8001360:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <shell_add+0x74>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b0f      	cmp	r3, #15
 8001366:	dc26      	bgt.n	80013b6 <shell_add+0x62>
		shell_func_list[shell_func_list_size].cmd = cmd;
 8001368:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <shell_add+0x74>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4917      	ldr	r1, [pc, #92]	; (80013cc <shell_add+0x78>)
 800136e:	4613      	mov	r3, r2
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	4413      	add	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	440b      	add	r3, r1
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <shell_add+0x74>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4912      	ldr	r1, [pc, #72]	; (80013cc <shell_add+0x78>)
 8001382:	4613      	mov	r3, r2
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	4413      	add	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	440b      	add	r3, r1
 800138c:	3304      	adds	r3, #4
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 8001392:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <shell_add+0x74>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	490d      	ldr	r1, [pc, #52]	; (80013cc <shell_add+0x78>)
 8001398:	4613      	mov	r3, r2
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	4413      	add	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	440b      	add	r3, r1
 80013a2:	3308      	adds	r3, #8
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 80013a8:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <shell_add+0x74>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	3301      	adds	r3, #1
 80013ae:	4a06      	ldr	r2, [pc, #24]	; (80013c8 <shell_add+0x74>)
 80013b0:	6013      	str	r3, [r2, #0]
		return 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	e001      	b.n	80013ba <shell_add+0x66>
	}

	return -1;
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	2000023c 	.word	0x2000023c
 80013cc:	20000240 	.word	0x20000240

080013d0 <shell_char_received>:

/**
 *	@brief	Traitement d'un caractère reçu
 */
void shell_char_received() {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0

	switch (c) {
 80013d4:	4b21      	ldr	r3, [pc, #132]	; (800145c <shell_char_received+0x8c>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b08      	cmp	r3, #8
 80013da:	d019      	beq.n	8001410 <shell_char_received+0x40>
 80013dc:	2b0d      	cmp	r3, #13
 80013de:	d126      	bne.n	800142e <shell_char_received+0x5e>

	case '\r':
		// Enter
		printf("\r\n");
 80013e0:	481f      	ldr	r0, [pc, #124]	; (8001460 <shell_char_received+0x90>)
 80013e2:	f005 fbf7 	bl	8006bd4 <puts>
		buf[pos++] = 0;
 80013e6:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <shell_char_received+0x94>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	1c5a      	adds	r2, r3, #1
 80013ec:	b2d1      	uxtb	r1, r2
 80013ee:	4a1d      	ldr	r2, [pc, #116]	; (8001464 <shell_char_received+0x94>)
 80013f0:	7011      	strb	r1, [r2, #0]
 80013f2:	461a      	mov	r2, r3
 80013f4:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <shell_char_received+0x98>)
 80013f6:	2100      	movs	r1, #0
 80013f8:	5499      	strb	r1, [r3, r2]
		//printf(":%s\r\n", buf);
		pos = 0;
 80013fa:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <shell_char_received+0x94>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	701a      	strb	r2, [r3, #0]
		shell_exec(buf);
 8001400:	4819      	ldr	r0, [pc, #100]	; (8001468 <shell_char_received+0x98>)
 8001402:	f000 f837 	bl	8001474 <shell_exec>
		uart_write(prompt,sizeof(prompt));
 8001406:	2111      	movs	r1, #17
 8001408:	4818      	ldr	r0, [pc, #96]	; (800146c <shell_char_received+0x9c>)
 800140a:	f7ff ff2d 	bl	8001268 <uart_write>
		break;
 800140e:	e023      	b.n	8001458 <shell_char_received+0x88>

	case '\b':
		// Delete
		if (pos > 0) {
 8001410:	4b14      	ldr	r3, [pc, #80]	; (8001464 <shell_char_received+0x94>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d01e      	beq.n	8001456 <shell_char_received+0x86>
			pos--;
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <shell_char_received+0x94>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	3b01      	subs	r3, #1
 800141e:	b2da      	uxtb	r2, r3
 8001420:	4b10      	ldr	r3, [pc, #64]	; (8001464 <shell_char_received+0x94>)
 8001422:	701a      	strb	r2, [r3, #0]
			uart_write(backspace, 3);
 8001424:	2103      	movs	r1, #3
 8001426:	4812      	ldr	r0, [pc, #72]	; (8001470 <shell_char_received+0xa0>)
 8001428:	f7ff ff1e 	bl	8001268 <uart_write>
		}
		break;
 800142c:	e013      	b.n	8001456 <shell_char_received+0x86>

	default:
		if (pos < BUFFER_SIZE) {
 800142e:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <shell_char_received+0x94>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b27      	cmp	r3, #39	; 0x27
 8001434:	d810      	bhi.n	8001458 <shell_char_received+0x88>
			uart_write(&c, 1);
 8001436:	2101      	movs	r1, #1
 8001438:	4808      	ldr	r0, [pc, #32]	; (800145c <shell_char_received+0x8c>)
 800143a:	f7ff ff15 	bl	8001268 <uart_write>
			buf[pos++] = c;
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <shell_char_received+0x94>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	1c5a      	adds	r2, r3, #1
 8001444:	b2d1      	uxtb	r1, r2
 8001446:	4a07      	ldr	r2, [pc, #28]	; (8001464 <shell_char_received+0x94>)
 8001448:	7011      	strb	r1, [r2, #0]
 800144a:	461a      	mov	r2, r3
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <shell_char_received+0x8c>)
 800144e:	7819      	ldrb	r1, [r3, #0]
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <shell_char_received+0x98>)
 8001452:	5499      	strb	r1, [r3, r2]
		}
	}
}
 8001454:	e000      	b.n	8001458 <shell_char_received+0x88>
		break;
 8001456:	bf00      	nop
}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000210 	.word	0x20000210
 8001460:	08008d78 	.word	0x08008d78
 8001464:	20000211 	.word	0x20000211
 8001468:	20000214 	.word	0x20000214
 800146c:	20000000 	.word	0x20000000
 8001470:	20000014 	.word	0x20000014

08001474 <shell_exec>:
/**
 *	@brief	Execution d'une commande du shell
 *	@param	cmd
 *	@retval
 */
int shell_exec(char * cmd) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b092      	sub	sp, #72	; 0x48
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	int argc;
	char * argv[ARGC_MAX];
	char *p;

	// Séparation du header et des paramètres
	char header[SHELL_CMD_MAX_SIZE] = "";
 800147c:	2300      	movs	r3, #0
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
	int h = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	63fb      	str	r3, [r7, #60]	; 0x3c

	while(cmd[h] != ' ' && h < SHELL_CMD_MAX_SIZE){
 8001490:	e00c      	b.n	80014ac <shell_exec+0x38>
		header[h] = cmd[h];
 8001492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	4413      	add	r3, r2
 8001498:	7819      	ldrb	r1, [r3, #0]
 800149a:	f107 0208 	add.w	r2, r7, #8
 800149e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014a0:	4413      	add	r3, r2
 80014a2:	460a      	mov	r2, r1
 80014a4:	701a      	strb	r2, [r3, #0]
		h++;
 80014a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014a8:	3301      	adds	r3, #1
 80014aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(cmd[h] != ' ' && h < SHELL_CMD_MAX_SIZE){
 80014ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b20      	cmp	r3, #32
 80014b6:	d002      	beq.n	80014be <shell_exec+0x4a>
 80014b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014ba:	2b0f      	cmp	r3, #15
 80014bc:	dde9      	ble.n	8001492 <shell_exec+0x1e>
	}
	header[h] = '\0';
 80014be:	f107 0208 	add.w	r2, r7, #8
 80014c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014c4:	4413      	add	r3, r2
 80014c6:	2200      	movs	r2, #0
 80014c8:	701a      	strb	r2, [r3, #0]

	// Recherche de la commande et paramètres
	for(int i = 0 ; i < shell_func_list_size ; i++) {
 80014ca:	2300      	movs	r3, #0
 80014cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80014ce:	e046      	b.n	800155e <shell_exec+0xea>
		if (!strcmp(shell_func_list[i].cmd, header)) {
 80014d0:	492a      	ldr	r1, [pc, #168]	; (800157c <shell_exec+0x108>)
 80014d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014d4:	4613      	mov	r3, r2
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4413      	add	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	440b      	add	r3, r1
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f107 0208 	add.w	r2, r7, #8
 80014e4:	4611      	mov	r1, r2
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7fe fe9a 	bl	8000220 <strcmp>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d132      	bne.n	8001558 <shell_exec+0xe4>
			argc = 1;
 80014f2:	2301      	movs	r3, #1
 80014f4:	647b      	str	r3, [r7, #68]	; 0x44
			argv[0] = cmd;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	61bb      	str	r3, [r7, #24]

			for(p = cmd ; *p != '\0' && argc < ARGC_MAX ; p++){
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	643b      	str	r3, [r7, #64]	; 0x40
 80014fe:	e014      	b.n	800152a <shell_exec+0xb6>
				if(*p == ' ') {
 8001500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b20      	cmp	r3, #32
 8001506:	d10d      	bne.n	8001524 <shell_exec+0xb0>
					*p = '\0';
 8001508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 800150e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001510:	1c5a      	adds	r2, r3, #1
 8001512:	647a      	str	r2, [r7, #68]	; 0x44
 8001514:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001516:	3201      	adds	r2, #1
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800151e:	440b      	add	r3, r1
 8001520:	f843 2c30 	str.w	r2, [r3, #-48]
			for(p = cmd ; *p != '\0' && argc < ARGC_MAX ; p++){
 8001524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001526:	3301      	adds	r3, #1
 8001528:	643b      	str	r3, [r7, #64]	; 0x40
 800152a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d002      	beq.n	8001538 <shell_exec+0xc4>
 8001532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001534:	2b07      	cmp	r3, #7
 8001536:	dde3      	ble.n	8001500 <shell_exec+0x8c>
				}
			}

			return shell_func_list[i].func(argc, argv);
 8001538:	4910      	ldr	r1, [pc, #64]	; (800157c <shell_exec+0x108>)
 800153a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800153c:	4613      	mov	r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	4413      	add	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	440b      	add	r3, r1
 8001546:	3304      	adds	r3, #4
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f107 0218 	add.w	r2, r7, #24
 800154e:	4611      	mov	r1, r2
 8001550:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001552:	4798      	blx	r3
 8001554:	4603      	mov	r3, r0
 8001556:	e00d      	b.n	8001574 <shell_exec+0x100>
	for(int i = 0 ; i < shell_func_list_size ; i++) {
 8001558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800155a:	3301      	adds	r3, #1
 800155c:	63bb      	str	r3, [r7, #56]	; 0x38
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <shell_exec+0x10c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001564:	429a      	cmp	r2, r3
 8001566:	dbb3      	blt.n	80014d0 <shell_exec+0x5c>
		}
	}
	printf("%s: command not found\r\n", cmd);
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	4806      	ldr	r0, [pc, #24]	; (8001584 <shell_exec+0x110>)
 800156c:	f005 faac 	bl	8006ac8 <iprintf>
	return -1;
 8001570:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001574:	4618      	mov	r0, r3
 8001576:	3748      	adds	r7, #72	; 0x48
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000240 	.word	0x20000240
 8001580:	2000023c 	.word	0x2000023c
 8001584:	08008d7c 	.word	0x08008d7c

08001588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158e:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <HAL_MspInit+0x44>)
 8001590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001592:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <HAL_MspInit+0x44>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6613      	str	r3, [r2, #96]	; 0x60
 800159a:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <HAL_MspInit+0x44>)
 800159c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <HAL_MspInit+0x44>)
 80015a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015aa:	4a08      	ldr	r2, [pc, #32]	; (80015cc <HAL_MspInit+0x44>)
 80015ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b0:	6593      	str	r3, [r2, #88]	; 0x58
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_MspInit+0x44>)
 80015b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80015be:	f001 f883 	bl	80026c8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000

080015d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <NMI_Handler+0x4>

080015d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015da:	e7fe      	b.n	80015da <HardFault_Handler+0x4>

080015dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <MemManage_Handler+0x4>

080015e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <BusFault_Handler+0x4>

080015e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <UsageFault_Handler+0x4>

080015ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800161c:	f000 fc06 	bl	8001e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}

08001624 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <TIM6_DAC_IRQHandler+0x10>)
 800162a:	f002 f9d5 	bl	80039d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	2000030c 	.word	0x2000030c

08001638 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <LPUART1_IRQHandler+0x10>)
 800163e:	f003 fa29 	bl	8004a94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200003f0 	.word	0x200003f0

0800164c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
	return 1;
 8001650:	2301      	movs	r3, #1
}
 8001652:	4618      	mov	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <_kill>:

int _kill(int pid, int sig)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001666:	f004 fd93 	bl	8006190 <__errno>
 800166a:	4603      	mov	r3, r0
 800166c:	2216      	movs	r2, #22
 800166e:	601a      	str	r2, [r3, #0]
	return -1;
 8001670:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001674:	4618      	mov	r0, r3
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <_exit>:

void _exit (int status)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001684:	f04f 31ff 	mov.w	r1, #4294967295
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff ffe7 	bl	800165c <_kill>
	while (1) {}		/* Make sure we hang here */
 800168e:	e7fe      	b.n	800168e <_exit+0x12>

08001690 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	e00a      	b.n	80016b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016a2:	f3af 8000 	nop.w
 80016a6:	4601      	mov	r1, r0
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	1c5a      	adds	r2, r3, #1
 80016ac:	60ba      	str	r2, [r7, #8]
 80016ae:	b2ca      	uxtb	r2, r1
 80016b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	3301      	adds	r3, #1
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	429a      	cmp	r2, r3
 80016be:	dbf0      	blt.n	80016a2 <_read+0x12>
	}

return len;
 80016c0:	687b      	ldr	r3, [r7, #4]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b086      	sub	sp, #24
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	60f8      	str	r0, [r7, #12]
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	e009      	b.n	80016f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	1c5a      	adds	r2, r3, #1
 80016e0:	60ba      	str	r2, [r7, #8]
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fdad 	bl	8001244 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	3301      	adds	r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	dbf1      	blt.n	80016dc <_write+0x12>
	}
	return len;
 80016f8:	687b      	ldr	r3, [r7, #4]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <_close>:

int _close(int file)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
	return -1;
 800170a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800170e:	4618      	mov	r0, r3
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800172a:	605a      	str	r2, [r3, #4]
	return 0;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <_isatty>:

int _isatty(int file)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
	return 1;
 8001742:	2301      	movs	r3, #1
}
 8001744:	4618      	mov	r0, r3
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
	return 0;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
	...

0800176c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001774:	4a14      	ldr	r2, [pc, #80]	; (80017c8 <_sbrk+0x5c>)
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <_sbrk+0x60>)
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001780:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <_sbrk+0x64>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d102      	bne.n	800178e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001788:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <_sbrk+0x64>)
 800178a:	4a12      	ldr	r2, [pc, #72]	; (80017d4 <_sbrk+0x68>)
 800178c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <_sbrk+0x64>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	429a      	cmp	r2, r3
 800179a:	d207      	bcs.n	80017ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800179c:	f004 fcf8 	bl	8006190 <__errno>
 80017a0:	4603      	mov	r3, r0
 80017a2:	220c      	movs	r2, #12
 80017a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017a6:	f04f 33ff 	mov.w	r3, #4294967295
 80017aa:	e009      	b.n	80017c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <_sbrk+0x64>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017b2:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <_sbrk+0x64>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	4a05      	ldr	r2, [pc, #20]	; (80017d0 <_sbrk+0x64>)
 80017bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017be:	68fb      	ldr	r3, [r7, #12]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20008000 	.word	0x20008000
 80017cc:	00000400 	.word	0x00000400
 80017d0:	20000300 	.word	0x20000300
 80017d4:	20000498 	.word	0x20000498

080017d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <SystemInit+0x20>)
 80017de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017e2:	4a05      	ldr	r2, [pc, #20]	; (80017f8 <SystemInit+0x20>)
 80017e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b098      	sub	sp, #96	; 0x60
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001802:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800180e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
 800181c:	611a      	str	r2, [r3, #16]
 800181e:	615a      	str	r2, [r3, #20]
 8001820:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	2234      	movs	r2, #52	; 0x34
 8001826:	2100      	movs	r1, #0
 8001828:	4618      	mov	r0, r3
 800182a:	f004 fcdb 	bl	80061e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800182e:	4b41      	ldr	r3, [pc, #260]	; (8001934 <MX_TIM1_Init+0x138>)
 8001830:	4a41      	ldr	r2, [pc, #260]	; (8001938 <MX_TIM1_Init+0x13c>)
 8001832:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10;
 8001834:	4b3f      	ldr	r3, [pc, #252]	; (8001934 <MX_TIM1_Init+0x138>)
 8001836:	220a      	movs	r2, #10
 8001838:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800183a:	4b3e      	ldr	r3, [pc, #248]	; (8001934 <MX_TIM1_Init+0x138>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8001840:	4b3c      	ldr	r3, [pc, #240]	; (8001934 <MX_TIM1_Init+0x138>)
 8001842:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001846:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001848:	4b3a      	ldr	r3, [pc, #232]	; (8001934 <MX_TIM1_Init+0x138>)
 800184a:	2200      	movs	r2, #0
 800184c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800184e:	4b39      	ldr	r3, [pc, #228]	; (8001934 <MX_TIM1_Init+0x138>)
 8001850:	2200      	movs	r2, #0
 8001852:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001854:	4b37      	ldr	r3, [pc, #220]	; (8001934 <MX_TIM1_Init+0x138>)
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800185a:	4836      	ldr	r0, [pc, #216]	; (8001934 <MX_TIM1_Init+0x138>)
 800185c:	f001 febf 	bl	80035de <HAL_TIM_OC_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001866:	f7ff fce7 	bl	8001238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800186a:	2300      	movs	r3, #0
 800186c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800186e:	2300      	movs	r3, #0
 8001870:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001872:	2300      	movs	r3, #0
 8001874:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001876:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800187a:	4619      	mov	r1, r3
 800187c:	482d      	ldr	r0, [pc, #180]	; (8001934 <MX_TIM1_Init+0x138>)
 800187e:	f002 fe75 	bl	800456c <HAL_TIMEx_MasterConfigSynchronization>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001888:	f7ff fcd6 	bl	8001238 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800188c:	2300      	movs	r3, #0
 800188e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001894:	2300      	movs	r3, #0
 8001896:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001898:	2300      	movs	r3, #0
 800189a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018a0:	2300      	movs	r3, #0
 80018a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018a4:	2300      	movs	r3, #0
 80018a6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018ac:	2200      	movs	r2, #0
 80018ae:	4619      	mov	r1, r3
 80018b0:	4820      	ldr	r0, [pc, #128]	; (8001934 <MX_TIM1_Init+0x138>)
 80018b2:	f002 fa11 	bl	8003cd8 <HAL_TIM_OC_ConfigChannel>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80018bc:	f7ff fcbc 	bl	8001238 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018c4:	2204      	movs	r2, #4
 80018c6:	4619      	mov	r1, r3
 80018c8:	481a      	ldr	r0, [pc, #104]	; (8001934 <MX_TIM1_Init+0x138>)
 80018ca:	f002 fa05 	bl	8003cd8 <HAL_TIM_OC_ConfigChannel>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80018d4:	f7ff fcb0 	bl	8001238 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018dc:	2300      	movs	r3, #0
 80018de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 203;
 80018e4:	23cb      	movs	r3, #203	; 0xcb
 80018e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80018f6:	2300      	movs	r3, #0
 80018f8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001902:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001908:	2300      	movs	r3, #0
 800190a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800190c:	2300      	movs	r3, #0
 800190e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	4619      	mov	r1, r3
 8001914:	4807      	ldr	r0, [pc, #28]	; (8001934 <MX_TIM1_Init+0x138>)
 8001916:	f002 feab 	bl	8004670 <HAL_TIMEx_ConfigBreakDeadTime>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001920:	f7ff fc8a 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001924:	4803      	ldr	r0, [pc, #12]	; (8001934 <MX_TIM1_Init+0x138>)
 8001926:	f000 f91b 	bl	8001b60 <HAL_TIM_MspPostInit>

}
 800192a:	bf00      	nop
 800192c:	3760      	adds	r7, #96	; 0x60
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000358 	.word	0x20000358
 8001938:	40012c00 	.word	0x40012c00

0800193c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08c      	sub	sp, #48	; 0x30
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001942:	f107 030c 	add.w	r3, r7, #12
 8001946:	2224      	movs	r2, #36	; 0x24
 8001948:	2100      	movs	r1, #0
 800194a:	4618      	mov	r0, r3
 800194c:	f004 fc4a 	bl	80061e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001950:	463b      	mov	r3, r7
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800195a:	4b21      	ldr	r3, [pc, #132]	; (80019e0 <MX_TIM2_Init+0xa4>)
 800195c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001960:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001962:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <MX_TIM2_Init+0xa4>)
 8001964:	2200      	movs	r2, #0
 8001966:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001968:	4b1d      	ldr	r3, [pc, #116]	; (80019e0 <MX_TIM2_Init+0xa4>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 800196e:	4b1c      	ldr	r3, [pc, #112]	; (80019e0 <MX_TIM2_Init+0xa4>)
 8001970:	f04f 32ff 	mov.w	r2, #4294967295
 8001974:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001976:	4b1a      	ldr	r3, [pc, #104]	; (80019e0 <MX_TIM2_Init+0xa4>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800197c:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <MX_TIM2_Init+0xa4>)
 800197e:	2200      	movs	r2, #0
 8001980:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001982:	2301      	movs	r3, #1
 8001984:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800198a:	2301      	movs	r3, #1
 800198c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800198e:	2300      	movs	r3, #0
 8001990:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001996:	2300      	movs	r3, #0
 8001998:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800199a:	2301      	movs	r3, #1
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800199e:	2300      	movs	r3, #0
 80019a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80019a6:	f107 030c 	add.w	r3, r7, #12
 80019aa:	4619      	mov	r1, r3
 80019ac:	480c      	ldr	r0, [pc, #48]	; (80019e0 <MX_TIM2_Init+0xa4>)
 80019ae:	f001 ff6d 	bl	800388c <HAL_TIM_Encoder_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80019b8:	f7ff fc3e 	bl	8001238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019bc:	2300      	movs	r3, #0
 80019be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019c4:	463b      	mov	r3, r7
 80019c6:	4619      	mov	r1, r3
 80019c8:	4805      	ldr	r0, [pc, #20]	; (80019e0 <MX_TIM2_Init+0xa4>)
 80019ca:	f002 fdcf 	bl	800456c <HAL_TIMEx_MasterConfigSynchronization>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80019d4:	f7ff fc30 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019d8:	bf00      	nop
 80019da:	3730      	adds	r7, #48	; 0x30
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	200003a4 	.word	0x200003a4

080019e4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80019f4:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <MX_TIM6_Init+0x68>)
 80019f6:	4a16      	ldr	r2, [pc, #88]	; (8001a50 <MX_TIM6_Init+0x6c>)
 80019f8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 17000-1;
 80019fa:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <MX_TIM6_Init+0x68>)
 80019fc:	f244 2267 	movw	r2, #16999	; 0x4267
 8001a00:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a02:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <MX_TIM6_Init+0x68>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001a08:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <MX_TIM6_Init+0x68>)
 8001a0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a0e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a10:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <MX_TIM6_Init+0x68>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001a16:	480d      	ldr	r0, [pc, #52]	; (8001a4c <MX_TIM6_Init+0x68>)
 8001a18:	f001 fd8a 	bl	8003530 <HAL_TIM_Base_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001a22:	f7ff fc09 	bl	8001238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a26:	2300      	movs	r3, #0
 8001a28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	4619      	mov	r1, r3
 8001a32:	4806      	ldr	r0, [pc, #24]	; (8001a4c <MX_TIM6_Init+0x68>)
 8001a34:	f002 fd9a 	bl	800456c <HAL_TIMEx_MasterConfigSynchronization>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001a3e:	f7ff fbfb 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	2000030c 	.word	0x2000030c
 8001a50:	40001000 	.word	0x40001000

08001a54 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a0a      	ldr	r2, [pc, #40]	; (8001a8c <HAL_TIM_OC_MspInit+0x38>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d10b      	bne.n	8001a7e <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a66:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <HAL_TIM_OC_MspInit+0x3c>)
 8001a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a6a:	4a09      	ldr	r2, [pc, #36]	; (8001a90 <HAL_TIM_OC_MspInit+0x3c>)
 8001a6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a70:	6613      	str	r3, [r2, #96]	; 0x60
 8001a72:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <HAL_TIM_OC_MspInit+0x3c>)
 8001a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001a7e:	bf00      	nop
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40012c00 	.word	0x40012c00
 8001a90:	40021000 	.word	0x40021000

08001a94 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	; 0x28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab4:	d128      	bne.n	8001b08 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ab6:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aba:	4a15      	ldr	r2, [pc, #84]	; (8001b10 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ac2:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ace:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad2:	4a0f      	ldr	r2, [pc, #60]	; (8001b10 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ada:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2300      	movs	r3, #0
 8001af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001af6:	2301      	movs	r3, #1
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	4619      	mov	r1, r3
 8001b00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b04:	f000 fba2 	bl	800224c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001b08:	bf00      	nop
 8001b0a:	3728      	adds	r7, #40	; 0x28
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40021000 	.word	0x40021000

08001b14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a0d      	ldr	r2, [pc, #52]	; (8001b58 <HAL_TIM_Base_MspInit+0x44>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d113      	bne.n	8001b4e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b26:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <HAL_TIM_Base_MspInit+0x48>)
 8001b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2a:	4a0c      	ldr	r2, [pc, #48]	; (8001b5c <HAL_TIM_Base_MspInit+0x48>)
 8001b2c:	f043 0310 	orr.w	r3, r3, #16
 8001b30:	6593      	str	r3, [r2, #88]	; 0x58
 8001b32:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <HAL_TIM_Base_MspInit+0x48>)
 8001b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b36:	f003 0310 	and.w	r3, r3, #16
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2100      	movs	r1, #0
 8001b42:	2036      	movs	r0, #54	; 0x36
 8001b44:	f000 fa8d 	bl	8002062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b48:	2036      	movs	r0, #54	; 0x36
 8001b4a:	f000 faa4 	bl	8002096 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001b4e:	bf00      	nop
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40001000 	.word	0x40001000
 8001b5c:	40021000 	.word	0x40021000

08001b60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	; 0x28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a20      	ldr	r2, [pc, #128]	; (8001c00 <HAL_TIM_MspPostInit+0xa0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d13a      	bne.n	8001bf8 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b82:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <HAL_TIM_MspPostInit+0xa4>)
 8001b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b86:	4a1f      	ldr	r2, [pc, #124]	; (8001c04 <HAL_TIM_MspPostInit+0xa4>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b8e:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <HAL_TIM_MspPostInit+0xa4>)
 8001b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <HAL_TIM_MspPostInit+0xa4>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9e:	4a19      	ldr	r2, [pc, #100]	; (8001c04 <HAL_TIM_MspPostInit+0xa4>)
 8001ba0:	f043 0302 	orr.w	r3, r3, #2
 8001ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ba6:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <HAL_TIM_MspPostInit+0xa4>)
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001bb2:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001bc4:	2306      	movs	r3, #6
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd2:	f000 fb3b 	bl	800224c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001bd6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2300      	movs	r3, #0
 8001be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001be8:	2306      	movs	r3, #6
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4805      	ldr	r0, [pc, #20]	; (8001c08 <HAL_TIM_MspPostInit+0xa8>)
 8001bf4:	f000 fb2a 	bl	800224c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001bf8:	bf00      	nop
 8001bfa:	3728      	adds	r7, #40	; 0x28
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40012c00 	.word	0x40012c00
 8001c04:	40021000 	.word	0x40021000
 8001c08:	48000400 	.word	0x48000400

08001c0c <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001c10:	4b21      	ldr	r3, [pc, #132]	; (8001c98 <MX_LPUART1_UART_Init+0x8c>)
 8001c12:	4a22      	ldr	r2, [pc, #136]	; (8001c9c <MX_LPUART1_UART_Init+0x90>)
 8001c14:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001c16:	4b20      	ldr	r3, [pc, #128]	; (8001c98 <MX_LPUART1_UART_Init+0x8c>)
 8001c18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c1c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1e:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <MX_LPUART1_UART_Init+0x8c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001c24:	4b1c      	ldr	r3, [pc, #112]	; (8001c98 <MX_LPUART1_UART_Init+0x8c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001c2a:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <MX_LPUART1_UART_Init+0x8c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001c30:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <MX_LPUART1_UART_Init+0x8c>)
 8001c32:	220c      	movs	r2, #12
 8001c34:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c36:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <MX_LPUART1_UART_Init+0x8c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c3c:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <MX_LPUART1_UART_Init+0x8c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c42:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <MX_LPUART1_UART_Init+0x8c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <MX_LPUART1_UART_Init+0x8c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001c4e:	4812      	ldr	r0, [pc, #72]	; (8001c98 <MX_LPUART1_UART_Init+0x8c>)
 8001c50:	f002 fdf4 	bl	800483c <HAL_UART_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001c5a:	f7ff faed 	bl	8001238 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c5e:	2100      	movs	r1, #0
 8001c60:	480d      	ldr	r0, [pc, #52]	; (8001c98 <MX_LPUART1_UART_Init+0x8c>)
 8001c62:	f004 f9ca 	bl	8005ffa <HAL_UARTEx_SetTxFifoThreshold>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001c6c:	f7ff fae4 	bl	8001238 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c70:	2100      	movs	r1, #0
 8001c72:	4809      	ldr	r0, [pc, #36]	; (8001c98 <MX_LPUART1_UART_Init+0x8c>)
 8001c74:	f004 f9ff 	bl	8006076 <HAL_UARTEx_SetRxFifoThreshold>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001c7e:	f7ff fadb 	bl	8001238 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001c82:	4805      	ldr	r0, [pc, #20]	; (8001c98 <MX_LPUART1_UART_Init+0x8c>)
 8001c84:	f004 f980 	bl	8005f88 <HAL_UARTEx_DisableFifoMode>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001c8e:	f7ff fad3 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	200003f0 	.word	0x200003f0
 8001c9c:	40008000 	.word	0x40008000

08001ca0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	; 0x28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a1b      	ldr	r2, [pc, #108]	; (8001d2c <HAL_UART_MspInit+0x8c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d130      	bne.n	8001d24 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001cc2:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <HAL_UART_MspInit+0x90>)
 8001cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc6:	4a1a      	ldr	r2, [pc, #104]	; (8001d30 <HAL_UART_MspInit+0x90>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001cce:	4b18      	ldr	r3, [pc, #96]	; (8001d30 <HAL_UART_MspInit+0x90>)
 8001cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <HAL_UART_MspInit+0x90>)
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cde:	4a14      	ldr	r2, [pc, #80]	; (8001d30 <HAL_UART_MspInit+0x90>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ce6:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <HAL_UART_MspInit+0x90>)
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001cf2:	230c      	movs	r3, #12
 8001cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001d02:	230c      	movs	r3, #12
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d06:	f107 0314 	add.w	r3, r7, #20
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d10:	f000 fa9c 	bl	800224c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001d14:	2200      	movs	r2, #0
 8001d16:	2100      	movs	r1, #0
 8001d18:	205b      	movs	r0, #91	; 0x5b
 8001d1a:	f000 f9a2 	bl	8002062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001d1e:	205b      	movs	r0, #91	; 0x5b
 8001d20:	f000 f9b9 	bl	8002096 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001d24:	bf00      	nop
 8001d26:	3728      	adds	r7, #40	; 0x28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40008000 	.word	0x40008000
 8001d30:	40021000 	.word	0x40021000

08001d34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d34:	480d      	ldr	r0, [pc, #52]	; (8001d6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d36:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d38:	480d      	ldr	r0, [pc, #52]	; (8001d70 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d3a:	490e      	ldr	r1, [pc, #56]	; (8001d74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d3c:	4a0e      	ldr	r2, [pc, #56]	; (8001d78 <LoopForever+0xe>)
  movs r3, #0
 8001d3e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001d40:	e002      	b.n	8001d48 <LoopCopyDataInit>

08001d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d46:	3304      	adds	r3, #4

08001d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d4c:	d3f9      	bcc.n	8001d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d4e:	4a0b      	ldr	r2, [pc, #44]	; (8001d7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d50:	4c0b      	ldr	r4, [pc, #44]	; (8001d80 <LoopForever+0x16>)
  movs r3, #0
 8001d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d54:	e001      	b.n	8001d5a <LoopFillZerobss>

08001d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d58:	3204      	adds	r2, #4

08001d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d5c:	d3fb      	bcc.n	8001d56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d5e:	f7ff fd3b 	bl	80017d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d62:	f004 fa1b 	bl	800619c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d66:	f7ff f98f 	bl	8001088 <main>

08001d6a <LoopForever>:

LoopForever:
    b LoopForever
 8001d6a:	e7fe      	b.n	8001d6a <LoopForever>
  ldr   r0, =_estack
 8001d6c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d74:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001d78:	080091c4 	.word	0x080091c4
  ldr r2, =_sbss
 8001d7c:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001d80:	20000494 	.word	0x20000494

08001d84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d84:	e7fe      	b.n	8001d84 <ADC1_2_IRQHandler>

08001d86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d90:	2003      	movs	r0, #3
 8001d92:	f000 f95b 	bl	800204c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d96:	2000      	movs	r0, #0
 8001d98:	f000 f80e 	bl	8001db8 <HAL_InitTick>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d002      	beq.n	8001da8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	71fb      	strb	r3, [r7, #7]
 8001da6:	e001      	b.n	8001dac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001da8:	f7ff fbee 	bl	8001588 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dac:	79fb      	ldrb	r3, [r7, #7]

}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001dc4:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <HAL_InitTick+0x68>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d022      	beq.n	8001e12 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001dcc:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <HAL_InitTick+0x6c>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <HAL_InitTick+0x68>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001dd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de0:	4618      	mov	r0, r3
 8001de2:	f000 f966 	bl	80020b2 <HAL_SYSTICK_Config>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10f      	bne.n	8001e0c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b0f      	cmp	r3, #15
 8001df0:	d809      	bhi.n	8001e06 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df2:	2200      	movs	r2, #0
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfa:	f000 f932 	bl	8002062 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dfe:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <HAL_InitTick+0x70>)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	e007      	b.n	8001e16 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	73fb      	strb	r3, [r7, #15]
 8001e0a:	e004      	b.n	8001e16 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	73fb      	strb	r3, [r7, #15]
 8001e10:	e001      	b.n	8001e16 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20000020 	.word	0x20000020
 8001e24:	20000018 	.word	0x20000018
 8001e28:	2000001c 	.word	0x2000001c

08001e2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e30:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <HAL_IncTick+0x1c>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_IncTick+0x20>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4413      	add	r3, r2
 8001e3a:	4a03      	ldr	r2, [pc, #12]	; (8001e48 <HAL_IncTick+0x1c>)
 8001e3c:	6013      	str	r3, [r2, #0]
}
 8001e3e:	bf00      	nop
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	20000480 	.word	0x20000480
 8001e4c:	20000020 	.word	0x20000020

08001e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return uwTick;
 8001e54:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <HAL_GetTick+0x14>)
 8001e56:	681b      	ldr	r3, [r3, #0]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	20000480 	.word	0x20000480

08001e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e70:	f7ff ffee 	bl	8001e50 <HAL_GetTick>
 8001e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e80:	d004      	beq.n	8001e8c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e82:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <HAL_Delay+0x40>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	4413      	add	r3, r2
 8001e8a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e8c:	bf00      	nop
 8001e8e:	f7ff ffdf 	bl	8001e50 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d8f7      	bhi.n	8001e8e <HAL_Delay+0x26>
  {
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	bf00      	nop
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20000020 	.word	0x20000020

08001eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ede:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	60d3      	str	r3, [r2, #12]
}
 8001ee4:	bf00      	nop
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef8:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <__NVIC_GetPriorityGrouping+0x18>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	0a1b      	lsrs	r3, r3, #8
 8001efe:	f003 0307 	and.w	r3, r3, #7
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	db0b      	blt.n	8001f3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	f003 021f 	and.w	r2, r3, #31
 8001f28:	4907      	ldr	r1, [pc, #28]	; (8001f48 <__NVIC_EnableIRQ+0x38>)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	095b      	lsrs	r3, r3, #5
 8001f30:	2001      	movs	r0, #1
 8001f32:	fa00 f202 	lsl.w	r2, r0, r2
 8001f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	e000e100 	.word	0xe000e100

08001f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	6039      	str	r1, [r7, #0]
 8001f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	db0a      	blt.n	8001f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	490c      	ldr	r1, [pc, #48]	; (8001f98 <__NVIC_SetPriority+0x4c>)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	0112      	lsls	r2, r2, #4
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	440b      	add	r3, r1
 8001f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f74:	e00a      	b.n	8001f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	4908      	ldr	r1, [pc, #32]	; (8001f9c <__NVIC_SetPriority+0x50>)
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	3b04      	subs	r3, #4
 8001f84:	0112      	lsls	r2, r2, #4
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	440b      	add	r3, r1
 8001f8a:	761a      	strb	r2, [r3, #24]
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000e100 	.word	0xe000e100
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f1c3 0307 	rsb	r3, r3, #7
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	bf28      	it	cs
 8001fbe:	2304      	movcs	r3, #4
 8001fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	2b06      	cmp	r3, #6
 8001fc8:	d902      	bls.n	8001fd0 <NVIC_EncodePriority+0x30>
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	3b03      	subs	r3, #3
 8001fce:	e000      	b.n	8001fd2 <NVIC_EncodePriority+0x32>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43da      	mvns	r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff2:	43d9      	mvns	r1, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff8:	4313      	orrs	r3, r2
         );
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3724      	adds	r7, #36	; 0x24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
	...

08002008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3b01      	subs	r3, #1
 8002014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002018:	d301      	bcc.n	800201e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800201a:	2301      	movs	r3, #1
 800201c:	e00f      	b.n	800203e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800201e:	4a0a      	ldr	r2, [pc, #40]	; (8002048 <SysTick_Config+0x40>)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3b01      	subs	r3, #1
 8002024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002026:	210f      	movs	r1, #15
 8002028:	f04f 30ff 	mov.w	r0, #4294967295
 800202c:	f7ff ff8e 	bl	8001f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002030:	4b05      	ldr	r3, [pc, #20]	; (8002048 <SysTick_Config+0x40>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002036:	4b04      	ldr	r3, [pc, #16]	; (8002048 <SysTick_Config+0x40>)
 8002038:	2207      	movs	r2, #7
 800203a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	e000e010 	.word	0xe000e010

0800204c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff ff29 	bl	8001eac <__NVIC_SetPriorityGrouping>
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b086      	sub	sp, #24
 8002066:	af00      	add	r7, sp, #0
 8002068:	4603      	mov	r3, r0
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	607a      	str	r2, [r7, #4]
 800206e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002070:	f7ff ff40 	bl	8001ef4 <__NVIC_GetPriorityGrouping>
 8002074:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	68b9      	ldr	r1, [r7, #8]
 800207a:	6978      	ldr	r0, [r7, #20]
 800207c:	f7ff ff90 	bl	8001fa0 <NVIC_EncodePriority>
 8002080:	4602      	mov	r2, r0
 8002082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002086:	4611      	mov	r1, r2
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff ff5f 	bl	8001f4c <__NVIC_SetPriority>
}
 800208e:	bf00      	nop
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	4603      	mov	r3, r0
 800209e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ff33 	bl	8001f10 <__NVIC_EnableIRQ>
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff ffa4 	bl	8002008 <SysTick_Config>
 80020c0:	4603      	mov	r3, r0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b085      	sub	sp, #20
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d005      	beq.n	80020ee <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2204      	movs	r2, #4
 80020e6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	73fb      	strb	r3, [r7, #15]
 80020ec:	e037      	b.n	800215e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 020e 	bic.w	r2, r2, #14
 80020fc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002108:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800210c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 0201 	bic.w	r2, r2, #1
 800211c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002122:	f003 021f 	and.w	r2, r3, #31
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	2101      	movs	r1, #1
 800212c:	fa01 f202 	lsl.w	r2, r1, r2
 8002130:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800213a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00c      	beq.n	800215e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002152:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800215c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800216e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002184:	2300      	movs	r3, #0
 8002186:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d00d      	beq.n	80021b0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2204      	movs	r2, #4
 8002198:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	73fb      	strb	r3, [r7, #15]
 80021ae:	e047      	b.n	8002240 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 020e 	bic.w	r2, r2, #14
 80021be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0201 	bic.w	r2, r2, #1
 80021ce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e4:	f003 021f 	and.w	r2, r3, #31
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	2101      	movs	r1, #1
 80021ee:	fa01 f202 	lsl.w	r2, r1, r2
 80021f2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80021fc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00c      	beq.n	8002220 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002210:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002214:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800221e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	4798      	blx	r3
    }
  }
  return status;
 8002240:	7bfb      	ldrb	r3, [r7, #15]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800224c:	b480      	push	{r7}
 800224e:	b087      	sub	sp, #28
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800225a:	e15a      	b.n	8002512 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	2101      	movs	r1, #1
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	fa01 f303 	lsl.w	r3, r1, r3
 8002268:	4013      	ands	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 814c 	beq.w	800250c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d00b      	beq.n	8002294 <HAL_GPIO_Init+0x48>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b02      	cmp	r3, #2
 8002282:	d007      	beq.n	8002294 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002288:	2b11      	cmp	r3, #17
 800228a:	d003      	beq.n	8002294 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b12      	cmp	r3, #18
 8002292:	d130      	bne.n	80022f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	2203      	movs	r2, #3
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4013      	ands	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	68da      	ldr	r2, [r3, #12]
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022ca:	2201      	movs	r2, #1
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4013      	ands	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	091b      	lsrs	r3, r3, #4
 80022e0:	f003 0201 	and.w	r2, r3, #1
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	2203      	movs	r2, #3
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4013      	ands	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b02      	cmp	r3, #2
 800232c:	d003      	beq.n	8002336 <HAL_GPIO_Init+0xea>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b12      	cmp	r3, #18
 8002334:	d123      	bne.n	800237e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	08da      	lsrs	r2, r3, #3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3208      	adds	r2, #8
 800233e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002342:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	220f      	movs	r2, #15
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	691a      	ldr	r2, [r3, #16]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	08da      	lsrs	r2, r3, #3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3208      	adds	r2, #8
 8002378:	6939      	ldr	r1, [r7, #16]
 800237a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	2203      	movs	r2, #3
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	4013      	ands	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f003 0203 	and.w	r2, r3, #3
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 80a6 	beq.w	800250c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c0:	4b5b      	ldr	r3, [pc, #364]	; (8002530 <HAL_GPIO_Init+0x2e4>)
 80023c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023c4:	4a5a      	ldr	r2, [pc, #360]	; (8002530 <HAL_GPIO_Init+0x2e4>)
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	6613      	str	r3, [r2, #96]	; 0x60
 80023cc:	4b58      	ldr	r3, [pc, #352]	; (8002530 <HAL_GPIO_Init+0x2e4>)
 80023ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023d8:	4a56      	ldr	r2, [pc, #344]	; (8002534 <HAL_GPIO_Init+0x2e8>)
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	089b      	lsrs	r3, r3, #2
 80023de:	3302      	adds	r3, #2
 80023e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	220f      	movs	r2, #15
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002402:	d01f      	beq.n	8002444 <HAL_GPIO_Init+0x1f8>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a4c      	ldr	r2, [pc, #304]	; (8002538 <HAL_GPIO_Init+0x2ec>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d019      	beq.n	8002440 <HAL_GPIO_Init+0x1f4>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a4b      	ldr	r2, [pc, #300]	; (800253c <HAL_GPIO_Init+0x2f0>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d013      	beq.n	800243c <HAL_GPIO_Init+0x1f0>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a4a      	ldr	r2, [pc, #296]	; (8002540 <HAL_GPIO_Init+0x2f4>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d00d      	beq.n	8002438 <HAL_GPIO_Init+0x1ec>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a49      	ldr	r2, [pc, #292]	; (8002544 <HAL_GPIO_Init+0x2f8>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d007      	beq.n	8002434 <HAL_GPIO_Init+0x1e8>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a48      	ldr	r2, [pc, #288]	; (8002548 <HAL_GPIO_Init+0x2fc>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d101      	bne.n	8002430 <HAL_GPIO_Init+0x1e4>
 800242c:	2305      	movs	r3, #5
 800242e:	e00a      	b.n	8002446 <HAL_GPIO_Init+0x1fa>
 8002430:	2306      	movs	r3, #6
 8002432:	e008      	b.n	8002446 <HAL_GPIO_Init+0x1fa>
 8002434:	2304      	movs	r3, #4
 8002436:	e006      	b.n	8002446 <HAL_GPIO_Init+0x1fa>
 8002438:	2303      	movs	r3, #3
 800243a:	e004      	b.n	8002446 <HAL_GPIO_Init+0x1fa>
 800243c:	2302      	movs	r3, #2
 800243e:	e002      	b.n	8002446 <HAL_GPIO_Init+0x1fa>
 8002440:	2301      	movs	r3, #1
 8002442:	e000      	b.n	8002446 <HAL_GPIO_Init+0x1fa>
 8002444:	2300      	movs	r3, #0
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	f002 0203 	and.w	r2, r2, #3
 800244c:	0092      	lsls	r2, r2, #2
 800244e:	4093      	lsls	r3, r2
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002456:	4937      	ldr	r1, [pc, #220]	; (8002534 <HAL_GPIO_Init+0x2e8>)
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	089b      	lsrs	r3, r3, #2
 800245c:	3302      	adds	r3, #2
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002464:	4b39      	ldr	r3, [pc, #228]	; (800254c <HAL_GPIO_Init+0x300>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	43db      	mvns	r3, r3
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4013      	ands	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002488:	4a30      	ldr	r2, [pc, #192]	; (800254c <HAL_GPIO_Init+0x300>)
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800248e:	4b2f      	ldr	r3, [pc, #188]	; (800254c <HAL_GPIO_Init+0x300>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	43db      	mvns	r3, r3
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	4013      	ands	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024b2:	4a26      	ldr	r2, [pc, #152]	; (800254c <HAL_GPIO_Init+0x300>)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024b8:	4b24      	ldr	r3, [pc, #144]	; (800254c <HAL_GPIO_Init+0x300>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4013      	ands	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4313      	orrs	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024dc:	4a1b      	ldr	r2, [pc, #108]	; (800254c <HAL_GPIO_Init+0x300>)
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024e2:	4b1a      	ldr	r3, [pc, #104]	; (800254c <HAL_GPIO_Init+0x300>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	4013      	ands	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4313      	orrs	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002506:	4a11      	ldr	r2, [pc, #68]	; (800254c <HAL_GPIO_Init+0x300>)
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	3301      	adds	r3, #1
 8002510:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	fa22 f303 	lsr.w	r3, r2, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	f47f ae9d 	bne.w	800225c <HAL_GPIO_Init+0x10>
  }
}
 8002522:	bf00      	nop
 8002524:	bf00      	nop
 8002526:	371c      	adds	r7, #28
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	40021000 	.word	0x40021000
 8002534:	40010000 	.word	0x40010000
 8002538:	48000400 	.word	0x48000400
 800253c:	48000800 	.word	0x48000800
 8002540:	48000c00 	.word	0x48000c00
 8002544:	48001000 	.word	0x48001000
 8002548:	48001400 	.word	0x48001400
 800254c:	40010400 	.word	0x40010400

08002550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	807b      	strh	r3, [r7, #2]
 800255c:	4613      	mov	r3, r2
 800255e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002560:	787b      	ldrb	r3, [r7, #1]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002566:	887a      	ldrh	r2, [r7, #2]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800256c:	e002      	b.n	8002574 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800256e:	887a      	ldrh	r2, [r7, #2]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d141      	bne.n	8002612 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800258e:	4b4b      	ldr	r3, [pc, #300]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800259a:	d131      	bne.n	8002600 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800259c:	4b47      	ldr	r3, [pc, #284]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800259e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025a2:	4a46      	ldr	r2, [pc, #280]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025ac:	4b43      	ldr	r3, [pc, #268]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025b4:	4a41      	ldr	r2, [pc, #260]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025bc:	4b40      	ldr	r3, [pc, #256]	; (80026c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2232      	movs	r2, #50	; 0x32
 80025c2:	fb02 f303 	mul.w	r3, r2, r3
 80025c6:	4a3f      	ldr	r2, [pc, #252]	; (80026c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80025c8:	fba2 2303 	umull	r2, r3, r2, r3
 80025cc:	0c9b      	lsrs	r3, r3, #18
 80025ce:	3301      	adds	r3, #1
 80025d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025d2:	e002      	b.n	80025da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025da:	4b38      	ldr	r3, [pc, #224]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025e6:	d102      	bne.n	80025ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f2      	bne.n	80025d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025ee:	4b33      	ldr	r3, [pc, #204]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025fa:	d158      	bne.n	80026ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e057      	b.n	80026b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002600:	4b2e      	ldr	r3, [pc, #184]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002602:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002606:	4a2d      	ldr	r2, [pc, #180]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002608:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800260c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002610:	e04d      	b.n	80026ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002618:	d141      	bne.n	800269e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800261a:	4b28      	ldr	r3, [pc, #160]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002626:	d131      	bne.n	800268c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002628:	4b24      	ldr	r3, [pc, #144]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800262a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800262e:	4a23      	ldr	r2, [pc, #140]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002634:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002638:	4b20      	ldr	r3, [pc, #128]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002640:	4a1e      	ldr	r2, [pc, #120]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002646:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002648:	4b1d      	ldr	r3, [pc, #116]	; (80026c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2232      	movs	r2, #50	; 0x32
 800264e:	fb02 f303 	mul.w	r3, r2, r3
 8002652:	4a1c      	ldr	r2, [pc, #112]	; (80026c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002654:	fba2 2303 	umull	r2, r3, r2, r3
 8002658:	0c9b      	lsrs	r3, r3, #18
 800265a:	3301      	adds	r3, #1
 800265c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800265e:	e002      	b.n	8002666 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	3b01      	subs	r3, #1
 8002664:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002666:	4b15      	ldr	r3, [pc, #84]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800266e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002672:	d102      	bne.n	800267a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f2      	bne.n	8002660 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800267a:	4b10      	ldr	r3, [pc, #64]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002686:	d112      	bne.n	80026ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e011      	b.n	80026b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800268e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002692:	4a0a      	ldr	r2, [pc, #40]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002698:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800269c:	e007      	b.n	80026ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800269e:	4b07      	ldr	r3, [pc, #28]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026a6:	4a05      	ldr	r2, [pc, #20]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	40007000 	.word	0x40007000
 80026c0:	20000018 	.word	0x20000018
 80026c4:	431bde83 	.word	0x431bde83

080026c8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80026cc:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	4a04      	ldr	r2, [pc, #16]	; (80026e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80026d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d6:	6093      	str	r3, [r2, #8]
}
 80026d8:	bf00      	nop
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	40007000 	.word	0x40007000

080026e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e308      	b.n	8002d0c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d075      	beq.n	80027f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002706:	4ba3      	ldr	r3, [pc, #652]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 030c 	and.w	r3, r3, #12
 800270e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002710:	4ba0      	ldr	r3, [pc, #640]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f003 0303 	and.w	r3, r3, #3
 8002718:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	2b0c      	cmp	r3, #12
 800271e:	d102      	bne.n	8002726 <HAL_RCC_OscConfig+0x3e>
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	2b03      	cmp	r3, #3
 8002724:	d002      	beq.n	800272c <HAL_RCC_OscConfig+0x44>
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	2b08      	cmp	r3, #8
 800272a:	d10b      	bne.n	8002744 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272c:	4b99      	ldr	r3, [pc, #612]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d05b      	beq.n	80027f0 <HAL_RCC_OscConfig+0x108>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d157      	bne.n	80027f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e2e3      	b.n	8002d0c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800274c:	d106      	bne.n	800275c <HAL_RCC_OscConfig+0x74>
 800274e:	4b91      	ldr	r3, [pc, #580]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a90      	ldr	r2, [pc, #576]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	e01d      	b.n	8002798 <HAL_RCC_OscConfig+0xb0>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002764:	d10c      	bne.n	8002780 <HAL_RCC_OscConfig+0x98>
 8002766:	4b8b      	ldr	r3, [pc, #556]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a8a      	ldr	r2, [pc, #552]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 800276c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	4b88      	ldr	r3, [pc, #544]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a87      	ldr	r2, [pc, #540]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	e00b      	b.n	8002798 <HAL_RCC_OscConfig+0xb0>
 8002780:	4b84      	ldr	r3, [pc, #528]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a83      	ldr	r2, [pc, #524]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800278a:	6013      	str	r3, [r2, #0]
 800278c:	4b81      	ldr	r3, [pc, #516]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a80      	ldr	r2, [pc, #512]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d013      	beq.n	80027c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a0:	f7ff fb56 	bl	8001e50 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a8:	f7ff fb52 	bl	8001e50 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b64      	cmp	r3, #100	; 0x64
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e2a8      	b.n	8002d0c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ba:	4b76      	ldr	r3, [pc, #472]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCC_OscConfig+0xc0>
 80027c6:	e014      	b.n	80027f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c8:	f7ff fb42 	bl	8001e50 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d0:	f7ff fb3e 	bl	8001e50 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b64      	cmp	r3, #100	; 0x64
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e294      	b.n	8002d0c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027e2:	4b6c      	ldr	r3, [pc, #432]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_OscConfig+0xe8>
 80027ee:	e000      	b.n	80027f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d075      	beq.n	80028ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027fe:	4b65      	ldr	r3, [pc, #404]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 030c 	and.w	r3, r3, #12
 8002806:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002808:	4b62      	ldr	r3, [pc, #392]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f003 0303 	and.w	r3, r3, #3
 8002810:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	2b0c      	cmp	r3, #12
 8002816:	d102      	bne.n	800281e <HAL_RCC_OscConfig+0x136>
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	2b02      	cmp	r3, #2
 800281c:	d002      	beq.n	8002824 <HAL_RCC_OscConfig+0x13c>
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	2b04      	cmp	r3, #4
 8002822:	d11f      	bne.n	8002864 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002824:	4b5b      	ldr	r3, [pc, #364]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <HAL_RCC_OscConfig+0x154>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e267      	b.n	8002d0c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283c:	4b55      	ldr	r3, [pc, #340]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	061b      	lsls	r3, r3, #24
 800284a:	4952      	ldr	r1, [pc, #328]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 800284c:	4313      	orrs	r3, r2
 800284e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002850:	4b51      	ldr	r3, [pc, #324]	; (8002998 <HAL_RCC_OscConfig+0x2b0>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff faaf 	bl	8001db8 <HAL_InitTick>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d043      	beq.n	80028e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e253      	b.n	8002d0c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d023      	beq.n	80028b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800286c:	4b49      	ldr	r3, [pc, #292]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a48      	ldr	r2, [pc, #288]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002878:	f7ff faea 	bl	8001e50 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002880:	f7ff fae6 	bl	8001e50 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e23c      	b.n	8002d0c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002892:	4b40      	ldr	r3, [pc, #256]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f0      	beq.n	8002880 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800289e:	4b3d      	ldr	r3, [pc, #244]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	061b      	lsls	r3, r3, #24
 80028ac:	4939      	ldr	r1, [pc, #228]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	604b      	str	r3, [r1, #4]
 80028b2:	e01a      	b.n	80028ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028b4:	4b37      	ldr	r3, [pc, #220]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a36      	ldr	r2, [pc, #216]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 80028ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c0:	f7ff fac6 	bl	8001e50 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c8:	f7ff fac2 	bl	8001e50 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e218      	b.n	8002d0c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028da:	4b2e      	ldr	r3, [pc, #184]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f0      	bne.n	80028c8 <HAL_RCC_OscConfig+0x1e0>
 80028e6:	e000      	b.n	80028ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d03c      	beq.n	8002970 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d01c      	beq.n	8002938 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028fe:	4b25      	ldr	r3, [pc, #148]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002900:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002904:	4a23      	ldr	r2, [pc, #140]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290e:	f7ff fa9f 	bl	8001e50 <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002916:	f7ff fa9b 	bl	8001e50 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e1f1      	b.n	8002d0c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002928:	4b1a      	ldr	r3, [pc, #104]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 800292a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0ef      	beq.n	8002916 <HAL_RCC_OscConfig+0x22e>
 8002936:	e01b      	b.n	8002970 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002938:	4b16      	ldr	r3, [pc, #88]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 800293a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800293e:	4a15      	ldr	r2, [pc, #84]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002940:	f023 0301 	bic.w	r3, r3, #1
 8002944:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002948:	f7ff fa82 	bl	8001e50 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002950:	f7ff fa7e 	bl	8001e50 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e1d4      	b.n	8002d0c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002962:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002964:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1ef      	bne.n	8002950 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 80ab 	beq.w	8002ad4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800297e:	2300      	movs	r3, #0
 8002980:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002982:	4b04      	ldr	r3, [pc, #16]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d106      	bne.n	800299c <HAL_RCC_OscConfig+0x2b4>
 800298e:	2301      	movs	r3, #1
 8002990:	e005      	b.n	800299e <HAL_RCC_OscConfig+0x2b6>
 8002992:	bf00      	nop
 8002994:	40021000 	.word	0x40021000
 8002998:	2000001c 	.word	0x2000001c
 800299c:	2300      	movs	r3, #0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00d      	beq.n	80029be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029a2:	4baf      	ldr	r3, [pc, #700]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 80029a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a6:	4aae      	ldr	r2, [pc, #696]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 80029a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ac:	6593      	str	r3, [r2, #88]	; 0x58
 80029ae:	4bac      	ldr	r3, [pc, #688]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 80029b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80029ba:	2301      	movs	r3, #1
 80029bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029be:	4ba9      	ldr	r3, [pc, #676]	; (8002c64 <HAL_RCC_OscConfig+0x57c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d118      	bne.n	80029fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029ca:	4ba6      	ldr	r3, [pc, #664]	; (8002c64 <HAL_RCC_OscConfig+0x57c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4aa5      	ldr	r2, [pc, #660]	; (8002c64 <HAL_RCC_OscConfig+0x57c>)
 80029d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029d6:	f7ff fa3b 	bl	8001e50 <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029de:	f7ff fa37 	bl	8001e50 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e18d      	b.n	8002d0c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029f0:	4b9c      	ldr	r3, [pc, #624]	; (8002c64 <HAL_RCC_OscConfig+0x57c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0f0      	beq.n	80029de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d108      	bne.n	8002a16 <HAL_RCC_OscConfig+0x32e>
 8002a04:	4b96      	ldr	r3, [pc, #600]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0a:	4a95      	ldr	r2, [pc, #596]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a14:	e024      	b.n	8002a60 <HAL_RCC_OscConfig+0x378>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	2b05      	cmp	r3, #5
 8002a1c:	d110      	bne.n	8002a40 <HAL_RCC_OscConfig+0x358>
 8002a1e:	4b90      	ldr	r3, [pc, #576]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a24:	4a8e      	ldr	r2, [pc, #568]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002a26:	f043 0304 	orr.w	r3, r3, #4
 8002a2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a2e:	4b8c      	ldr	r3, [pc, #560]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a34:	4a8a      	ldr	r2, [pc, #552]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002a36:	f043 0301 	orr.w	r3, r3, #1
 8002a3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a3e:	e00f      	b.n	8002a60 <HAL_RCC_OscConfig+0x378>
 8002a40:	4b87      	ldr	r3, [pc, #540]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a46:	4a86      	ldr	r2, [pc, #536]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002a48:	f023 0301 	bic.w	r3, r3, #1
 8002a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a50:	4b83      	ldr	r3, [pc, #524]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a56:	4a82      	ldr	r2, [pc, #520]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002a58:	f023 0304 	bic.w	r3, r3, #4
 8002a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d016      	beq.n	8002a96 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a68:	f7ff f9f2 	bl	8001e50 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a6e:	e00a      	b.n	8002a86 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a70:	f7ff f9ee 	bl	8001e50 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e142      	b.n	8002d0c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a86:	4b76      	ldr	r3, [pc, #472]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0ed      	beq.n	8002a70 <HAL_RCC_OscConfig+0x388>
 8002a94:	e015      	b.n	8002ac2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a96:	f7ff f9db 	bl	8001e50 <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a9c:	e00a      	b.n	8002ab4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a9e:	f7ff f9d7 	bl	8001e50 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e12b      	b.n	8002d0c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ab4:	4b6a      	ldr	r3, [pc, #424]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1ed      	bne.n	8002a9e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ac2:	7ffb      	ldrb	r3, [r7, #31]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d105      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac8:	4b65      	ldr	r3, [pc, #404]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002acc:	4a64      	ldr	r2, [pc, #400]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002ace:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ad2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0320 	and.w	r3, r3, #32
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d03c      	beq.n	8002b5a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d01c      	beq.n	8002b22 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ae8:	4b5d      	ldr	r3, [pc, #372]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002aea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002aee:	4a5c      	ldr	r2, [pc, #368]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af8:	f7ff f9aa 	bl	8001e50 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b00:	f7ff f9a6 	bl	8001e50 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e0fc      	b.n	8002d0c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b12:	4b53      	ldr	r3, [pc, #332]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002b14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0ef      	beq.n	8002b00 <HAL_RCC_OscConfig+0x418>
 8002b20:	e01b      	b.n	8002b5a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b22:	4b4f      	ldr	r3, [pc, #316]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002b24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b28:	4a4d      	ldr	r2, [pc, #308]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002b2a:	f023 0301 	bic.w	r3, r3, #1
 8002b2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b32:	f7ff f98d 	bl	8001e50 <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b3a:	f7ff f989 	bl	8001e50 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e0df      	b.n	8002d0c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b4c:	4b44      	ldr	r3, [pc, #272]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002b4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1ef      	bne.n	8002b3a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 80d3 	beq.w	8002d0a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b64:	4b3e      	ldr	r3, [pc, #248]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 030c 	and.w	r3, r3, #12
 8002b6c:	2b0c      	cmp	r3, #12
 8002b6e:	f000 808d 	beq.w	8002c8c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d15a      	bne.n	8002c30 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b7a:	4b39      	ldr	r3, [pc, #228]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a38      	ldr	r2, [pc, #224]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002b80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b86:	f7ff f963 	bl	8001e50 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b8e:	f7ff f95f 	bl	8001e50 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e0b5      	b.n	8002d0c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ba0:	4b2f      	ldr	r3, [pc, #188]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1f0      	bne.n	8002b8e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bac:	4b2c      	ldr	r3, [pc, #176]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	4b2d      	ldr	r3, [pc, #180]	; (8002c68 <HAL_RCC_OscConfig+0x580>)
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6a11      	ldr	r1, [r2, #32]
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bbc:	3a01      	subs	r2, #1
 8002bbe:	0112      	lsls	r2, r2, #4
 8002bc0:	4311      	orrs	r1, r2
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002bc6:	0212      	lsls	r2, r2, #8
 8002bc8:	4311      	orrs	r1, r2
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002bce:	0852      	lsrs	r2, r2, #1
 8002bd0:	3a01      	subs	r2, #1
 8002bd2:	0552      	lsls	r2, r2, #21
 8002bd4:	4311      	orrs	r1, r2
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bda:	0852      	lsrs	r2, r2, #1
 8002bdc:	3a01      	subs	r2, #1
 8002bde:	0652      	lsls	r2, r2, #25
 8002be0:	4311      	orrs	r1, r2
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002be6:	06d2      	lsls	r2, r2, #27
 8002be8:	430a      	orrs	r2, r1
 8002bea:	491d      	ldr	r1, [pc, #116]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bf0:	4b1b      	ldr	r3, [pc, #108]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a1a      	ldr	r2, [pc, #104]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002bf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bfa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bfc:	4b18      	ldr	r3, [pc, #96]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	4a17      	ldr	r2, [pc, #92]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c06:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7ff f922 	bl	8001e50 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c10:	f7ff f91e 	bl	8001e50 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e074      	b.n	8002d0c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c22:	4b0f      	ldr	r3, [pc, #60]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f0      	beq.n	8002c10 <HAL_RCC_OscConfig+0x528>
 8002c2e:	e06c      	b.n	8002d0a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c30:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a0a      	ldr	r2, [pc, #40]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002c36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c3a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002c3c:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	4a07      	ldr	r2, [pc, #28]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002c42:	f023 0303 	bic.w	r3, r3, #3
 8002c46:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002c48:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	4a04      	ldr	r2, [pc, #16]	; (8002c60 <HAL_RCC_OscConfig+0x578>)
 8002c4e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c56:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c58:	f7ff f8fa 	bl	8001e50 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c5e:	e00e      	b.n	8002c7e <HAL_RCC_OscConfig+0x596>
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40007000 	.word	0x40007000
 8002c68:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6c:	f7ff f8f0 	bl	8001e50 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e046      	b.n	8002d0c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c7e:	4b25      	ldr	r3, [pc, #148]	; (8002d14 <HAL_RCC_OscConfig+0x62c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0x584>
 8002c8a:	e03e      	b.n	8002d0a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d101      	bne.n	8002c98 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e039      	b.n	8002d0c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002c98:	4b1e      	ldr	r3, [pc, #120]	; (8002d14 <HAL_RCC_OscConfig+0x62c>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f003 0203 	and.w	r2, r3, #3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d12c      	bne.n	8002d06 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d123      	bne.n	8002d06 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d11b      	bne.n	8002d06 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d113      	bne.n	8002d06 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce8:	085b      	lsrs	r3, r3, #1
 8002cea:	3b01      	subs	r3, #1
 8002cec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d109      	bne.n	8002d06 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cfc:	085b      	lsrs	r3, r3, #1
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d001      	beq.n	8002d0a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3720      	adds	r7, #32
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40021000 	.word	0x40021000

08002d18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e11e      	b.n	8002f6e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d30:	4b91      	ldr	r3, [pc, #580]	; (8002f78 <HAL_RCC_ClockConfig+0x260>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d910      	bls.n	8002d60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3e:	4b8e      	ldr	r3, [pc, #568]	; (8002f78 <HAL_RCC_ClockConfig+0x260>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 020f 	bic.w	r2, r3, #15
 8002d46:	498c      	ldr	r1, [pc, #560]	; (8002f78 <HAL_RCC_ClockConfig+0x260>)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4e:	4b8a      	ldr	r3, [pc, #552]	; (8002f78 <HAL_RCC_ClockConfig+0x260>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e106      	b.n	8002f6e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d073      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	d129      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d74:	4b81      	ldr	r3, [pc, #516]	; (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e0f4      	b.n	8002f6e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002d84:	f000 f99e 	bl	80030c4 <RCC_GetSysClockFreqFromPLLSource>
 8002d88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4a7c      	ldr	r2, [pc, #496]	; (8002f80 <HAL_RCC_ClockConfig+0x268>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d93f      	bls.n	8002e12 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002d92:	4b7a      	ldr	r3, [pc, #488]	; (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d009      	beq.n	8002db2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d033      	beq.n	8002e12 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d12f      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002db2:	4b72      	ldr	r3, [pc, #456]	; (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dba:	4a70      	ldr	r2, [pc, #448]	; (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dc0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002dc2:	2380      	movs	r3, #128	; 0x80
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	e024      	b.n	8002e12 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d107      	bne.n	8002de0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dd0:	4b6a      	ldr	r3, [pc, #424]	; (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d109      	bne.n	8002df0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e0c6      	b.n	8002f6e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002de0:	4b66      	ldr	r3, [pc, #408]	; (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d101      	bne.n	8002df0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e0be      	b.n	8002f6e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002df0:	f000 f8ce 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 8002df4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4a61      	ldr	r2, [pc, #388]	; (8002f80 <HAL_RCC_ClockConfig+0x268>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d909      	bls.n	8002e12 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002dfe:	4b5f      	ldr	r3, [pc, #380]	; (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e06:	4a5d      	ldr	r2, [pc, #372]	; (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e0c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002e0e:	2380      	movs	r3, #128	; 0x80
 8002e10:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e12:	4b5a      	ldr	r3, [pc, #360]	; (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f023 0203 	bic.w	r2, r3, #3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	4957      	ldr	r1, [pc, #348]	; (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e24:	f7ff f814 	bl	8001e50 <HAL_GetTick>
 8002e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2a:	e00a      	b.n	8002e42 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e2c:	f7ff f810 	bl	8001e50 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e095      	b.n	8002f6e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e42:	4b4e      	ldr	r3, [pc, #312]	; (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 020c 	and.w	r2, r3, #12
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d1eb      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d023      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d005      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e6c:	4b43      	ldr	r3, [pc, #268]	; (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	4a42      	ldr	r2, [pc, #264]	; (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002e72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e76:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0308 	and.w	r3, r3, #8
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d007      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002e84:	4b3d      	ldr	r3, [pc, #244]	; (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002e8c:	4a3b      	ldr	r2, [pc, #236]	; (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002e8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e94:	4b39      	ldr	r3, [pc, #228]	; (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	4936      	ldr	r1, [pc, #216]	; (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	608b      	str	r3, [r1, #8]
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	2b80      	cmp	r3, #128	; 0x80
 8002eac:	d105      	bne.n	8002eba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002eae:	4b33      	ldr	r3, [pc, #204]	; (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	4a32      	ldr	r2, [pc, #200]	; (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002eb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eb8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002eba:	4b2f      	ldr	r3, [pc, #188]	; (8002f78 <HAL_RCC_ClockConfig+0x260>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d21d      	bcs.n	8002f04 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec8:	4b2b      	ldr	r3, [pc, #172]	; (8002f78 <HAL_RCC_ClockConfig+0x260>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f023 020f 	bic.w	r2, r3, #15
 8002ed0:	4929      	ldr	r1, [pc, #164]	; (8002f78 <HAL_RCC_ClockConfig+0x260>)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ed8:	f7fe ffba 	bl	8001e50 <HAL_GetTick>
 8002edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ede:	e00a      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ee0:	f7fe ffb6 	bl	8001e50 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e03b      	b.n	8002f6e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef6:	4b20      	ldr	r3, [pc, #128]	; (8002f78 <HAL_RCC_ClockConfig+0x260>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d1ed      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d008      	beq.n	8002f22 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f10:	4b1a      	ldr	r3, [pc, #104]	; (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	4917      	ldr	r1, [pc, #92]	; (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d009      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f2e:	4b13      	ldr	r3, [pc, #76]	; (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	490f      	ldr	r1, [pc, #60]	; (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f42:	f000 f825 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 8002f46:	4602      	mov	r2, r0
 8002f48:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <HAL_RCC_ClockConfig+0x264>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	091b      	lsrs	r3, r3, #4
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	490c      	ldr	r1, [pc, #48]	; (8002f84 <HAL_RCC_ClockConfig+0x26c>)
 8002f54:	5ccb      	ldrb	r3, [r1, r3]
 8002f56:	f003 031f 	and.w	r3, r3, #31
 8002f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f5e:	4a0a      	ldr	r2, [pc, #40]	; (8002f88 <HAL_RCC_ClockConfig+0x270>)
 8002f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002f62:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <HAL_RCC_ClockConfig+0x274>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fe ff26 	bl	8001db8 <HAL_InitTick>
 8002f6c:	4603      	mov	r3, r0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40022000 	.word	0x40022000
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	04c4b400 	.word	0x04c4b400
 8002f84:	08008d94 	.word	0x08008d94
 8002f88:	20000018 	.word	0x20000018
 8002f8c:	2000001c 	.word	0x2000001c

08002f90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b087      	sub	sp, #28
 8002f94:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f96:	4b2c      	ldr	r3, [pc, #176]	; (8003048 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 030c 	and.w	r3, r3, #12
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	d102      	bne.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fa2:	4b2a      	ldr	r3, [pc, #168]	; (800304c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fa4:	613b      	str	r3, [r7, #16]
 8002fa6:	e047      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002fa8:	4b27      	ldr	r3, [pc, #156]	; (8003048 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 030c 	and.w	r3, r3, #12
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d102      	bne.n	8002fba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fb4:	4b26      	ldr	r3, [pc, #152]	; (8003050 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fb6:	613b      	str	r3, [r7, #16]
 8002fb8:	e03e      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002fba:	4b23      	ldr	r3, [pc, #140]	; (8003048 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 030c 	and.w	r3, r3, #12
 8002fc2:	2b0c      	cmp	r3, #12
 8002fc4:	d136      	bne.n	8003034 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fc6:	4b20      	ldr	r3, [pc, #128]	; (8003048 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fd0:	4b1d      	ldr	r3, [pc, #116]	; (8003048 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	091b      	lsrs	r3, r3, #4
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	3301      	adds	r3, #1
 8002fdc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2b03      	cmp	r3, #3
 8002fe2:	d10c      	bne.n	8002ffe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fe4:	4a1a      	ldr	r2, [pc, #104]	; (8003050 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fec:	4a16      	ldr	r2, [pc, #88]	; (8003048 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fee:	68d2      	ldr	r2, [r2, #12]
 8002ff0:	0a12      	lsrs	r2, r2, #8
 8002ff2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ff6:	fb02 f303 	mul.w	r3, r2, r3
 8002ffa:	617b      	str	r3, [r7, #20]
      break;
 8002ffc:	e00c      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ffe:	4a13      	ldr	r2, [pc, #76]	; (800304c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	fbb2 f3f3 	udiv	r3, r2, r3
 8003006:	4a10      	ldr	r2, [pc, #64]	; (8003048 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003008:	68d2      	ldr	r2, [r2, #12]
 800300a:	0a12      	lsrs	r2, r2, #8
 800300c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003010:	fb02 f303 	mul.w	r3, r2, r3
 8003014:	617b      	str	r3, [r7, #20]
      break;
 8003016:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003018:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <HAL_RCC_GetSysClockFreq+0xb8>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	0e5b      	lsrs	r3, r3, #25
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	3301      	adds	r3, #1
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003030:	613b      	str	r3, [r7, #16]
 8003032:	e001      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003034:	2300      	movs	r3, #0
 8003036:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003038:	693b      	ldr	r3, [r7, #16]
}
 800303a:	4618      	mov	r0, r3
 800303c:	371c      	adds	r7, #28
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40021000 	.word	0x40021000
 800304c:	00f42400 	.word	0x00f42400
 8003050:	016e3600 	.word	0x016e3600

08003054 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003058:	4b03      	ldr	r3, [pc, #12]	; (8003068 <HAL_RCC_GetHCLKFreq+0x14>)
 800305a:	681b      	ldr	r3, [r3, #0]
}
 800305c:	4618      	mov	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	20000018 	.word	0x20000018

0800306c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003070:	f7ff fff0 	bl	8003054 <HAL_RCC_GetHCLKFreq>
 8003074:	4602      	mov	r2, r0
 8003076:	4b06      	ldr	r3, [pc, #24]	; (8003090 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	0a1b      	lsrs	r3, r3, #8
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	4904      	ldr	r1, [pc, #16]	; (8003094 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003082:	5ccb      	ldrb	r3, [r1, r3]
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800308c:	4618      	mov	r0, r3
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40021000 	.word	0x40021000
 8003094:	08008da4 	.word	0x08008da4

08003098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800309c:	f7ff ffda 	bl	8003054 <HAL_RCC_GetHCLKFreq>
 80030a0:	4602      	mov	r2, r0
 80030a2:	4b06      	ldr	r3, [pc, #24]	; (80030bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	0adb      	lsrs	r3, r3, #11
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	4904      	ldr	r1, [pc, #16]	; (80030c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030ae:	5ccb      	ldrb	r3, [r1, r3]
 80030b0:	f003 031f 	and.w	r3, r3, #31
 80030b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40021000 	.word	0x40021000
 80030c0:	08008da4 	.word	0x08008da4

080030c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b087      	sub	sp, #28
 80030c8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030ca:	4b1e      	ldr	r3, [pc, #120]	; (8003144 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030d4:	4b1b      	ldr	r3, [pc, #108]	; (8003144 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	091b      	lsrs	r3, r3, #4
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	3301      	adds	r3, #1
 80030e0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d10c      	bne.n	8003102 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030e8:	4a17      	ldr	r2, [pc, #92]	; (8003148 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f0:	4a14      	ldr	r2, [pc, #80]	; (8003144 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030f2:	68d2      	ldr	r2, [r2, #12]
 80030f4:	0a12      	lsrs	r2, r2, #8
 80030f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80030fa:	fb02 f303 	mul.w	r3, r2, r3
 80030fe:	617b      	str	r3, [r7, #20]
    break;
 8003100:	e00c      	b.n	800311c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003102:	4a12      	ldr	r2, [pc, #72]	; (800314c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	fbb2 f3f3 	udiv	r3, r2, r3
 800310a:	4a0e      	ldr	r2, [pc, #56]	; (8003144 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800310c:	68d2      	ldr	r2, [r2, #12]
 800310e:	0a12      	lsrs	r2, r2, #8
 8003110:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003114:	fb02 f303 	mul.w	r3, r2, r3
 8003118:	617b      	str	r3, [r7, #20]
    break;
 800311a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800311c:	4b09      	ldr	r3, [pc, #36]	; (8003144 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	0e5b      	lsrs	r3, r3, #25
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	3301      	adds	r3, #1
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	fbb2 f3f3 	udiv	r3, r2, r3
 8003134:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003136:	687b      	ldr	r3, [r7, #4]
}
 8003138:	4618      	mov	r0, r3
 800313a:	371c      	adds	r7, #28
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	40021000 	.word	0x40021000
 8003148:	016e3600 	.word	0x016e3600
 800314c:	00f42400 	.word	0x00f42400

08003150 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003158:	2300      	movs	r3, #0
 800315a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800315c:	2300      	movs	r3, #0
 800315e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 8098 	beq.w	800329e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800316e:	2300      	movs	r3, #0
 8003170:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003172:	4b43      	ldr	r3, [pc, #268]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10d      	bne.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800317e:	4b40      	ldr	r3, [pc, #256]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003182:	4a3f      	ldr	r2, [pc, #252]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003188:	6593      	str	r3, [r2, #88]	; 0x58
 800318a:	4b3d      	ldr	r3, [pc, #244]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800318c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003192:	60bb      	str	r3, [r7, #8]
 8003194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003196:	2301      	movs	r3, #1
 8003198:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800319a:	4b3a      	ldr	r3, [pc, #232]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a39      	ldr	r2, [pc, #228]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80031a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031a6:	f7fe fe53 	bl	8001e50 <HAL_GetTick>
 80031aa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031ac:	e009      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ae:	f7fe fe4f 	bl	8001e50 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d902      	bls.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	74fb      	strb	r3, [r7, #19]
        break;
 80031c0:	e005      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031c2:	4b30      	ldr	r3, [pc, #192]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0ef      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80031ce:	7cfb      	ldrb	r3, [r7, #19]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d159      	bne.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031d4:	4b2a      	ldr	r3, [pc, #168]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031de:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d01e      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d019      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031f0:	4b23      	ldr	r3, [pc, #140]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031fc:	4b20      	ldr	r3, [pc, #128]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003202:	4a1f      	ldr	r2, [pc, #124]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003208:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800320c:	4b1c      	ldr	r3, [pc, #112]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800320e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003212:	4a1b      	ldr	r2, [pc, #108]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003218:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800321c:	4a18      	ldr	r2, [pc, #96]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d016      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322e:	f7fe fe0f 	bl	8001e50 <HAL_GetTick>
 8003232:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003234:	e00b      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003236:	f7fe fe0b 	bl	8001e50 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	f241 3288 	movw	r2, #5000	; 0x1388
 8003244:	4293      	cmp	r3, r2
 8003246:	d902      	bls.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	74fb      	strb	r3, [r7, #19]
            break;
 800324c:	e006      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800324e:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0ec      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800325c:	7cfb      	ldrb	r3, [r7, #19]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10b      	bne.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003262:	4b07      	ldr	r3, [pc, #28]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003268:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	4903      	ldr	r1, [pc, #12]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003278:	e008      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800327a:	7cfb      	ldrb	r3, [r7, #19]
 800327c:	74bb      	strb	r3, [r7, #18]
 800327e:	e005      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003280:	40021000 	.word	0x40021000
 8003284:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003288:	7cfb      	ldrb	r3, [r7, #19]
 800328a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800328c:	7c7b      	ldrb	r3, [r7, #17]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d105      	bne.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003292:	4ba6      	ldr	r3, [pc, #664]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003296:	4aa5      	ldr	r2, [pc, #660]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003298:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800329c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00a      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032aa:	4ba0      	ldr	r3, [pc, #640]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b0:	f023 0203 	bic.w	r2, r3, #3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	499c      	ldr	r1, [pc, #624]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00a      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032cc:	4b97      	ldr	r3, [pc, #604]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d2:	f023 020c 	bic.w	r2, r3, #12
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	4994      	ldr	r1, [pc, #592]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0304 	and.w	r3, r3, #4
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00a      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032ee:	4b8f      	ldr	r3, [pc, #572]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	498b      	ldr	r1, [pc, #556]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0308 	and.w	r3, r3, #8
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00a      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003310:	4b86      	ldr	r3, [pc, #536]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003316:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	4983      	ldr	r1, [pc, #524]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0320 	and.w	r3, r3, #32
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00a      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003332:	4b7e      	ldr	r3, [pc, #504]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003338:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	497a      	ldr	r1, [pc, #488]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003342:	4313      	orrs	r3, r2
 8003344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00a      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003354:	4b75      	ldr	r3, [pc, #468]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	4972      	ldr	r1, [pc, #456]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003376:	4b6d      	ldr	r3, [pc, #436]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	4969      	ldr	r1, [pc, #420]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003386:	4313      	orrs	r3, r2
 8003388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00a      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003398:	4b64      	ldr	r3, [pc, #400]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800339a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	4961      	ldr	r1, [pc, #388]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033ba:	4b5c      	ldr	r3, [pc, #368]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	4958      	ldr	r1, [pc, #352]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d015      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033dc:	4b53      	ldr	r3, [pc, #332]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ea:	4950      	ldr	r1, [pc, #320]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033fa:	d105      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033fc:	4b4b      	ldr	r3, [pc, #300]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	4a4a      	ldr	r2, [pc, #296]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003402:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003406:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003410:	2b00      	cmp	r3, #0
 8003412:	d015      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003414:	4b45      	ldr	r3, [pc, #276]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003422:	4942      	ldr	r1, [pc, #264]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003424:	4313      	orrs	r3, r2
 8003426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003432:	d105      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003434:	4b3d      	ldr	r3, [pc, #244]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	4a3c      	ldr	r2, [pc, #240]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800343a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800343e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d015      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800344c:	4b37      	ldr	r3, [pc, #220]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800344e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003452:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	4934      	ldr	r1, [pc, #208]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800345c:	4313      	orrs	r3, r2
 800345e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800346a:	d105      	bne.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800346c:	4b2f      	ldr	r3, [pc, #188]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	4a2e      	ldr	r2, [pc, #184]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003472:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003476:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d015      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003484:	4b29      	ldr	r3, [pc, #164]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003492:	4926      	ldr	r1, [pc, #152]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003494:	4313      	orrs	r3, r2
 8003496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800349e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034a2:	d105      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034a4:	4b21      	ldr	r3, [pc, #132]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	4a20      	ldr	r2, [pc, #128]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034ae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d015      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034bc:	4b1b      	ldr	r3, [pc, #108]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ca:	4918      	ldr	r1, [pc, #96]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034da:	d105      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034dc:	4b13      	ldr	r3, [pc, #76]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	4a12      	ldr	r2, [pc, #72]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034e6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d015      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80034f4:	4b0d      	ldr	r3, [pc, #52]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003502:	490a      	ldr	r1, [pc, #40]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003504:	4313      	orrs	r3, r2
 8003506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003512:	d105      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003514:	4b05      	ldr	r3, [pc, #20]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	4a04      	ldr	r2, [pc, #16]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800351a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800351e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003520:	7cbb      	ldrb	r3, [r7, #18]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40021000 	.word	0x40021000

08003530 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e049      	b.n	80035d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d106      	bne.n	800355c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7fe fadc 	bl	8001b14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3304      	adds	r3, #4
 800356c:	4619      	mov	r1, r3
 800356e:	4610      	mov	r0, r2
 8003570:	f000 fc50 	bl	8003e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b082      	sub	sp, #8
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e049      	b.n	8003684 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d106      	bne.n	800360a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f7fe fa25 	bl	8001a54 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2202      	movs	r2, #2
 800360e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3304      	adds	r3, #4
 800361a:	4619      	mov	r1, r3
 800361c:	4610      	mov	r0, r2
 800361e:	f000 fbf9 	bl	8003e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d109      	bne.n	80036b0 <HAL_TIM_PWM_Start+0x24>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	bf14      	ite	ne
 80036a8:	2301      	movne	r3, #1
 80036aa:	2300      	moveq	r3, #0
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	e03c      	b.n	800372a <HAL_TIM_PWM_Start+0x9e>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	d109      	bne.n	80036ca <HAL_TIM_PWM_Start+0x3e>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b01      	cmp	r3, #1
 80036c0:	bf14      	ite	ne
 80036c2:	2301      	movne	r3, #1
 80036c4:	2300      	moveq	r3, #0
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	e02f      	b.n	800372a <HAL_TIM_PWM_Start+0x9e>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d109      	bne.n	80036e4 <HAL_TIM_PWM_Start+0x58>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b01      	cmp	r3, #1
 80036da:	bf14      	ite	ne
 80036dc:	2301      	movne	r3, #1
 80036de:	2300      	moveq	r3, #0
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	e022      	b.n	800372a <HAL_TIM_PWM_Start+0x9e>
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	2b0c      	cmp	r3, #12
 80036e8:	d109      	bne.n	80036fe <HAL_TIM_PWM_Start+0x72>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	bf14      	ite	ne
 80036f6:	2301      	movne	r3, #1
 80036f8:	2300      	moveq	r3, #0
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	e015      	b.n	800372a <HAL_TIM_PWM_Start+0x9e>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2b10      	cmp	r3, #16
 8003702:	d109      	bne.n	8003718 <HAL_TIM_PWM_Start+0x8c>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b01      	cmp	r3, #1
 800370e:	bf14      	ite	ne
 8003710:	2301      	movne	r3, #1
 8003712:	2300      	moveq	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	e008      	b.n	800372a <HAL_TIM_PWM_Start+0x9e>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b01      	cmp	r3, #1
 8003722:	bf14      	ite	ne
 8003724:	2301      	movne	r3, #1
 8003726:	2300      	moveq	r3, #0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e097      	b.n	8003862 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d104      	bne.n	8003742 <HAL_TIM_PWM_Start+0xb6>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003740:	e023      	b.n	800378a <HAL_TIM_PWM_Start+0xfe>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	2b04      	cmp	r3, #4
 8003746:	d104      	bne.n	8003752 <HAL_TIM_PWM_Start+0xc6>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003750:	e01b      	b.n	800378a <HAL_TIM_PWM_Start+0xfe>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b08      	cmp	r3, #8
 8003756:	d104      	bne.n	8003762 <HAL_TIM_PWM_Start+0xd6>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003760:	e013      	b.n	800378a <HAL_TIM_PWM_Start+0xfe>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b0c      	cmp	r3, #12
 8003766:	d104      	bne.n	8003772 <HAL_TIM_PWM_Start+0xe6>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003770:	e00b      	b.n	800378a <HAL_TIM_PWM_Start+0xfe>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b10      	cmp	r3, #16
 8003776:	d104      	bne.n	8003782 <HAL_TIM_PWM_Start+0xf6>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003780:	e003      	b.n	800378a <HAL_TIM_PWM_Start+0xfe>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2202      	movs	r2, #2
 8003786:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2201      	movs	r2, #1
 8003790:	6839      	ldr	r1, [r7, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f000 fec4 	bl	8004520 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a33      	ldr	r2, [pc, #204]	; (800386c <HAL_TIM_PWM_Start+0x1e0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d013      	beq.n	80037ca <HAL_TIM_PWM_Start+0x13e>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a32      	ldr	r2, [pc, #200]	; (8003870 <HAL_TIM_PWM_Start+0x1e4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d00e      	beq.n	80037ca <HAL_TIM_PWM_Start+0x13e>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a30      	ldr	r2, [pc, #192]	; (8003874 <HAL_TIM_PWM_Start+0x1e8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d009      	beq.n	80037ca <HAL_TIM_PWM_Start+0x13e>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a2f      	ldr	r2, [pc, #188]	; (8003878 <HAL_TIM_PWM_Start+0x1ec>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d004      	beq.n	80037ca <HAL_TIM_PWM_Start+0x13e>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a2d      	ldr	r2, [pc, #180]	; (800387c <HAL_TIM_PWM_Start+0x1f0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d101      	bne.n	80037ce <HAL_TIM_PWM_Start+0x142>
 80037ca:	2301      	movs	r3, #1
 80037cc:	e000      	b.n	80037d0 <HAL_TIM_PWM_Start+0x144>
 80037ce:	2300      	movs	r3, #0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d007      	beq.n	80037e4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037e2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a20      	ldr	r2, [pc, #128]	; (800386c <HAL_TIM_PWM_Start+0x1e0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d018      	beq.n	8003820 <HAL_TIM_PWM_Start+0x194>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f6:	d013      	beq.n	8003820 <HAL_TIM_PWM_Start+0x194>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a20      	ldr	r2, [pc, #128]	; (8003880 <HAL_TIM_PWM_Start+0x1f4>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d00e      	beq.n	8003820 <HAL_TIM_PWM_Start+0x194>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a1f      	ldr	r2, [pc, #124]	; (8003884 <HAL_TIM_PWM_Start+0x1f8>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d009      	beq.n	8003820 <HAL_TIM_PWM_Start+0x194>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a17      	ldr	r2, [pc, #92]	; (8003870 <HAL_TIM_PWM_Start+0x1e4>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d004      	beq.n	8003820 <HAL_TIM_PWM_Start+0x194>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a16      	ldr	r2, [pc, #88]	; (8003874 <HAL_TIM_PWM_Start+0x1e8>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d115      	bne.n	800384c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	4b18      	ldr	r3, [pc, #96]	; (8003888 <HAL_TIM_PWM_Start+0x1fc>)
 8003828:	4013      	ands	r3, r2
 800382a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2b06      	cmp	r3, #6
 8003830:	d015      	beq.n	800385e <HAL_TIM_PWM_Start+0x1d2>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003838:	d011      	beq.n	800385e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0201 	orr.w	r2, r2, #1
 8003848:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800384a:	e008      	b.n	800385e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0201 	orr.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	e000      	b.n	8003860 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800385e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40012c00 	.word	0x40012c00
 8003870:	40013400 	.word	0x40013400
 8003874:	40014000 	.word	0x40014000
 8003878:	40014400 	.word	0x40014400
 800387c:	40014800 	.word	0x40014800
 8003880:	40000400 	.word	0x40000400
 8003884:	40000800 	.word	0x40000800
 8003888:	00010007 	.word	0x00010007

0800388c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e097      	b.n	80039d0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d106      	bne.n	80038ba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7fe f8ed 	bl	8001a94 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2202      	movs	r2, #2
 80038be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6812      	ldr	r2, [r2, #0]
 80038cc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80038d0:	f023 0307 	bic.w	r3, r3, #7
 80038d4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3304      	adds	r3, #4
 80038de:	4619      	mov	r1, r3
 80038e0:	4610      	mov	r0, r2
 80038e2:	f000 fa97 	bl	8003e14 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	4313      	orrs	r3, r2
 8003906:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800390e:	f023 0303 	bic.w	r3, r3, #3
 8003912:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	021b      	lsls	r3, r3, #8
 800391e:	4313      	orrs	r3, r2
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800392c:	f023 030c 	bic.w	r3, r3, #12
 8003930:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003938:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800393c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	021b      	lsls	r3, r3, #8
 8003948:	4313      	orrs	r3, r2
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4313      	orrs	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	011a      	lsls	r2, r3, #4
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	031b      	lsls	r3, r3, #12
 800395c:	4313      	orrs	r3, r2
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	4313      	orrs	r3, r2
 8003962:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800396a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003972:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	4313      	orrs	r3, r2
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	4313      	orrs	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d122      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d11b      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f06f 0202 	mvn.w	r2, #2
 8003a04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f9dc 	bl	8003dd8 <HAL_TIM_IC_CaptureCallback>
 8003a20:	e005      	b.n	8003a2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f9ce 	bl	8003dc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f9df 	bl	8003dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	f003 0304 	and.w	r3, r3, #4
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d122      	bne.n	8003a88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b04      	cmp	r3, #4
 8003a4e:	d11b      	bne.n	8003a88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f06f 0204 	mvn.w	r2, #4
 8003a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f9b2 	bl	8003dd8 <HAL_TIM_IC_CaptureCallback>
 8003a74:	e005      	b.n	8003a82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f9a4 	bl	8003dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f9b5 	bl	8003dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b08      	cmp	r3, #8
 8003a94:	d122      	bne.n	8003adc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d11b      	bne.n	8003adc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0208 	mvn.w	r2, #8
 8003aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2204      	movs	r2, #4
 8003ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f988 	bl	8003dd8 <HAL_TIM_IC_CaptureCallback>
 8003ac8:	e005      	b.n	8003ad6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f97a 	bl	8003dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f98b 	bl	8003dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f003 0310 	and.w	r3, r3, #16
 8003ae6:	2b10      	cmp	r3, #16
 8003ae8:	d122      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f003 0310 	and.w	r3, r3, #16
 8003af4:	2b10      	cmp	r3, #16
 8003af6:	d11b      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f06f 0210 	mvn.w	r2, #16
 8003b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2208      	movs	r2, #8
 8003b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f95e 	bl	8003dd8 <HAL_TIM_IC_CaptureCallback>
 8003b1c:	e005      	b.n	8003b2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f950 	bl	8003dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f961 	bl	8003dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d10e      	bne.n	8003b5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d107      	bne.n	8003b5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f06f 0201 	mvn.w	r2, #1
 8003b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7fd fb38 	bl	80011cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b66:	2b80      	cmp	r3, #128	; 0x80
 8003b68:	d10e      	bne.n	8003b88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b74:	2b80      	cmp	r3, #128	; 0x80
 8003b76:	d107      	bne.n	8003b88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 fe1e 	bl	80047c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b96:	d10e      	bne.n	8003bb6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba2:	2b80      	cmp	r3, #128	; 0x80
 8003ba4:	d107      	bne.n	8003bb6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 fe11 	bl	80047d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc0:	2b40      	cmp	r3, #64	; 0x40
 8003bc2:	d10e      	bne.n	8003be2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bce:	2b40      	cmp	r3, #64	; 0x40
 8003bd0:	d107      	bne.n	8003be2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f90f 	bl	8003e00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	f003 0320 	and.w	r3, r3, #32
 8003bec:	2b20      	cmp	r3, #32
 8003bee:	d10e      	bne.n	8003c0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f003 0320 	and.w	r3, r3, #32
 8003bfa:	2b20      	cmp	r3, #32
 8003bfc:	d107      	bne.n	8003c0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f06f 0220 	mvn.w	r2, #32
 8003c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 fdd1 	bl	80047b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c1c:	d10f      	bne.n	8003c3e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c2c:	d107      	bne.n	8003c3e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 fdd7 	bl	80047ec <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c4c:	d10f      	bne.n	8003c6e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c5c:	d107      	bne.n	8003c6e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 fdc9 	bl	8004800 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c7c:	d10f      	bne.n	8003c9e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c8c:	d107      	bne.n	8003c9e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 fdbb 	bl	8004814 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ca8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cac:	d10f      	bne.n	8003cce <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cbc:	d107      	bne.n	8003cce <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 fdad 	bl	8004828 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cce:	bf00      	nop
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
	...

08003cd8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d101      	bne.n	8003cf2 <HAL_TIM_OC_ConfigChannel+0x1a>
 8003cee:	2302      	movs	r3, #2
 8003cf0:	e064      	b.n	8003dbc <HAL_TIM_OC_ConfigChannel+0xe4>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b14      	cmp	r3, #20
 8003cfe:	d857      	bhi.n	8003db0 <HAL_TIM_OC_ConfigChannel+0xd8>
 8003d00:	a201      	add	r2, pc, #4	; (adr r2, 8003d08 <HAL_TIM_OC_ConfigChannel+0x30>)
 8003d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d06:	bf00      	nop
 8003d08:	08003d5d 	.word	0x08003d5d
 8003d0c:	08003db1 	.word	0x08003db1
 8003d10:	08003db1 	.word	0x08003db1
 8003d14:	08003db1 	.word	0x08003db1
 8003d18:	08003d6b 	.word	0x08003d6b
 8003d1c:	08003db1 	.word	0x08003db1
 8003d20:	08003db1 	.word	0x08003db1
 8003d24:	08003db1 	.word	0x08003db1
 8003d28:	08003d79 	.word	0x08003d79
 8003d2c:	08003db1 	.word	0x08003db1
 8003d30:	08003db1 	.word	0x08003db1
 8003d34:	08003db1 	.word	0x08003db1
 8003d38:	08003d87 	.word	0x08003d87
 8003d3c:	08003db1 	.word	0x08003db1
 8003d40:	08003db1 	.word	0x08003db1
 8003d44:	08003db1 	.word	0x08003db1
 8003d48:	08003d95 	.word	0x08003d95
 8003d4c:	08003db1 	.word	0x08003db1
 8003d50:	08003db1 	.word	0x08003db1
 8003d54:	08003db1 	.word	0x08003db1
 8003d58:	08003da3 	.word	0x08003da3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68b9      	ldr	r1, [r7, #8]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 f8e6 	bl	8003f34 <TIM_OC1_SetConfig>
      break;
 8003d68:	e023      	b.n	8003db2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68b9      	ldr	r1, [r7, #8]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 f96f 	bl	8004054 <TIM_OC2_SetConfig>
      break;
 8003d76:	e01c      	b.n	8003db2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68b9      	ldr	r1, [r7, #8]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 f9f2 	bl	8004168 <TIM_OC3_SetConfig>
      break;
 8003d84:	e015      	b.n	8003db2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68b9      	ldr	r1, [r7, #8]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 fa73 	bl	8004278 <TIM_OC4_SetConfig>
      break;
 8003d92:	e00e      	b.n	8003db2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68b9      	ldr	r1, [r7, #8]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 faf6 	bl	800438c <TIM_OC5_SetConfig>
      break;
 8003da0:	e007      	b.n	8003db2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68b9      	ldr	r1, [r7, #8]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 fb53 	bl	8004454 <TIM_OC6_SetConfig>
      break;
 8003dae:	e000      	b.n	8003db2 <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8003db0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a3c      	ldr	r2, [pc, #240]	; (8003f18 <TIM_Base_SetConfig+0x104>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d00f      	beq.n	8003e4c <TIM_Base_SetConfig+0x38>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e32:	d00b      	beq.n	8003e4c <TIM_Base_SetConfig+0x38>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a39      	ldr	r2, [pc, #228]	; (8003f1c <TIM_Base_SetConfig+0x108>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d007      	beq.n	8003e4c <TIM_Base_SetConfig+0x38>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a38      	ldr	r2, [pc, #224]	; (8003f20 <TIM_Base_SetConfig+0x10c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d003      	beq.n	8003e4c <TIM_Base_SetConfig+0x38>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a37      	ldr	r2, [pc, #220]	; (8003f24 <TIM_Base_SetConfig+0x110>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d108      	bne.n	8003e5e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a2d      	ldr	r2, [pc, #180]	; (8003f18 <TIM_Base_SetConfig+0x104>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d01b      	beq.n	8003e9e <TIM_Base_SetConfig+0x8a>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e6c:	d017      	beq.n	8003e9e <TIM_Base_SetConfig+0x8a>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a2a      	ldr	r2, [pc, #168]	; (8003f1c <TIM_Base_SetConfig+0x108>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d013      	beq.n	8003e9e <TIM_Base_SetConfig+0x8a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a29      	ldr	r2, [pc, #164]	; (8003f20 <TIM_Base_SetConfig+0x10c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d00f      	beq.n	8003e9e <TIM_Base_SetConfig+0x8a>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a28      	ldr	r2, [pc, #160]	; (8003f24 <TIM_Base_SetConfig+0x110>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00b      	beq.n	8003e9e <TIM_Base_SetConfig+0x8a>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a27      	ldr	r2, [pc, #156]	; (8003f28 <TIM_Base_SetConfig+0x114>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d007      	beq.n	8003e9e <TIM_Base_SetConfig+0x8a>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a26      	ldr	r2, [pc, #152]	; (8003f2c <TIM_Base_SetConfig+0x118>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d003      	beq.n	8003e9e <TIM_Base_SetConfig+0x8a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a25      	ldr	r2, [pc, #148]	; (8003f30 <TIM_Base_SetConfig+0x11c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d108      	bne.n	8003eb0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ea4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a10      	ldr	r2, [pc, #64]	; (8003f18 <TIM_Base_SetConfig+0x104>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d00f      	beq.n	8003efc <TIM_Base_SetConfig+0xe8>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a11      	ldr	r2, [pc, #68]	; (8003f24 <TIM_Base_SetConfig+0x110>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d00b      	beq.n	8003efc <TIM_Base_SetConfig+0xe8>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a10      	ldr	r2, [pc, #64]	; (8003f28 <TIM_Base_SetConfig+0x114>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d007      	beq.n	8003efc <TIM_Base_SetConfig+0xe8>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a0f      	ldr	r2, [pc, #60]	; (8003f2c <TIM_Base_SetConfig+0x118>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d003      	beq.n	8003efc <TIM_Base_SetConfig+0xe8>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a0e      	ldr	r2, [pc, #56]	; (8003f30 <TIM_Base_SetConfig+0x11c>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d103      	bne.n	8003f04 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	691a      	ldr	r2, [r3, #16]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	615a      	str	r2, [r3, #20]
}
 8003f0a:	bf00      	nop
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	40012c00 	.word	0x40012c00
 8003f1c:	40000400 	.word	0x40000400
 8003f20:	40000800 	.word	0x40000800
 8003f24:	40013400 	.word	0x40013400
 8003f28:	40014000 	.word	0x40014000
 8003f2c:	40014400 	.word	0x40014400
 8003f30:	40014800 	.word	0x40014800

08003f34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	f023 0201 	bic.w	r2, r3, #1
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f023 0303 	bic.w	r3, r3, #3
 8003f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f023 0302 	bic.w	r3, r3, #2
 8003f80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a2c      	ldr	r2, [pc, #176]	; (8004040 <TIM_OC1_SetConfig+0x10c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d00f      	beq.n	8003fb4 <TIM_OC1_SetConfig+0x80>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a2b      	ldr	r2, [pc, #172]	; (8004044 <TIM_OC1_SetConfig+0x110>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d00b      	beq.n	8003fb4 <TIM_OC1_SetConfig+0x80>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a2a      	ldr	r2, [pc, #168]	; (8004048 <TIM_OC1_SetConfig+0x114>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d007      	beq.n	8003fb4 <TIM_OC1_SetConfig+0x80>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a29      	ldr	r2, [pc, #164]	; (800404c <TIM_OC1_SetConfig+0x118>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d003      	beq.n	8003fb4 <TIM_OC1_SetConfig+0x80>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a28      	ldr	r2, [pc, #160]	; (8004050 <TIM_OC1_SetConfig+0x11c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d10c      	bne.n	8003fce <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f023 0308 	bic.w	r3, r3, #8
 8003fba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f023 0304 	bic.w	r3, r3, #4
 8003fcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a1b      	ldr	r2, [pc, #108]	; (8004040 <TIM_OC1_SetConfig+0x10c>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d00f      	beq.n	8003ff6 <TIM_OC1_SetConfig+0xc2>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a1a      	ldr	r2, [pc, #104]	; (8004044 <TIM_OC1_SetConfig+0x110>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d00b      	beq.n	8003ff6 <TIM_OC1_SetConfig+0xc2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a19      	ldr	r2, [pc, #100]	; (8004048 <TIM_OC1_SetConfig+0x114>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d007      	beq.n	8003ff6 <TIM_OC1_SetConfig+0xc2>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a18      	ldr	r2, [pc, #96]	; (800404c <TIM_OC1_SetConfig+0x118>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d003      	beq.n	8003ff6 <TIM_OC1_SetConfig+0xc2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a17      	ldr	r2, [pc, #92]	; (8004050 <TIM_OC1_SetConfig+0x11c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d111      	bne.n	800401a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ffc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	4313      	orrs	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	621a      	str	r2, [r3, #32]
}
 8004034:	bf00      	nop
 8004036:	371c      	adds	r7, #28
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	40012c00 	.word	0x40012c00
 8004044:	40013400 	.word	0x40013400
 8004048:	40014000 	.word	0x40014000
 800404c:	40014400 	.word	0x40014400
 8004050:	40014800 	.word	0x40014800

08004054 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	f023 0210 	bic.w	r2, r3, #16
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800408e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	021b      	lsls	r3, r3, #8
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	4313      	orrs	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f023 0320 	bic.w	r3, r3, #32
 80040a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a28      	ldr	r2, [pc, #160]	; (8004154 <TIM_OC2_SetConfig+0x100>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d003      	beq.n	80040c0 <TIM_OC2_SetConfig+0x6c>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a27      	ldr	r2, [pc, #156]	; (8004158 <TIM_OC2_SetConfig+0x104>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d10d      	bne.n	80040dc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a1d      	ldr	r2, [pc, #116]	; (8004154 <TIM_OC2_SetConfig+0x100>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d00f      	beq.n	8004104 <TIM_OC2_SetConfig+0xb0>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a1c      	ldr	r2, [pc, #112]	; (8004158 <TIM_OC2_SetConfig+0x104>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d00b      	beq.n	8004104 <TIM_OC2_SetConfig+0xb0>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a1b      	ldr	r2, [pc, #108]	; (800415c <TIM_OC2_SetConfig+0x108>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d007      	beq.n	8004104 <TIM_OC2_SetConfig+0xb0>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a1a      	ldr	r2, [pc, #104]	; (8004160 <TIM_OC2_SetConfig+0x10c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d003      	beq.n	8004104 <TIM_OC2_SetConfig+0xb0>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a19      	ldr	r2, [pc, #100]	; (8004164 <TIM_OC2_SetConfig+0x110>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d113      	bne.n	800412c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800410a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004112:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	4313      	orrs	r3, r2
 800412a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	621a      	str	r2, [r3, #32]
}
 8004146:	bf00      	nop
 8004148:	371c      	adds	r7, #28
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	40012c00 	.word	0x40012c00
 8004158:	40013400 	.word	0x40013400
 800415c:	40014000 	.word	0x40014000
 8004160:	40014400 	.word	0x40014400
 8004164:	40014800 	.word	0x40014800

08004168 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 0303 	bic.w	r3, r3, #3
 80041a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	021b      	lsls	r3, r3, #8
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a27      	ldr	r2, [pc, #156]	; (8004264 <TIM_OC3_SetConfig+0xfc>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d003      	beq.n	80041d2 <TIM_OC3_SetConfig+0x6a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a26      	ldr	r2, [pc, #152]	; (8004268 <TIM_OC3_SetConfig+0x100>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d10d      	bne.n	80041ee <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	021b      	lsls	r3, r3, #8
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a1c      	ldr	r2, [pc, #112]	; (8004264 <TIM_OC3_SetConfig+0xfc>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d00f      	beq.n	8004216 <TIM_OC3_SetConfig+0xae>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a1b      	ldr	r2, [pc, #108]	; (8004268 <TIM_OC3_SetConfig+0x100>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d00b      	beq.n	8004216 <TIM_OC3_SetConfig+0xae>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a1a      	ldr	r2, [pc, #104]	; (800426c <TIM_OC3_SetConfig+0x104>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d007      	beq.n	8004216 <TIM_OC3_SetConfig+0xae>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a19      	ldr	r2, [pc, #100]	; (8004270 <TIM_OC3_SetConfig+0x108>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d003      	beq.n	8004216 <TIM_OC3_SetConfig+0xae>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a18      	ldr	r2, [pc, #96]	; (8004274 <TIM_OC3_SetConfig+0x10c>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d113      	bne.n	800423e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800421c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004224:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	011b      	lsls	r3, r3, #4
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	4313      	orrs	r3, r2
 8004230:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4313      	orrs	r3, r2
 800423c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	621a      	str	r2, [r3, #32]
}
 8004258:	bf00      	nop
 800425a:	371c      	adds	r7, #28
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	40012c00 	.word	0x40012c00
 8004268:	40013400 	.word	0x40013400
 800426c:	40014000 	.word	0x40014000
 8004270:	40014400 	.word	0x40014400
 8004274:	40014800 	.word	0x40014800

08004278 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	021b      	lsls	r3, r3, #8
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	4313      	orrs	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	031b      	lsls	r3, r3, #12
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a28      	ldr	r2, [pc, #160]	; (8004378 <TIM_OC4_SetConfig+0x100>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d003      	beq.n	80042e4 <TIM_OC4_SetConfig+0x6c>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a27      	ldr	r2, [pc, #156]	; (800437c <TIM_OC4_SetConfig+0x104>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d10d      	bne.n	8004300 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80042ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	031b      	lsls	r3, r3, #12
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a1d      	ldr	r2, [pc, #116]	; (8004378 <TIM_OC4_SetConfig+0x100>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d00f      	beq.n	8004328 <TIM_OC4_SetConfig+0xb0>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a1c      	ldr	r2, [pc, #112]	; (800437c <TIM_OC4_SetConfig+0x104>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d00b      	beq.n	8004328 <TIM_OC4_SetConfig+0xb0>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a1b      	ldr	r2, [pc, #108]	; (8004380 <TIM_OC4_SetConfig+0x108>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d007      	beq.n	8004328 <TIM_OC4_SetConfig+0xb0>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a1a      	ldr	r2, [pc, #104]	; (8004384 <TIM_OC4_SetConfig+0x10c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d003      	beq.n	8004328 <TIM_OC4_SetConfig+0xb0>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a19      	ldr	r2, [pc, #100]	; (8004388 <TIM_OC4_SetConfig+0x110>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d113      	bne.n	8004350 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800432e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004336:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	019b      	lsls	r3, r3, #6
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	4313      	orrs	r3, r2
 8004342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	019b      	lsls	r3, r3, #6
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	4313      	orrs	r3, r2
 800434e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	621a      	str	r2, [r3, #32]
}
 800436a:	bf00      	nop
 800436c:	371c      	adds	r7, #28
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	40012c00 	.word	0x40012c00
 800437c:	40013400 	.word	0x40013400
 8004380:	40014000 	.word	0x40014000
 8004384:	40014400 	.word	0x40014400
 8004388:	40014800 	.word	0x40014800

0800438c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800438c:	b480      	push	{r7}
 800438e:	b087      	sub	sp, #28
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80043d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	041b      	lsls	r3, r3, #16
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	4313      	orrs	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a17      	ldr	r2, [pc, #92]	; (8004440 <TIM_OC5_SetConfig+0xb4>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d00f      	beq.n	8004406 <TIM_OC5_SetConfig+0x7a>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a16      	ldr	r2, [pc, #88]	; (8004444 <TIM_OC5_SetConfig+0xb8>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d00b      	beq.n	8004406 <TIM_OC5_SetConfig+0x7a>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a15      	ldr	r2, [pc, #84]	; (8004448 <TIM_OC5_SetConfig+0xbc>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d007      	beq.n	8004406 <TIM_OC5_SetConfig+0x7a>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a14      	ldr	r2, [pc, #80]	; (800444c <TIM_OC5_SetConfig+0xc0>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d003      	beq.n	8004406 <TIM_OC5_SetConfig+0x7a>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a13      	ldr	r2, [pc, #76]	; (8004450 <TIM_OC5_SetConfig+0xc4>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d109      	bne.n	800441a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800440c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	021b      	lsls	r3, r3, #8
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	4313      	orrs	r3, r2
 8004418:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	621a      	str	r2, [r3, #32]
}
 8004434:	bf00      	nop
 8004436:	371c      	adds	r7, #28
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	40012c00 	.word	0x40012c00
 8004444:	40013400 	.word	0x40013400
 8004448:	40014000 	.word	0x40014000
 800444c:	40014400 	.word	0x40014400
 8004450:	40014800 	.word	0x40014800

08004454 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004454:	b480      	push	{r7}
 8004456:	b087      	sub	sp, #28
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800447a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	021b      	lsls	r3, r3, #8
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	4313      	orrs	r3, r2
 8004492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800449a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	051b      	lsls	r3, r3, #20
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a18      	ldr	r2, [pc, #96]	; (800450c <TIM_OC6_SetConfig+0xb8>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d00f      	beq.n	80044d0 <TIM_OC6_SetConfig+0x7c>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a17      	ldr	r2, [pc, #92]	; (8004510 <TIM_OC6_SetConfig+0xbc>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d00b      	beq.n	80044d0 <TIM_OC6_SetConfig+0x7c>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a16      	ldr	r2, [pc, #88]	; (8004514 <TIM_OC6_SetConfig+0xc0>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d007      	beq.n	80044d0 <TIM_OC6_SetConfig+0x7c>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a15      	ldr	r2, [pc, #84]	; (8004518 <TIM_OC6_SetConfig+0xc4>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d003      	beq.n	80044d0 <TIM_OC6_SetConfig+0x7c>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a14      	ldr	r2, [pc, #80]	; (800451c <TIM_OC6_SetConfig+0xc8>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d109      	bne.n	80044e4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	029b      	lsls	r3, r3, #10
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	621a      	str	r2, [r3, #32]
}
 80044fe:	bf00      	nop
 8004500:	371c      	adds	r7, #28
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	40012c00 	.word	0x40012c00
 8004510:	40013400 	.word	0x40013400
 8004514:	40014000 	.word	0x40014000
 8004518:	40014400 	.word	0x40014400
 800451c:	40014800 	.word	0x40014800

08004520 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004520:	b480      	push	{r7}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f003 031f 	and.w	r3, r3, #31
 8004532:	2201      	movs	r2, #1
 8004534:	fa02 f303 	lsl.w	r3, r2, r3
 8004538:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6a1a      	ldr	r2, [r3, #32]
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	43db      	mvns	r3, r3
 8004542:	401a      	ands	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a1a      	ldr	r2, [r3, #32]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f003 031f 	and.w	r3, r3, #31
 8004552:	6879      	ldr	r1, [r7, #4]
 8004554:	fa01 f303 	lsl.w	r3, r1, r3
 8004558:	431a      	orrs	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	621a      	str	r2, [r3, #32]
}
 800455e:	bf00      	nop
 8004560:	371c      	adds	r7, #28
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
	...

0800456c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800457c:	2b01      	cmp	r3, #1
 800457e:	d101      	bne.n	8004584 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004580:	2302      	movs	r3, #2
 8004582:	e065      	b.n	8004650 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a2c      	ldr	r2, [pc, #176]	; (800465c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d004      	beq.n	80045b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a2b      	ldr	r2, [pc, #172]	; (8004660 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d108      	bne.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80045be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80045d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	4313      	orrs	r3, r2
 80045de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a1b      	ldr	r2, [pc, #108]	; (800465c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d018      	beq.n	8004624 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045fa:	d013      	beq.n	8004624 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a18      	ldr	r2, [pc, #96]	; (8004664 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d00e      	beq.n	8004624 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a17      	ldr	r2, [pc, #92]	; (8004668 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d009      	beq.n	8004624 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a12      	ldr	r2, [pc, #72]	; (8004660 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d004      	beq.n	8004624 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a13      	ldr	r2, [pc, #76]	; (800466c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d10c      	bne.n	800463e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800462a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	4313      	orrs	r3, r2
 8004634:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68ba      	ldr	r2, [r7, #8]
 800463c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	40012c00 	.word	0x40012c00
 8004660:	40013400 	.word	0x40013400
 8004664:	40000400 	.word	0x40000400
 8004668:	40000800 	.word	0x40000800
 800466c:	40014000 	.word	0x40014000

08004670 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800467a:	2300      	movs	r3, #0
 800467c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004684:	2b01      	cmp	r3, #1
 8004686:	d101      	bne.n	800468c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004688:	2302      	movs	r3, #2
 800468a:	e087      	b.n	800479c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	4313      	orrs	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f2:	4313      	orrs	r3, r2
 80046f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	041b      	lsls	r3, r3, #16
 8004702:	4313      	orrs	r3, r2
 8004704:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a27      	ldr	r2, [pc, #156]	; (80047a8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d004      	beq.n	800471a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a25      	ldr	r2, [pc, #148]	; (80047ac <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d106      	bne.n	8004728 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	69db      	ldr	r3, [r3, #28]
 8004724:	4313      	orrs	r3, r2
 8004726:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a1e      	ldr	r2, [pc, #120]	; (80047a8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d004      	beq.n	800473c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a1d      	ldr	r2, [pc, #116]	; (80047ac <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d126      	bne.n	800478a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004746:	051b      	lsls	r3, r3, #20
 8004748:	4313      	orrs	r3, r2
 800474a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	4313      	orrs	r3, r2
 8004758:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	4313      	orrs	r3, r2
 8004766:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a0e      	ldr	r2, [pc, #56]	; (80047a8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d004      	beq.n	800477c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a0d      	ldr	r2, [pc, #52]	; (80047ac <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d106      	bne.n	800478a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004786:	4313      	orrs	r3, r2
 8004788:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	40012c00 	.word	0x40012c00
 80047ac:	40013400 	.word	0x40013400

080047b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e042      	b.n	80048d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004854:	2b00      	cmp	r3, #0
 8004856:	d106      	bne.n	8004866 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f7fd fa1d 	bl	8001ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2224      	movs	r2, #36	; 0x24
 800486a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0201 	bic.w	r2, r2, #1
 800487c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 fb5c 	bl	8004f3c <UART_SetConfig>
 8004884:	4603      	mov	r3, r0
 8004886:	2b01      	cmp	r3, #1
 8004888:	d101      	bne.n	800488e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e022      	b.n	80048d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 fdee 	bl	8005478 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689a      	ldr	r2, [r3, #8]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0201 	orr.w	r2, r2, #1
 80048ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 fe75 	bl	80055bc <UART_CheckIdleState>
 80048d2:	4603      	mov	r3, r0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b08a      	sub	sp, #40	; 0x28
 80048e0:	af02      	add	r7, sp, #8
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	603b      	str	r3, [r7, #0]
 80048e8:	4613      	mov	r3, r2
 80048ea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048f2:	2b20      	cmp	r3, #32
 80048f4:	f040 8083 	bne.w	80049fe <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <HAL_UART_Transmit+0x28>
 80048fe:	88fb      	ldrh	r3, [r7, #6]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e07b      	b.n	8004a00 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800490e:	2b01      	cmp	r3, #1
 8004910:	d101      	bne.n	8004916 <HAL_UART_Transmit+0x3a>
 8004912:	2302      	movs	r3, #2
 8004914:	e074      	b.n	8004a00 <HAL_UART_Transmit+0x124>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2221      	movs	r2, #33	; 0x21
 800492a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800492e:	f7fd fa8f 	bl	8001e50 <HAL_GetTick>
 8004932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	88fa      	ldrh	r2, [r7, #6]
 8004938:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	88fa      	ldrh	r2, [r7, #6]
 8004940:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800494c:	d108      	bne.n	8004960 <HAL_UART_Transmit+0x84>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d104      	bne.n	8004960 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004956:	2300      	movs	r3, #0
 8004958:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	61bb      	str	r3, [r7, #24]
 800495e:	e003      	b.n	8004968 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004964:	2300      	movs	r3, #0
 8004966:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004970:	e02c      	b.n	80049cc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2200      	movs	r2, #0
 800497a:	2180      	movs	r1, #128	; 0x80
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 fe68 	bl	8005652 <UART_WaitOnFlagUntilTimeout>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e039      	b.n	8004a00 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10b      	bne.n	80049aa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	461a      	mov	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	3302      	adds	r3, #2
 80049a6:	61bb      	str	r3, [r7, #24]
 80049a8:	e007      	b.n	80049ba <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	781a      	ldrb	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	3301      	adds	r3, #1
 80049b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	3b01      	subs	r3, #1
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1cc      	bne.n	8004972 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	2200      	movs	r2, #0
 80049e0:	2140      	movs	r1, #64	; 0x40
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f000 fe35 	bl	8005652 <UART_WaitOnFlagUntilTimeout>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e006      	b.n	8004a00 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2220      	movs	r2, #32
 80049f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80049fa:	2300      	movs	r3, #0
 80049fc:	e000      	b.n	8004a00 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80049fe:	2302      	movs	r3, #2
  }
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3720      	adds	r7, #32
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	4613      	mov	r3, r2
 8004a14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1c:	2b20      	cmp	r3, #32
 8004a1e:	d131      	bne.n	8004a84 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <HAL_UART_Receive_IT+0x24>
 8004a26:	88fb      	ldrh	r3, [r7, #6]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e02a      	b.n	8004a86 <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d101      	bne.n	8004a3e <HAL_UART_Receive_IT+0x36>
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	e023      	b.n	8004a86 <HAL_UART_Receive_IT+0x7e>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a0f      	ldr	r2, [pc, #60]	; (8004a90 <HAL_UART_Receive_IT+0x88>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d00e      	beq.n	8004a74 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d007      	beq.n	8004a74 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004a72:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a74:	88fb      	ldrh	r3, [r7, #6]
 8004a76:	461a      	mov	r2, r3
 8004a78:	68b9      	ldr	r1, [r7, #8]
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 fe6a 	bl	8005754 <UART_Start_Receive_IT>
 8004a80:	4603      	mov	r3, r0
 8004a82:	e000      	b.n	8004a86 <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004a84:	2302      	movs	r3, #2
  }
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	40008000 	.word	0x40008000

08004a94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b088      	sub	sp, #32
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004ab4:	69fa      	ldr	r2, [r7, #28]
 8004ab6:	f640 030f 	movw	r3, #2063	; 0x80f
 8004aba:	4013      	ands	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d118      	bne.n	8004af6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	f003 0320 	and.w	r3, r3, #32
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d013      	beq.n	8004af6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	f003 0320 	and.w	r3, r3, #32
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d104      	bne.n	8004ae2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d009      	beq.n	8004af6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 81fb 	beq.w	8004ee2 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	4798      	blx	r3
      }
      return;
 8004af4:	e1f5      	b.n	8004ee2 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 80ef 	beq.w	8004cdc <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	4b73      	ldr	r3, [pc, #460]	; (8004cd0 <HAL_UART_IRQHandler+0x23c>)
 8004b02:	4013      	ands	r3, r2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d105      	bne.n	8004b14 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	4b72      	ldr	r3, [pc, #456]	; (8004cd4 <HAL_UART_IRQHandler+0x240>)
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 80e4 	beq.w	8004cdc <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d010      	beq.n	8004b40 <HAL_UART_IRQHandler+0xac>
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00b      	beq.n	8004b40 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b36:	f043 0201 	orr.w	r2, r3, #1
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d010      	beq.n	8004b6c <HAL_UART_IRQHandler+0xd8>
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00b      	beq.n	8004b6c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2202      	movs	r2, #2
 8004b5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b62:	f043 0204 	orr.w	r2, r3, #4
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	f003 0304 	and.w	r3, r3, #4
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d010      	beq.n	8004b98 <HAL_UART_IRQHandler+0x104>
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00b      	beq.n	8004b98 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2204      	movs	r2, #4
 8004b86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b8e:	f043 0202 	orr.w	r2, r3, #2
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	f003 0308 	and.w	r3, r3, #8
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d015      	beq.n	8004bce <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	f003 0320 	and.w	r3, r3, #32
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d104      	bne.n	8004bb6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	4b48      	ldr	r3, [pc, #288]	; (8004cd0 <HAL_UART_IRQHandler+0x23c>)
 8004bb0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00b      	beq.n	8004bce <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2208      	movs	r2, #8
 8004bbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bc4:	f043 0208 	orr.w	r2, r3, #8
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d011      	beq.n	8004bfc <HAL_UART_IRQHandler+0x168>
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00c      	beq.n	8004bfc <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bf2:	f043 0220 	orr.w	r2, r3, #32
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f000 816f 	beq.w	8004ee6 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	f003 0320 	and.w	r3, r3, #32
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d011      	beq.n	8004c36 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	f003 0320 	and.w	r3, r3, #32
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d104      	bne.n	8004c26 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d007      	beq.n	8004c36 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c3c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c48:	2b40      	cmp	r3, #64	; 0x40
 8004c4a:	d004      	beq.n	8004c56 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d031      	beq.n	8004cba <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 fe3a 	bl	80058d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c66:	2b40      	cmp	r3, #64	; 0x40
 8004c68:	d123      	bne.n	8004cb2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	689a      	ldr	r2, [r3, #8]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c78:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d013      	beq.n	8004caa <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c86:	4a14      	ldr	r2, [pc, #80]	; (8004cd8 <HAL_UART_IRQHandler+0x244>)
 8004c88:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fd fa74 	bl	800217c <HAL_DMA_Abort_IT>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d017      	beq.n	8004cca <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca8:	e00f      	b.n	8004cca <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f930 	bl	8004f10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb0:	e00b      	b.n	8004cca <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f92c 	bl	8004f10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb8:	e007      	b.n	8004cca <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f928 	bl	8004f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004cc8:	e10d      	b.n	8004ee6 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cca:	bf00      	nop
    return;
 8004ccc:	e10b      	b.n	8004ee6 <HAL_UART_IRQHandler+0x452>
 8004cce:	bf00      	nop
 8004cd0:	10000001 	.word	0x10000001
 8004cd4:	04000120 	.word	0x04000120
 8004cd8:	08005935 	.word	0x08005935

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	f040 80ab 	bne.w	8004e3c <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	f003 0310 	and.w	r3, r3, #16
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 80a5 	beq.w	8004e3c <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	f003 0310 	and.w	r3, r3, #16
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 809f 	beq.w	8004e3c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2210      	movs	r2, #16
 8004d04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d10:	2b40      	cmp	r3, #64	; 0x40
 8004d12:	d155      	bne.n	8004dc0 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8004d1e:	893b      	ldrh	r3, [r7, #8]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 80e2 	beq.w	8004eea <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d2c:	893a      	ldrh	r2, [r7, #8]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	f080 80db 	bcs.w	8004eea <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	893a      	ldrh	r2, [r7, #8]
 8004d38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0320 	and.w	r3, r3, #32
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d12b      	bne.n	8004da4 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d5a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689a      	ldr	r2, [r3, #8]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 0201 	bic.w	r2, r2, #1
 8004d6a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689a      	ldr	r2, [r3, #8]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d7a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0210 	bic.w	r2, r2, #16
 8004d98:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fd f993 	bl	80020ca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	4619      	mov	r1, r3
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 f8b3 	bl	8004f24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004dbe:	e094      	b.n	8004eea <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f000 8087 	beq.w	8004eee <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8004de0:	897b      	ldrh	r3, [r7, #10]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f000 8083 	beq.w	8004eee <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004df6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6812      	ldr	r2, [r2, #0]
 8004e02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e06:	f023 0301 	bic.w	r3, r3, #1
 8004e0a:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0210 	bic.w	r2, r2, #16
 8004e2e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e30:	897b      	ldrh	r3, [r7, #10]
 8004e32:	4619      	mov	r1, r3
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f875 	bl	8004f24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e3a:	e058      	b.n	8004eee <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00d      	beq.n	8004e62 <HAL_UART_IRQHandler+0x3ce>
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d008      	beq.n	8004e62 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f001 f876 	bl	8005f4c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e60:	e048      	b.n	8004ef4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d012      	beq.n	8004e92 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d104      	bne.n	8004e80 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d008      	beq.n	8004e92 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d034      	beq.n	8004ef2 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	4798      	blx	r3
    }
    return;
 8004e90:	e02f      	b.n	8004ef2 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d008      	beq.n	8004eae <HAL_UART_IRQHandler+0x41a>
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fd5a 	bl	8005960 <UART_EndTransmit_IT>
    return;
 8004eac:	e022      	b.n	8004ef4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d008      	beq.n	8004eca <HAL_UART_IRQHandler+0x436>
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f001 f856 	bl	8005f74 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ec8:	e014      	b.n	8004ef4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00f      	beq.n	8004ef4 <HAL_UART_IRQHandler+0x460>
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	da0c      	bge.n	8004ef4 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f001 f840 	bl	8005f60 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ee0:	e008      	b.n	8004ef4 <HAL_UART_IRQHandler+0x460>
      return;
 8004ee2:	bf00      	nop
 8004ee4:	e006      	b.n	8004ef4 <HAL_UART_IRQHandler+0x460>
    return;
 8004ee6:	bf00      	nop
 8004ee8:	e004      	b.n	8004ef4 <HAL_UART_IRQHandler+0x460>
      return;
 8004eea:	bf00      	nop
 8004eec:	e002      	b.n	8004ef4 <HAL_UART_IRQHandler+0x460>
      return;
 8004eee:	bf00      	nop
 8004ef0:	e000      	b.n	8004ef4 <HAL_UART_IRQHandler+0x460>
    return;
 8004ef2:	bf00      	nop
  }
}
 8004ef4:	3720      	adds	r7, #32
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop

08004efc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f3c:	b5b0      	push	{r4, r5, r7, lr}
 8004f3e:	b088      	sub	sp, #32
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f44:	2300      	movs	r3, #0
 8004f46:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	431a      	orrs	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	431a      	orrs	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	69db      	ldr	r3, [r3, #28]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	4baf      	ldr	r3, [pc, #700]	; (8005224 <UART_SetConfig+0x2e8>)
 8004f68:	4013      	ands	r3, r2
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	6812      	ldr	r2, [r2, #0]
 8004f6e:	69f9      	ldr	r1, [r7, #28]
 8004f70:	430b      	orrs	r3, r1
 8004f72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4aa4      	ldr	r2, [pc, #656]	; (8005228 <UART_SetConfig+0x2ec>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d004      	beq.n	8004fa4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	69fa      	ldr	r2, [r7, #28]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004fae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	6812      	ldr	r2, [r2, #0]
 8004fb6:	69f9      	ldr	r1, [r7, #28]
 8004fb8:	430b      	orrs	r3, r1
 8004fba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc2:	f023 010f 	bic.w	r1, r3, #15
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a95      	ldr	r2, [pc, #596]	; (800522c <UART_SetConfig+0x2f0>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d120      	bne.n	800501e <UART_SetConfig+0xe2>
 8004fdc:	4b94      	ldr	r3, [pc, #592]	; (8005230 <UART_SetConfig+0x2f4>)
 8004fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe2:	f003 0303 	and.w	r3, r3, #3
 8004fe6:	2b03      	cmp	r3, #3
 8004fe8:	d816      	bhi.n	8005018 <UART_SetConfig+0xdc>
 8004fea:	a201      	add	r2, pc, #4	; (adr r2, 8004ff0 <UART_SetConfig+0xb4>)
 8004fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff0:	08005001 	.word	0x08005001
 8004ff4:	0800500d 	.word	0x0800500d
 8004ff8:	08005007 	.word	0x08005007
 8004ffc:	08005013 	.word	0x08005013
 8005000:	2301      	movs	r3, #1
 8005002:	76fb      	strb	r3, [r7, #27]
 8005004:	e0bc      	b.n	8005180 <UART_SetConfig+0x244>
 8005006:	2302      	movs	r3, #2
 8005008:	76fb      	strb	r3, [r7, #27]
 800500a:	e0b9      	b.n	8005180 <UART_SetConfig+0x244>
 800500c:	2304      	movs	r3, #4
 800500e:	76fb      	strb	r3, [r7, #27]
 8005010:	e0b6      	b.n	8005180 <UART_SetConfig+0x244>
 8005012:	2308      	movs	r3, #8
 8005014:	76fb      	strb	r3, [r7, #27]
 8005016:	e0b3      	b.n	8005180 <UART_SetConfig+0x244>
 8005018:	2310      	movs	r3, #16
 800501a:	76fb      	strb	r3, [r7, #27]
 800501c:	e0b0      	b.n	8005180 <UART_SetConfig+0x244>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a84      	ldr	r2, [pc, #528]	; (8005234 <UART_SetConfig+0x2f8>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d132      	bne.n	800508e <UART_SetConfig+0x152>
 8005028:	4b81      	ldr	r3, [pc, #516]	; (8005230 <UART_SetConfig+0x2f4>)
 800502a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800502e:	f003 030c 	and.w	r3, r3, #12
 8005032:	2b0c      	cmp	r3, #12
 8005034:	d828      	bhi.n	8005088 <UART_SetConfig+0x14c>
 8005036:	a201      	add	r2, pc, #4	; (adr r2, 800503c <UART_SetConfig+0x100>)
 8005038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503c:	08005071 	.word	0x08005071
 8005040:	08005089 	.word	0x08005089
 8005044:	08005089 	.word	0x08005089
 8005048:	08005089 	.word	0x08005089
 800504c:	0800507d 	.word	0x0800507d
 8005050:	08005089 	.word	0x08005089
 8005054:	08005089 	.word	0x08005089
 8005058:	08005089 	.word	0x08005089
 800505c:	08005077 	.word	0x08005077
 8005060:	08005089 	.word	0x08005089
 8005064:	08005089 	.word	0x08005089
 8005068:	08005089 	.word	0x08005089
 800506c:	08005083 	.word	0x08005083
 8005070:	2300      	movs	r3, #0
 8005072:	76fb      	strb	r3, [r7, #27]
 8005074:	e084      	b.n	8005180 <UART_SetConfig+0x244>
 8005076:	2302      	movs	r3, #2
 8005078:	76fb      	strb	r3, [r7, #27]
 800507a:	e081      	b.n	8005180 <UART_SetConfig+0x244>
 800507c:	2304      	movs	r3, #4
 800507e:	76fb      	strb	r3, [r7, #27]
 8005080:	e07e      	b.n	8005180 <UART_SetConfig+0x244>
 8005082:	2308      	movs	r3, #8
 8005084:	76fb      	strb	r3, [r7, #27]
 8005086:	e07b      	b.n	8005180 <UART_SetConfig+0x244>
 8005088:	2310      	movs	r3, #16
 800508a:	76fb      	strb	r3, [r7, #27]
 800508c:	e078      	b.n	8005180 <UART_SetConfig+0x244>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a69      	ldr	r2, [pc, #420]	; (8005238 <UART_SetConfig+0x2fc>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d120      	bne.n	80050da <UART_SetConfig+0x19e>
 8005098:	4b65      	ldr	r3, [pc, #404]	; (8005230 <UART_SetConfig+0x2f4>)
 800509a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800509e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80050a2:	2b30      	cmp	r3, #48	; 0x30
 80050a4:	d013      	beq.n	80050ce <UART_SetConfig+0x192>
 80050a6:	2b30      	cmp	r3, #48	; 0x30
 80050a8:	d814      	bhi.n	80050d4 <UART_SetConfig+0x198>
 80050aa:	2b20      	cmp	r3, #32
 80050ac:	d009      	beq.n	80050c2 <UART_SetConfig+0x186>
 80050ae:	2b20      	cmp	r3, #32
 80050b0:	d810      	bhi.n	80050d4 <UART_SetConfig+0x198>
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d002      	beq.n	80050bc <UART_SetConfig+0x180>
 80050b6:	2b10      	cmp	r3, #16
 80050b8:	d006      	beq.n	80050c8 <UART_SetConfig+0x18c>
 80050ba:	e00b      	b.n	80050d4 <UART_SetConfig+0x198>
 80050bc:	2300      	movs	r3, #0
 80050be:	76fb      	strb	r3, [r7, #27]
 80050c0:	e05e      	b.n	8005180 <UART_SetConfig+0x244>
 80050c2:	2302      	movs	r3, #2
 80050c4:	76fb      	strb	r3, [r7, #27]
 80050c6:	e05b      	b.n	8005180 <UART_SetConfig+0x244>
 80050c8:	2304      	movs	r3, #4
 80050ca:	76fb      	strb	r3, [r7, #27]
 80050cc:	e058      	b.n	8005180 <UART_SetConfig+0x244>
 80050ce:	2308      	movs	r3, #8
 80050d0:	76fb      	strb	r3, [r7, #27]
 80050d2:	e055      	b.n	8005180 <UART_SetConfig+0x244>
 80050d4:	2310      	movs	r3, #16
 80050d6:	76fb      	strb	r3, [r7, #27]
 80050d8:	e052      	b.n	8005180 <UART_SetConfig+0x244>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a57      	ldr	r2, [pc, #348]	; (800523c <UART_SetConfig+0x300>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d120      	bne.n	8005126 <UART_SetConfig+0x1ea>
 80050e4:	4b52      	ldr	r3, [pc, #328]	; (8005230 <UART_SetConfig+0x2f4>)
 80050e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80050ee:	2bc0      	cmp	r3, #192	; 0xc0
 80050f0:	d013      	beq.n	800511a <UART_SetConfig+0x1de>
 80050f2:	2bc0      	cmp	r3, #192	; 0xc0
 80050f4:	d814      	bhi.n	8005120 <UART_SetConfig+0x1e4>
 80050f6:	2b80      	cmp	r3, #128	; 0x80
 80050f8:	d009      	beq.n	800510e <UART_SetConfig+0x1d2>
 80050fa:	2b80      	cmp	r3, #128	; 0x80
 80050fc:	d810      	bhi.n	8005120 <UART_SetConfig+0x1e4>
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d002      	beq.n	8005108 <UART_SetConfig+0x1cc>
 8005102:	2b40      	cmp	r3, #64	; 0x40
 8005104:	d006      	beq.n	8005114 <UART_SetConfig+0x1d8>
 8005106:	e00b      	b.n	8005120 <UART_SetConfig+0x1e4>
 8005108:	2300      	movs	r3, #0
 800510a:	76fb      	strb	r3, [r7, #27]
 800510c:	e038      	b.n	8005180 <UART_SetConfig+0x244>
 800510e:	2302      	movs	r3, #2
 8005110:	76fb      	strb	r3, [r7, #27]
 8005112:	e035      	b.n	8005180 <UART_SetConfig+0x244>
 8005114:	2304      	movs	r3, #4
 8005116:	76fb      	strb	r3, [r7, #27]
 8005118:	e032      	b.n	8005180 <UART_SetConfig+0x244>
 800511a:	2308      	movs	r3, #8
 800511c:	76fb      	strb	r3, [r7, #27]
 800511e:	e02f      	b.n	8005180 <UART_SetConfig+0x244>
 8005120:	2310      	movs	r3, #16
 8005122:	76fb      	strb	r3, [r7, #27]
 8005124:	e02c      	b.n	8005180 <UART_SetConfig+0x244>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a3f      	ldr	r2, [pc, #252]	; (8005228 <UART_SetConfig+0x2ec>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d125      	bne.n	800517c <UART_SetConfig+0x240>
 8005130:	4b3f      	ldr	r3, [pc, #252]	; (8005230 <UART_SetConfig+0x2f4>)
 8005132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005136:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800513a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800513e:	d017      	beq.n	8005170 <UART_SetConfig+0x234>
 8005140:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005144:	d817      	bhi.n	8005176 <UART_SetConfig+0x23a>
 8005146:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800514a:	d00b      	beq.n	8005164 <UART_SetConfig+0x228>
 800514c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005150:	d811      	bhi.n	8005176 <UART_SetConfig+0x23a>
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <UART_SetConfig+0x222>
 8005156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800515a:	d006      	beq.n	800516a <UART_SetConfig+0x22e>
 800515c:	e00b      	b.n	8005176 <UART_SetConfig+0x23a>
 800515e:	2300      	movs	r3, #0
 8005160:	76fb      	strb	r3, [r7, #27]
 8005162:	e00d      	b.n	8005180 <UART_SetConfig+0x244>
 8005164:	2302      	movs	r3, #2
 8005166:	76fb      	strb	r3, [r7, #27]
 8005168:	e00a      	b.n	8005180 <UART_SetConfig+0x244>
 800516a:	2304      	movs	r3, #4
 800516c:	76fb      	strb	r3, [r7, #27]
 800516e:	e007      	b.n	8005180 <UART_SetConfig+0x244>
 8005170:	2308      	movs	r3, #8
 8005172:	76fb      	strb	r3, [r7, #27]
 8005174:	e004      	b.n	8005180 <UART_SetConfig+0x244>
 8005176:	2310      	movs	r3, #16
 8005178:	76fb      	strb	r3, [r7, #27]
 800517a:	e001      	b.n	8005180 <UART_SetConfig+0x244>
 800517c:	2310      	movs	r3, #16
 800517e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a28      	ldr	r2, [pc, #160]	; (8005228 <UART_SetConfig+0x2ec>)
 8005186:	4293      	cmp	r3, r2
 8005188:	f040 809e 	bne.w	80052c8 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800518c:	7efb      	ldrb	r3, [r7, #27]
 800518e:	2b08      	cmp	r3, #8
 8005190:	d823      	bhi.n	80051da <UART_SetConfig+0x29e>
 8005192:	a201      	add	r2, pc, #4	; (adr r2, 8005198 <UART_SetConfig+0x25c>)
 8005194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005198:	080051bd 	.word	0x080051bd
 800519c:	080051db 	.word	0x080051db
 80051a0:	080051c5 	.word	0x080051c5
 80051a4:	080051db 	.word	0x080051db
 80051a8:	080051cb 	.word	0x080051cb
 80051ac:	080051db 	.word	0x080051db
 80051b0:	080051db 	.word	0x080051db
 80051b4:	080051db 	.word	0x080051db
 80051b8:	080051d3 	.word	0x080051d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051bc:	f7fd ff56 	bl	800306c <HAL_RCC_GetPCLK1Freq>
 80051c0:	6178      	str	r0, [r7, #20]
        break;
 80051c2:	e00f      	b.n	80051e4 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051c4:	4b1e      	ldr	r3, [pc, #120]	; (8005240 <UART_SetConfig+0x304>)
 80051c6:	617b      	str	r3, [r7, #20]
        break;
 80051c8:	e00c      	b.n	80051e4 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ca:	f7fd fee1 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 80051ce:	6178      	str	r0, [r7, #20]
        break;
 80051d0:	e008      	b.n	80051e4 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051d6:	617b      	str	r3, [r7, #20]
        break;
 80051d8:	e004      	b.n	80051e4 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 80051da:	2300      	movs	r3, #0
 80051dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	76bb      	strb	r3, [r7, #26]
        break;
 80051e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f000 812e 	beq.w	8005448 <UART_SetConfig+0x50c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	4a14      	ldr	r2, [pc, #80]	; (8005244 <UART_SetConfig+0x308>)
 80051f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051f6:	461a      	mov	r2, r3
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80051fe:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	4613      	mov	r3, r2
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	4413      	add	r3, r2
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	429a      	cmp	r2, r3
 800520e:	d305      	bcc.n	800521c <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	429a      	cmp	r2, r3
 800521a:	d915      	bls.n	8005248 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	76bb      	strb	r3, [r7, #26]
 8005220:	e112      	b.n	8005448 <UART_SetConfig+0x50c>
 8005222:	bf00      	nop
 8005224:	cfff69f3 	.word	0xcfff69f3
 8005228:	40008000 	.word	0x40008000
 800522c:	40013800 	.word	0x40013800
 8005230:	40021000 	.word	0x40021000
 8005234:	40004400 	.word	0x40004400
 8005238:	40004800 	.word	0x40004800
 800523c:	40004c00 	.word	0x40004c00
 8005240:	00f42400 	.word	0x00f42400
 8005244:	08008dac 	.word	0x08008dac
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	4618      	mov	r0, r3
 800524c:	f04f 0100 	mov.w	r1, #0
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005254:	4a86      	ldr	r2, [pc, #536]	; (8005470 <UART_SetConfig+0x534>)
 8005256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800525a:	b29a      	uxth	r2, r3
 800525c:	f04f 0300 	mov.w	r3, #0
 8005260:	f7fb fcda 	bl	8000c18 <__aeabi_uldivmod>
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	4610      	mov	r0, r2
 800526a:	4619      	mov	r1, r3
 800526c:	f04f 0200 	mov.w	r2, #0
 8005270:	f04f 0300 	mov.w	r3, #0
 8005274:	020b      	lsls	r3, r1, #8
 8005276:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800527a:	0202      	lsls	r2, r0, #8
 800527c:	6879      	ldr	r1, [r7, #4]
 800527e:	6849      	ldr	r1, [r1, #4]
 8005280:	0849      	lsrs	r1, r1, #1
 8005282:	4608      	mov	r0, r1
 8005284:	f04f 0100 	mov.w	r1, #0
 8005288:	1814      	adds	r4, r2, r0
 800528a:	eb43 0501 	adc.w	r5, r3, r1
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	461a      	mov	r2, r3
 8005294:	f04f 0300 	mov.w	r3, #0
 8005298:	4620      	mov	r0, r4
 800529a:	4629      	mov	r1, r5
 800529c:	f7fb fcbc 	bl	8000c18 <__aeabi_uldivmod>
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	4613      	mov	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052ae:	d308      	bcc.n	80052c2 <UART_SetConfig+0x386>
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052b6:	d204      	bcs.n	80052c2 <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	60da      	str	r2, [r3, #12]
 80052c0:	e0c2      	b.n	8005448 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	76bb      	strb	r3, [r7, #26]
 80052c6:	e0bf      	b.n	8005448 <UART_SetConfig+0x50c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	69db      	ldr	r3, [r3, #28]
 80052cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052d0:	d165      	bne.n	800539e <UART_SetConfig+0x462>
  {
    switch (clocksource)
 80052d2:	7efb      	ldrb	r3, [r7, #27]
 80052d4:	2b08      	cmp	r3, #8
 80052d6:	d828      	bhi.n	800532a <UART_SetConfig+0x3ee>
 80052d8:	a201      	add	r2, pc, #4	; (adr r2, 80052e0 <UART_SetConfig+0x3a4>)
 80052da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052de:	bf00      	nop
 80052e0:	08005305 	.word	0x08005305
 80052e4:	0800530d 	.word	0x0800530d
 80052e8:	08005315 	.word	0x08005315
 80052ec:	0800532b 	.word	0x0800532b
 80052f0:	0800531b 	.word	0x0800531b
 80052f4:	0800532b 	.word	0x0800532b
 80052f8:	0800532b 	.word	0x0800532b
 80052fc:	0800532b 	.word	0x0800532b
 8005300:	08005323 	.word	0x08005323
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005304:	f7fd feb2 	bl	800306c <HAL_RCC_GetPCLK1Freq>
 8005308:	6178      	str	r0, [r7, #20]
        break;
 800530a:	e013      	b.n	8005334 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800530c:	f7fd fec4 	bl	8003098 <HAL_RCC_GetPCLK2Freq>
 8005310:	6178      	str	r0, [r7, #20]
        break;
 8005312:	e00f      	b.n	8005334 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005314:	4b57      	ldr	r3, [pc, #348]	; (8005474 <UART_SetConfig+0x538>)
 8005316:	617b      	str	r3, [r7, #20]
        break;
 8005318:	e00c      	b.n	8005334 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800531a:	f7fd fe39 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 800531e:	6178      	str	r0, [r7, #20]
        break;
 8005320:	e008      	b.n	8005334 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005326:	617b      	str	r3, [r7, #20]
        break;
 8005328:	e004      	b.n	8005334 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 800532a:	2300      	movs	r3, #0
 800532c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	76bb      	strb	r3, [r7, #26]
        break;
 8005332:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	2b00      	cmp	r3, #0
 8005338:	f000 8086 	beq.w	8005448 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	4a4b      	ldr	r2, [pc, #300]	; (8005470 <UART_SetConfig+0x534>)
 8005342:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005346:	461a      	mov	r2, r3
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	fbb3 f3f2 	udiv	r3, r3, r2
 800534e:	005a      	lsls	r2, r3, #1
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	085b      	lsrs	r3, r3, #1
 8005356:	441a      	add	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005360:	b29b      	uxth	r3, r3
 8005362:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	2b0f      	cmp	r3, #15
 8005368:	d916      	bls.n	8005398 <UART_SetConfig+0x45c>
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005370:	d212      	bcs.n	8005398 <UART_SetConfig+0x45c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	b29b      	uxth	r3, r3
 8005376:	f023 030f 	bic.w	r3, r3, #15
 800537a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	085b      	lsrs	r3, r3, #1
 8005380:	b29b      	uxth	r3, r3
 8005382:	f003 0307 	and.w	r3, r3, #7
 8005386:	b29a      	uxth	r2, r3
 8005388:	89fb      	ldrh	r3, [r7, #14]
 800538a:	4313      	orrs	r3, r2
 800538c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	89fa      	ldrh	r2, [r7, #14]
 8005394:	60da      	str	r2, [r3, #12]
 8005396:	e057      	b.n	8005448 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	76bb      	strb	r3, [r7, #26]
 800539c:	e054      	b.n	8005448 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800539e:	7efb      	ldrb	r3, [r7, #27]
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	d828      	bhi.n	80053f6 <UART_SetConfig+0x4ba>
 80053a4:	a201      	add	r2, pc, #4	; (adr r2, 80053ac <UART_SetConfig+0x470>)
 80053a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053aa:	bf00      	nop
 80053ac:	080053d1 	.word	0x080053d1
 80053b0:	080053d9 	.word	0x080053d9
 80053b4:	080053e1 	.word	0x080053e1
 80053b8:	080053f7 	.word	0x080053f7
 80053bc:	080053e7 	.word	0x080053e7
 80053c0:	080053f7 	.word	0x080053f7
 80053c4:	080053f7 	.word	0x080053f7
 80053c8:	080053f7 	.word	0x080053f7
 80053cc:	080053ef 	.word	0x080053ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053d0:	f7fd fe4c 	bl	800306c <HAL_RCC_GetPCLK1Freq>
 80053d4:	6178      	str	r0, [r7, #20]
        break;
 80053d6:	e013      	b.n	8005400 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053d8:	f7fd fe5e 	bl	8003098 <HAL_RCC_GetPCLK2Freq>
 80053dc:	6178      	str	r0, [r7, #20]
        break;
 80053de:	e00f      	b.n	8005400 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053e0:	4b24      	ldr	r3, [pc, #144]	; (8005474 <UART_SetConfig+0x538>)
 80053e2:	617b      	str	r3, [r7, #20]
        break;
 80053e4:	e00c      	b.n	8005400 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053e6:	f7fd fdd3 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 80053ea:	6178      	str	r0, [r7, #20]
        break;
 80053ec:	e008      	b.n	8005400 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053f2:	617b      	str	r3, [r7, #20]
        break;
 80053f4:	e004      	b.n	8005400 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 80053f6:	2300      	movs	r3, #0
 80053f8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	76bb      	strb	r3, [r7, #26]
        break;
 80053fe:	bf00      	nop
    }

    if (pclk != 0U)
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d020      	beq.n	8005448 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540a:	4a19      	ldr	r2, [pc, #100]	; (8005470 <UART_SetConfig+0x534>)
 800540c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005410:	461a      	mov	r2, r3
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	fbb3 f2f2 	udiv	r2, r3, r2
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	085b      	lsrs	r3, r3, #1
 800541e:	441a      	add	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	fbb2 f3f3 	udiv	r3, r2, r3
 8005428:	b29b      	uxth	r3, r3
 800542a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	2b0f      	cmp	r3, #15
 8005430:	d908      	bls.n	8005444 <UART_SetConfig+0x508>
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005438:	d204      	bcs.n	8005444 <UART_SetConfig+0x508>
      {
        huart->Instance->BRR = usartdiv;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	60da      	str	r2, [r3, #12]
 8005442:	e001      	b.n	8005448 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005464:	7ebb      	ldrb	r3, [r7, #26]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3720      	adds	r7, #32
 800546a:	46bd      	mov	sp, r7
 800546c:	bdb0      	pop	{r4, r5, r7, pc}
 800546e:	bf00      	nop
 8005470:	08008dac 	.word	0x08008dac
 8005474:	00f42400 	.word	0x00f42400

08005478 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00a      	beq.n	80054a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	430a      	orrs	r2, r1
 80054a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00a      	beq.n	80054c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c8:	f003 0304 	and.w	r3, r3, #4
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00a      	beq.n	80054e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ea:	f003 0308 	and.w	r3, r3, #8
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00a      	beq.n	8005508 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	430a      	orrs	r2, r1
 8005506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550c:	f003 0310 	and.w	r3, r3, #16
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00a      	beq.n	800552a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552e:	f003 0320 	and.w	r3, r3, #32
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00a      	beq.n	800554c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	430a      	orrs	r2, r1
 800554a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005554:	2b00      	cmp	r3, #0
 8005556:	d01a      	beq.n	800558e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	430a      	orrs	r2, r1
 800556c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005572:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005576:	d10a      	bne.n	800558e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	430a      	orrs	r2, r1
 800558c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00a      	beq.n	80055b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	605a      	str	r2, [r3, #4]
  }
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af02      	add	r7, sp, #8
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055cc:	f7fc fc40 	bl	8001e50 <HAL_GetTick>
 80055d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0308 	and.w	r3, r3, #8
 80055dc:	2b08      	cmp	r3, #8
 80055de:	d10e      	bne.n	80055fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f82f 	bl	8005652 <UART_WaitOnFlagUntilTimeout>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e025      	b.n	800564a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0304 	and.w	r3, r3, #4
 8005608:	2b04      	cmp	r3, #4
 800560a:	d10e      	bne.n	800562a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800560c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f819 	bl	8005652 <UART_WaitOnFlagUntilTimeout>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e00f      	b.n	800564a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2220      	movs	r2, #32
 800562e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2220      	movs	r2, #32
 8005636:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b084      	sub	sp, #16
 8005656:	af00      	add	r7, sp, #0
 8005658:	60f8      	str	r0, [r7, #12]
 800565a:	60b9      	str	r1, [r7, #8]
 800565c:	603b      	str	r3, [r7, #0]
 800565e:	4613      	mov	r3, r2
 8005660:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005662:	e062      	b.n	800572a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566a:	d05e      	beq.n	800572a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800566c:	f7fc fbf0 	bl	8001e50 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	429a      	cmp	r2, r3
 800567a:	d302      	bcc.n	8005682 <UART_WaitOnFlagUntilTimeout+0x30>
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d11d      	bne.n	80056be <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005690:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 0201 	bic.w	r2, r2, #1
 80056a0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2220      	movs	r2, #32
 80056a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2220      	movs	r2, #32
 80056ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e045      	b.n	800574a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0304 	and.w	r3, r3, #4
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d02e      	beq.n	800572a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056da:	d126      	bne.n	800572a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80056f4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f022 0201 	bic.w	r2, r2, #1
 8005704:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2220      	movs	r2, #32
 800570a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2220      	movs	r2, #32
 8005712:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2220      	movs	r2, #32
 800571a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e00f      	b.n	800574a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	69da      	ldr	r2, [r3, #28]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	4013      	ands	r3, r2
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	429a      	cmp	r2, r3
 8005738:	bf0c      	ite	eq
 800573a:	2301      	moveq	r3, #1
 800573c:	2300      	movne	r3, #0
 800573e:	b2db      	uxtb	r3, r3
 8005740:	461a      	mov	r2, r3
 8005742:	79fb      	ldrb	r3, [r7, #7]
 8005744:	429a      	cmp	r2, r3
 8005746:	d08d      	beq.n	8005664 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
	...

08005754 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	4613      	mov	r3, r2
 8005760:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	88fa      	ldrh	r2, [r7, #6]
 800576c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	88fa      	ldrh	r2, [r7, #6]
 8005774:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005786:	d10e      	bne.n	80057a6 <UART_Start_Receive_IT+0x52>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d105      	bne.n	800579c <UART_Start_Receive_IT+0x48>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005796:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800579a:	e02d      	b.n	80057f8 <UART_Start_Receive_IT+0xa4>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	22ff      	movs	r2, #255	; 0xff
 80057a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057a4:	e028      	b.n	80057f8 <UART_Start_Receive_IT+0xa4>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10d      	bne.n	80057ca <UART_Start_Receive_IT+0x76>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d104      	bne.n	80057c0 <UART_Start_Receive_IT+0x6c>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	22ff      	movs	r2, #255	; 0xff
 80057ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057be:	e01b      	b.n	80057f8 <UART_Start_Receive_IT+0xa4>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	227f      	movs	r2, #127	; 0x7f
 80057c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057c8:	e016      	b.n	80057f8 <UART_Start_Receive_IT+0xa4>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057d2:	d10d      	bne.n	80057f0 <UART_Start_Receive_IT+0x9c>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d104      	bne.n	80057e6 <UART_Start_Receive_IT+0x92>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	227f      	movs	r2, #127	; 0x7f
 80057e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057e4:	e008      	b.n	80057f8 <UART_Start_Receive_IT+0xa4>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	223f      	movs	r2, #63	; 0x3f
 80057ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057ee:	e003      	b.n	80057f8 <UART_Start_Receive_IT+0xa4>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2222      	movs	r2, #34	; 0x22
 8005804:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689a      	ldr	r2, [r3, #8]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f042 0201 	orr.w	r2, r2, #1
 8005816:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800581c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005820:	d12a      	bne.n	8005878 <UART_Start_Receive_IT+0x124>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005828:	88fa      	ldrh	r2, [r7, #6]
 800582a:	429a      	cmp	r2, r3
 800582c:	d324      	bcc.n	8005878 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005836:	d107      	bne.n	8005848 <UART_Start_Receive_IT+0xf4>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d103      	bne.n	8005848 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4a1f      	ldr	r2, [pc, #124]	; (80058c0 <UART_Start_Receive_IT+0x16c>)
 8005844:	671a      	str	r2, [r3, #112]	; 0x70
 8005846:	e002      	b.n	800584e <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4a1e      	ldr	r2, [pc, #120]	; (80058c4 <UART_Start_Receive_IT+0x170>)
 800584c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005864:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005874:	609a      	str	r2, [r3, #8]
 8005876:	e01b      	b.n	80058b0 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005880:	d107      	bne.n	8005892 <UART_Start_Receive_IT+0x13e>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d103      	bne.n	8005892 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	4a0e      	ldr	r2, [pc, #56]	; (80058c8 <UART_Start_Receive_IT+0x174>)
 800588e:	671a      	str	r2, [r3, #112]	; 0x70
 8005890:	e002      	b.n	8005898 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	4a0d      	ldr	r2, [pc, #52]	; (80058cc <UART_Start_Receive_IT+0x178>)
 8005896:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80058ae:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3714      	adds	r7, #20
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	08005d49 	.word	0x08005d49
 80058c4:	08005b45 	.word	0x08005b45
 80058c8:	08005a6d 	.word	0x08005a6d
 80058cc:	08005995 	.word	0x08005995

080058d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80058e6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	6812      	ldr	r2, [r2, #0]
 80058f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058f6:	f023 0301 	bic.w	r3, r3, #1
 80058fa:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005900:	2b01      	cmp	r3, #1
 8005902:	d107      	bne.n	8005914 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f022 0210 	bic.w	r2, r2, #16
 8005912:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2220      	movs	r2, #32
 8005918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005940:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f7ff fadc 	bl	8004f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005958:	bf00      	nop
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005976:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2220      	movs	r2, #32
 800597c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7ff fab8 	bl	8004efc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800598c:	bf00      	nop
 800598e:	3708      	adds	r7, #8
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80059a2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059aa:	2b22      	cmp	r3, #34	; 0x22
 80059ac:	d152      	bne.n	8005a54 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b4:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80059b6:	89bb      	ldrh	r3, [r7, #12]
 80059b8:	b2d9      	uxtb	r1, r3
 80059ba:	89fb      	ldrh	r3, [r7, #14]
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c2:	400a      	ands	r2, r1
 80059c4:	b2d2      	uxtb	r2, r2
 80059c6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059cc:	1c5a      	adds	r2, r3, #1
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059d8:	b29b      	uxth	r3, r3
 80059da:	3b01      	subs	r3, #1
 80059dc:	b29a      	uxth	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d139      	bne.n	8005a64 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80059fe:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689a      	ldr	r2, [r3, #8]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 0201 	bic.w	r2, r2, #1
 8005a0e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2220      	movs	r2, #32
 8005a14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d10f      	bne.n	8005a46 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f022 0210 	bic.w	r2, r2, #16
 8005a34:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7ff fa70 	bl	8004f24 <HAL_UARTEx_RxEventCallback>
 8005a44:	e002      	b.n	8005a4c <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7fb fba6 	bl	8001198 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a52:	e007      	b.n	8005a64 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	699a      	ldr	r2, [r3, #24]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0208 	orr.w	r2, r2, #8
 8005a62:	619a      	str	r2, [r3, #24]
}
 8005a64:	bf00      	nop
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005a7a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a82:	2b22      	cmp	r3, #34	; 0x22
 8005a84:	d152      	bne.n	8005b2c <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8c:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a92:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005a94:	89ba      	ldrh	r2, [r7, #12]
 8005a96:	89fb      	ldrh	r3, [r7, #14]
 8005a98:	4013      	ands	r3, r2
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa4:	1c9a      	adds	r2, r3, #2
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d139      	bne.n	8005b3c <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ad6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689a      	ldr	r2, [r3, #8]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f022 0201 	bic.w	r2, r2, #1
 8005ae6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2220      	movs	r2, #32
 8005aec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d10f      	bne.n	8005b1e <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f022 0210 	bic.w	r2, r2, #16
 8005b0c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005b14:	4619      	mov	r1, r3
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7ff fa04 	bl	8004f24 <HAL_UARTEx_RxEventCallback>
 8005b1c:	e002      	b.n	8005b24 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f7fb fb3a 	bl	8001198 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b2a:	e007      	b.n	8005b3c <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	699a      	ldr	r2, [r3, #24]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f042 0208 	orr.w	r2, r2, #8
 8005b3a:	619a      	str	r2, [r3, #24]
}
 8005b3c:	bf00      	nop
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b088      	sub	sp, #32
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005b52:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b72:	2b22      	cmp	r3, #34	; 0x22
 8005b74:	f040 80da 	bne.w	8005d2c <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005b7e:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005b80:	e0aa      	b.n	8005cd8 <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005b8a:	89bb      	ldrh	r3, [r7, #12]
 8005b8c:	b2d9      	uxtb	r1, r3
 8005b8e:	8b7b      	ldrh	r3, [r7, #26]
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b96:	400a      	ands	r2, r1
 8005b98:	b2d2      	uxtb	r2, r2
 8005b9a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba0:	1c5a      	adds	r2, r3, #1
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	f003 0307 	and.w	r3, r3, #7
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d04d      	beq.n	8005c66 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d010      	beq.n	8005bf6 <UART_RxISR_8BIT_FIFOEN+0xb2>
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00b      	beq.n	8005bf6 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2201      	movs	r2, #1
 8005be4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bec:	f043 0201 	orr.w	r2, r3, #1
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	f003 0302 	and.w	r3, r3, #2
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d010      	beq.n	8005c22 <UART_RxISR_8BIT_FIFOEN+0xde>
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00b      	beq.n	8005c22 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c18:	f043 0204 	orr.w	r2, r3, #4
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	f003 0304 	and.w	r3, r3, #4
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d010      	beq.n	8005c4e <UART_RxISR_8BIT_FIFOEN+0x10a>
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00b      	beq.n	8005c4e <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2204      	movs	r2, #4
 8005c3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c44:	f043 0202 	orr.w	r2, r3, #2
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d006      	beq.n	8005c66 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f7ff f959 	bl	8004f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d132      	bne.n	8005cd8 <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c80:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	6812      	ldr	r2, [r2, #0]
 8005c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c90:	f023 0301 	bic.w	r3, r3, #1
 8005c94:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2220      	movs	r2, #32
 8005c9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d10f      	bne.n	8005ccc <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f022 0210 	bic.w	r2, r2, #16
 8005cba:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f7ff f92d 	bl	8004f24 <HAL_UARTEx_RxEventCallback>
 8005cca:	e002      	b.n	8005cd2 <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7fb fa63 	bl	8001198 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005cd8:	89fb      	ldrh	r3, [r7, #14]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d005      	beq.n	8005cea <UART_RxISR_8BIT_FIFOEN+0x1a6>
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	f003 0320 	and.w	r3, r3, #32
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f47f af4c 	bne.w	8005b82 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005cf0:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005cf2:	897b      	ldrh	r3, [r7, #10]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d021      	beq.n	8005d3c <UART_RxISR_8BIT_FIFOEN+0x1f8>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005cfe:	897a      	ldrh	r2, [r7, #10]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d21b      	bcs.n	8005d3c <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689a      	ldr	r2, [r3, #8]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005d12:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a0b      	ldr	r2, [pc, #44]	; (8005d44 <UART_RxISR_8BIT_FIFOEN+0x200>)
 8005d18:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f042 0220 	orr.w	r2, r2, #32
 8005d28:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d2a:	e007      	b.n	8005d3c <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699a      	ldr	r2, [r3, #24]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f042 0208 	orr.w	r2, r2, #8
 8005d3a:	619a      	str	r2, [r3, #24]
}
 8005d3c:	bf00      	nop
 8005d3e:	3720      	adds	r7, #32
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	08005995 	.word	0x08005995

08005d48 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b08a      	sub	sp, #40	; 0x28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005d56:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d76:	2b22      	cmp	r3, #34	; 0x22
 8005d78:	f040 80da 	bne.w	8005f30 <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005d82:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005d84:	e0aa      	b.n	8005edc <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8c:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d92:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 8005d94:	8aba      	ldrh	r2, [r7, #20]
 8005d96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005d98:	4013      	ands	r3, r2
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da4:	1c9a      	adds	r2, r3, #2
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	3b01      	subs	r3, #1
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc6:	f003 0307 	and.w	r3, r3, #7
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d04d      	beq.n	8005e6a <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d010      	beq.n	8005dfa <UART_RxISR_16BIT_FIFOEN+0xb2>
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00b      	beq.n	8005dfa <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2201      	movs	r2, #1
 8005de8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005df0:	f043 0201 	orr.w	r2, r3, #1
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfc:	f003 0302 	and.w	r3, r3, #2
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d010      	beq.n	8005e26 <UART_RxISR_16BIT_FIFOEN+0xde>
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00b      	beq.n	8005e26 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2202      	movs	r2, #2
 8005e14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e1c:	f043 0204 	orr.w	r2, r3, #4
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	f003 0304 	and.w	r3, r3, #4
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d010      	beq.n	8005e52 <UART_RxISR_16BIT_FIFOEN+0x10a>
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00b      	beq.n	8005e52 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2204      	movs	r2, #4
 8005e40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e48:	f043 0202 	orr.w	r2, r3, #2
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d006      	beq.n	8005e6a <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f7ff f857 	bl	8004f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d132      	bne.n	8005edc <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e84:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	6812      	ldr	r2, [r2, #0]
 8005e90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e94:	f023 0301 	bic.w	r3, r3, #1
 8005e98:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2220      	movs	r2, #32
 8005e9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d10f      	bne.n	8005ed0 <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f022 0210 	bic.w	r2, r2, #16
 8005ebe:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f7ff f82b 	bl	8004f24 <HAL_UARTEx_RxEventCallback>
 8005ece:	e002      	b.n	8005ed6 <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f7fb f961 	bl	8001198 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005edc:	8afb      	ldrh	r3, [r7, #22]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d005      	beq.n	8005eee <UART_RxISR_16BIT_FIFOEN+0x1a6>
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee4:	f003 0320 	and.w	r3, r3, #32
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f47f af4c 	bne.w	8005d86 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ef4:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005ef6:	89fb      	ldrh	r3, [r7, #14]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d021      	beq.n	8005f40 <UART_RxISR_16BIT_FIFOEN+0x1f8>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005f02:	89fa      	ldrh	r2, [r7, #14]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d21b      	bcs.n	8005f40 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689a      	ldr	r2, [r3, #8]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005f16:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a0b      	ldr	r2, [pc, #44]	; (8005f48 <UART_RxISR_16BIT_FIFOEN+0x200>)
 8005f1c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f042 0220 	orr.w	r2, r2, #32
 8005f2c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f2e:	e007      	b.n	8005f40 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	699a      	ldr	r2, [r3, #24]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0208 	orr.w	r2, r2, #8
 8005f3e:	619a      	str	r2, [r3, #24]
}
 8005f40:	bf00      	nop
 8005f42:	3728      	adds	r7, #40	; 0x28
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	08005a6d 	.word	0x08005a6d

08005f4c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d101      	bne.n	8005f9e <HAL_UARTEx_DisableFifoMode+0x16>
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	e027      	b.n	8005fee <HAL_UARTEx_DisableFifoMode+0x66>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2224      	movs	r2, #36	; 0x24
 8005faa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f022 0201 	bic.w	r2, r2, #1
 8005fc4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005fcc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2220      	movs	r2, #32
 8005fe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b084      	sub	sp, #16
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
 8006002:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800600a:	2b01      	cmp	r3, #1
 800600c:	d101      	bne.n	8006012 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800600e:	2302      	movs	r3, #2
 8006010:	e02d      	b.n	800606e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2224      	movs	r2, #36	; 0x24
 800601e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f022 0201 	bic.w	r2, r2, #1
 8006038:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	683a      	ldr	r2, [r7, #0]
 800604a:	430a      	orrs	r2, r1
 800604c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f850 	bl	80060f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2220      	movs	r2, #32
 8006060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b084      	sub	sp, #16
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
 800607e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006086:	2b01      	cmp	r3, #1
 8006088:	d101      	bne.n	800608e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800608a:	2302      	movs	r3, #2
 800608c:	e02d      	b.n	80060ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2224      	movs	r2, #36	; 0x24
 800609a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0201 	bic.w	r2, r2, #1
 80060b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	683a      	ldr	r2, [r7, #0]
 80060c6:	430a      	orrs	r2, r1
 80060c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f812 	bl	80060f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2220      	movs	r2, #32
 80060dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
	...

080060f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006100:	2b00      	cmp	r3, #0
 8006102:	d108      	bne.n	8006116 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006114:	e031      	b.n	800617a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006116:	2308      	movs	r3, #8
 8006118:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800611a:	2308      	movs	r3, #8
 800611c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	0e5b      	lsrs	r3, r3, #25
 8006126:	b2db      	uxtb	r3, r3
 8006128:	f003 0307 	and.w	r3, r3, #7
 800612c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	0f5b      	lsrs	r3, r3, #29
 8006136:	b2db      	uxtb	r3, r3
 8006138:	f003 0307 	and.w	r3, r3, #7
 800613c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800613e:	7bbb      	ldrb	r3, [r7, #14]
 8006140:	7b3a      	ldrb	r2, [r7, #12]
 8006142:	4911      	ldr	r1, [pc, #68]	; (8006188 <UARTEx_SetNbDataToProcess+0x94>)
 8006144:	5c8a      	ldrb	r2, [r1, r2]
 8006146:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800614a:	7b3a      	ldrb	r2, [r7, #12]
 800614c:	490f      	ldr	r1, [pc, #60]	; (800618c <UARTEx_SetNbDataToProcess+0x98>)
 800614e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006150:	fb93 f3f2 	sdiv	r3, r3, r2
 8006154:	b29a      	uxth	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800615c:	7bfb      	ldrb	r3, [r7, #15]
 800615e:	7b7a      	ldrb	r2, [r7, #13]
 8006160:	4909      	ldr	r1, [pc, #36]	; (8006188 <UARTEx_SetNbDataToProcess+0x94>)
 8006162:	5c8a      	ldrb	r2, [r1, r2]
 8006164:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006168:	7b7a      	ldrb	r2, [r7, #13]
 800616a:	4908      	ldr	r1, [pc, #32]	; (800618c <UARTEx_SetNbDataToProcess+0x98>)
 800616c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800616e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006172:	b29a      	uxth	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800617a:	bf00      	nop
 800617c:	3714      	adds	r7, #20
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	08008dc4 	.word	0x08008dc4
 800618c:	08008dcc 	.word	0x08008dcc

08006190 <__errno>:
 8006190:	4b01      	ldr	r3, [pc, #4]	; (8006198 <__errno+0x8>)
 8006192:	6818      	ldr	r0, [r3, #0]
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	20000024 	.word	0x20000024

0800619c <__libc_init_array>:
 800619c:	b570      	push	{r4, r5, r6, lr}
 800619e:	4d0d      	ldr	r5, [pc, #52]	; (80061d4 <__libc_init_array+0x38>)
 80061a0:	4c0d      	ldr	r4, [pc, #52]	; (80061d8 <__libc_init_array+0x3c>)
 80061a2:	1b64      	subs	r4, r4, r5
 80061a4:	10a4      	asrs	r4, r4, #2
 80061a6:	2600      	movs	r6, #0
 80061a8:	42a6      	cmp	r6, r4
 80061aa:	d109      	bne.n	80061c0 <__libc_init_array+0x24>
 80061ac:	4d0b      	ldr	r5, [pc, #44]	; (80061dc <__libc_init_array+0x40>)
 80061ae:	4c0c      	ldr	r4, [pc, #48]	; (80061e0 <__libc_init_array+0x44>)
 80061b0:	f002 fd80 	bl	8008cb4 <_init>
 80061b4:	1b64      	subs	r4, r4, r5
 80061b6:	10a4      	asrs	r4, r4, #2
 80061b8:	2600      	movs	r6, #0
 80061ba:	42a6      	cmp	r6, r4
 80061bc:	d105      	bne.n	80061ca <__libc_init_array+0x2e>
 80061be:	bd70      	pop	{r4, r5, r6, pc}
 80061c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80061c4:	4798      	blx	r3
 80061c6:	3601      	adds	r6, #1
 80061c8:	e7ee      	b.n	80061a8 <__libc_init_array+0xc>
 80061ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ce:	4798      	blx	r3
 80061d0:	3601      	adds	r6, #1
 80061d2:	e7f2      	b.n	80061ba <__libc_init_array+0x1e>
 80061d4:	080091bc 	.word	0x080091bc
 80061d8:	080091bc 	.word	0x080091bc
 80061dc:	080091bc 	.word	0x080091bc
 80061e0:	080091c0 	.word	0x080091c0

080061e4 <memset>:
 80061e4:	4402      	add	r2, r0
 80061e6:	4603      	mov	r3, r0
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d100      	bne.n	80061ee <memset+0xa>
 80061ec:	4770      	bx	lr
 80061ee:	f803 1b01 	strb.w	r1, [r3], #1
 80061f2:	e7f9      	b.n	80061e8 <memset+0x4>

080061f4 <__cvt>:
 80061f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061f8:	ec55 4b10 	vmov	r4, r5, d0
 80061fc:	2d00      	cmp	r5, #0
 80061fe:	460e      	mov	r6, r1
 8006200:	4619      	mov	r1, r3
 8006202:	462b      	mov	r3, r5
 8006204:	bfbb      	ittet	lt
 8006206:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800620a:	461d      	movlt	r5, r3
 800620c:	2300      	movge	r3, #0
 800620e:	232d      	movlt	r3, #45	; 0x2d
 8006210:	700b      	strb	r3, [r1, #0]
 8006212:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006214:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006218:	4691      	mov	r9, r2
 800621a:	f023 0820 	bic.w	r8, r3, #32
 800621e:	bfbc      	itt	lt
 8006220:	4622      	movlt	r2, r4
 8006222:	4614      	movlt	r4, r2
 8006224:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006228:	d005      	beq.n	8006236 <__cvt+0x42>
 800622a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800622e:	d100      	bne.n	8006232 <__cvt+0x3e>
 8006230:	3601      	adds	r6, #1
 8006232:	2102      	movs	r1, #2
 8006234:	e000      	b.n	8006238 <__cvt+0x44>
 8006236:	2103      	movs	r1, #3
 8006238:	ab03      	add	r3, sp, #12
 800623a:	9301      	str	r3, [sp, #4]
 800623c:	ab02      	add	r3, sp, #8
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	ec45 4b10 	vmov	d0, r4, r5
 8006244:	4653      	mov	r3, sl
 8006246:	4632      	mov	r2, r6
 8006248:	f000 fe1a 	bl	8006e80 <_dtoa_r>
 800624c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006250:	4607      	mov	r7, r0
 8006252:	d102      	bne.n	800625a <__cvt+0x66>
 8006254:	f019 0f01 	tst.w	r9, #1
 8006258:	d022      	beq.n	80062a0 <__cvt+0xac>
 800625a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800625e:	eb07 0906 	add.w	r9, r7, r6
 8006262:	d110      	bne.n	8006286 <__cvt+0x92>
 8006264:	783b      	ldrb	r3, [r7, #0]
 8006266:	2b30      	cmp	r3, #48	; 0x30
 8006268:	d10a      	bne.n	8006280 <__cvt+0x8c>
 800626a:	2200      	movs	r2, #0
 800626c:	2300      	movs	r3, #0
 800626e:	4620      	mov	r0, r4
 8006270:	4629      	mov	r1, r5
 8006272:	f7fa fc61 	bl	8000b38 <__aeabi_dcmpeq>
 8006276:	b918      	cbnz	r0, 8006280 <__cvt+0x8c>
 8006278:	f1c6 0601 	rsb	r6, r6, #1
 800627c:	f8ca 6000 	str.w	r6, [sl]
 8006280:	f8da 3000 	ldr.w	r3, [sl]
 8006284:	4499      	add	r9, r3
 8006286:	2200      	movs	r2, #0
 8006288:	2300      	movs	r3, #0
 800628a:	4620      	mov	r0, r4
 800628c:	4629      	mov	r1, r5
 800628e:	f7fa fc53 	bl	8000b38 <__aeabi_dcmpeq>
 8006292:	b108      	cbz	r0, 8006298 <__cvt+0xa4>
 8006294:	f8cd 900c 	str.w	r9, [sp, #12]
 8006298:	2230      	movs	r2, #48	; 0x30
 800629a:	9b03      	ldr	r3, [sp, #12]
 800629c:	454b      	cmp	r3, r9
 800629e:	d307      	bcc.n	80062b0 <__cvt+0xbc>
 80062a0:	9b03      	ldr	r3, [sp, #12]
 80062a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062a4:	1bdb      	subs	r3, r3, r7
 80062a6:	4638      	mov	r0, r7
 80062a8:	6013      	str	r3, [r2, #0]
 80062aa:	b004      	add	sp, #16
 80062ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062b0:	1c59      	adds	r1, r3, #1
 80062b2:	9103      	str	r1, [sp, #12]
 80062b4:	701a      	strb	r2, [r3, #0]
 80062b6:	e7f0      	b.n	800629a <__cvt+0xa6>

080062b8 <__exponent>:
 80062b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062ba:	4603      	mov	r3, r0
 80062bc:	2900      	cmp	r1, #0
 80062be:	bfb8      	it	lt
 80062c0:	4249      	neglt	r1, r1
 80062c2:	f803 2b02 	strb.w	r2, [r3], #2
 80062c6:	bfb4      	ite	lt
 80062c8:	222d      	movlt	r2, #45	; 0x2d
 80062ca:	222b      	movge	r2, #43	; 0x2b
 80062cc:	2909      	cmp	r1, #9
 80062ce:	7042      	strb	r2, [r0, #1]
 80062d0:	dd2a      	ble.n	8006328 <__exponent+0x70>
 80062d2:	f10d 0407 	add.w	r4, sp, #7
 80062d6:	46a4      	mov	ip, r4
 80062d8:	270a      	movs	r7, #10
 80062da:	46a6      	mov	lr, r4
 80062dc:	460a      	mov	r2, r1
 80062de:	fb91 f6f7 	sdiv	r6, r1, r7
 80062e2:	fb07 1516 	mls	r5, r7, r6, r1
 80062e6:	3530      	adds	r5, #48	; 0x30
 80062e8:	2a63      	cmp	r2, #99	; 0x63
 80062ea:	f104 34ff 	add.w	r4, r4, #4294967295
 80062ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80062f2:	4631      	mov	r1, r6
 80062f4:	dcf1      	bgt.n	80062da <__exponent+0x22>
 80062f6:	3130      	adds	r1, #48	; 0x30
 80062f8:	f1ae 0502 	sub.w	r5, lr, #2
 80062fc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006300:	1c44      	adds	r4, r0, #1
 8006302:	4629      	mov	r1, r5
 8006304:	4561      	cmp	r1, ip
 8006306:	d30a      	bcc.n	800631e <__exponent+0x66>
 8006308:	f10d 0209 	add.w	r2, sp, #9
 800630c:	eba2 020e 	sub.w	r2, r2, lr
 8006310:	4565      	cmp	r5, ip
 8006312:	bf88      	it	hi
 8006314:	2200      	movhi	r2, #0
 8006316:	4413      	add	r3, r2
 8006318:	1a18      	subs	r0, r3, r0
 800631a:	b003      	add	sp, #12
 800631c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800631e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006322:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006326:	e7ed      	b.n	8006304 <__exponent+0x4c>
 8006328:	2330      	movs	r3, #48	; 0x30
 800632a:	3130      	adds	r1, #48	; 0x30
 800632c:	7083      	strb	r3, [r0, #2]
 800632e:	70c1      	strb	r1, [r0, #3]
 8006330:	1d03      	adds	r3, r0, #4
 8006332:	e7f1      	b.n	8006318 <__exponent+0x60>

08006334 <_printf_float>:
 8006334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006338:	ed2d 8b02 	vpush	{d8}
 800633c:	b08d      	sub	sp, #52	; 0x34
 800633e:	460c      	mov	r4, r1
 8006340:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006344:	4616      	mov	r6, r2
 8006346:	461f      	mov	r7, r3
 8006348:	4605      	mov	r5, r0
 800634a:	f001 fd3d 	bl	8007dc8 <_localeconv_r>
 800634e:	f8d0 a000 	ldr.w	sl, [r0]
 8006352:	4650      	mov	r0, sl
 8006354:	f7f9 ff6e 	bl	8000234 <strlen>
 8006358:	2300      	movs	r3, #0
 800635a:	930a      	str	r3, [sp, #40]	; 0x28
 800635c:	6823      	ldr	r3, [r4, #0]
 800635e:	9305      	str	r3, [sp, #20]
 8006360:	f8d8 3000 	ldr.w	r3, [r8]
 8006364:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006368:	3307      	adds	r3, #7
 800636a:	f023 0307 	bic.w	r3, r3, #7
 800636e:	f103 0208 	add.w	r2, r3, #8
 8006372:	f8c8 2000 	str.w	r2, [r8]
 8006376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800637e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006382:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006386:	9307      	str	r3, [sp, #28]
 8006388:	f8cd 8018 	str.w	r8, [sp, #24]
 800638c:	ee08 0a10 	vmov	s16, r0
 8006390:	4b9f      	ldr	r3, [pc, #636]	; (8006610 <_printf_float+0x2dc>)
 8006392:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006396:	f04f 32ff 	mov.w	r2, #4294967295
 800639a:	f7fa fbff 	bl	8000b9c <__aeabi_dcmpun>
 800639e:	bb88      	cbnz	r0, 8006404 <_printf_float+0xd0>
 80063a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063a4:	4b9a      	ldr	r3, [pc, #616]	; (8006610 <_printf_float+0x2dc>)
 80063a6:	f04f 32ff 	mov.w	r2, #4294967295
 80063aa:	f7fa fbd9 	bl	8000b60 <__aeabi_dcmple>
 80063ae:	bb48      	cbnz	r0, 8006404 <_printf_float+0xd0>
 80063b0:	2200      	movs	r2, #0
 80063b2:	2300      	movs	r3, #0
 80063b4:	4640      	mov	r0, r8
 80063b6:	4649      	mov	r1, r9
 80063b8:	f7fa fbc8 	bl	8000b4c <__aeabi_dcmplt>
 80063bc:	b110      	cbz	r0, 80063c4 <_printf_float+0x90>
 80063be:	232d      	movs	r3, #45	; 0x2d
 80063c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063c4:	4b93      	ldr	r3, [pc, #588]	; (8006614 <_printf_float+0x2e0>)
 80063c6:	4894      	ldr	r0, [pc, #592]	; (8006618 <_printf_float+0x2e4>)
 80063c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80063cc:	bf94      	ite	ls
 80063ce:	4698      	movls	r8, r3
 80063d0:	4680      	movhi	r8, r0
 80063d2:	2303      	movs	r3, #3
 80063d4:	6123      	str	r3, [r4, #16]
 80063d6:	9b05      	ldr	r3, [sp, #20]
 80063d8:	f023 0204 	bic.w	r2, r3, #4
 80063dc:	6022      	str	r2, [r4, #0]
 80063de:	f04f 0900 	mov.w	r9, #0
 80063e2:	9700      	str	r7, [sp, #0]
 80063e4:	4633      	mov	r3, r6
 80063e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80063e8:	4621      	mov	r1, r4
 80063ea:	4628      	mov	r0, r5
 80063ec:	f000 f9d8 	bl	80067a0 <_printf_common>
 80063f0:	3001      	adds	r0, #1
 80063f2:	f040 8090 	bne.w	8006516 <_printf_float+0x1e2>
 80063f6:	f04f 30ff 	mov.w	r0, #4294967295
 80063fa:	b00d      	add	sp, #52	; 0x34
 80063fc:	ecbd 8b02 	vpop	{d8}
 8006400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006404:	4642      	mov	r2, r8
 8006406:	464b      	mov	r3, r9
 8006408:	4640      	mov	r0, r8
 800640a:	4649      	mov	r1, r9
 800640c:	f7fa fbc6 	bl	8000b9c <__aeabi_dcmpun>
 8006410:	b140      	cbz	r0, 8006424 <_printf_float+0xf0>
 8006412:	464b      	mov	r3, r9
 8006414:	2b00      	cmp	r3, #0
 8006416:	bfbc      	itt	lt
 8006418:	232d      	movlt	r3, #45	; 0x2d
 800641a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800641e:	487f      	ldr	r0, [pc, #508]	; (800661c <_printf_float+0x2e8>)
 8006420:	4b7f      	ldr	r3, [pc, #508]	; (8006620 <_printf_float+0x2ec>)
 8006422:	e7d1      	b.n	80063c8 <_printf_float+0x94>
 8006424:	6863      	ldr	r3, [r4, #4]
 8006426:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800642a:	9206      	str	r2, [sp, #24]
 800642c:	1c5a      	adds	r2, r3, #1
 800642e:	d13f      	bne.n	80064b0 <_printf_float+0x17c>
 8006430:	2306      	movs	r3, #6
 8006432:	6063      	str	r3, [r4, #4]
 8006434:	9b05      	ldr	r3, [sp, #20]
 8006436:	6861      	ldr	r1, [r4, #4]
 8006438:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800643c:	2300      	movs	r3, #0
 800643e:	9303      	str	r3, [sp, #12]
 8006440:	ab0a      	add	r3, sp, #40	; 0x28
 8006442:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006446:	ab09      	add	r3, sp, #36	; 0x24
 8006448:	ec49 8b10 	vmov	d0, r8, r9
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	6022      	str	r2, [r4, #0]
 8006450:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006454:	4628      	mov	r0, r5
 8006456:	f7ff fecd 	bl	80061f4 <__cvt>
 800645a:	9b06      	ldr	r3, [sp, #24]
 800645c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800645e:	2b47      	cmp	r3, #71	; 0x47
 8006460:	4680      	mov	r8, r0
 8006462:	d108      	bne.n	8006476 <_printf_float+0x142>
 8006464:	1cc8      	adds	r0, r1, #3
 8006466:	db02      	blt.n	800646e <_printf_float+0x13a>
 8006468:	6863      	ldr	r3, [r4, #4]
 800646a:	4299      	cmp	r1, r3
 800646c:	dd41      	ble.n	80064f2 <_printf_float+0x1be>
 800646e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006472:	fa5f fb8b 	uxtb.w	fp, fp
 8006476:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800647a:	d820      	bhi.n	80064be <_printf_float+0x18a>
 800647c:	3901      	subs	r1, #1
 800647e:	465a      	mov	r2, fp
 8006480:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006484:	9109      	str	r1, [sp, #36]	; 0x24
 8006486:	f7ff ff17 	bl	80062b8 <__exponent>
 800648a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800648c:	1813      	adds	r3, r2, r0
 800648e:	2a01      	cmp	r2, #1
 8006490:	4681      	mov	r9, r0
 8006492:	6123      	str	r3, [r4, #16]
 8006494:	dc02      	bgt.n	800649c <_printf_float+0x168>
 8006496:	6822      	ldr	r2, [r4, #0]
 8006498:	07d2      	lsls	r2, r2, #31
 800649a:	d501      	bpl.n	80064a0 <_printf_float+0x16c>
 800649c:	3301      	adds	r3, #1
 800649e:	6123      	str	r3, [r4, #16]
 80064a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d09c      	beq.n	80063e2 <_printf_float+0xae>
 80064a8:	232d      	movs	r3, #45	; 0x2d
 80064aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064ae:	e798      	b.n	80063e2 <_printf_float+0xae>
 80064b0:	9a06      	ldr	r2, [sp, #24]
 80064b2:	2a47      	cmp	r2, #71	; 0x47
 80064b4:	d1be      	bne.n	8006434 <_printf_float+0x100>
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1bc      	bne.n	8006434 <_printf_float+0x100>
 80064ba:	2301      	movs	r3, #1
 80064bc:	e7b9      	b.n	8006432 <_printf_float+0xfe>
 80064be:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80064c2:	d118      	bne.n	80064f6 <_printf_float+0x1c2>
 80064c4:	2900      	cmp	r1, #0
 80064c6:	6863      	ldr	r3, [r4, #4]
 80064c8:	dd0b      	ble.n	80064e2 <_printf_float+0x1ae>
 80064ca:	6121      	str	r1, [r4, #16]
 80064cc:	b913      	cbnz	r3, 80064d4 <_printf_float+0x1a0>
 80064ce:	6822      	ldr	r2, [r4, #0]
 80064d0:	07d0      	lsls	r0, r2, #31
 80064d2:	d502      	bpl.n	80064da <_printf_float+0x1a6>
 80064d4:	3301      	adds	r3, #1
 80064d6:	440b      	add	r3, r1
 80064d8:	6123      	str	r3, [r4, #16]
 80064da:	65a1      	str	r1, [r4, #88]	; 0x58
 80064dc:	f04f 0900 	mov.w	r9, #0
 80064e0:	e7de      	b.n	80064a0 <_printf_float+0x16c>
 80064e2:	b913      	cbnz	r3, 80064ea <_printf_float+0x1b6>
 80064e4:	6822      	ldr	r2, [r4, #0]
 80064e6:	07d2      	lsls	r2, r2, #31
 80064e8:	d501      	bpl.n	80064ee <_printf_float+0x1ba>
 80064ea:	3302      	adds	r3, #2
 80064ec:	e7f4      	b.n	80064d8 <_printf_float+0x1a4>
 80064ee:	2301      	movs	r3, #1
 80064f0:	e7f2      	b.n	80064d8 <_printf_float+0x1a4>
 80064f2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80064f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064f8:	4299      	cmp	r1, r3
 80064fa:	db05      	blt.n	8006508 <_printf_float+0x1d4>
 80064fc:	6823      	ldr	r3, [r4, #0]
 80064fe:	6121      	str	r1, [r4, #16]
 8006500:	07d8      	lsls	r0, r3, #31
 8006502:	d5ea      	bpl.n	80064da <_printf_float+0x1a6>
 8006504:	1c4b      	adds	r3, r1, #1
 8006506:	e7e7      	b.n	80064d8 <_printf_float+0x1a4>
 8006508:	2900      	cmp	r1, #0
 800650a:	bfd4      	ite	le
 800650c:	f1c1 0202 	rsble	r2, r1, #2
 8006510:	2201      	movgt	r2, #1
 8006512:	4413      	add	r3, r2
 8006514:	e7e0      	b.n	80064d8 <_printf_float+0x1a4>
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	055a      	lsls	r2, r3, #21
 800651a:	d407      	bmi.n	800652c <_printf_float+0x1f8>
 800651c:	6923      	ldr	r3, [r4, #16]
 800651e:	4642      	mov	r2, r8
 8006520:	4631      	mov	r1, r6
 8006522:	4628      	mov	r0, r5
 8006524:	47b8      	blx	r7
 8006526:	3001      	adds	r0, #1
 8006528:	d12c      	bne.n	8006584 <_printf_float+0x250>
 800652a:	e764      	b.n	80063f6 <_printf_float+0xc2>
 800652c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006530:	f240 80e0 	bls.w	80066f4 <_printf_float+0x3c0>
 8006534:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006538:	2200      	movs	r2, #0
 800653a:	2300      	movs	r3, #0
 800653c:	f7fa fafc 	bl	8000b38 <__aeabi_dcmpeq>
 8006540:	2800      	cmp	r0, #0
 8006542:	d034      	beq.n	80065ae <_printf_float+0x27a>
 8006544:	4a37      	ldr	r2, [pc, #220]	; (8006624 <_printf_float+0x2f0>)
 8006546:	2301      	movs	r3, #1
 8006548:	4631      	mov	r1, r6
 800654a:	4628      	mov	r0, r5
 800654c:	47b8      	blx	r7
 800654e:	3001      	adds	r0, #1
 8006550:	f43f af51 	beq.w	80063f6 <_printf_float+0xc2>
 8006554:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006558:	429a      	cmp	r2, r3
 800655a:	db02      	blt.n	8006562 <_printf_float+0x22e>
 800655c:	6823      	ldr	r3, [r4, #0]
 800655e:	07d8      	lsls	r0, r3, #31
 8006560:	d510      	bpl.n	8006584 <_printf_float+0x250>
 8006562:	ee18 3a10 	vmov	r3, s16
 8006566:	4652      	mov	r2, sl
 8006568:	4631      	mov	r1, r6
 800656a:	4628      	mov	r0, r5
 800656c:	47b8      	blx	r7
 800656e:	3001      	adds	r0, #1
 8006570:	f43f af41 	beq.w	80063f6 <_printf_float+0xc2>
 8006574:	f04f 0800 	mov.w	r8, #0
 8006578:	f104 091a 	add.w	r9, r4, #26
 800657c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800657e:	3b01      	subs	r3, #1
 8006580:	4543      	cmp	r3, r8
 8006582:	dc09      	bgt.n	8006598 <_printf_float+0x264>
 8006584:	6823      	ldr	r3, [r4, #0]
 8006586:	079b      	lsls	r3, r3, #30
 8006588:	f100 8105 	bmi.w	8006796 <_printf_float+0x462>
 800658c:	68e0      	ldr	r0, [r4, #12]
 800658e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006590:	4298      	cmp	r0, r3
 8006592:	bfb8      	it	lt
 8006594:	4618      	movlt	r0, r3
 8006596:	e730      	b.n	80063fa <_printf_float+0xc6>
 8006598:	2301      	movs	r3, #1
 800659a:	464a      	mov	r2, r9
 800659c:	4631      	mov	r1, r6
 800659e:	4628      	mov	r0, r5
 80065a0:	47b8      	blx	r7
 80065a2:	3001      	adds	r0, #1
 80065a4:	f43f af27 	beq.w	80063f6 <_printf_float+0xc2>
 80065a8:	f108 0801 	add.w	r8, r8, #1
 80065ac:	e7e6      	b.n	800657c <_printf_float+0x248>
 80065ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	dc39      	bgt.n	8006628 <_printf_float+0x2f4>
 80065b4:	4a1b      	ldr	r2, [pc, #108]	; (8006624 <_printf_float+0x2f0>)
 80065b6:	2301      	movs	r3, #1
 80065b8:	4631      	mov	r1, r6
 80065ba:	4628      	mov	r0, r5
 80065bc:	47b8      	blx	r7
 80065be:	3001      	adds	r0, #1
 80065c0:	f43f af19 	beq.w	80063f6 <_printf_float+0xc2>
 80065c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065c8:	4313      	orrs	r3, r2
 80065ca:	d102      	bne.n	80065d2 <_printf_float+0x29e>
 80065cc:	6823      	ldr	r3, [r4, #0]
 80065ce:	07d9      	lsls	r1, r3, #31
 80065d0:	d5d8      	bpl.n	8006584 <_printf_float+0x250>
 80065d2:	ee18 3a10 	vmov	r3, s16
 80065d6:	4652      	mov	r2, sl
 80065d8:	4631      	mov	r1, r6
 80065da:	4628      	mov	r0, r5
 80065dc:	47b8      	blx	r7
 80065de:	3001      	adds	r0, #1
 80065e0:	f43f af09 	beq.w	80063f6 <_printf_float+0xc2>
 80065e4:	f04f 0900 	mov.w	r9, #0
 80065e8:	f104 0a1a 	add.w	sl, r4, #26
 80065ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ee:	425b      	negs	r3, r3
 80065f0:	454b      	cmp	r3, r9
 80065f2:	dc01      	bgt.n	80065f8 <_printf_float+0x2c4>
 80065f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065f6:	e792      	b.n	800651e <_printf_float+0x1ea>
 80065f8:	2301      	movs	r3, #1
 80065fa:	4652      	mov	r2, sl
 80065fc:	4631      	mov	r1, r6
 80065fe:	4628      	mov	r0, r5
 8006600:	47b8      	blx	r7
 8006602:	3001      	adds	r0, #1
 8006604:	f43f aef7 	beq.w	80063f6 <_printf_float+0xc2>
 8006608:	f109 0901 	add.w	r9, r9, #1
 800660c:	e7ee      	b.n	80065ec <_printf_float+0x2b8>
 800660e:	bf00      	nop
 8006610:	7fefffff 	.word	0x7fefffff
 8006614:	08008dd8 	.word	0x08008dd8
 8006618:	08008ddc 	.word	0x08008ddc
 800661c:	08008de4 	.word	0x08008de4
 8006620:	08008de0 	.word	0x08008de0
 8006624:	08008de8 	.word	0x08008de8
 8006628:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800662a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800662c:	429a      	cmp	r2, r3
 800662e:	bfa8      	it	ge
 8006630:	461a      	movge	r2, r3
 8006632:	2a00      	cmp	r2, #0
 8006634:	4691      	mov	r9, r2
 8006636:	dc37      	bgt.n	80066a8 <_printf_float+0x374>
 8006638:	f04f 0b00 	mov.w	fp, #0
 800663c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006640:	f104 021a 	add.w	r2, r4, #26
 8006644:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006646:	9305      	str	r3, [sp, #20]
 8006648:	eba3 0309 	sub.w	r3, r3, r9
 800664c:	455b      	cmp	r3, fp
 800664e:	dc33      	bgt.n	80066b8 <_printf_float+0x384>
 8006650:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006654:	429a      	cmp	r2, r3
 8006656:	db3b      	blt.n	80066d0 <_printf_float+0x39c>
 8006658:	6823      	ldr	r3, [r4, #0]
 800665a:	07da      	lsls	r2, r3, #31
 800665c:	d438      	bmi.n	80066d0 <_printf_float+0x39c>
 800665e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006660:	9b05      	ldr	r3, [sp, #20]
 8006662:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	eba2 0901 	sub.w	r9, r2, r1
 800666a:	4599      	cmp	r9, r3
 800666c:	bfa8      	it	ge
 800666e:	4699      	movge	r9, r3
 8006670:	f1b9 0f00 	cmp.w	r9, #0
 8006674:	dc35      	bgt.n	80066e2 <_printf_float+0x3ae>
 8006676:	f04f 0800 	mov.w	r8, #0
 800667a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800667e:	f104 0a1a 	add.w	sl, r4, #26
 8006682:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006686:	1a9b      	subs	r3, r3, r2
 8006688:	eba3 0309 	sub.w	r3, r3, r9
 800668c:	4543      	cmp	r3, r8
 800668e:	f77f af79 	ble.w	8006584 <_printf_float+0x250>
 8006692:	2301      	movs	r3, #1
 8006694:	4652      	mov	r2, sl
 8006696:	4631      	mov	r1, r6
 8006698:	4628      	mov	r0, r5
 800669a:	47b8      	blx	r7
 800669c:	3001      	adds	r0, #1
 800669e:	f43f aeaa 	beq.w	80063f6 <_printf_float+0xc2>
 80066a2:	f108 0801 	add.w	r8, r8, #1
 80066a6:	e7ec      	b.n	8006682 <_printf_float+0x34e>
 80066a8:	4613      	mov	r3, r2
 80066aa:	4631      	mov	r1, r6
 80066ac:	4642      	mov	r2, r8
 80066ae:	4628      	mov	r0, r5
 80066b0:	47b8      	blx	r7
 80066b2:	3001      	adds	r0, #1
 80066b4:	d1c0      	bne.n	8006638 <_printf_float+0x304>
 80066b6:	e69e      	b.n	80063f6 <_printf_float+0xc2>
 80066b8:	2301      	movs	r3, #1
 80066ba:	4631      	mov	r1, r6
 80066bc:	4628      	mov	r0, r5
 80066be:	9205      	str	r2, [sp, #20]
 80066c0:	47b8      	blx	r7
 80066c2:	3001      	adds	r0, #1
 80066c4:	f43f ae97 	beq.w	80063f6 <_printf_float+0xc2>
 80066c8:	9a05      	ldr	r2, [sp, #20]
 80066ca:	f10b 0b01 	add.w	fp, fp, #1
 80066ce:	e7b9      	b.n	8006644 <_printf_float+0x310>
 80066d0:	ee18 3a10 	vmov	r3, s16
 80066d4:	4652      	mov	r2, sl
 80066d6:	4631      	mov	r1, r6
 80066d8:	4628      	mov	r0, r5
 80066da:	47b8      	blx	r7
 80066dc:	3001      	adds	r0, #1
 80066de:	d1be      	bne.n	800665e <_printf_float+0x32a>
 80066e0:	e689      	b.n	80063f6 <_printf_float+0xc2>
 80066e2:	9a05      	ldr	r2, [sp, #20]
 80066e4:	464b      	mov	r3, r9
 80066e6:	4442      	add	r2, r8
 80066e8:	4631      	mov	r1, r6
 80066ea:	4628      	mov	r0, r5
 80066ec:	47b8      	blx	r7
 80066ee:	3001      	adds	r0, #1
 80066f0:	d1c1      	bne.n	8006676 <_printf_float+0x342>
 80066f2:	e680      	b.n	80063f6 <_printf_float+0xc2>
 80066f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066f6:	2a01      	cmp	r2, #1
 80066f8:	dc01      	bgt.n	80066fe <_printf_float+0x3ca>
 80066fa:	07db      	lsls	r3, r3, #31
 80066fc:	d538      	bpl.n	8006770 <_printf_float+0x43c>
 80066fe:	2301      	movs	r3, #1
 8006700:	4642      	mov	r2, r8
 8006702:	4631      	mov	r1, r6
 8006704:	4628      	mov	r0, r5
 8006706:	47b8      	blx	r7
 8006708:	3001      	adds	r0, #1
 800670a:	f43f ae74 	beq.w	80063f6 <_printf_float+0xc2>
 800670e:	ee18 3a10 	vmov	r3, s16
 8006712:	4652      	mov	r2, sl
 8006714:	4631      	mov	r1, r6
 8006716:	4628      	mov	r0, r5
 8006718:	47b8      	blx	r7
 800671a:	3001      	adds	r0, #1
 800671c:	f43f ae6b 	beq.w	80063f6 <_printf_float+0xc2>
 8006720:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006724:	2200      	movs	r2, #0
 8006726:	2300      	movs	r3, #0
 8006728:	f7fa fa06 	bl	8000b38 <__aeabi_dcmpeq>
 800672c:	b9d8      	cbnz	r0, 8006766 <_printf_float+0x432>
 800672e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006730:	f108 0201 	add.w	r2, r8, #1
 8006734:	3b01      	subs	r3, #1
 8006736:	4631      	mov	r1, r6
 8006738:	4628      	mov	r0, r5
 800673a:	47b8      	blx	r7
 800673c:	3001      	adds	r0, #1
 800673e:	d10e      	bne.n	800675e <_printf_float+0x42a>
 8006740:	e659      	b.n	80063f6 <_printf_float+0xc2>
 8006742:	2301      	movs	r3, #1
 8006744:	4652      	mov	r2, sl
 8006746:	4631      	mov	r1, r6
 8006748:	4628      	mov	r0, r5
 800674a:	47b8      	blx	r7
 800674c:	3001      	adds	r0, #1
 800674e:	f43f ae52 	beq.w	80063f6 <_printf_float+0xc2>
 8006752:	f108 0801 	add.w	r8, r8, #1
 8006756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006758:	3b01      	subs	r3, #1
 800675a:	4543      	cmp	r3, r8
 800675c:	dcf1      	bgt.n	8006742 <_printf_float+0x40e>
 800675e:	464b      	mov	r3, r9
 8006760:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006764:	e6dc      	b.n	8006520 <_printf_float+0x1ec>
 8006766:	f04f 0800 	mov.w	r8, #0
 800676a:	f104 0a1a 	add.w	sl, r4, #26
 800676e:	e7f2      	b.n	8006756 <_printf_float+0x422>
 8006770:	2301      	movs	r3, #1
 8006772:	4642      	mov	r2, r8
 8006774:	e7df      	b.n	8006736 <_printf_float+0x402>
 8006776:	2301      	movs	r3, #1
 8006778:	464a      	mov	r2, r9
 800677a:	4631      	mov	r1, r6
 800677c:	4628      	mov	r0, r5
 800677e:	47b8      	blx	r7
 8006780:	3001      	adds	r0, #1
 8006782:	f43f ae38 	beq.w	80063f6 <_printf_float+0xc2>
 8006786:	f108 0801 	add.w	r8, r8, #1
 800678a:	68e3      	ldr	r3, [r4, #12]
 800678c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800678e:	1a5b      	subs	r3, r3, r1
 8006790:	4543      	cmp	r3, r8
 8006792:	dcf0      	bgt.n	8006776 <_printf_float+0x442>
 8006794:	e6fa      	b.n	800658c <_printf_float+0x258>
 8006796:	f04f 0800 	mov.w	r8, #0
 800679a:	f104 0919 	add.w	r9, r4, #25
 800679e:	e7f4      	b.n	800678a <_printf_float+0x456>

080067a0 <_printf_common>:
 80067a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067a4:	4616      	mov	r6, r2
 80067a6:	4699      	mov	r9, r3
 80067a8:	688a      	ldr	r2, [r1, #8]
 80067aa:	690b      	ldr	r3, [r1, #16]
 80067ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067b0:	4293      	cmp	r3, r2
 80067b2:	bfb8      	it	lt
 80067b4:	4613      	movlt	r3, r2
 80067b6:	6033      	str	r3, [r6, #0]
 80067b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067bc:	4607      	mov	r7, r0
 80067be:	460c      	mov	r4, r1
 80067c0:	b10a      	cbz	r2, 80067c6 <_printf_common+0x26>
 80067c2:	3301      	adds	r3, #1
 80067c4:	6033      	str	r3, [r6, #0]
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	0699      	lsls	r1, r3, #26
 80067ca:	bf42      	ittt	mi
 80067cc:	6833      	ldrmi	r3, [r6, #0]
 80067ce:	3302      	addmi	r3, #2
 80067d0:	6033      	strmi	r3, [r6, #0]
 80067d2:	6825      	ldr	r5, [r4, #0]
 80067d4:	f015 0506 	ands.w	r5, r5, #6
 80067d8:	d106      	bne.n	80067e8 <_printf_common+0x48>
 80067da:	f104 0a19 	add.w	sl, r4, #25
 80067de:	68e3      	ldr	r3, [r4, #12]
 80067e0:	6832      	ldr	r2, [r6, #0]
 80067e2:	1a9b      	subs	r3, r3, r2
 80067e4:	42ab      	cmp	r3, r5
 80067e6:	dc26      	bgt.n	8006836 <_printf_common+0x96>
 80067e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80067ec:	1e13      	subs	r3, r2, #0
 80067ee:	6822      	ldr	r2, [r4, #0]
 80067f0:	bf18      	it	ne
 80067f2:	2301      	movne	r3, #1
 80067f4:	0692      	lsls	r2, r2, #26
 80067f6:	d42b      	bmi.n	8006850 <_printf_common+0xb0>
 80067f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067fc:	4649      	mov	r1, r9
 80067fe:	4638      	mov	r0, r7
 8006800:	47c0      	blx	r8
 8006802:	3001      	adds	r0, #1
 8006804:	d01e      	beq.n	8006844 <_printf_common+0xa4>
 8006806:	6823      	ldr	r3, [r4, #0]
 8006808:	68e5      	ldr	r5, [r4, #12]
 800680a:	6832      	ldr	r2, [r6, #0]
 800680c:	f003 0306 	and.w	r3, r3, #6
 8006810:	2b04      	cmp	r3, #4
 8006812:	bf08      	it	eq
 8006814:	1aad      	subeq	r5, r5, r2
 8006816:	68a3      	ldr	r3, [r4, #8]
 8006818:	6922      	ldr	r2, [r4, #16]
 800681a:	bf0c      	ite	eq
 800681c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006820:	2500      	movne	r5, #0
 8006822:	4293      	cmp	r3, r2
 8006824:	bfc4      	itt	gt
 8006826:	1a9b      	subgt	r3, r3, r2
 8006828:	18ed      	addgt	r5, r5, r3
 800682a:	2600      	movs	r6, #0
 800682c:	341a      	adds	r4, #26
 800682e:	42b5      	cmp	r5, r6
 8006830:	d11a      	bne.n	8006868 <_printf_common+0xc8>
 8006832:	2000      	movs	r0, #0
 8006834:	e008      	b.n	8006848 <_printf_common+0xa8>
 8006836:	2301      	movs	r3, #1
 8006838:	4652      	mov	r2, sl
 800683a:	4649      	mov	r1, r9
 800683c:	4638      	mov	r0, r7
 800683e:	47c0      	blx	r8
 8006840:	3001      	adds	r0, #1
 8006842:	d103      	bne.n	800684c <_printf_common+0xac>
 8006844:	f04f 30ff 	mov.w	r0, #4294967295
 8006848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800684c:	3501      	adds	r5, #1
 800684e:	e7c6      	b.n	80067de <_printf_common+0x3e>
 8006850:	18e1      	adds	r1, r4, r3
 8006852:	1c5a      	adds	r2, r3, #1
 8006854:	2030      	movs	r0, #48	; 0x30
 8006856:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800685a:	4422      	add	r2, r4
 800685c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006860:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006864:	3302      	adds	r3, #2
 8006866:	e7c7      	b.n	80067f8 <_printf_common+0x58>
 8006868:	2301      	movs	r3, #1
 800686a:	4622      	mov	r2, r4
 800686c:	4649      	mov	r1, r9
 800686e:	4638      	mov	r0, r7
 8006870:	47c0      	blx	r8
 8006872:	3001      	adds	r0, #1
 8006874:	d0e6      	beq.n	8006844 <_printf_common+0xa4>
 8006876:	3601      	adds	r6, #1
 8006878:	e7d9      	b.n	800682e <_printf_common+0x8e>
	...

0800687c <_printf_i>:
 800687c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006880:	460c      	mov	r4, r1
 8006882:	4691      	mov	r9, r2
 8006884:	7e27      	ldrb	r7, [r4, #24]
 8006886:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006888:	2f78      	cmp	r7, #120	; 0x78
 800688a:	4680      	mov	r8, r0
 800688c:	469a      	mov	sl, r3
 800688e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006892:	d807      	bhi.n	80068a4 <_printf_i+0x28>
 8006894:	2f62      	cmp	r7, #98	; 0x62
 8006896:	d80a      	bhi.n	80068ae <_printf_i+0x32>
 8006898:	2f00      	cmp	r7, #0
 800689a:	f000 80d8 	beq.w	8006a4e <_printf_i+0x1d2>
 800689e:	2f58      	cmp	r7, #88	; 0x58
 80068a0:	f000 80a3 	beq.w	80069ea <_printf_i+0x16e>
 80068a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80068a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068ac:	e03a      	b.n	8006924 <_printf_i+0xa8>
 80068ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068b2:	2b15      	cmp	r3, #21
 80068b4:	d8f6      	bhi.n	80068a4 <_printf_i+0x28>
 80068b6:	a001      	add	r0, pc, #4	; (adr r0, 80068bc <_printf_i+0x40>)
 80068b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80068bc:	08006915 	.word	0x08006915
 80068c0:	08006929 	.word	0x08006929
 80068c4:	080068a5 	.word	0x080068a5
 80068c8:	080068a5 	.word	0x080068a5
 80068cc:	080068a5 	.word	0x080068a5
 80068d0:	080068a5 	.word	0x080068a5
 80068d4:	08006929 	.word	0x08006929
 80068d8:	080068a5 	.word	0x080068a5
 80068dc:	080068a5 	.word	0x080068a5
 80068e0:	080068a5 	.word	0x080068a5
 80068e4:	080068a5 	.word	0x080068a5
 80068e8:	08006a35 	.word	0x08006a35
 80068ec:	08006959 	.word	0x08006959
 80068f0:	08006a17 	.word	0x08006a17
 80068f4:	080068a5 	.word	0x080068a5
 80068f8:	080068a5 	.word	0x080068a5
 80068fc:	08006a57 	.word	0x08006a57
 8006900:	080068a5 	.word	0x080068a5
 8006904:	08006959 	.word	0x08006959
 8006908:	080068a5 	.word	0x080068a5
 800690c:	080068a5 	.word	0x080068a5
 8006910:	08006a1f 	.word	0x08006a1f
 8006914:	680b      	ldr	r3, [r1, #0]
 8006916:	1d1a      	adds	r2, r3, #4
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	600a      	str	r2, [r1, #0]
 800691c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006920:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006924:	2301      	movs	r3, #1
 8006926:	e0a3      	b.n	8006a70 <_printf_i+0x1f4>
 8006928:	6825      	ldr	r5, [r4, #0]
 800692a:	6808      	ldr	r0, [r1, #0]
 800692c:	062e      	lsls	r6, r5, #24
 800692e:	f100 0304 	add.w	r3, r0, #4
 8006932:	d50a      	bpl.n	800694a <_printf_i+0xce>
 8006934:	6805      	ldr	r5, [r0, #0]
 8006936:	600b      	str	r3, [r1, #0]
 8006938:	2d00      	cmp	r5, #0
 800693a:	da03      	bge.n	8006944 <_printf_i+0xc8>
 800693c:	232d      	movs	r3, #45	; 0x2d
 800693e:	426d      	negs	r5, r5
 8006940:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006944:	485e      	ldr	r0, [pc, #376]	; (8006ac0 <_printf_i+0x244>)
 8006946:	230a      	movs	r3, #10
 8006948:	e019      	b.n	800697e <_printf_i+0x102>
 800694a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800694e:	6805      	ldr	r5, [r0, #0]
 8006950:	600b      	str	r3, [r1, #0]
 8006952:	bf18      	it	ne
 8006954:	b22d      	sxthne	r5, r5
 8006956:	e7ef      	b.n	8006938 <_printf_i+0xbc>
 8006958:	680b      	ldr	r3, [r1, #0]
 800695a:	6825      	ldr	r5, [r4, #0]
 800695c:	1d18      	adds	r0, r3, #4
 800695e:	6008      	str	r0, [r1, #0]
 8006960:	0628      	lsls	r0, r5, #24
 8006962:	d501      	bpl.n	8006968 <_printf_i+0xec>
 8006964:	681d      	ldr	r5, [r3, #0]
 8006966:	e002      	b.n	800696e <_printf_i+0xf2>
 8006968:	0669      	lsls	r1, r5, #25
 800696a:	d5fb      	bpl.n	8006964 <_printf_i+0xe8>
 800696c:	881d      	ldrh	r5, [r3, #0]
 800696e:	4854      	ldr	r0, [pc, #336]	; (8006ac0 <_printf_i+0x244>)
 8006970:	2f6f      	cmp	r7, #111	; 0x6f
 8006972:	bf0c      	ite	eq
 8006974:	2308      	moveq	r3, #8
 8006976:	230a      	movne	r3, #10
 8006978:	2100      	movs	r1, #0
 800697a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800697e:	6866      	ldr	r6, [r4, #4]
 8006980:	60a6      	str	r6, [r4, #8]
 8006982:	2e00      	cmp	r6, #0
 8006984:	bfa2      	ittt	ge
 8006986:	6821      	ldrge	r1, [r4, #0]
 8006988:	f021 0104 	bicge.w	r1, r1, #4
 800698c:	6021      	strge	r1, [r4, #0]
 800698e:	b90d      	cbnz	r5, 8006994 <_printf_i+0x118>
 8006990:	2e00      	cmp	r6, #0
 8006992:	d04d      	beq.n	8006a30 <_printf_i+0x1b4>
 8006994:	4616      	mov	r6, r2
 8006996:	fbb5 f1f3 	udiv	r1, r5, r3
 800699a:	fb03 5711 	mls	r7, r3, r1, r5
 800699e:	5dc7      	ldrb	r7, [r0, r7]
 80069a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069a4:	462f      	mov	r7, r5
 80069a6:	42bb      	cmp	r3, r7
 80069a8:	460d      	mov	r5, r1
 80069aa:	d9f4      	bls.n	8006996 <_printf_i+0x11a>
 80069ac:	2b08      	cmp	r3, #8
 80069ae:	d10b      	bne.n	80069c8 <_printf_i+0x14c>
 80069b0:	6823      	ldr	r3, [r4, #0]
 80069b2:	07df      	lsls	r7, r3, #31
 80069b4:	d508      	bpl.n	80069c8 <_printf_i+0x14c>
 80069b6:	6923      	ldr	r3, [r4, #16]
 80069b8:	6861      	ldr	r1, [r4, #4]
 80069ba:	4299      	cmp	r1, r3
 80069bc:	bfde      	ittt	le
 80069be:	2330      	movle	r3, #48	; 0x30
 80069c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80069c8:	1b92      	subs	r2, r2, r6
 80069ca:	6122      	str	r2, [r4, #16]
 80069cc:	f8cd a000 	str.w	sl, [sp]
 80069d0:	464b      	mov	r3, r9
 80069d2:	aa03      	add	r2, sp, #12
 80069d4:	4621      	mov	r1, r4
 80069d6:	4640      	mov	r0, r8
 80069d8:	f7ff fee2 	bl	80067a0 <_printf_common>
 80069dc:	3001      	adds	r0, #1
 80069de:	d14c      	bne.n	8006a7a <_printf_i+0x1fe>
 80069e0:	f04f 30ff 	mov.w	r0, #4294967295
 80069e4:	b004      	add	sp, #16
 80069e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ea:	4835      	ldr	r0, [pc, #212]	; (8006ac0 <_printf_i+0x244>)
 80069ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80069f0:	6823      	ldr	r3, [r4, #0]
 80069f2:	680e      	ldr	r6, [r1, #0]
 80069f4:	061f      	lsls	r7, r3, #24
 80069f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80069fa:	600e      	str	r6, [r1, #0]
 80069fc:	d514      	bpl.n	8006a28 <_printf_i+0x1ac>
 80069fe:	07d9      	lsls	r1, r3, #31
 8006a00:	bf44      	itt	mi
 8006a02:	f043 0320 	orrmi.w	r3, r3, #32
 8006a06:	6023      	strmi	r3, [r4, #0]
 8006a08:	b91d      	cbnz	r5, 8006a12 <_printf_i+0x196>
 8006a0a:	6823      	ldr	r3, [r4, #0]
 8006a0c:	f023 0320 	bic.w	r3, r3, #32
 8006a10:	6023      	str	r3, [r4, #0]
 8006a12:	2310      	movs	r3, #16
 8006a14:	e7b0      	b.n	8006978 <_printf_i+0xfc>
 8006a16:	6823      	ldr	r3, [r4, #0]
 8006a18:	f043 0320 	orr.w	r3, r3, #32
 8006a1c:	6023      	str	r3, [r4, #0]
 8006a1e:	2378      	movs	r3, #120	; 0x78
 8006a20:	4828      	ldr	r0, [pc, #160]	; (8006ac4 <_printf_i+0x248>)
 8006a22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a26:	e7e3      	b.n	80069f0 <_printf_i+0x174>
 8006a28:	065e      	lsls	r6, r3, #25
 8006a2a:	bf48      	it	mi
 8006a2c:	b2ad      	uxthmi	r5, r5
 8006a2e:	e7e6      	b.n	80069fe <_printf_i+0x182>
 8006a30:	4616      	mov	r6, r2
 8006a32:	e7bb      	b.n	80069ac <_printf_i+0x130>
 8006a34:	680b      	ldr	r3, [r1, #0]
 8006a36:	6826      	ldr	r6, [r4, #0]
 8006a38:	6960      	ldr	r0, [r4, #20]
 8006a3a:	1d1d      	adds	r5, r3, #4
 8006a3c:	600d      	str	r5, [r1, #0]
 8006a3e:	0635      	lsls	r5, r6, #24
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	d501      	bpl.n	8006a48 <_printf_i+0x1cc>
 8006a44:	6018      	str	r0, [r3, #0]
 8006a46:	e002      	b.n	8006a4e <_printf_i+0x1d2>
 8006a48:	0671      	lsls	r1, r6, #25
 8006a4a:	d5fb      	bpl.n	8006a44 <_printf_i+0x1c8>
 8006a4c:	8018      	strh	r0, [r3, #0]
 8006a4e:	2300      	movs	r3, #0
 8006a50:	6123      	str	r3, [r4, #16]
 8006a52:	4616      	mov	r6, r2
 8006a54:	e7ba      	b.n	80069cc <_printf_i+0x150>
 8006a56:	680b      	ldr	r3, [r1, #0]
 8006a58:	1d1a      	adds	r2, r3, #4
 8006a5a:	600a      	str	r2, [r1, #0]
 8006a5c:	681e      	ldr	r6, [r3, #0]
 8006a5e:	6862      	ldr	r2, [r4, #4]
 8006a60:	2100      	movs	r1, #0
 8006a62:	4630      	mov	r0, r6
 8006a64:	f7f9 fbf4 	bl	8000250 <memchr>
 8006a68:	b108      	cbz	r0, 8006a6e <_printf_i+0x1f2>
 8006a6a:	1b80      	subs	r0, r0, r6
 8006a6c:	6060      	str	r0, [r4, #4]
 8006a6e:	6863      	ldr	r3, [r4, #4]
 8006a70:	6123      	str	r3, [r4, #16]
 8006a72:	2300      	movs	r3, #0
 8006a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a78:	e7a8      	b.n	80069cc <_printf_i+0x150>
 8006a7a:	6923      	ldr	r3, [r4, #16]
 8006a7c:	4632      	mov	r2, r6
 8006a7e:	4649      	mov	r1, r9
 8006a80:	4640      	mov	r0, r8
 8006a82:	47d0      	blx	sl
 8006a84:	3001      	adds	r0, #1
 8006a86:	d0ab      	beq.n	80069e0 <_printf_i+0x164>
 8006a88:	6823      	ldr	r3, [r4, #0]
 8006a8a:	079b      	lsls	r3, r3, #30
 8006a8c:	d413      	bmi.n	8006ab6 <_printf_i+0x23a>
 8006a8e:	68e0      	ldr	r0, [r4, #12]
 8006a90:	9b03      	ldr	r3, [sp, #12]
 8006a92:	4298      	cmp	r0, r3
 8006a94:	bfb8      	it	lt
 8006a96:	4618      	movlt	r0, r3
 8006a98:	e7a4      	b.n	80069e4 <_printf_i+0x168>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	4632      	mov	r2, r6
 8006a9e:	4649      	mov	r1, r9
 8006aa0:	4640      	mov	r0, r8
 8006aa2:	47d0      	blx	sl
 8006aa4:	3001      	adds	r0, #1
 8006aa6:	d09b      	beq.n	80069e0 <_printf_i+0x164>
 8006aa8:	3501      	adds	r5, #1
 8006aaa:	68e3      	ldr	r3, [r4, #12]
 8006aac:	9903      	ldr	r1, [sp, #12]
 8006aae:	1a5b      	subs	r3, r3, r1
 8006ab0:	42ab      	cmp	r3, r5
 8006ab2:	dcf2      	bgt.n	8006a9a <_printf_i+0x21e>
 8006ab4:	e7eb      	b.n	8006a8e <_printf_i+0x212>
 8006ab6:	2500      	movs	r5, #0
 8006ab8:	f104 0619 	add.w	r6, r4, #25
 8006abc:	e7f5      	b.n	8006aaa <_printf_i+0x22e>
 8006abe:	bf00      	nop
 8006ac0:	08008dea 	.word	0x08008dea
 8006ac4:	08008dfb 	.word	0x08008dfb

08006ac8 <iprintf>:
 8006ac8:	b40f      	push	{r0, r1, r2, r3}
 8006aca:	4b0a      	ldr	r3, [pc, #40]	; (8006af4 <iprintf+0x2c>)
 8006acc:	b513      	push	{r0, r1, r4, lr}
 8006ace:	681c      	ldr	r4, [r3, #0]
 8006ad0:	b124      	cbz	r4, 8006adc <iprintf+0x14>
 8006ad2:	69a3      	ldr	r3, [r4, #24]
 8006ad4:	b913      	cbnz	r3, 8006adc <iprintf+0x14>
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	f001 f8d8 	bl	8007c8c <__sinit>
 8006adc:	ab05      	add	r3, sp, #20
 8006ade:	9a04      	ldr	r2, [sp, #16]
 8006ae0:	68a1      	ldr	r1, [r4, #8]
 8006ae2:	9301      	str	r3, [sp, #4]
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	f001 fe53 	bl	8008790 <_vfiprintf_r>
 8006aea:	b002      	add	sp, #8
 8006aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006af0:	b004      	add	sp, #16
 8006af2:	4770      	bx	lr
 8006af4:	20000024 	.word	0x20000024

08006af8 <_puts_r>:
 8006af8:	b570      	push	{r4, r5, r6, lr}
 8006afa:	460e      	mov	r6, r1
 8006afc:	4605      	mov	r5, r0
 8006afe:	b118      	cbz	r0, 8006b08 <_puts_r+0x10>
 8006b00:	6983      	ldr	r3, [r0, #24]
 8006b02:	b90b      	cbnz	r3, 8006b08 <_puts_r+0x10>
 8006b04:	f001 f8c2 	bl	8007c8c <__sinit>
 8006b08:	69ab      	ldr	r3, [r5, #24]
 8006b0a:	68ac      	ldr	r4, [r5, #8]
 8006b0c:	b913      	cbnz	r3, 8006b14 <_puts_r+0x1c>
 8006b0e:	4628      	mov	r0, r5
 8006b10:	f001 f8bc 	bl	8007c8c <__sinit>
 8006b14:	4b2c      	ldr	r3, [pc, #176]	; (8006bc8 <_puts_r+0xd0>)
 8006b16:	429c      	cmp	r4, r3
 8006b18:	d120      	bne.n	8006b5c <_puts_r+0x64>
 8006b1a:	686c      	ldr	r4, [r5, #4]
 8006b1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b1e:	07db      	lsls	r3, r3, #31
 8006b20:	d405      	bmi.n	8006b2e <_puts_r+0x36>
 8006b22:	89a3      	ldrh	r3, [r4, #12]
 8006b24:	0598      	lsls	r0, r3, #22
 8006b26:	d402      	bmi.n	8006b2e <_puts_r+0x36>
 8006b28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b2a:	f001 f952 	bl	8007dd2 <__retarget_lock_acquire_recursive>
 8006b2e:	89a3      	ldrh	r3, [r4, #12]
 8006b30:	0719      	lsls	r1, r3, #28
 8006b32:	d51d      	bpl.n	8006b70 <_puts_r+0x78>
 8006b34:	6923      	ldr	r3, [r4, #16]
 8006b36:	b1db      	cbz	r3, 8006b70 <_puts_r+0x78>
 8006b38:	3e01      	subs	r6, #1
 8006b3a:	68a3      	ldr	r3, [r4, #8]
 8006b3c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006b40:	3b01      	subs	r3, #1
 8006b42:	60a3      	str	r3, [r4, #8]
 8006b44:	bb39      	cbnz	r1, 8006b96 <_puts_r+0x9e>
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	da38      	bge.n	8006bbc <_puts_r+0xc4>
 8006b4a:	4622      	mov	r2, r4
 8006b4c:	210a      	movs	r1, #10
 8006b4e:	4628      	mov	r0, r5
 8006b50:	f000 f848 	bl	8006be4 <__swbuf_r>
 8006b54:	3001      	adds	r0, #1
 8006b56:	d011      	beq.n	8006b7c <_puts_r+0x84>
 8006b58:	250a      	movs	r5, #10
 8006b5a:	e011      	b.n	8006b80 <_puts_r+0x88>
 8006b5c:	4b1b      	ldr	r3, [pc, #108]	; (8006bcc <_puts_r+0xd4>)
 8006b5e:	429c      	cmp	r4, r3
 8006b60:	d101      	bne.n	8006b66 <_puts_r+0x6e>
 8006b62:	68ac      	ldr	r4, [r5, #8]
 8006b64:	e7da      	b.n	8006b1c <_puts_r+0x24>
 8006b66:	4b1a      	ldr	r3, [pc, #104]	; (8006bd0 <_puts_r+0xd8>)
 8006b68:	429c      	cmp	r4, r3
 8006b6a:	bf08      	it	eq
 8006b6c:	68ec      	ldreq	r4, [r5, #12]
 8006b6e:	e7d5      	b.n	8006b1c <_puts_r+0x24>
 8006b70:	4621      	mov	r1, r4
 8006b72:	4628      	mov	r0, r5
 8006b74:	f000 f888 	bl	8006c88 <__swsetup_r>
 8006b78:	2800      	cmp	r0, #0
 8006b7a:	d0dd      	beq.n	8006b38 <_puts_r+0x40>
 8006b7c:	f04f 35ff 	mov.w	r5, #4294967295
 8006b80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b82:	07da      	lsls	r2, r3, #31
 8006b84:	d405      	bmi.n	8006b92 <_puts_r+0x9a>
 8006b86:	89a3      	ldrh	r3, [r4, #12]
 8006b88:	059b      	lsls	r3, r3, #22
 8006b8a:	d402      	bmi.n	8006b92 <_puts_r+0x9a>
 8006b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b8e:	f001 f921 	bl	8007dd4 <__retarget_lock_release_recursive>
 8006b92:	4628      	mov	r0, r5
 8006b94:	bd70      	pop	{r4, r5, r6, pc}
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	da04      	bge.n	8006ba4 <_puts_r+0xac>
 8006b9a:	69a2      	ldr	r2, [r4, #24]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	dc06      	bgt.n	8006bae <_puts_r+0xb6>
 8006ba0:	290a      	cmp	r1, #10
 8006ba2:	d004      	beq.n	8006bae <_puts_r+0xb6>
 8006ba4:	6823      	ldr	r3, [r4, #0]
 8006ba6:	1c5a      	adds	r2, r3, #1
 8006ba8:	6022      	str	r2, [r4, #0]
 8006baa:	7019      	strb	r1, [r3, #0]
 8006bac:	e7c5      	b.n	8006b3a <_puts_r+0x42>
 8006bae:	4622      	mov	r2, r4
 8006bb0:	4628      	mov	r0, r5
 8006bb2:	f000 f817 	bl	8006be4 <__swbuf_r>
 8006bb6:	3001      	adds	r0, #1
 8006bb8:	d1bf      	bne.n	8006b3a <_puts_r+0x42>
 8006bba:	e7df      	b.n	8006b7c <_puts_r+0x84>
 8006bbc:	6823      	ldr	r3, [r4, #0]
 8006bbe:	250a      	movs	r5, #10
 8006bc0:	1c5a      	adds	r2, r3, #1
 8006bc2:	6022      	str	r2, [r4, #0]
 8006bc4:	701d      	strb	r5, [r3, #0]
 8006bc6:	e7db      	b.n	8006b80 <_puts_r+0x88>
 8006bc8:	08008ec0 	.word	0x08008ec0
 8006bcc:	08008ee0 	.word	0x08008ee0
 8006bd0:	08008ea0 	.word	0x08008ea0

08006bd4 <puts>:
 8006bd4:	4b02      	ldr	r3, [pc, #8]	; (8006be0 <puts+0xc>)
 8006bd6:	4601      	mov	r1, r0
 8006bd8:	6818      	ldr	r0, [r3, #0]
 8006bda:	f7ff bf8d 	b.w	8006af8 <_puts_r>
 8006bde:	bf00      	nop
 8006be0:	20000024 	.word	0x20000024

08006be4 <__swbuf_r>:
 8006be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be6:	460e      	mov	r6, r1
 8006be8:	4614      	mov	r4, r2
 8006bea:	4605      	mov	r5, r0
 8006bec:	b118      	cbz	r0, 8006bf6 <__swbuf_r+0x12>
 8006bee:	6983      	ldr	r3, [r0, #24]
 8006bf0:	b90b      	cbnz	r3, 8006bf6 <__swbuf_r+0x12>
 8006bf2:	f001 f84b 	bl	8007c8c <__sinit>
 8006bf6:	4b21      	ldr	r3, [pc, #132]	; (8006c7c <__swbuf_r+0x98>)
 8006bf8:	429c      	cmp	r4, r3
 8006bfa:	d12b      	bne.n	8006c54 <__swbuf_r+0x70>
 8006bfc:	686c      	ldr	r4, [r5, #4]
 8006bfe:	69a3      	ldr	r3, [r4, #24]
 8006c00:	60a3      	str	r3, [r4, #8]
 8006c02:	89a3      	ldrh	r3, [r4, #12]
 8006c04:	071a      	lsls	r2, r3, #28
 8006c06:	d52f      	bpl.n	8006c68 <__swbuf_r+0x84>
 8006c08:	6923      	ldr	r3, [r4, #16]
 8006c0a:	b36b      	cbz	r3, 8006c68 <__swbuf_r+0x84>
 8006c0c:	6923      	ldr	r3, [r4, #16]
 8006c0e:	6820      	ldr	r0, [r4, #0]
 8006c10:	1ac0      	subs	r0, r0, r3
 8006c12:	6963      	ldr	r3, [r4, #20]
 8006c14:	b2f6      	uxtb	r6, r6
 8006c16:	4283      	cmp	r3, r0
 8006c18:	4637      	mov	r7, r6
 8006c1a:	dc04      	bgt.n	8006c26 <__swbuf_r+0x42>
 8006c1c:	4621      	mov	r1, r4
 8006c1e:	4628      	mov	r0, r5
 8006c20:	f000 ffa0 	bl	8007b64 <_fflush_r>
 8006c24:	bb30      	cbnz	r0, 8006c74 <__swbuf_r+0x90>
 8006c26:	68a3      	ldr	r3, [r4, #8]
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	60a3      	str	r3, [r4, #8]
 8006c2c:	6823      	ldr	r3, [r4, #0]
 8006c2e:	1c5a      	adds	r2, r3, #1
 8006c30:	6022      	str	r2, [r4, #0]
 8006c32:	701e      	strb	r6, [r3, #0]
 8006c34:	6963      	ldr	r3, [r4, #20]
 8006c36:	3001      	adds	r0, #1
 8006c38:	4283      	cmp	r3, r0
 8006c3a:	d004      	beq.n	8006c46 <__swbuf_r+0x62>
 8006c3c:	89a3      	ldrh	r3, [r4, #12]
 8006c3e:	07db      	lsls	r3, r3, #31
 8006c40:	d506      	bpl.n	8006c50 <__swbuf_r+0x6c>
 8006c42:	2e0a      	cmp	r6, #10
 8006c44:	d104      	bne.n	8006c50 <__swbuf_r+0x6c>
 8006c46:	4621      	mov	r1, r4
 8006c48:	4628      	mov	r0, r5
 8006c4a:	f000 ff8b 	bl	8007b64 <_fflush_r>
 8006c4e:	b988      	cbnz	r0, 8006c74 <__swbuf_r+0x90>
 8006c50:	4638      	mov	r0, r7
 8006c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c54:	4b0a      	ldr	r3, [pc, #40]	; (8006c80 <__swbuf_r+0x9c>)
 8006c56:	429c      	cmp	r4, r3
 8006c58:	d101      	bne.n	8006c5e <__swbuf_r+0x7a>
 8006c5a:	68ac      	ldr	r4, [r5, #8]
 8006c5c:	e7cf      	b.n	8006bfe <__swbuf_r+0x1a>
 8006c5e:	4b09      	ldr	r3, [pc, #36]	; (8006c84 <__swbuf_r+0xa0>)
 8006c60:	429c      	cmp	r4, r3
 8006c62:	bf08      	it	eq
 8006c64:	68ec      	ldreq	r4, [r5, #12]
 8006c66:	e7ca      	b.n	8006bfe <__swbuf_r+0x1a>
 8006c68:	4621      	mov	r1, r4
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	f000 f80c 	bl	8006c88 <__swsetup_r>
 8006c70:	2800      	cmp	r0, #0
 8006c72:	d0cb      	beq.n	8006c0c <__swbuf_r+0x28>
 8006c74:	f04f 37ff 	mov.w	r7, #4294967295
 8006c78:	e7ea      	b.n	8006c50 <__swbuf_r+0x6c>
 8006c7a:	bf00      	nop
 8006c7c:	08008ec0 	.word	0x08008ec0
 8006c80:	08008ee0 	.word	0x08008ee0
 8006c84:	08008ea0 	.word	0x08008ea0

08006c88 <__swsetup_r>:
 8006c88:	4b32      	ldr	r3, [pc, #200]	; (8006d54 <__swsetup_r+0xcc>)
 8006c8a:	b570      	push	{r4, r5, r6, lr}
 8006c8c:	681d      	ldr	r5, [r3, #0]
 8006c8e:	4606      	mov	r6, r0
 8006c90:	460c      	mov	r4, r1
 8006c92:	b125      	cbz	r5, 8006c9e <__swsetup_r+0x16>
 8006c94:	69ab      	ldr	r3, [r5, #24]
 8006c96:	b913      	cbnz	r3, 8006c9e <__swsetup_r+0x16>
 8006c98:	4628      	mov	r0, r5
 8006c9a:	f000 fff7 	bl	8007c8c <__sinit>
 8006c9e:	4b2e      	ldr	r3, [pc, #184]	; (8006d58 <__swsetup_r+0xd0>)
 8006ca0:	429c      	cmp	r4, r3
 8006ca2:	d10f      	bne.n	8006cc4 <__swsetup_r+0x3c>
 8006ca4:	686c      	ldr	r4, [r5, #4]
 8006ca6:	89a3      	ldrh	r3, [r4, #12]
 8006ca8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cac:	0719      	lsls	r1, r3, #28
 8006cae:	d42c      	bmi.n	8006d0a <__swsetup_r+0x82>
 8006cb0:	06dd      	lsls	r5, r3, #27
 8006cb2:	d411      	bmi.n	8006cd8 <__swsetup_r+0x50>
 8006cb4:	2309      	movs	r3, #9
 8006cb6:	6033      	str	r3, [r6, #0]
 8006cb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006cbc:	81a3      	strh	r3, [r4, #12]
 8006cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc2:	e03e      	b.n	8006d42 <__swsetup_r+0xba>
 8006cc4:	4b25      	ldr	r3, [pc, #148]	; (8006d5c <__swsetup_r+0xd4>)
 8006cc6:	429c      	cmp	r4, r3
 8006cc8:	d101      	bne.n	8006cce <__swsetup_r+0x46>
 8006cca:	68ac      	ldr	r4, [r5, #8]
 8006ccc:	e7eb      	b.n	8006ca6 <__swsetup_r+0x1e>
 8006cce:	4b24      	ldr	r3, [pc, #144]	; (8006d60 <__swsetup_r+0xd8>)
 8006cd0:	429c      	cmp	r4, r3
 8006cd2:	bf08      	it	eq
 8006cd4:	68ec      	ldreq	r4, [r5, #12]
 8006cd6:	e7e6      	b.n	8006ca6 <__swsetup_r+0x1e>
 8006cd8:	0758      	lsls	r0, r3, #29
 8006cda:	d512      	bpl.n	8006d02 <__swsetup_r+0x7a>
 8006cdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cde:	b141      	cbz	r1, 8006cf2 <__swsetup_r+0x6a>
 8006ce0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ce4:	4299      	cmp	r1, r3
 8006ce6:	d002      	beq.n	8006cee <__swsetup_r+0x66>
 8006ce8:	4630      	mov	r0, r6
 8006cea:	f001 fc7d 	bl	80085e8 <_free_r>
 8006cee:	2300      	movs	r3, #0
 8006cf0:	6363      	str	r3, [r4, #52]	; 0x34
 8006cf2:	89a3      	ldrh	r3, [r4, #12]
 8006cf4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006cf8:	81a3      	strh	r3, [r4, #12]
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	6063      	str	r3, [r4, #4]
 8006cfe:	6923      	ldr	r3, [r4, #16]
 8006d00:	6023      	str	r3, [r4, #0]
 8006d02:	89a3      	ldrh	r3, [r4, #12]
 8006d04:	f043 0308 	orr.w	r3, r3, #8
 8006d08:	81a3      	strh	r3, [r4, #12]
 8006d0a:	6923      	ldr	r3, [r4, #16]
 8006d0c:	b94b      	cbnz	r3, 8006d22 <__swsetup_r+0x9a>
 8006d0e:	89a3      	ldrh	r3, [r4, #12]
 8006d10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d18:	d003      	beq.n	8006d22 <__swsetup_r+0x9a>
 8006d1a:	4621      	mov	r1, r4
 8006d1c:	4630      	mov	r0, r6
 8006d1e:	f001 f87f 	bl	8007e20 <__smakebuf_r>
 8006d22:	89a0      	ldrh	r0, [r4, #12]
 8006d24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d28:	f010 0301 	ands.w	r3, r0, #1
 8006d2c:	d00a      	beq.n	8006d44 <__swsetup_r+0xbc>
 8006d2e:	2300      	movs	r3, #0
 8006d30:	60a3      	str	r3, [r4, #8]
 8006d32:	6963      	ldr	r3, [r4, #20]
 8006d34:	425b      	negs	r3, r3
 8006d36:	61a3      	str	r3, [r4, #24]
 8006d38:	6923      	ldr	r3, [r4, #16]
 8006d3a:	b943      	cbnz	r3, 8006d4e <__swsetup_r+0xc6>
 8006d3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d40:	d1ba      	bne.n	8006cb8 <__swsetup_r+0x30>
 8006d42:	bd70      	pop	{r4, r5, r6, pc}
 8006d44:	0781      	lsls	r1, r0, #30
 8006d46:	bf58      	it	pl
 8006d48:	6963      	ldrpl	r3, [r4, #20]
 8006d4a:	60a3      	str	r3, [r4, #8]
 8006d4c:	e7f4      	b.n	8006d38 <__swsetup_r+0xb0>
 8006d4e:	2000      	movs	r0, #0
 8006d50:	e7f7      	b.n	8006d42 <__swsetup_r+0xba>
 8006d52:	bf00      	nop
 8006d54:	20000024 	.word	0x20000024
 8006d58:	08008ec0 	.word	0x08008ec0
 8006d5c:	08008ee0 	.word	0x08008ee0
 8006d60:	08008ea0 	.word	0x08008ea0

08006d64 <quorem>:
 8006d64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d68:	6903      	ldr	r3, [r0, #16]
 8006d6a:	690c      	ldr	r4, [r1, #16]
 8006d6c:	42a3      	cmp	r3, r4
 8006d6e:	4607      	mov	r7, r0
 8006d70:	f2c0 8081 	blt.w	8006e76 <quorem+0x112>
 8006d74:	3c01      	subs	r4, #1
 8006d76:	f101 0814 	add.w	r8, r1, #20
 8006d7a:	f100 0514 	add.w	r5, r0, #20
 8006d7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d82:	9301      	str	r3, [sp, #4]
 8006d84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006d94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d98:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d9c:	d331      	bcc.n	8006e02 <quorem+0x9e>
 8006d9e:	f04f 0e00 	mov.w	lr, #0
 8006da2:	4640      	mov	r0, r8
 8006da4:	46ac      	mov	ip, r5
 8006da6:	46f2      	mov	sl, lr
 8006da8:	f850 2b04 	ldr.w	r2, [r0], #4
 8006dac:	b293      	uxth	r3, r2
 8006dae:	fb06 e303 	mla	r3, r6, r3, lr
 8006db2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	ebaa 0303 	sub.w	r3, sl, r3
 8006dbc:	0c12      	lsrs	r2, r2, #16
 8006dbe:	f8dc a000 	ldr.w	sl, [ip]
 8006dc2:	fb06 e202 	mla	r2, r6, r2, lr
 8006dc6:	fa13 f38a 	uxtah	r3, r3, sl
 8006dca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006dce:	fa1f fa82 	uxth.w	sl, r2
 8006dd2:	f8dc 2000 	ldr.w	r2, [ip]
 8006dd6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006dda:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006de4:	4581      	cmp	r9, r0
 8006de6:	f84c 3b04 	str.w	r3, [ip], #4
 8006dea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006dee:	d2db      	bcs.n	8006da8 <quorem+0x44>
 8006df0:	f855 300b 	ldr.w	r3, [r5, fp]
 8006df4:	b92b      	cbnz	r3, 8006e02 <quorem+0x9e>
 8006df6:	9b01      	ldr	r3, [sp, #4]
 8006df8:	3b04      	subs	r3, #4
 8006dfa:	429d      	cmp	r5, r3
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	d32e      	bcc.n	8006e5e <quorem+0xfa>
 8006e00:	613c      	str	r4, [r7, #16]
 8006e02:	4638      	mov	r0, r7
 8006e04:	f001 fae0 	bl	80083c8 <__mcmp>
 8006e08:	2800      	cmp	r0, #0
 8006e0a:	db24      	blt.n	8006e56 <quorem+0xf2>
 8006e0c:	3601      	adds	r6, #1
 8006e0e:	4628      	mov	r0, r5
 8006e10:	f04f 0c00 	mov.w	ip, #0
 8006e14:	f858 2b04 	ldr.w	r2, [r8], #4
 8006e18:	f8d0 e000 	ldr.w	lr, [r0]
 8006e1c:	b293      	uxth	r3, r2
 8006e1e:	ebac 0303 	sub.w	r3, ip, r3
 8006e22:	0c12      	lsrs	r2, r2, #16
 8006e24:	fa13 f38e 	uxtah	r3, r3, lr
 8006e28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006e2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e36:	45c1      	cmp	r9, r8
 8006e38:	f840 3b04 	str.w	r3, [r0], #4
 8006e3c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006e40:	d2e8      	bcs.n	8006e14 <quorem+0xb0>
 8006e42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e4a:	b922      	cbnz	r2, 8006e56 <quorem+0xf2>
 8006e4c:	3b04      	subs	r3, #4
 8006e4e:	429d      	cmp	r5, r3
 8006e50:	461a      	mov	r2, r3
 8006e52:	d30a      	bcc.n	8006e6a <quorem+0x106>
 8006e54:	613c      	str	r4, [r7, #16]
 8006e56:	4630      	mov	r0, r6
 8006e58:	b003      	add	sp, #12
 8006e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e5e:	6812      	ldr	r2, [r2, #0]
 8006e60:	3b04      	subs	r3, #4
 8006e62:	2a00      	cmp	r2, #0
 8006e64:	d1cc      	bne.n	8006e00 <quorem+0x9c>
 8006e66:	3c01      	subs	r4, #1
 8006e68:	e7c7      	b.n	8006dfa <quorem+0x96>
 8006e6a:	6812      	ldr	r2, [r2, #0]
 8006e6c:	3b04      	subs	r3, #4
 8006e6e:	2a00      	cmp	r2, #0
 8006e70:	d1f0      	bne.n	8006e54 <quorem+0xf0>
 8006e72:	3c01      	subs	r4, #1
 8006e74:	e7eb      	b.n	8006e4e <quorem+0xea>
 8006e76:	2000      	movs	r0, #0
 8006e78:	e7ee      	b.n	8006e58 <quorem+0xf4>
 8006e7a:	0000      	movs	r0, r0
 8006e7c:	0000      	movs	r0, r0
	...

08006e80 <_dtoa_r>:
 8006e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e84:	ed2d 8b02 	vpush	{d8}
 8006e88:	ec57 6b10 	vmov	r6, r7, d0
 8006e8c:	b095      	sub	sp, #84	; 0x54
 8006e8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006e90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006e94:	9105      	str	r1, [sp, #20]
 8006e96:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	9209      	str	r2, [sp, #36]	; 0x24
 8006e9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ea0:	b975      	cbnz	r5, 8006ec0 <_dtoa_r+0x40>
 8006ea2:	2010      	movs	r0, #16
 8006ea4:	f000 fffc 	bl	8007ea0 <malloc>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	6260      	str	r0, [r4, #36]	; 0x24
 8006eac:	b920      	cbnz	r0, 8006eb8 <_dtoa_r+0x38>
 8006eae:	4bb2      	ldr	r3, [pc, #712]	; (8007178 <_dtoa_r+0x2f8>)
 8006eb0:	21ea      	movs	r1, #234	; 0xea
 8006eb2:	48b2      	ldr	r0, [pc, #712]	; (800717c <_dtoa_r+0x2fc>)
 8006eb4:	f001 fe02 	bl	8008abc <__assert_func>
 8006eb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006ebc:	6005      	str	r5, [r0, #0]
 8006ebe:	60c5      	str	r5, [r0, #12]
 8006ec0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ec2:	6819      	ldr	r1, [r3, #0]
 8006ec4:	b151      	cbz	r1, 8006edc <_dtoa_r+0x5c>
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	604a      	str	r2, [r1, #4]
 8006eca:	2301      	movs	r3, #1
 8006ecc:	4093      	lsls	r3, r2
 8006ece:	608b      	str	r3, [r1, #8]
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	f001 f83b 	bl	8007f4c <_Bfree>
 8006ed6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ed8:	2200      	movs	r2, #0
 8006eda:	601a      	str	r2, [r3, #0]
 8006edc:	1e3b      	subs	r3, r7, #0
 8006ede:	bfb9      	ittee	lt
 8006ee0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006ee4:	9303      	strlt	r3, [sp, #12]
 8006ee6:	2300      	movge	r3, #0
 8006ee8:	f8c8 3000 	strge.w	r3, [r8]
 8006eec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006ef0:	4ba3      	ldr	r3, [pc, #652]	; (8007180 <_dtoa_r+0x300>)
 8006ef2:	bfbc      	itt	lt
 8006ef4:	2201      	movlt	r2, #1
 8006ef6:	f8c8 2000 	strlt.w	r2, [r8]
 8006efa:	ea33 0309 	bics.w	r3, r3, r9
 8006efe:	d11b      	bne.n	8006f38 <_dtoa_r+0xb8>
 8006f00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f02:	f242 730f 	movw	r3, #9999	; 0x270f
 8006f06:	6013      	str	r3, [r2, #0]
 8006f08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f0c:	4333      	orrs	r3, r6
 8006f0e:	f000 857a 	beq.w	8007a06 <_dtoa_r+0xb86>
 8006f12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f14:	b963      	cbnz	r3, 8006f30 <_dtoa_r+0xb0>
 8006f16:	4b9b      	ldr	r3, [pc, #620]	; (8007184 <_dtoa_r+0x304>)
 8006f18:	e024      	b.n	8006f64 <_dtoa_r+0xe4>
 8006f1a:	4b9b      	ldr	r3, [pc, #620]	; (8007188 <_dtoa_r+0x308>)
 8006f1c:	9300      	str	r3, [sp, #0]
 8006f1e:	3308      	adds	r3, #8
 8006f20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006f22:	6013      	str	r3, [r2, #0]
 8006f24:	9800      	ldr	r0, [sp, #0]
 8006f26:	b015      	add	sp, #84	; 0x54
 8006f28:	ecbd 8b02 	vpop	{d8}
 8006f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f30:	4b94      	ldr	r3, [pc, #592]	; (8007184 <_dtoa_r+0x304>)
 8006f32:	9300      	str	r3, [sp, #0]
 8006f34:	3303      	adds	r3, #3
 8006f36:	e7f3      	b.n	8006f20 <_dtoa_r+0xa0>
 8006f38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	ec51 0b17 	vmov	r0, r1, d7
 8006f42:	2300      	movs	r3, #0
 8006f44:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006f48:	f7f9 fdf6 	bl	8000b38 <__aeabi_dcmpeq>
 8006f4c:	4680      	mov	r8, r0
 8006f4e:	b158      	cbz	r0, 8006f68 <_dtoa_r+0xe8>
 8006f50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f52:	2301      	movs	r3, #1
 8006f54:	6013      	str	r3, [r2, #0]
 8006f56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f000 8551 	beq.w	8007a00 <_dtoa_r+0xb80>
 8006f5e:	488b      	ldr	r0, [pc, #556]	; (800718c <_dtoa_r+0x30c>)
 8006f60:	6018      	str	r0, [r3, #0]
 8006f62:	1e43      	subs	r3, r0, #1
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	e7dd      	b.n	8006f24 <_dtoa_r+0xa4>
 8006f68:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006f6c:	aa12      	add	r2, sp, #72	; 0x48
 8006f6e:	a913      	add	r1, sp, #76	; 0x4c
 8006f70:	4620      	mov	r0, r4
 8006f72:	f001 facd 	bl	8008510 <__d2b>
 8006f76:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006f7a:	4683      	mov	fp, r0
 8006f7c:	2d00      	cmp	r5, #0
 8006f7e:	d07c      	beq.n	800707a <_dtoa_r+0x1fa>
 8006f80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f82:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006f86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f8a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006f8e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006f92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006f96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006f9a:	4b7d      	ldr	r3, [pc, #500]	; (8007190 <_dtoa_r+0x310>)
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	4630      	mov	r0, r6
 8006fa0:	4639      	mov	r1, r7
 8006fa2:	f7f9 f9a9 	bl	80002f8 <__aeabi_dsub>
 8006fa6:	a36e      	add	r3, pc, #440	; (adr r3, 8007160 <_dtoa_r+0x2e0>)
 8006fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fac:	f7f9 fb5c 	bl	8000668 <__aeabi_dmul>
 8006fb0:	a36d      	add	r3, pc, #436	; (adr r3, 8007168 <_dtoa_r+0x2e8>)
 8006fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb6:	f7f9 f9a1 	bl	80002fc <__adddf3>
 8006fba:	4606      	mov	r6, r0
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	460f      	mov	r7, r1
 8006fc0:	f7f9 fae8 	bl	8000594 <__aeabi_i2d>
 8006fc4:	a36a      	add	r3, pc, #424	; (adr r3, 8007170 <_dtoa_r+0x2f0>)
 8006fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fca:	f7f9 fb4d 	bl	8000668 <__aeabi_dmul>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	4630      	mov	r0, r6
 8006fd4:	4639      	mov	r1, r7
 8006fd6:	f7f9 f991 	bl	80002fc <__adddf3>
 8006fda:	4606      	mov	r6, r0
 8006fdc:	460f      	mov	r7, r1
 8006fde:	f7f9 fdf3 	bl	8000bc8 <__aeabi_d2iz>
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	4682      	mov	sl, r0
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	4630      	mov	r0, r6
 8006fea:	4639      	mov	r1, r7
 8006fec:	f7f9 fdae 	bl	8000b4c <__aeabi_dcmplt>
 8006ff0:	b148      	cbz	r0, 8007006 <_dtoa_r+0x186>
 8006ff2:	4650      	mov	r0, sl
 8006ff4:	f7f9 face 	bl	8000594 <__aeabi_i2d>
 8006ff8:	4632      	mov	r2, r6
 8006ffa:	463b      	mov	r3, r7
 8006ffc:	f7f9 fd9c 	bl	8000b38 <__aeabi_dcmpeq>
 8007000:	b908      	cbnz	r0, 8007006 <_dtoa_r+0x186>
 8007002:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007006:	f1ba 0f16 	cmp.w	sl, #22
 800700a:	d854      	bhi.n	80070b6 <_dtoa_r+0x236>
 800700c:	4b61      	ldr	r3, [pc, #388]	; (8007194 <_dtoa_r+0x314>)
 800700e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007016:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800701a:	f7f9 fd97 	bl	8000b4c <__aeabi_dcmplt>
 800701e:	2800      	cmp	r0, #0
 8007020:	d04b      	beq.n	80070ba <_dtoa_r+0x23a>
 8007022:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007026:	2300      	movs	r3, #0
 8007028:	930e      	str	r3, [sp, #56]	; 0x38
 800702a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800702c:	1b5d      	subs	r5, r3, r5
 800702e:	1e6b      	subs	r3, r5, #1
 8007030:	9304      	str	r3, [sp, #16]
 8007032:	bf43      	ittte	mi
 8007034:	2300      	movmi	r3, #0
 8007036:	f1c5 0801 	rsbmi	r8, r5, #1
 800703a:	9304      	strmi	r3, [sp, #16]
 800703c:	f04f 0800 	movpl.w	r8, #0
 8007040:	f1ba 0f00 	cmp.w	sl, #0
 8007044:	db3b      	blt.n	80070be <_dtoa_r+0x23e>
 8007046:	9b04      	ldr	r3, [sp, #16]
 8007048:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800704c:	4453      	add	r3, sl
 800704e:	9304      	str	r3, [sp, #16]
 8007050:	2300      	movs	r3, #0
 8007052:	9306      	str	r3, [sp, #24]
 8007054:	9b05      	ldr	r3, [sp, #20]
 8007056:	2b09      	cmp	r3, #9
 8007058:	d869      	bhi.n	800712e <_dtoa_r+0x2ae>
 800705a:	2b05      	cmp	r3, #5
 800705c:	bfc4      	itt	gt
 800705e:	3b04      	subgt	r3, #4
 8007060:	9305      	strgt	r3, [sp, #20]
 8007062:	9b05      	ldr	r3, [sp, #20]
 8007064:	f1a3 0302 	sub.w	r3, r3, #2
 8007068:	bfcc      	ite	gt
 800706a:	2500      	movgt	r5, #0
 800706c:	2501      	movle	r5, #1
 800706e:	2b03      	cmp	r3, #3
 8007070:	d869      	bhi.n	8007146 <_dtoa_r+0x2c6>
 8007072:	e8df f003 	tbb	[pc, r3]
 8007076:	4e2c      	.short	0x4e2c
 8007078:	5a4c      	.short	0x5a4c
 800707a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800707e:	441d      	add	r5, r3
 8007080:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007084:	2b20      	cmp	r3, #32
 8007086:	bfc1      	itttt	gt
 8007088:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800708c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007090:	fa09 f303 	lslgt.w	r3, r9, r3
 8007094:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007098:	bfda      	itte	le
 800709a:	f1c3 0320 	rsble	r3, r3, #32
 800709e:	fa06 f003 	lslle.w	r0, r6, r3
 80070a2:	4318      	orrgt	r0, r3
 80070a4:	f7f9 fa66 	bl	8000574 <__aeabi_ui2d>
 80070a8:	2301      	movs	r3, #1
 80070aa:	4606      	mov	r6, r0
 80070ac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80070b0:	3d01      	subs	r5, #1
 80070b2:	9310      	str	r3, [sp, #64]	; 0x40
 80070b4:	e771      	b.n	8006f9a <_dtoa_r+0x11a>
 80070b6:	2301      	movs	r3, #1
 80070b8:	e7b6      	b.n	8007028 <_dtoa_r+0x1a8>
 80070ba:	900e      	str	r0, [sp, #56]	; 0x38
 80070bc:	e7b5      	b.n	800702a <_dtoa_r+0x1aa>
 80070be:	f1ca 0300 	rsb	r3, sl, #0
 80070c2:	9306      	str	r3, [sp, #24]
 80070c4:	2300      	movs	r3, #0
 80070c6:	eba8 080a 	sub.w	r8, r8, sl
 80070ca:	930d      	str	r3, [sp, #52]	; 0x34
 80070cc:	e7c2      	b.n	8007054 <_dtoa_r+0x1d4>
 80070ce:	2300      	movs	r3, #0
 80070d0:	9308      	str	r3, [sp, #32]
 80070d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	dc39      	bgt.n	800714c <_dtoa_r+0x2cc>
 80070d8:	f04f 0901 	mov.w	r9, #1
 80070dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80070e0:	464b      	mov	r3, r9
 80070e2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80070e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80070e8:	2200      	movs	r2, #0
 80070ea:	6042      	str	r2, [r0, #4]
 80070ec:	2204      	movs	r2, #4
 80070ee:	f102 0614 	add.w	r6, r2, #20
 80070f2:	429e      	cmp	r6, r3
 80070f4:	6841      	ldr	r1, [r0, #4]
 80070f6:	d92f      	bls.n	8007158 <_dtoa_r+0x2d8>
 80070f8:	4620      	mov	r0, r4
 80070fa:	f000 fee7 	bl	8007ecc <_Balloc>
 80070fe:	9000      	str	r0, [sp, #0]
 8007100:	2800      	cmp	r0, #0
 8007102:	d14b      	bne.n	800719c <_dtoa_r+0x31c>
 8007104:	4b24      	ldr	r3, [pc, #144]	; (8007198 <_dtoa_r+0x318>)
 8007106:	4602      	mov	r2, r0
 8007108:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800710c:	e6d1      	b.n	8006eb2 <_dtoa_r+0x32>
 800710e:	2301      	movs	r3, #1
 8007110:	e7de      	b.n	80070d0 <_dtoa_r+0x250>
 8007112:	2300      	movs	r3, #0
 8007114:	9308      	str	r3, [sp, #32]
 8007116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007118:	eb0a 0903 	add.w	r9, sl, r3
 800711c:	f109 0301 	add.w	r3, r9, #1
 8007120:	2b01      	cmp	r3, #1
 8007122:	9301      	str	r3, [sp, #4]
 8007124:	bfb8      	it	lt
 8007126:	2301      	movlt	r3, #1
 8007128:	e7dd      	b.n	80070e6 <_dtoa_r+0x266>
 800712a:	2301      	movs	r3, #1
 800712c:	e7f2      	b.n	8007114 <_dtoa_r+0x294>
 800712e:	2501      	movs	r5, #1
 8007130:	2300      	movs	r3, #0
 8007132:	9305      	str	r3, [sp, #20]
 8007134:	9508      	str	r5, [sp, #32]
 8007136:	f04f 39ff 	mov.w	r9, #4294967295
 800713a:	2200      	movs	r2, #0
 800713c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007140:	2312      	movs	r3, #18
 8007142:	9209      	str	r2, [sp, #36]	; 0x24
 8007144:	e7cf      	b.n	80070e6 <_dtoa_r+0x266>
 8007146:	2301      	movs	r3, #1
 8007148:	9308      	str	r3, [sp, #32]
 800714a:	e7f4      	b.n	8007136 <_dtoa_r+0x2b6>
 800714c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007150:	f8cd 9004 	str.w	r9, [sp, #4]
 8007154:	464b      	mov	r3, r9
 8007156:	e7c6      	b.n	80070e6 <_dtoa_r+0x266>
 8007158:	3101      	adds	r1, #1
 800715a:	6041      	str	r1, [r0, #4]
 800715c:	0052      	lsls	r2, r2, #1
 800715e:	e7c6      	b.n	80070ee <_dtoa_r+0x26e>
 8007160:	636f4361 	.word	0x636f4361
 8007164:	3fd287a7 	.word	0x3fd287a7
 8007168:	8b60c8b3 	.word	0x8b60c8b3
 800716c:	3fc68a28 	.word	0x3fc68a28
 8007170:	509f79fb 	.word	0x509f79fb
 8007174:	3fd34413 	.word	0x3fd34413
 8007178:	08008e19 	.word	0x08008e19
 800717c:	08008e30 	.word	0x08008e30
 8007180:	7ff00000 	.word	0x7ff00000
 8007184:	08008e15 	.word	0x08008e15
 8007188:	08008e0c 	.word	0x08008e0c
 800718c:	08008de9 	.word	0x08008de9
 8007190:	3ff80000 	.word	0x3ff80000
 8007194:	08008f88 	.word	0x08008f88
 8007198:	08008e8f 	.word	0x08008e8f
 800719c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800719e:	9a00      	ldr	r2, [sp, #0]
 80071a0:	601a      	str	r2, [r3, #0]
 80071a2:	9b01      	ldr	r3, [sp, #4]
 80071a4:	2b0e      	cmp	r3, #14
 80071a6:	f200 80ad 	bhi.w	8007304 <_dtoa_r+0x484>
 80071aa:	2d00      	cmp	r5, #0
 80071ac:	f000 80aa 	beq.w	8007304 <_dtoa_r+0x484>
 80071b0:	f1ba 0f00 	cmp.w	sl, #0
 80071b4:	dd36      	ble.n	8007224 <_dtoa_r+0x3a4>
 80071b6:	4ac3      	ldr	r2, [pc, #780]	; (80074c4 <_dtoa_r+0x644>)
 80071b8:	f00a 030f 	and.w	r3, sl, #15
 80071bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80071c0:	ed93 7b00 	vldr	d7, [r3]
 80071c4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80071c8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80071cc:	eeb0 8a47 	vmov.f32	s16, s14
 80071d0:	eef0 8a67 	vmov.f32	s17, s15
 80071d4:	d016      	beq.n	8007204 <_dtoa_r+0x384>
 80071d6:	4bbc      	ldr	r3, [pc, #752]	; (80074c8 <_dtoa_r+0x648>)
 80071d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80071dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80071e0:	f7f9 fb6c 	bl	80008bc <__aeabi_ddiv>
 80071e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071e8:	f007 070f 	and.w	r7, r7, #15
 80071ec:	2503      	movs	r5, #3
 80071ee:	4eb6      	ldr	r6, [pc, #728]	; (80074c8 <_dtoa_r+0x648>)
 80071f0:	b957      	cbnz	r7, 8007208 <_dtoa_r+0x388>
 80071f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071f6:	ec53 2b18 	vmov	r2, r3, d8
 80071fa:	f7f9 fb5f 	bl	80008bc <__aeabi_ddiv>
 80071fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007202:	e029      	b.n	8007258 <_dtoa_r+0x3d8>
 8007204:	2502      	movs	r5, #2
 8007206:	e7f2      	b.n	80071ee <_dtoa_r+0x36e>
 8007208:	07f9      	lsls	r1, r7, #31
 800720a:	d508      	bpl.n	800721e <_dtoa_r+0x39e>
 800720c:	ec51 0b18 	vmov	r0, r1, d8
 8007210:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007214:	f7f9 fa28 	bl	8000668 <__aeabi_dmul>
 8007218:	ec41 0b18 	vmov	d8, r0, r1
 800721c:	3501      	adds	r5, #1
 800721e:	107f      	asrs	r7, r7, #1
 8007220:	3608      	adds	r6, #8
 8007222:	e7e5      	b.n	80071f0 <_dtoa_r+0x370>
 8007224:	f000 80a6 	beq.w	8007374 <_dtoa_r+0x4f4>
 8007228:	f1ca 0600 	rsb	r6, sl, #0
 800722c:	4ba5      	ldr	r3, [pc, #660]	; (80074c4 <_dtoa_r+0x644>)
 800722e:	4fa6      	ldr	r7, [pc, #664]	; (80074c8 <_dtoa_r+0x648>)
 8007230:	f006 020f 	and.w	r2, r6, #15
 8007234:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007240:	f7f9 fa12 	bl	8000668 <__aeabi_dmul>
 8007244:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007248:	1136      	asrs	r6, r6, #4
 800724a:	2300      	movs	r3, #0
 800724c:	2502      	movs	r5, #2
 800724e:	2e00      	cmp	r6, #0
 8007250:	f040 8085 	bne.w	800735e <_dtoa_r+0x4de>
 8007254:	2b00      	cmp	r3, #0
 8007256:	d1d2      	bne.n	80071fe <_dtoa_r+0x37e>
 8007258:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800725a:	2b00      	cmp	r3, #0
 800725c:	f000 808c 	beq.w	8007378 <_dtoa_r+0x4f8>
 8007260:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007264:	4b99      	ldr	r3, [pc, #612]	; (80074cc <_dtoa_r+0x64c>)
 8007266:	2200      	movs	r2, #0
 8007268:	4630      	mov	r0, r6
 800726a:	4639      	mov	r1, r7
 800726c:	f7f9 fc6e 	bl	8000b4c <__aeabi_dcmplt>
 8007270:	2800      	cmp	r0, #0
 8007272:	f000 8081 	beq.w	8007378 <_dtoa_r+0x4f8>
 8007276:	9b01      	ldr	r3, [sp, #4]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d07d      	beq.n	8007378 <_dtoa_r+0x4f8>
 800727c:	f1b9 0f00 	cmp.w	r9, #0
 8007280:	dd3c      	ble.n	80072fc <_dtoa_r+0x47c>
 8007282:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007286:	9307      	str	r3, [sp, #28]
 8007288:	2200      	movs	r2, #0
 800728a:	4b91      	ldr	r3, [pc, #580]	; (80074d0 <_dtoa_r+0x650>)
 800728c:	4630      	mov	r0, r6
 800728e:	4639      	mov	r1, r7
 8007290:	f7f9 f9ea 	bl	8000668 <__aeabi_dmul>
 8007294:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007298:	3501      	adds	r5, #1
 800729a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800729e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80072a2:	4628      	mov	r0, r5
 80072a4:	f7f9 f976 	bl	8000594 <__aeabi_i2d>
 80072a8:	4632      	mov	r2, r6
 80072aa:	463b      	mov	r3, r7
 80072ac:	f7f9 f9dc 	bl	8000668 <__aeabi_dmul>
 80072b0:	4b88      	ldr	r3, [pc, #544]	; (80074d4 <_dtoa_r+0x654>)
 80072b2:	2200      	movs	r2, #0
 80072b4:	f7f9 f822 	bl	80002fc <__adddf3>
 80072b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80072bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072c0:	9303      	str	r3, [sp, #12]
 80072c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d15c      	bne.n	8007382 <_dtoa_r+0x502>
 80072c8:	4b83      	ldr	r3, [pc, #524]	; (80074d8 <_dtoa_r+0x658>)
 80072ca:	2200      	movs	r2, #0
 80072cc:	4630      	mov	r0, r6
 80072ce:	4639      	mov	r1, r7
 80072d0:	f7f9 f812 	bl	80002f8 <__aeabi_dsub>
 80072d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072d8:	4606      	mov	r6, r0
 80072da:	460f      	mov	r7, r1
 80072dc:	f7f9 fc54 	bl	8000b88 <__aeabi_dcmpgt>
 80072e0:	2800      	cmp	r0, #0
 80072e2:	f040 8296 	bne.w	8007812 <_dtoa_r+0x992>
 80072e6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80072ea:	4630      	mov	r0, r6
 80072ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072f0:	4639      	mov	r1, r7
 80072f2:	f7f9 fc2b 	bl	8000b4c <__aeabi_dcmplt>
 80072f6:	2800      	cmp	r0, #0
 80072f8:	f040 8288 	bne.w	800780c <_dtoa_r+0x98c>
 80072fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007300:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007304:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007306:	2b00      	cmp	r3, #0
 8007308:	f2c0 8158 	blt.w	80075bc <_dtoa_r+0x73c>
 800730c:	f1ba 0f0e 	cmp.w	sl, #14
 8007310:	f300 8154 	bgt.w	80075bc <_dtoa_r+0x73c>
 8007314:	4b6b      	ldr	r3, [pc, #428]	; (80074c4 <_dtoa_r+0x644>)
 8007316:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800731a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800731e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007320:	2b00      	cmp	r3, #0
 8007322:	f280 80e3 	bge.w	80074ec <_dtoa_r+0x66c>
 8007326:	9b01      	ldr	r3, [sp, #4]
 8007328:	2b00      	cmp	r3, #0
 800732a:	f300 80df 	bgt.w	80074ec <_dtoa_r+0x66c>
 800732e:	f040 826d 	bne.w	800780c <_dtoa_r+0x98c>
 8007332:	4b69      	ldr	r3, [pc, #420]	; (80074d8 <_dtoa_r+0x658>)
 8007334:	2200      	movs	r2, #0
 8007336:	4640      	mov	r0, r8
 8007338:	4649      	mov	r1, r9
 800733a:	f7f9 f995 	bl	8000668 <__aeabi_dmul>
 800733e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007342:	f7f9 fc17 	bl	8000b74 <__aeabi_dcmpge>
 8007346:	9e01      	ldr	r6, [sp, #4]
 8007348:	4637      	mov	r7, r6
 800734a:	2800      	cmp	r0, #0
 800734c:	f040 8243 	bne.w	80077d6 <_dtoa_r+0x956>
 8007350:	9d00      	ldr	r5, [sp, #0]
 8007352:	2331      	movs	r3, #49	; 0x31
 8007354:	f805 3b01 	strb.w	r3, [r5], #1
 8007358:	f10a 0a01 	add.w	sl, sl, #1
 800735c:	e23f      	b.n	80077de <_dtoa_r+0x95e>
 800735e:	07f2      	lsls	r2, r6, #31
 8007360:	d505      	bpl.n	800736e <_dtoa_r+0x4ee>
 8007362:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007366:	f7f9 f97f 	bl	8000668 <__aeabi_dmul>
 800736a:	3501      	adds	r5, #1
 800736c:	2301      	movs	r3, #1
 800736e:	1076      	asrs	r6, r6, #1
 8007370:	3708      	adds	r7, #8
 8007372:	e76c      	b.n	800724e <_dtoa_r+0x3ce>
 8007374:	2502      	movs	r5, #2
 8007376:	e76f      	b.n	8007258 <_dtoa_r+0x3d8>
 8007378:	9b01      	ldr	r3, [sp, #4]
 800737a:	f8cd a01c 	str.w	sl, [sp, #28]
 800737e:	930c      	str	r3, [sp, #48]	; 0x30
 8007380:	e78d      	b.n	800729e <_dtoa_r+0x41e>
 8007382:	9900      	ldr	r1, [sp, #0]
 8007384:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007386:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007388:	4b4e      	ldr	r3, [pc, #312]	; (80074c4 <_dtoa_r+0x644>)
 800738a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800738e:	4401      	add	r1, r0
 8007390:	9102      	str	r1, [sp, #8]
 8007392:	9908      	ldr	r1, [sp, #32]
 8007394:	eeb0 8a47 	vmov.f32	s16, s14
 8007398:	eef0 8a67 	vmov.f32	s17, s15
 800739c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80073a4:	2900      	cmp	r1, #0
 80073a6:	d045      	beq.n	8007434 <_dtoa_r+0x5b4>
 80073a8:	494c      	ldr	r1, [pc, #304]	; (80074dc <_dtoa_r+0x65c>)
 80073aa:	2000      	movs	r0, #0
 80073ac:	f7f9 fa86 	bl	80008bc <__aeabi_ddiv>
 80073b0:	ec53 2b18 	vmov	r2, r3, d8
 80073b4:	f7f8 ffa0 	bl	80002f8 <__aeabi_dsub>
 80073b8:	9d00      	ldr	r5, [sp, #0]
 80073ba:	ec41 0b18 	vmov	d8, r0, r1
 80073be:	4639      	mov	r1, r7
 80073c0:	4630      	mov	r0, r6
 80073c2:	f7f9 fc01 	bl	8000bc8 <__aeabi_d2iz>
 80073c6:	900c      	str	r0, [sp, #48]	; 0x30
 80073c8:	f7f9 f8e4 	bl	8000594 <__aeabi_i2d>
 80073cc:	4602      	mov	r2, r0
 80073ce:	460b      	mov	r3, r1
 80073d0:	4630      	mov	r0, r6
 80073d2:	4639      	mov	r1, r7
 80073d4:	f7f8 ff90 	bl	80002f8 <__aeabi_dsub>
 80073d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073da:	3330      	adds	r3, #48	; 0x30
 80073dc:	f805 3b01 	strb.w	r3, [r5], #1
 80073e0:	ec53 2b18 	vmov	r2, r3, d8
 80073e4:	4606      	mov	r6, r0
 80073e6:	460f      	mov	r7, r1
 80073e8:	f7f9 fbb0 	bl	8000b4c <__aeabi_dcmplt>
 80073ec:	2800      	cmp	r0, #0
 80073ee:	d165      	bne.n	80074bc <_dtoa_r+0x63c>
 80073f0:	4632      	mov	r2, r6
 80073f2:	463b      	mov	r3, r7
 80073f4:	4935      	ldr	r1, [pc, #212]	; (80074cc <_dtoa_r+0x64c>)
 80073f6:	2000      	movs	r0, #0
 80073f8:	f7f8 ff7e 	bl	80002f8 <__aeabi_dsub>
 80073fc:	ec53 2b18 	vmov	r2, r3, d8
 8007400:	f7f9 fba4 	bl	8000b4c <__aeabi_dcmplt>
 8007404:	2800      	cmp	r0, #0
 8007406:	f040 80b9 	bne.w	800757c <_dtoa_r+0x6fc>
 800740a:	9b02      	ldr	r3, [sp, #8]
 800740c:	429d      	cmp	r5, r3
 800740e:	f43f af75 	beq.w	80072fc <_dtoa_r+0x47c>
 8007412:	4b2f      	ldr	r3, [pc, #188]	; (80074d0 <_dtoa_r+0x650>)
 8007414:	ec51 0b18 	vmov	r0, r1, d8
 8007418:	2200      	movs	r2, #0
 800741a:	f7f9 f925 	bl	8000668 <__aeabi_dmul>
 800741e:	4b2c      	ldr	r3, [pc, #176]	; (80074d0 <_dtoa_r+0x650>)
 8007420:	ec41 0b18 	vmov	d8, r0, r1
 8007424:	2200      	movs	r2, #0
 8007426:	4630      	mov	r0, r6
 8007428:	4639      	mov	r1, r7
 800742a:	f7f9 f91d 	bl	8000668 <__aeabi_dmul>
 800742e:	4606      	mov	r6, r0
 8007430:	460f      	mov	r7, r1
 8007432:	e7c4      	b.n	80073be <_dtoa_r+0x53e>
 8007434:	ec51 0b17 	vmov	r0, r1, d7
 8007438:	f7f9 f916 	bl	8000668 <__aeabi_dmul>
 800743c:	9b02      	ldr	r3, [sp, #8]
 800743e:	9d00      	ldr	r5, [sp, #0]
 8007440:	930c      	str	r3, [sp, #48]	; 0x30
 8007442:	ec41 0b18 	vmov	d8, r0, r1
 8007446:	4639      	mov	r1, r7
 8007448:	4630      	mov	r0, r6
 800744a:	f7f9 fbbd 	bl	8000bc8 <__aeabi_d2iz>
 800744e:	9011      	str	r0, [sp, #68]	; 0x44
 8007450:	f7f9 f8a0 	bl	8000594 <__aeabi_i2d>
 8007454:	4602      	mov	r2, r0
 8007456:	460b      	mov	r3, r1
 8007458:	4630      	mov	r0, r6
 800745a:	4639      	mov	r1, r7
 800745c:	f7f8 ff4c 	bl	80002f8 <__aeabi_dsub>
 8007460:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007462:	3330      	adds	r3, #48	; 0x30
 8007464:	f805 3b01 	strb.w	r3, [r5], #1
 8007468:	9b02      	ldr	r3, [sp, #8]
 800746a:	429d      	cmp	r5, r3
 800746c:	4606      	mov	r6, r0
 800746e:	460f      	mov	r7, r1
 8007470:	f04f 0200 	mov.w	r2, #0
 8007474:	d134      	bne.n	80074e0 <_dtoa_r+0x660>
 8007476:	4b19      	ldr	r3, [pc, #100]	; (80074dc <_dtoa_r+0x65c>)
 8007478:	ec51 0b18 	vmov	r0, r1, d8
 800747c:	f7f8 ff3e 	bl	80002fc <__adddf3>
 8007480:	4602      	mov	r2, r0
 8007482:	460b      	mov	r3, r1
 8007484:	4630      	mov	r0, r6
 8007486:	4639      	mov	r1, r7
 8007488:	f7f9 fb7e 	bl	8000b88 <__aeabi_dcmpgt>
 800748c:	2800      	cmp	r0, #0
 800748e:	d175      	bne.n	800757c <_dtoa_r+0x6fc>
 8007490:	ec53 2b18 	vmov	r2, r3, d8
 8007494:	4911      	ldr	r1, [pc, #68]	; (80074dc <_dtoa_r+0x65c>)
 8007496:	2000      	movs	r0, #0
 8007498:	f7f8 ff2e 	bl	80002f8 <__aeabi_dsub>
 800749c:	4602      	mov	r2, r0
 800749e:	460b      	mov	r3, r1
 80074a0:	4630      	mov	r0, r6
 80074a2:	4639      	mov	r1, r7
 80074a4:	f7f9 fb52 	bl	8000b4c <__aeabi_dcmplt>
 80074a8:	2800      	cmp	r0, #0
 80074aa:	f43f af27 	beq.w	80072fc <_dtoa_r+0x47c>
 80074ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074b0:	1e6b      	subs	r3, r5, #1
 80074b2:	930c      	str	r3, [sp, #48]	; 0x30
 80074b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80074b8:	2b30      	cmp	r3, #48	; 0x30
 80074ba:	d0f8      	beq.n	80074ae <_dtoa_r+0x62e>
 80074bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80074c0:	e04a      	b.n	8007558 <_dtoa_r+0x6d8>
 80074c2:	bf00      	nop
 80074c4:	08008f88 	.word	0x08008f88
 80074c8:	08008f60 	.word	0x08008f60
 80074cc:	3ff00000 	.word	0x3ff00000
 80074d0:	40240000 	.word	0x40240000
 80074d4:	401c0000 	.word	0x401c0000
 80074d8:	40140000 	.word	0x40140000
 80074dc:	3fe00000 	.word	0x3fe00000
 80074e0:	4baf      	ldr	r3, [pc, #700]	; (80077a0 <_dtoa_r+0x920>)
 80074e2:	f7f9 f8c1 	bl	8000668 <__aeabi_dmul>
 80074e6:	4606      	mov	r6, r0
 80074e8:	460f      	mov	r7, r1
 80074ea:	e7ac      	b.n	8007446 <_dtoa_r+0x5c6>
 80074ec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80074f0:	9d00      	ldr	r5, [sp, #0]
 80074f2:	4642      	mov	r2, r8
 80074f4:	464b      	mov	r3, r9
 80074f6:	4630      	mov	r0, r6
 80074f8:	4639      	mov	r1, r7
 80074fa:	f7f9 f9df 	bl	80008bc <__aeabi_ddiv>
 80074fe:	f7f9 fb63 	bl	8000bc8 <__aeabi_d2iz>
 8007502:	9002      	str	r0, [sp, #8]
 8007504:	f7f9 f846 	bl	8000594 <__aeabi_i2d>
 8007508:	4642      	mov	r2, r8
 800750a:	464b      	mov	r3, r9
 800750c:	f7f9 f8ac 	bl	8000668 <__aeabi_dmul>
 8007510:	4602      	mov	r2, r0
 8007512:	460b      	mov	r3, r1
 8007514:	4630      	mov	r0, r6
 8007516:	4639      	mov	r1, r7
 8007518:	f7f8 feee 	bl	80002f8 <__aeabi_dsub>
 800751c:	9e02      	ldr	r6, [sp, #8]
 800751e:	9f01      	ldr	r7, [sp, #4]
 8007520:	3630      	adds	r6, #48	; 0x30
 8007522:	f805 6b01 	strb.w	r6, [r5], #1
 8007526:	9e00      	ldr	r6, [sp, #0]
 8007528:	1bae      	subs	r6, r5, r6
 800752a:	42b7      	cmp	r7, r6
 800752c:	4602      	mov	r2, r0
 800752e:	460b      	mov	r3, r1
 8007530:	d137      	bne.n	80075a2 <_dtoa_r+0x722>
 8007532:	f7f8 fee3 	bl	80002fc <__adddf3>
 8007536:	4642      	mov	r2, r8
 8007538:	464b      	mov	r3, r9
 800753a:	4606      	mov	r6, r0
 800753c:	460f      	mov	r7, r1
 800753e:	f7f9 fb23 	bl	8000b88 <__aeabi_dcmpgt>
 8007542:	b9c8      	cbnz	r0, 8007578 <_dtoa_r+0x6f8>
 8007544:	4642      	mov	r2, r8
 8007546:	464b      	mov	r3, r9
 8007548:	4630      	mov	r0, r6
 800754a:	4639      	mov	r1, r7
 800754c:	f7f9 faf4 	bl	8000b38 <__aeabi_dcmpeq>
 8007550:	b110      	cbz	r0, 8007558 <_dtoa_r+0x6d8>
 8007552:	9b02      	ldr	r3, [sp, #8]
 8007554:	07d9      	lsls	r1, r3, #31
 8007556:	d40f      	bmi.n	8007578 <_dtoa_r+0x6f8>
 8007558:	4620      	mov	r0, r4
 800755a:	4659      	mov	r1, fp
 800755c:	f000 fcf6 	bl	8007f4c <_Bfree>
 8007560:	2300      	movs	r3, #0
 8007562:	702b      	strb	r3, [r5, #0]
 8007564:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007566:	f10a 0001 	add.w	r0, sl, #1
 800756a:	6018      	str	r0, [r3, #0]
 800756c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800756e:	2b00      	cmp	r3, #0
 8007570:	f43f acd8 	beq.w	8006f24 <_dtoa_r+0xa4>
 8007574:	601d      	str	r5, [r3, #0]
 8007576:	e4d5      	b.n	8006f24 <_dtoa_r+0xa4>
 8007578:	f8cd a01c 	str.w	sl, [sp, #28]
 800757c:	462b      	mov	r3, r5
 800757e:	461d      	mov	r5, r3
 8007580:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007584:	2a39      	cmp	r2, #57	; 0x39
 8007586:	d108      	bne.n	800759a <_dtoa_r+0x71a>
 8007588:	9a00      	ldr	r2, [sp, #0]
 800758a:	429a      	cmp	r2, r3
 800758c:	d1f7      	bne.n	800757e <_dtoa_r+0x6fe>
 800758e:	9a07      	ldr	r2, [sp, #28]
 8007590:	9900      	ldr	r1, [sp, #0]
 8007592:	3201      	adds	r2, #1
 8007594:	9207      	str	r2, [sp, #28]
 8007596:	2230      	movs	r2, #48	; 0x30
 8007598:	700a      	strb	r2, [r1, #0]
 800759a:	781a      	ldrb	r2, [r3, #0]
 800759c:	3201      	adds	r2, #1
 800759e:	701a      	strb	r2, [r3, #0]
 80075a0:	e78c      	b.n	80074bc <_dtoa_r+0x63c>
 80075a2:	4b7f      	ldr	r3, [pc, #508]	; (80077a0 <_dtoa_r+0x920>)
 80075a4:	2200      	movs	r2, #0
 80075a6:	f7f9 f85f 	bl	8000668 <__aeabi_dmul>
 80075aa:	2200      	movs	r2, #0
 80075ac:	2300      	movs	r3, #0
 80075ae:	4606      	mov	r6, r0
 80075b0:	460f      	mov	r7, r1
 80075b2:	f7f9 fac1 	bl	8000b38 <__aeabi_dcmpeq>
 80075b6:	2800      	cmp	r0, #0
 80075b8:	d09b      	beq.n	80074f2 <_dtoa_r+0x672>
 80075ba:	e7cd      	b.n	8007558 <_dtoa_r+0x6d8>
 80075bc:	9a08      	ldr	r2, [sp, #32]
 80075be:	2a00      	cmp	r2, #0
 80075c0:	f000 80c4 	beq.w	800774c <_dtoa_r+0x8cc>
 80075c4:	9a05      	ldr	r2, [sp, #20]
 80075c6:	2a01      	cmp	r2, #1
 80075c8:	f300 80a8 	bgt.w	800771c <_dtoa_r+0x89c>
 80075cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80075ce:	2a00      	cmp	r2, #0
 80075d0:	f000 80a0 	beq.w	8007714 <_dtoa_r+0x894>
 80075d4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80075d8:	9e06      	ldr	r6, [sp, #24]
 80075da:	4645      	mov	r5, r8
 80075dc:	9a04      	ldr	r2, [sp, #16]
 80075de:	2101      	movs	r1, #1
 80075e0:	441a      	add	r2, r3
 80075e2:	4620      	mov	r0, r4
 80075e4:	4498      	add	r8, r3
 80075e6:	9204      	str	r2, [sp, #16]
 80075e8:	f000 fd6c 	bl	80080c4 <__i2b>
 80075ec:	4607      	mov	r7, r0
 80075ee:	2d00      	cmp	r5, #0
 80075f0:	dd0b      	ble.n	800760a <_dtoa_r+0x78a>
 80075f2:	9b04      	ldr	r3, [sp, #16]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	dd08      	ble.n	800760a <_dtoa_r+0x78a>
 80075f8:	42ab      	cmp	r3, r5
 80075fa:	9a04      	ldr	r2, [sp, #16]
 80075fc:	bfa8      	it	ge
 80075fe:	462b      	movge	r3, r5
 8007600:	eba8 0803 	sub.w	r8, r8, r3
 8007604:	1aed      	subs	r5, r5, r3
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	9304      	str	r3, [sp, #16]
 800760a:	9b06      	ldr	r3, [sp, #24]
 800760c:	b1fb      	cbz	r3, 800764e <_dtoa_r+0x7ce>
 800760e:	9b08      	ldr	r3, [sp, #32]
 8007610:	2b00      	cmp	r3, #0
 8007612:	f000 809f 	beq.w	8007754 <_dtoa_r+0x8d4>
 8007616:	2e00      	cmp	r6, #0
 8007618:	dd11      	ble.n	800763e <_dtoa_r+0x7be>
 800761a:	4639      	mov	r1, r7
 800761c:	4632      	mov	r2, r6
 800761e:	4620      	mov	r0, r4
 8007620:	f000 fe0c 	bl	800823c <__pow5mult>
 8007624:	465a      	mov	r2, fp
 8007626:	4601      	mov	r1, r0
 8007628:	4607      	mov	r7, r0
 800762a:	4620      	mov	r0, r4
 800762c:	f000 fd60 	bl	80080f0 <__multiply>
 8007630:	4659      	mov	r1, fp
 8007632:	9007      	str	r0, [sp, #28]
 8007634:	4620      	mov	r0, r4
 8007636:	f000 fc89 	bl	8007f4c <_Bfree>
 800763a:	9b07      	ldr	r3, [sp, #28]
 800763c:	469b      	mov	fp, r3
 800763e:	9b06      	ldr	r3, [sp, #24]
 8007640:	1b9a      	subs	r2, r3, r6
 8007642:	d004      	beq.n	800764e <_dtoa_r+0x7ce>
 8007644:	4659      	mov	r1, fp
 8007646:	4620      	mov	r0, r4
 8007648:	f000 fdf8 	bl	800823c <__pow5mult>
 800764c:	4683      	mov	fp, r0
 800764e:	2101      	movs	r1, #1
 8007650:	4620      	mov	r0, r4
 8007652:	f000 fd37 	bl	80080c4 <__i2b>
 8007656:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007658:	2b00      	cmp	r3, #0
 800765a:	4606      	mov	r6, r0
 800765c:	dd7c      	ble.n	8007758 <_dtoa_r+0x8d8>
 800765e:	461a      	mov	r2, r3
 8007660:	4601      	mov	r1, r0
 8007662:	4620      	mov	r0, r4
 8007664:	f000 fdea 	bl	800823c <__pow5mult>
 8007668:	9b05      	ldr	r3, [sp, #20]
 800766a:	2b01      	cmp	r3, #1
 800766c:	4606      	mov	r6, r0
 800766e:	dd76      	ble.n	800775e <_dtoa_r+0x8de>
 8007670:	2300      	movs	r3, #0
 8007672:	9306      	str	r3, [sp, #24]
 8007674:	6933      	ldr	r3, [r6, #16]
 8007676:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800767a:	6918      	ldr	r0, [r3, #16]
 800767c:	f000 fcd2 	bl	8008024 <__hi0bits>
 8007680:	f1c0 0020 	rsb	r0, r0, #32
 8007684:	9b04      	ldr	r3, [sp, #16]
 8007686:	4418      	add	r0, r3
 8007688:	f010 001f 	ands.w	r0, r0, #31
 800768c:	f000 8086 	beq.w	800779c <_dtoa_r+0x91c>
 8007690:	f1c0 0320 	rsb	r3, r0, #32
 8007694:	2b04      	cmp	r3, #4
 8007696:	dd7f      	ble.n	8007798 <_dtoa_r+0x918>
 8007698:	f1c0 001c 	rsb	r0, r0, #28
 800769c:	9b04      	ldr	r3, [sp, #16]
 800769e:	4403      	add	r3, r0
 80076a0:	4480      	add	r8, r0
 80076a2:	4405      	add	r5, r0
 80076a4:	9304      	str	r3, [sp, #16]
 80076a6:	f1b8 0f00 	cmp.w	r8, #0
 80076aa:	dd05      	ble.n	80076b8 <_dtoa_r+0x838>
 80076ac:	4659      	mov	r1, fp
 80076ae:	4642      	mov	r2, r8
 80076b0:	4620      	mov	r0, r4
 80076b2:	f000 fe1d 	bl	80082f0 <__lshift>
 80076b6:	4683      	mov	fp, r0
 80076b8:	9b04      	ldr	r3, [sp, #16]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	dd05      	ble.n	80076ca <_dtoa_r+0x84a>
 80076be:	4631      	mov	r1, r6
 80076c0:	461a      	mov	r2, r3
 80076c2:	4620      	mov	r0, r4
 80076c4:	f000 fe14 	bl	80082f0 <__lshift>
 80076c8:	4606      	mov	r6, r0
 80076ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d069      	beq.n	80077a4 <_dtoa_r+0x924>
 80076d0:	4631      	mov	r1, r6
 80076d2:	4658      	mov	r0, fp
 80076d4:	f000 fe78 	bl	80083c8 <__mcmp>
 80076d8:	2800      	cmp	r0, #0
 80076da:	da63      	bge.n	80077a4 <_dtoa_r+0x924>
 80076dc:	2300      	movs	r3, #0
 80076de:	4659      	mov	r1, fp
 80076e0:	220a      	movs	r2, #10
 80076e2:	4620      	mov	r0, r4
 80076e4:	f000 fc54 	bl	8007f90 <__multadd>
 80076e8:	9b08      	ldr	r3, [sp, #32]
 80076ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076ee:	4683      	mov	fp, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f000 818f 	beq.w	8007a14 <_dtoa_r+0xb94>
 80076f6:	4639      	mov	r1, r7
 80076f8:	2300      	movs	r3, #0
 80076fa:	220a      	movs	r2, #10
 80076fc:	4620      	mov	r0, r4
 80076fe:	f000 fc47 	bl	8007f90 <__multadd>
 8007702:	f1b9 0f00 	cmp.w	r9, #0
 8007706:	4607      	mov	r7, r0
 8007708:	f300 808e 	bgt.w	8007828 <_dtoa_r+0x9a8>
 800770c:	9b05      	ldr	r3, [sp, #20]
 800770e:	2b02      	cmp	r3, #2
 8007710:	dc50      	bgt.n	80077b4 <_dtoa_r+0x934>
 8007712:	e089      	b.n	8007828 <_dtoa_r+0x9a8>
 8007714:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007716:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800771a:	e75d      	b.n	80075d8 <_dtoa_r+0x758>
 800771c:	9b01      	ldr	r3, [sp, #4]
 800771e:	1e5e      	subs	r6, r3, #1
 8007720:	9b06      	ldr	r3, [sp, #24]
 8007722:	42b3      	cmp	r3, r6
 8007724:	bfbf      	itttt	lt
 8007726:	9b06      	ldrlt	r3, [sp, #24]
 8007728:	9606      	strlt	r6, [sp, #24]
 800772a:	1af2      	sublt	r2, r6, r3
 800772c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800772e:	bfb6      	itet	lt
 8007730:	189b      	addlt	r3, r3, r2
 8007732:	1b9e      	subge	r6, r3, r6
 8007734:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007736:	9b01      	ldr	r3, [sp, #4]
 8007738:	bfb8      	it	lt
 800773a:	2600      	movlt	r6, #0
 800773c:	2b00      	cmp	r3, #0
 800773e:	bfb5      	itete	lt
 8007740:	eba8 0503 	sublt.w	r5, r8, r3
 8007744:	9b01      	ldrge	r3, [sp, #4]
 8007746:	2300      	movlt	r3, #0
 8007748:	4645      	movge	r5, r8
 800774a:	e747      	b.n	80075dc <_dtoa_r+0x75c>
 800774c:	9e06      	ldr	r6, [sp, #24]
 800774e:	9f08      	ldr	r7, [sp, #32]
 8007750:	4645      	mov	r5, r8
 8007752:	e74c      	b.n	80075ee <_dtoa_r+0x76e>
 8007754:	9a06      	ldr	r2, [sp, #24]
 8007756:	e775      	b.n	8007644 <_dtoa_r+0x7c4>
 8007758:	9b05      	ldr	r3, [sp, #20]
 800775a:	2b01      	cmp	r3, #1
 800775c:	dc18      	bgt.n	8007790 <_dtoa_r+0x910>
 800775e:	9b02      	ldr	r3, [sp, #8]
 8007760:	b9b3      	cbnz	r3, 8007790 <_dtoa_r+0x910>
 8007762:	9b03      	ldr	r3, [sp, #12]
 8007764:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007768:	b9a3      	cbnz	r3, 8007794 <_dtoa_r+0x914>
 800776a:	9b03      	ldr	r3, [sp, #12]
 800776c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007770:	0d1b      	lsrs	r3, r3, #20
 8007772:	051b      	lsls	r3, r3, #20
 8007774:	b12b      	cbz	r3, 8007782 <_dtoa_r+0x902>
 8007776:	9b04      	ldr	r3, [sp, #16]
 8007778:	3301      	adds	r3, #1
 800777a:	9304      	str	r3, [sp, #16]
 800777c:	f108 0801 	add.w	r8, r8, #1
 8007780:	2301      	movs	r3, #1
 8007782:	9306      	str	r3, [sp, #24]
 8007784:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007786:	2b00      	cmp	r3, #0
 8007788:	f47f af74 	bne.w	8007674 <_dtoa_r+0x7f4>
 800778c:	2001      	movs	r0, #1
 800778e:	e779      	b.n	8007684 <_dtoa_r+0x804>
 8007790:	2300      	movs	r3, #0
 8007792:	e7f6      	b.n	8007782 <_dtoa_r+0x902>
 8007794:	9b02      	ldr	r3, [sp, #8]
 8007796:	e7f4      	b.n	8007782 <_dtoa_r+0x902>
 8007798:	d085      	beq.n	80076a6 <_dtoa_r+0x826>
 800779a:	4618      	mov	r0, r3
 800779c:	301c      	adds	r0, #28
 800779e:	e77d      	b.n	800769c <_dtoa_r+0x81c>
 80077a0:	40240000 	.word	0x40240000
 80077a4:	9b01      	ldr	r3, [sp, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	dc38      	bgt.n	800781c <_dtoa_r+0x99c>
 80077aa:	9b05      	ldr	r3, [sp, #20]
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	dd35      	ble.n	800781c <_dtoa_r+0x99c>
 80077b0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80077b4:	f1b9 0f00 	cmp.w	r9, #0
 80077b8:	d10d      	bne.n	80077d6 <_dtoa_r+0x956>
 80077ba:	4631      	mov	r1, r6
 80077bc:	464b      	mov	r3, r9
 80077be:	2205      	movs	r2, #5
 80077c0:	4620      	mov	r0, r4
 80077c2:	f000 fbe5 	bl	8007f90 <__multadd>
 80077c6:	4601      	mov	r1, r0
 80077c8:	4606      	mov	r6, r0
 80077ca:	4658      	mov	r0, fp
 80077cc:	f000 fdfc 	bl	80083c8 <__mcmp>
 80077d0:	2800      	cmp	r0, #0
 80077d2:	f73f adbd 	bgt.w	8007350 <_dtoa_r+0x4d0>
 80077d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077d8:	9d00      	ldr	r5, [sp, #0]
 80077da:	ea6f 0a03 	mvn.w	sl, r3
 80077de:	f04f 0800 	mov.w	r8, #0
 80077e2:	4631      	mov	r1, r6
 80077e4:	4620      	mov	r0, r4
 80077e6:	f000 fbb1 	bl	8007f4c <_Bfree>
 80077ea:	2f00      	cmp	r7, #0
 80077ec:	f43f aeb4 	beq.w	8007558 <_dtoa_r+0x6d8>
 80077f0:	f1b8 0f00 	cmp.w	r8, #0
 80077f4:	d005      	beq.n	8007802 <_dtoa_r+0x982>
 80077f6:	45b8      	cmp	r8, r7
 80077f8:	d003      	beq.n	8007802 <_dtoa_r+0x982>
 80077fa:	4641      	mov	r1, r8
 80077fc:	4620      	mov	r0, r4
 80077fe:	f000 fba5 	bl	8007f4c <_Bfree>
 8007802:	4639      	mov	r1, r7
 8007804:	4620      	mov	r0, r4
 8007806:	f000 fba1 	bl	8007f4c <_Bfree>
 800780a:	e6a5      	b.n	8007558 <_dtoa_r+0x6d8>
 800780c:	2600      	movs	r6, #0
 800780e:	4637      	mov	r7, r6
 8007810:	e7e1      	b.n	80077d6 <_dtoa_r+0x956>
 8007812:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007814:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007818:	4637      	mov	r7, r6
 800781a:	e599      	b.n	8007350 <_dtoa_r+0x4d0>
 800781c:	9b08      	ldr	r3, [sp, #32]
 800781e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007822:	2b00      	cmp	r3, #0
 8007824:	f000 80fd 	beq.w	8007a22 <_dtoa_r+0xba2>
 8007828:	2d00      	cmp	r5, #0
 800782a:	dd05      	ble.n	8007838 <_dtoa_r+0x9b8>
 800782c:	4639      	mov	r1, r7
 800782e:	462a      	mov	r2, r5
 8007830:	4620      	mov	r0, r4
 8007832:	f000 fd5d 	bl	80082f0 <__lshift>
 8007836:	4607      	mov	r7, r0
 8007838:	9b06      	ldr	r3, [sp, #24]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d05c      	beq.n	80078f8 <_dtoa_r+0xa78>
 800783e:	6879      	ldr	r1, [r7, #4]
 8007840:	4620      	mov	r0, r4
 8007842:	f000 fb43 	bl	8007ecc <_Balloc>
 8007846:	4605      	mov	r5, r0
 8007848:	b928      	cbnz	r0, 8007856 <_dtoa_r+0x9d6>
 800784a:	4b80      	ldr	r3, [pc, #512]	; (8007a4c <_dtoa_r+0xbcc>)
 800784c:	4602      	mov	r2, r0
 800784e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007852:	f7ff bb2e 	b.w	8006eb2 <_dtoa_r+0x32>
 8007856:	693a      	ldr	r2, [r7, #16]
 8007858:	3202      	adds	r2, #2
 800785a:	0092      	lsls	r2, r2, #2
 800785c:	f107 010c 	add.w	r1, r7, #12
 8007860:	300c      	adds	r0, #12
 8007862:	f000 fb25 	bl	8007eb0 <memcpy>
 8007866:	2201      	movs	r2, #1
 8007868:	4629      	mov	r1, r5
 800786a:	4620      	mov	r0, r4
 800786c:	f000 fd40 	bl	80082f0 <__lshift>
 8007870:	9b00      	ldr	r3, [sp, #0]
 8007872:	3301      	adds	r3, #1
 8007874:	9301      	str	r3, [sp, #4]
 8007876:	9b00      	ldr	r3, [sp, #0]
 8007878:	444b      	add	r3, r9
 800787a:	9307      	str	r3, [sp, #28]
 800787c:	9b02      	ldr	r3, [sp, #8]
 800787e:	f003 0301 	and.w	r3, r3, #1
 8007882:	46b8      	mov	r8, r7
 8007884:	9306      	str	r3, [sp, #24]
 8007886:	4607      	mov	r7, r0
 8007888:	9b01      	ldr	r3, [sp, #4]
 800788a:	4631      	mov	r1, r6
 800788c:	3b01      	subs	r3, #1
 800788e:	4658      	mov	r0, fp
 8007890:	9302      	str	r3, [sp, #8]
 8007892:	f7ff fa67 	bl	8006d64 <quorem>
 8007896:	4603      	mov	r3, r0
 8007898:	3330      	adds	r3, #48	; 0x30
 800789a:	9004      	str	r0, [sp, #16]
 800789c:	4641      	mov	r1, r8
 800789e:	4658      	mov	r0, fp
 80078a0:	9308      	str	r3, [sp, #32]
 80078a2:	f000 fd91 	bl	80083c8 <__mcmp>
 80078a6:	463a      	mov	r2, r7
 80078a8:	4681      	mov	r9, r0
 80078aa:	4631      	mov	r1, r6
 80078ac:	4620      	mov	r0, r4
 80078ae:	f000 fda7 	bl	8008400 <__mdiff>
 80078b2:	68c2      	ldr	r2, [r0, #12]
 80078b4:	9b08      	ldr	r3, [sp, #32]
 80078b6:	4605      	mov	r5, r0
 80078b8:	bb02      	cbnz	r2, 80078fc <_dtoa_r+0xa7c>
 80078ba:	4601      	mov	r1, r0
 80078bc:	4658      	mov	r0, fp
 80078be:	f000 fd83 	bl	80083c8 <__mcmp>
 80078c2:	9b08      	ldr	r3, [sp, #32]
 80078c4:	4602      	mov	r2, r0
 80078c6:	4629      	mov	r1, r5
 80078c8:	4620      	mov	r0, r4
 80078ca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80078ce:	f000 fb3d 	bl	8007f4c <_Bfree>
 80078d2:	9b05      	ldr	r3, [sp, #20]
 80078d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078d6:	9d01      	ldr	r5, [sp, #4]
 80078d8:	ea43 0102 	orr.w	r1, r3, r2
 80078dc:	9b06      	ldr	r3, [sp, #24]
 80078de:	430b      	orrs	r3, r1
 80078e0:	9b08      	ldr	r3, [sp, #32]
 80078e2:	d10d      	bne.n	8007900 <_dtoa_r+0xa80>
 80078e4:	2b39      	cmp	r3, #57	; 0x39
 80078e6:	d029      	beq.n	800793c <_dtoa_r+0xabc>
 80078e8:	f1b9 0f00 	cmp.w	r9, #0
 80078ec:	dd01      	ble.n	80078f2 <_dtoa_r+0xa72>
 80078ee:	9b04      	ldr	r3, [sp, #16]
 80078f0:	3331      	adds	r3, #49	; 0x31
 80078f2:	9a02      	ldr	r2, [sp, #8]
 80078f4:	7013      	strb	r3, [r2, #0]
 80078f6:	e774      	b.n	80077e2 <_dtoa_r+0x962>
 80078f8:	4638      	mov	r0, r7
 80078fa:	e7b9      	b.n	8007870 <_dtoa_r+0x9f0>
 80078fc:	2201      	movs	r2, #1
 80078fe:	e7e2      	b.n	80078c6 <_dtoa_r+0xa46>
 8007900:	f1b9 0f00 	cmp.w	r9, #0
 8007904:	db06      	blt.n	8007914 <_dtoa_r+0xa94>
 8007906:	9905      	ldr	r1, [sp, #20]
 8007908:	ea41 0909 	orr.w	r9, r1, r9
 800790c:	9906      	ldr	r1, [sp, #24]
 800790e:	ea59 0101 	orrs.w	r1, r9, r1
 8007912:	d120      	bne.n	8007956 <_dtoa_r+0xad6>
 8007914:	2a00      	cmp	r2, #0
 8007916:	ddec      	ble.n	80078f2 <_dtoa_r+0xa72>
 8007918:	4659      	mov	r1, fp
 800791a:	2201      	movs	r2, #1
 800791c:	4620      	mov	r0, r4
 800791e:	9301      	str	r3, [sp, #4]
 8007920:	f000 fce6 	bl	80082f0 <__lshift>
 8007924:	4631      	mov	r1, r6
 8007926:	4683      	mov	fp, r0
 8007928:	f000 fd4e 	bl	80083c8 <__mcmp>
 800792c:	2800      	cmp	r0, #0
 800792e:	9b01      	ldr	r3, [sp, #4]
 8007930:	dc02      	bgt.n	8007938 <_dtoa_r+0xab8>
 8007932:	d1de      	bne.n	80078f2 <_dtoa_r+0xa72>
 8007934:	07da      	lsls	r2, r3, #31
 8007936:	d5dc      	bpl.n	80078f2 <_dtoa_r+0xa72>
 8007938:	2b39      	cmp	r3, #57	; 0x39
 800793a:	d1d8      	bne.n	80078ee <_dtoa_r+0xa6e>
 800793c:	9a02      	ldr	r2, [sp, #8]
 800793e:	2339      	movs	r3, #57	; 0x39
 8007940:	7013      	strb	r3, [r2, #0]
 8007942:	462b      	mov	r3, r5
 8007944:	461d      	mov	r5, r3
 8007946:	3b01      	subs	r3, #1
 8007948:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800794c:	2a39      	cmp	r2, #57	; 0x39
 800794e:	d050      	beq.n	80079f2 <_dtoa_r+0xb72>
 8007950:	3201      	adds	r2, #1
 8007952:	701a      	strb	r2, [r3, #0]
 8007954:	e745      	b.n	80077e2 <_dtoa_r+0x962>
 8007956:	2a00      	cmp	r2, #0
 8007958:	dd03      	ble.n	8007962 <_dtoa_r+0xae2>
 800795a:	2b39      	cmp	r3, #57	; 0x39
 800795c:	d0ee      	beq.n	800793c <_dtoa_r+0xabc>
 800795e:	3301      	adds	r3, #1
 8007960:	e7c7      	b.n	80078f2 <_dtoa_r+0xa72>
 8007962:	9a01      	ldr	r2, [sp, #4]
 8007964:	9907      	ldr	r1, [sp, #28]
 8007966:	f802 3c01 	strb.w	r3, [r2, #-1]
 800796a:	428a      	cmp	r2, r1
 800796c:	d02a      	beq.n	80079c4 <_dtoa_r+0xb44>
 800796e:	4659      	mov	r1, fp
 8007970:	2300      	movs	r3, #0
 8007972:	220a      	movs	r2, #10
 8007974:	4620      	mov	r0, r4
 8007976:	f000 fb0b 	bl	8007f90 <__multadd>
 800797a:	45b8      	cmp	r8, r7
 800797c:	4683      	mov	fp, r0
 800797e:	f04f 0300 	mov.w	r3, #0
 8007982:	f04f 020a 	mov.w	r2, #10
 8007986:	4641      	mov	r1, r8
 8007988:	4620      	mov	r0, r4
 800798a:	d107      	bne.n	800799c <_dtoa_r+0xb1c>
 800798c:	f000 fb00 	bl	8007f90 <__multadd>
 8007990:	4680      	mov	r8, r0
 8007992:	4607      	mov	r7, r0
 8007994:	9b01      	ldr	r3, [sp, #4]
 8007996:	3301      	adds	r3, #1
 8007998:	9301      	str	r3, [sp, #4]
 800799a:	e775      	b.n	8007888 <_dtoa_r+0xa08>
 800799c:	f000 faf8 	bl	8007f90 <__multadd>
 80079a0:	4639      	mov	r1, r7
 80079a2:	4680      	mov	r8, r0
 80079a4:	2300      	movs	r3, #0
 80079a6:	220a      	movs	r2, #10
 80079a8:	4620      	mov	r0, r4
 80079aa:	f000 faf1 	bl	8007f90 <__multadd>
 80079ae:	4607      	mov	r7, r0
 80079b0:	e7f0      	b.n	8007994 <_dtoa_r+0xb14>
 80079b2:	f1b9 0f00 	cmp.w	r9, #0
 80079b6:	9a00      	ldr	r2, [sp, #0]
 80079b8:	bfcc      	ite	gt
 80079ba:	464d      	movgt	r5, r9
 80079bc:	2501      	movle	r5, #1
 80079be:	4415      	add	r5, r2
 80079c0:	f04f 0800 	mov.w	r8, #0
 80079c4:	4659      	mov	r1, fp
 80079c6:	2201      	movs	r2, #1
 80079c8:	4620      	mov	r0, r4
 80079ca:	9301      	str	r3, [sp, #4]
 80079cc:	f000 fc90 	bl	80082f0 <__lshift>
 80079d0:	4631      	mov	r1, r6
 80079d2:	4683      	mov	fp, r0
 80079d4:	f000 fcf8 	bl	80083c8 <__mcmp>
 80079d8:	2800      	cmp	r0, #0
 80079da:	dcb2      	bgt.n	8007942 <_dtoa_r+0xac2>
 80079dc:	d102      	bne.n	80079e4 <_dtoa_r+0xb64>
 80079de:	9b01      	ldr	r3, [sp, #4]
 80079e0:	07db      	lsls	r3, r3, #31
 80079e2:	d4ae      	bmi.n	8007942 <_dtoa_r+0xac2>
 80079e4:	462b      	mov	r3, r5
 80079e6:	461d      	mov	r5, r3
 80079e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079ec:	2a30      	cmp	r2, #48	; 0x30
 80079ee:	d0fa      	beq.n	80079e6 <_dtoa_r+0xb66>
 80079f0:	e6f7      	b.n	80077e2 <_dtoa_r+0x962>
 80079f2:	9a00      	ldr	r2, [sp, #0]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d1a5      	bne.n	8007944 <_dtoa_r+0xac4>
 80079f8:	f10a 0a01 	add.w	sl, sl, #1
 80079fc:	2331      	movs	r3, #49	; 0x31
 80079fe:	e779      	b.n	80078f4 <_dtoa_r+0xa74>
 8007a00:	4b13      	ldr	r3, [pc, #76]	; (8007a50 <_dtoa_r+0xbd0>)
 8007a02:	f7ff baaf 	b.w	8006f64 <_dtoa_r+0xe4>
 8007a06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f47f aa86 	bne.w	8006f1a <_dtoa_r+0x9a>
 8007a0e:	4b11      	ldr	r3, [pc, #68]	; (8007a54 <_dtoa_r+0xbd4>)
 8007a10:	f7ff baa8 	b.w	8006f64 <_dtoa_r+0xe4>
 8007a14:	f1b9 0f00 	cmp.w	r9, #0
 8007a18:	dc03      	bgt.n	8007a22 <_dtoa_r+0xba2>
 8007a1a:	9b05      	ldr	r3, [sp, #20]
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	f73f aec9 	bgt.w	80077b4 <_dtoa_r+0x934>
 8007a22:	9d00      	ldr	r5, [sp, #0]
 8007a24:	4631      	mov	r1, r6
 8007a26:	4658      	mov	r0, fp
 8007a28:	f7ff f99c 	bl	8006d64 <quorem>
 8007a2c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007a30:	f805 3b01 	strb.w	r3, [r5], #1
 8007a34:	9a00      	ldr	r2, [sp, #0]
 8007a36:	1aaa      	subs	r2, r5, r2
 8007a38:	4591      	cmp	r9, r2
 8007a3a:	ddba      	ble.n	80079b2 <_dtoa_r+0xb32>
 8007a3c:	4659      	mov	r1, fp
 8007a3e:	2300      	movs	r3, #0
 8007a40:	220a      	movs	r2, #10
 8007a42:	4620      	mov	r0, r4
 8007a44:	f000 faa4 	bl	8007f90 <__multadd>
 8007a48:	4683      	mov	fp, r0
 8007a4a:	e7eb      	b.n	8007a24 <_dtoa_r+0xba4>
 8007a4c:	08008e8f 	.word	0x08008e8f
 8007a50:	08008de8 	.word	0x08008de8
 8007a54:	08008e0c 	.word	0x08008e0c

08007a58 <__sflush_r>:
 8007a58:	898a      	ldrh	r2, [r1, #12]
 8007a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a5e:	4605      	mov	r5, r0
 8007a60:	0710      	lsls	r0, r2, #28
 8007a62:	460c      	mov	r4, r1
 8007a64:	d458      	bmi.n	8007b18 <__sflush_r+0xc0>
 8007a66:	684b      	ldr	r3, [r1, #4]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	dc05      	bgt.n	8007a78 <__sflush_r+0x20>
 8007a6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	dc02      	bgt.n	8007a78 <__sflush_r+0x20>
 8007a72:	2000      	movs	r0, #0
 8007a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a7a:	2e00      	cmp	r6, #0
 8007a7c:	d0f9      	beq.n	8007a72 <__sflush_r+0x1a>
 8007a7e:	2300      	movs	r3, #0
 8007a80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a84:	682f      	ldr	r7, [r5, #0]
 8007a86:	602b      	str	r3, [r5, #0]
 8007a88:	d032      	beq.n	8007af0 <__sflush_r+0x98>
 8007a8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a8c:	89a3      	ldrh	r3, [r4, #12]
 8007a8e:	075a      	lsls	r2, r3, #29
 8007a90:	d505      	bpl.n	8007a9e <__sflush_r+0x46>
 8007a92:	6863      	ldr	r3, [r4, #4]
 8007a94:	1ac0      	subs	r0, r0, r3
 8007a96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a98:	b10b      	cbz	r3, 8007a9e <__sflush_r+0x46>
 8007a9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a9c:	1ac0      	subs	r0, r0, r3
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007aa4:	6a21      	ldr	r1, [r4, #32]
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	47b0      	blx	r6
 8007aaa:	1c43      	adds	r3, r0, #1
 8007aac:	89a3      	ldrh	r3, [r4, #12]
 8007aae:	d106      	bne.n	8007abe <__sflush_r+0x66>
 8007ab0:	6829      	ldr	r1, [r5, #0]
 8007ab2:	291d      	cmp	r1, #29
 8007ab4:	d82c      	bhi.n	8007b10 <__sflush_r+0xb8>
 8007ab6:	4a2a      	ldr	r2, [pc, #168]	; (8007b60 <__sflush_r+0x108>)
 8007ab8:	40ca      	lsrs	r2, r1
 8007aba:	07d6      	lsls	r6, r2, #31
 8007abc:	d528      	bpl.n	8007b10 <__sflush_r+0xb8>
 8007abe:	2200      	movs	r2, #0
 8007ac0:	6062      	str	r2, [r4, #4]
 8007ac2:	04d9      	lsls	r1, r3, #19
 8007ac4:	6922      	ldr	r2, [r4, #16]
 8007ac6:	6022      	str	r2, [r4, #0]
 8007ac8:	d504      	bpl.n	8007ad4 <__sflush_r+0x7c>
 8007aca:	1c42      	adds	r2, r0, #1
 8007acc:	d101      	bne.n	8007ad2 <__sflush_r+0x7a>
 8007ace:	682b      	ldr	r3, [r5, #0]
 8007ad0:	b903      	cbnz	r3, 8007ad4 <__sflush_r+0x7c>
 8007ad2:	6560      	str	r0, [r4, #84]	; 0x54
 8007ad4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ad6:	602f      	str	r7, [r5, #0]
 8007ad8:	2900      	cmp	r1, #0
 8007ada:	d0ca      	beq.n	8007a72 <__sflush_r+0x1a>
 8007adc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ae0:	4299      	cmp	r1, r3
 8007ae2:	d002      	beq.n	8007aea <__sflush_r+0x92>
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	f000 fd7f 	bl	80085e8 <_free_r>
 8007aea:	2000      	movs	r0, #0
 8007aec:	6360      	str	r0, [r4, #52]	; 0x34
 8007aee:	e7c1      	b.n	8007a74 <__sflush_r+0x1c>
 8007af0:	6a21      	ldr	r1, [r4, #32]
 8007af2:	2301      	movs	r3, #1
 8007af4:	4628      	mov	r0, r5
 8007af6:	47b0      	blx	r6
 8007af8:	1c41      	adds	r1, r0, #1
 8007afa:	d1c7      	bne.n	8007a8c <__sflush_r+0x34>
 8007afc:	682b      	ldr	r3, [r5, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d0c4      	beq.n	8007a8c <__sflush_r+0x34>
 8007b02:	2b1d      	cmp	r3, #29
 8007b04:	d001      	beq.n	8007b0a <__sflush_r+0xb2>
 8007b06:	2b16      	cmp	r3, #22
 8007b08:	d101      	bne.n	8007b0e <__sflush_r+0xb6>
 8007b0a:	602f      	str	r7, [r5, #0]
 8007b0c:	e7b1      	b.n	8007a72 <__sflush_r+0x1a>
 8007b0e:	89a3      	ldrh	r3, [r4, #12]
 8007b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b14:	81a3      	strh	r3, [r4, #12]
 8007b16:	e7ad      	b.n	8007a74 <__sflush_r+0x1c>
 8007b18:	690f      	ldr	r7, [r1, #16]
 8007b1a:	2f00      	cmp	r7, #0
 8007b1c:	d0a9      	beq.n	8007a72 <__sflush_r+0x1a>
 8007b1e:	0793      	lsls	r3, r2, #30
 8007b20:	680e      	ldr	r6, [r1, #0]
 8007b22:	bf08      	it	eq
 8007b24:	694b      	ldreq	r3, [r1, #20]
 8007b26:	600f      	str	r7, [r1, #0]
 8007b28:	bf18      	it	ne
 8007b2a:	2300      	movne	r3, #0
 8007b2c:	eba6 0807 	sub.w	r8, r6, r7
 8007b30:	608b      	str	r3, [r1, #8]
 8007b32:	f1b8 0f00 	cmp.w	r8, #0
 8007b36:	dd9c      	ble.n	8007a72 <__sflush_r+0x1a>
 8007b38:	6a21      	ldr	r1, [r4, #32]
 8007b3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b3c:	4643      	mov	r3, r8
 8007b3e:	463a      	mov	r2, r7
 8007b40:	4628      	mov	r0, r5
 8007b42:	47b0      	blx	r6
 8007b44:	2800      	cmp	r0, #0
 8007b46:	dc06      	bgt.n	8007b56 <__sflush_r+0xfe>
 8007b48:	89a3      	ldrh	r3, [r4, #12]
 8007b4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b4e:	81a3      	strh	r3, [r4, #12]
 8007b50:	f04f 30ff 	mov.w	r0, #4294967295
 8007b54:	e78e      	b.n	8007a74 <__sflush_r+0x1c>
 8007b56:	4407      	add	r7, r0
 8007b58:	eba8 0800 	sub.w	r8, r8, r0
 8007b5c:	e7e9      	b.n	8007b32 <__sflush_r+0xda>
 8007b5e:	bf00      	nop
 8007b60:	20400001 	.word	0x20400001

08007b64 <_fflush_r>:
 8007b64:	b538      	push	{r3, r4, r5, lr}
 8007b66:	690b      	ldr	r3, [r1, #16]
 8007b68:	4605      	mov	r5, r0
 8007b6a:	460c      	mov	r4, r1
 8007b6c:	b913      	cbnz	r3, 8007b74 <_fflush_r+0x10>
 8007b6e:	2500      	movs	r5, #0
 8007b70:	4628      	mov	r0, r5
 8007b72:	bd38      	pop	{r3, r4, r5, pc}
 8007b74:	b118      	cbz	r0, 8007b7e <_fflush_r+0x1a>
 8007b76:	6983      	ldr	r3, [r0, #24]
 8007b78:	b90b      	cbnz	r3, 8007b7e <_fflush_r+0x1a>
 8007b7a:	f000 f887 	bl	8007c8c <__sinit>
 8007b7e:	4b14      	ldr	r3, [pc, #80]	; (8007bd0 <_fflush_r+0x6c>)
 8007b80:	429c      	cmp	r4, r3
 8007b82:	d11b      	bne.n	8007bbc <_fflush_r+0x58>
 8007b84:	686c      	ldr	r4, [r5, #4]
 8007b86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d0ef      	beq.n	8007b6e <_fflush_r+0xa>
 8007b8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b90:	07d0      	lsls	r0, r2, #31
 8007b92:	d404      	bmi.n	8007b9e <_fflush_r+0x3a>
 8007b94:	0599      	lsls	r1, r3, #22
 8007b96:	d402      	bmi.n	8007b9e <_fflush_r+0x3a>
 8007b98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b9a:	f000 f91a 	bl	8007dd2 <__retarget_lock_acquire_recursive>
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	4621      	mov	r1, r4
 8007ba2:	f7ff ff59 	bl	8007a58 <__sflush_r>
 8007ba6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ba8:	07da      	lsls	r2, r3, #31
 8007baa:	4605      	mov	r5, r0
 8007bac:	d4e0      	bmi.n	8007b70 <_fflush_r+0xc>
 8007bae:	89a3      	ldrh	r3, [r4, #12]
 8007bb0:	059b      	lsls	r3, r3, #22
 8007bb2:	d4dd      	bmi.n	8007b70 <_fflush_r+0xc>
 8007bb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bb6:	f000 f90d 	bl	8007dd4 <__retarget_lock_release_recursive>
 8007bba:	e7d9      	b.n	8007b70 <_fflush_r+0xc>
 8007bbc:	4b05      	ldr	r3, [pc, #20]	; (8007bd4 <_fflush_r+0x70>)
 8007bbe:	429c      	cmp	r4, r3
 8007bc0:	d101      	bne.n	8007bc6 <_fflush_r+0x62>
 8007bc2:	68ac      	ldr	r4, [r5, #8]
 8007bc4:	e7df      	b.n	8007b86 <_fflush_r+0x22>
 8007bc6:	4b04      	ldr	r3, [pc, #16]	; (8007bd8 <_fflush_r+0x74>)
 8007bc8:	429c      	cmp	r4, r3
 8007bca:	bf08      	it	eq
 8007bcc:	68ec      	ldreq	r4, [r5, #12]
 8007bce:	e7da      	b.n	8007b86 <_fflush_r+0x22>
 8007bd0:	08008ec0 	.word	0x08008ec0
 8007bd4:	08008ee0 	.word	0x08008ee0
 8007bd8:	08008ea0 	.word	0x08008ea0

08007bdc <std>:
 8007bdc:	2300      	movs	r3, #0
 8007bde:	b510      	push	{r4, lr}
 8007be0:	4604      	mov	r4, r0
 8007be2:	e9c0 3300 	strd	r3, r3, [r0]
 8007be6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bea:	6083      	str	r3, [r0, #8]
 8007bec:	8181      	strh	r1, [r0, #12]
 8007bee:	6643      	str	r3, [r0, #100]	; 0x64
 8007bf0:	81c2      	strh	r2, [r0, #14]
 8007bf2:	6183      	str	r3, [r0, #24]
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	2208      	movs	r2, #8
 8007bf8:	305c      	adds	r0, #92	; 0x5c
 8007bfa:	f7fe faf3 	bl	80061e4 <memset>
 8007bfe:	4b05      	ldr	r3, [pc, #20]	; (8007c14 <std+0x38>)
 8007c00:	6263      	str	r3, [r4, #36]	; 0x24
 8007c02:	4b05      	ldr	r3, [pc, #20]	; (8007c18 <std+0x3c>)
 8007c04:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c06:	4b05      	ldr	r3, [pc, #20]	; (8007c1c <std+0x40>)
 8007c08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c0a:	4b05      	ldr	r3, [pc, #20]	; (8007c20 <std+0x44>)
 8007c0c:	6224      	str	r4, [r4, #32]
 8007c0e:	6323      	str	r3, [r4, #48]	; 0x30
 8007c10:	bd10      	pop	{r4, pc}
 8007c12:	bf00      	nop
 8007c14:	08008a11 	.word	0x08008a11
 8007c18:	08008a33 	.word	0x08008a33
 8007c1c:	08008a6b 	.word	0x08008a6b
 8007c20:	08008a8f 	.word	0x08008a8f

08007c24 <_cleanup_r>:
 8007c24:	4901      	ldr	r1, [pc, #4]	; (8007c2c <_cleanup_r+0x8>)
 8007c26:	f000 b8af 	b.w	8007d88 <_fwalk_reent>
 8007c2a:	bf00      	nop
 8007c2c:	08007b65 	.word	0x08007b65

08007c30 <__sfmoreglue>:
 8007c30:	b570      	push	{r4, r5, r6, lr}
 8007c32:	1e4a      	subs	r2, r1, #1
 8007c34:	2568      	movs	r5, #104	; 0x68
 8007c36:	4355      	muls	r5, r2
 8007c38:	460e      	mov	r6, r1
 8007c3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c3e:	f000 fd23 	bl	8008688 <_malloc_r>
 8007c42:	4604      	mov	r4, r0
 8007c44:	b140      	cbz	r0, 8007c58 <__sfmoreglue+0x28>
 8007c46:	2100      	movs	r1, #0
 8007c48:	e9c0 1600 	strd	r1, r6, [r0]
 8007c4c:	300c      	adds	r0, #12
 8007c4e:	60a0      	str	r0, [r4, #8]
 8007c50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c54:	f7fe fac6 	bl	80061e4 <memset>
 8007c58:	4620      	mov	r0, r4
 8007c5a:	bd70      	pop	{r4, r5, r6, pc}

08007c5c <__sfp_lock_acquire>:
 8007c5c:	4801      	ldr	r0, [pc, #4]	; (8007c64 <__sfp_lock_acquire+0x8>)
 8007c5e:	f000 b8b8 	b.w	8007dd2 <__retarget_lock_acquire_recursive>
 8007c62:	bf00      	nop
 8007c64:	2000048c 	.word	0x2000048c

08007c68 <__sfp_lock_release>:
 8007c68:	4801      	ldr	r0, [pc, #4]	; (8007c70 <__sfp_lock_release+0x8>)
 8007c6a:	f000 b8b3 	b.w	8007dd4 <__retarget_lock_release_recursive>
 8007c6e:	bf00      	nop
 8007c70:	2000048c 	.word	0x2000048c

08007c74 <__sinit_lock_acquire>:
 8007c74:	4801      	ldr	r0, [pc, #4]	; (8007c7c <__sinit_lock_acquire+0x8>)
 8007c76:	f000 b8ac 	b.w	8007dd2 <__retarget_lock_acquire_recursive>
 8007c7a:	bf00      	nop
 8007c7c:	20000487 	.word	0x20000487

08007c80 <__sinit_lock_release>:
 8007c80:	4801      	ldr	r0, [pc, #4]	; (8007c88 <__sinit_lock_release+0x8>)
 8007c82:	f000 b8a7 	b.w	8007dd4 <__retarget_lock_release_recursive>
 8007c86:	bf00      	nop
 8007c88:	20000487 	.word	0x20000487

08007c8c <__sinit>:
 8007c8c:	b510      	push	{r4, lr}
 8007c8e:	4604      	mov	r4, r0
 8007c90:	f7ff fff0 	bl	8007c74 <__sinit_lock_acquire>
 8007c94:	69a3      	ldr	r3, [r4, #24]
 8007c96:	b11b      	cbz	r3, 8007ca0 <__sinit+0x14>
 8007c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c9c:	f7ff bff0 	b.w	8007c80 <__sinit_lock_release>
 8007ca0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ca4:	6523      	str	r3, [r4, #80]	; 0x50
 8007ca6:	4b13      	ldr	r3, [pc, #76]	; (8007cf4 <__sinit+0x68>)
 8007ca8:	4a13      	ldr	r2, [pc, #76]	; (8007cf8 <__sinit+0x6c>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	62a2      	str	r2, [r4, #40]	; 0x28
 8007cae:	42a3      	cmp	r3, r4
 8007cb0:	bf04      	itt	eq
 8007cb2:	2301      	moveq	r3, #1
 8007cb4:	61a3      	streq	r3, [r4, #24]
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f000 f820 	bl	8007cfc <__sfp>
 8007cbc:	6060      	str	r0, [r4, #4]
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	f000 f81c 	bl	8007cfc <__sfp>
 8007cc4:	60a0      	str	r0, [r4, #8]
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	f000 f818 	bl	8007cfc <__sfp>
 8007ccc:	2200      	movs	r2, #0
 8007cce:	60e0      	str	r0, [r4, #12]
 8007cd0:	2104      	movs	r1, #4
 8007cd2:	6860      	ldr	r0, [r4, #4]
 8007cd4:	f7ff ff82 	bl	8007bdc <std>
 8007cd8:	68a0      	ldr	r0, [r4, #8]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	2109      	movs	r1, #9
 8007cde:	f7ff ff7d 	bl	8007bdc <std>
 8007ce2:	68e0      	ldr	r0, [r4, #12]
 8007ce4:	2202      	movs	r2, #2
 8007ce6:	2112      	movs	r1, #18
 8007ce8:	f7ff ff78 	bl	8007bdc <std>
 8007cec:	2301      	movs	r3, #1
 8007cee:	61a3      	str	r3, [r4, #24]
 8007cf0:	e7d2      	b.n	8007c98 <__sinit+0xc>
 8007cf2:	bf00      	nop
 8007cf4:	08008dd4 	.word	0x08008dd4
 8007cf8:	08007c25 	.word	0x08007c25

08007cfc <__sfp>:
 8007cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfe:	4607      	mov	r7, r0
 8007d00:	f7ff ffac 	bl	8007c5c <__sfp_lock_acquire>
 8007d04:	4b1e      	ldr	r3, [pc, #120]	; (8007d80 <__sfp+0x84>)
 8007d06:	681e      	ldr	r6, [r3, #0]
 8007d08:	69b3      	ldr	r3, [r6, #24]
 8007d0a:	b913      	cbnz	r3, 8007d12 <__sfp+0x16>
 8007d0c:	4630      	mov	r0, r6
 8007d0e:	f7ff ffbd 	bl	8007c8c <__sinit>
 8007d12:	3648      	adds	r6, #72	; 0x48
 8007d14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	d503      	bpl.n	8007d24 <__sfp+0x28>
 8007d1c:	6833      	ldr	r3, [r6, #0]
 8007d1e:	b30b      	cbz	r3, 8007d64 <__sfp+0x68>
 8007d20:	6836      	ldr	r6, [r6, #0]
 8007d22:	e7f7      	b.n	8007d14 <__sfp+0x18>
 8007d24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d28:	b9d5      	cbnz	r5, 8007d60 <__sfp+0x64>
 8007d2a:	4b16      	ldr	r3, [pc, #88]	; (8007d84 <__sfp+0x88>)
 8007d2c:	60e3      	str	r3, [r4, #12]
 8007d2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d32:	6665      	str	r5, [r4, #100]	; 0x64
 8007d34:	f000 f84c 	bl	8007dd0 <__retarget_lock_init_recursive>
 8007d38:	f7ff ff96 	bl	8007c68 <__sfp_lock_release>
 8007d3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007d40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007d44:	6025      	str	r5, [r4, #0]
 8007d46:	61a5      	str	r5, [r4, #24]
 8007d48:	2208      	movs	r2, #8
 8007d4a:	4629      	mov	r1, r5
 8007d4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d50:	f7fe fa48 	bl	80061e4 <memset>
 8007d54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007d58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d60:	3468      	adds	r4, #104	; 0x68
 8007d62:	e7d9      	b.n	8007d18 <__sfp+0x1c>
 8007d64:	2104      	movs	r1, #4
 8007d66:	4638      	mov	r0, r7
 8007d68:	f7ff ff62 	bl	8007c30 <__sfmoreglue>
 8007d6c:	4604      	mov	r4, r0
 8007d6e:	6030      	str	r0, [r6, #0]
 8007d70:	2800      	cmp	r0, #0
 8007d72:	d1d5      	bne.n	8007d20 <__sfp+0x24>
 8007d74:	f7ff ff78 	bl	8007c68 <__sfp_lock_release>
 8007d78:	230c      	movs	r3, #12
 8007d7a:	603b      	str	r3, [r7, #0]
 8007d7c:	e7ee      	b.n	8007d5c <__sfp+0x60>
 8007d7e:	bf00      	nop
 8007d80:	08008dd4 	.word	0x08008dd4
 8007d84:	ffff0001 	.word	0xffff0001

08007d88 <_fwalk_reent>:
 8007d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d8c:	4606      	mov	r6, r0
 8007d8e:	4688      	mov	r8, r1
 8007d90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d94:	2700      	movs	r7, #0
 8007d96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d9a:	f1b9 0901 	subs.w	r9, r9, #1
 8007d9e:	d505      	bpl.n	8007dac <_fwalk_reent+0x24>
 8007da0:	6824      	ldr	r4, [r4, #0]
 8007da2:	2c00      	cmp	r4, #0
 8007da4:	d1f7      	bne.n	8007d96 <_fwalk_reent+0xe>
 8007da6:	4638      	mov	r0, r7
 8007da8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dac:	89ab      	ldrh	r3, [r5, #12]
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d907      	bls.n	8007dc2 <_fwalk_reent+0x3a>
 8007db2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007db6:	3301      	adds	r3, #1
 8007db8:	d003      	beq.n	8007dc2 <_fwalk_reent+0x3a>
 8007dba:	4629      	mov	r1, r5
 8007dbc:	4630      	mov	r0, r6
 8007dbe:	47c0      	blx	r8
 8007dc0:	4307      	orrs	r7, r0
 8007dc2:	3568      	adds	r5, #104	; 0x68
 8007dc4:	e7e9      	b.n	8007d9a <_fwalk_reent+0x12>
	...

08007dc8 <_localeconv_r>:
 8007dc8:	4800      	ldr	r0, [pc, #0]	; (8007dcc <_localeconv_r+0x4>)
 8007dca:	4770      	bx	lr
 8007dcc:	20000178 	.word	0x20000178

08007dd0 <__retarget_lock_init_recursive>:
 8007dd0:	4770      	bx	lr

08007dd2 <__retarget_lock_acquire_recursive>:
 8007dd2:	4770      	bx	lr

08007dd4 <__retarget_lock_release_recursive>:
 8007dd4:	4770      	bx	lr

08007dd6 <__swhatbuf_r>:
 8007dd6:	b570      	push	{r4, r5, r6, lr}
 8007dd8:	460e      	mov	r6, r1
 8007dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dde:	2900      	cmp	r1, #0
 8007de0:	b096      	sub	sp, #88	; 0x58
 8007de2:	4614      	mov	r4, r2
 8007de4:	461d      	mov	r5, r3
 8007de6:	da07      	bge.n	8007df8 <__swhatbuf_r+0x22>
 8007de8:	2300      	movs	r3, #0
 8007dea:	602b      	str	r3, [r5, #0]
 8007dec:	89b3      	ldrh	r3, [r6, #12]
 8007dee:	061a      	lsls	r2, r3, #24
 8007df0:	d410      	bmi.n	8007e14 <__swhatbuf_r+0x3e>
 8007df2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007df6:	e00e      	b.n	8007e16 <__swhatbuf_r+0x40>
 8007df8:	466a      	mov	r2, sp
 8007dfa:	f000 fe9f 	bl	8008b3c <_fstat_r>
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	dbf2      	blt.n	8007de8 <__swhatbuf_r+0x12>
 8007e02:	9a01      	ldr	r2, [sp, #4]
 8007e04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007e08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007e0c:	425a      	negs	r2, r3
 8007e0e:	415a      	adcs	r2, r3
 8007e10:	602a      	str	r2, [r5, #0]
 8007e12:	e7ee      	b.n	8007df2 <__swhatbuf_r+0x1c>
 8007e14:	2340      	movs	r3, #64	; 0x40
 8007e16:	2000      	movs	r0, #0
 8007e18:	6023      	str	r3, [r4, #0]
 8007e1a:	b016      	add	sp, #88	; 0x58
 8007e1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007e20 <__smakebuf_r>:
 8007e20:	898b      	ldrh	r3, [r1, #12]
 8007e22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e24:	079d      	lsls	r5, r3, #30
 8007e26:	4606      	mov	r6, r0
 8007e28:	460c      	mov	r4, r1
 8007e2a:	d507      	bpl.n	8007e3c <__smakebuf_r+0x1c>
 8007e2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007e30:	6023      	str	r3, [r4, #0]
 8007e32:	6123      	str	r3, [r4, #16]
 8007e34:	2301      	movs	r3, #1
 8007e36:	6163      	str	r3, [r4, #20]
 8007e38:	b002      	add	sp, #8
 8007e3a:	bd70      	pop	{r4, r5, r6, pc}
 8007e3c:	ab01      	add	r3, sp, #4
 8007e3e:	466a      	mov	r2, sp
 8007e40:	f7ff ffc9 	bl	8007dd6 <__swhatbuf_r>
 8007e44:	9900      	ldr	r1, [sp, #0]
 8007e46:	4605      	mov	r5, r0
 8007e48:	4630      	mov	r0, r6
 8007e4a:	f000 fc1d 	bl	8008688 <_malloc_r>
 8007e4e:	b948      	cbnz	r0, 8007e64 <__smakebuf_r+0x44>
 8007e50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e54:	059a      	lsls	r2, r3, #22
 8007e56:	d4ef      	bmi.n	8007e38 <__smakebuf_r+0x18>
 8007e58:	f023 0303 	bic.w	r3, r3, #3
 8007e5c:	f043 0302 	orr.w	r3, r3, #2
 8007e60:	81a3      	strh	r3, [r4, #12]
 8007e62:	e7e3      	b.n	8007e2c <__smakebuf_r+0xc>
 8007e64:	4b0d      	ldr	r3, [pc, #52]	; (8007e9c <__smakebuf_r+0x7c>)
 8007e66:	62b3      	str	r3, [r6, #40]	; 0x28
 8007e68:	89a3      	ldrh	r3, [r4, #12]
 8007e6a:	6020      	str	r0, [r4, #0]
 8007e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e70:	81a3      	strh	r3, [r4, #12]
 8007e72:	9b00      	ldr	r3, [sp, #0]
 8007e74:	6163      	str	r3, [r4, #20]
 8007e76:	9b01      	ldr	r3, [sp, #4]
 8007e78:	6120      	str	r0, [r4, #16]
 8007e7a:	b15b      	cbz	r3, 8007e94 <__smakebuf_r+0x74>
 8007e7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e80:	4630      	mov	r0, r6
 8007e82:	f000 fe6d 	bl	8008b60 <_isatty_r>
 8007e86:	b128      	cbz	r0, 8007e94 <__smakebuf_r+0x74>
 8007e88:	89a3      	ldrh	r3, [r4, #12]
 8007e8a:	f023 0303 	bic.w	r3, r3, #3
 8007e8e:	f043 0301 	orr.w	r3, r3, #1
 8007e92:	81a3      	strh	r3, [r4, #12]
 8007e94:	89a0      	ldrh	r0, [r4, #12]
 8007e96:	4305      	orrs	r5, r0
 8007e98:	81a5      	strh	r5, [r4, #12]
 8007e9a:	e7cd      	b.n	8007e38 <__smakebuf_r+0x18>
 8007e9c:	08007c25 	.word	0x08007c25

08007ea0 <malloc>:
 8007ea0:	4b02      	ldr	r3, [pc, #8]	; (8007eac <malloc+0xc>)
 8007ea2:	4601      	mov	r1, r0
 8007ea4:	6818      	ldr	r0, [r3, #0]
 8007ea6:	f000 bbef 	b.w	8008688 <_malloc_r>
 8007eaa:	bf00      	nop
 8007eac:	20000024 	.word	0x20000024

08007eb0 <memcpy>:
 8007eb0:	440a      	add	r2, r1
 8007eb2:	4291      	cmp	r1, r2
 8007eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007eb8:	d100      	bne.n	8007ebc <memcpy+0xc>
 8007eba:	4770      	bx	lr
 8007ebc:	b510      	push	{r4, lr}
 8007ebe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ec2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ec6:	4291      	cmp	r1, r2
 8007ec8:	d1f9      	bne.n	8007ebe <memcpy+0xe>
 8007eca:	bd10      	pop	{r4, pc}

08007ecc <_Balloc>:
 8007ecc:	b570      	push	{r4, r5, r6, lr}
 8007ece:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ed0:	4604      	mov	r4, r0
 8007ed2:	460d      	mov	r5, r1
 8007ed4:	b976      	cbnz	r6, 8007ef4 <_Balloc+0x28>
 8007ed6:	2010      	movs	r0, #16
 8007ed8:	f7ff ffe2 	bl	8007ea0 <malloc>
 8007edc:	4602      	mov	r2, r0
 8007ede:	6260      	str	r0, [r4, #36]	; 0x24
 8007ee0:	b920      	cbnz	r0, 8007eec <_Balloc+0x20>
 8007ee2:	4b18      	ldr	r3, [pc, #96]	; (8007f44 <_Balloc+0x78>)
 8007ee4:	4818      	ldr	r0, [pc, #96]	; (8007f48 <_Balloc+0x7c>)
 8007ee6:	2166      	movs	r1, #102	; 0x66
 8007ee8:	f000 fde8 	bl	8008abc <__assert_func>
 8007eec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ef0:	6006      	str	r6, [r0, #0]
 8007ef2:	60c6      	str	r6, [r0, #12]
 8007ef4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007ef6:	68f3      	ldr	r3, [r6, #12]
 8007ef8:	b183      	cbz	r3, 8007f1c <_Balloc+0x50>
 8007efa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f02:	b9b8      	cbnz	r0, 8007f34 <_Balloc+0x68>
 8007f04:	2101      	movs	r1, #1
 8007f06:	fa01 f605 	lsl.w	r6, r1, r5
 8007f0a:	1d72      	adds	r2, r6, #5
 8007f0c:	0092      	lsls	r2, r2, #2
 8007f0e:	4620      	mov	r0, r4
 8007f10:	f000 fb5a 	bl	80085c8 <_calloc_r>
 8007f14:	b160      	cbz	r0, 8007f30 <_Balloc+0x64>
 8007f16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f1a:	e00e      	b.n	8007f3a <_Balloc+0x6e>
 8007f1c:	2221      	movs	r2, #33	; 0x21
 8007f1e:	2104      	movs	r1, #4
 8007f20:	4620      	mov	r0, r4
 8007f22:	f000 fb51 	bl	80085c8 <_calloc_r>
 8007f26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f28:	60f0      	str	r0, [r6, #12]
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d1e4      	bne.n	8007efa <_Balloc+0x2e>
 8007f30:	2000      	movs	r0, #0
 8007f32:	bd70      	pop	{r4, r5, r6, pc}
 8007f34:	6802      	ldr	r2, [r0, #0]
 8007f36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f40:	e7f7      	b.n	8007f32 <_Balloc+0x66>
 8007f42:	bf00      	nop
 8007f44:	08008e19 	.word	0x08008e19
 8007f48:	08008f00 	.word	0x08008f00

08007f4c <_Bfree>:
 8007f4c:	b570      	push	{r4, r5, r6, lr}
 8007f4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007f50:	4605      	mov	r5, r0
 8007f52:	460c      	mov	r4, r1
 8007f54:	b976      	cbnz	r6, 8007f74 <_Bfree+0x28>
 8007f56:	2010      	movs	r0, #16
 8007f58:	f7ff ffa2 	bl	8007ea0 <malloc>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	6268      	str	r0, [r5, #36]	; 0x24
 8007f60:	b920      	cbnz	r0, 8007f6c <_Bfree+0x20>
 8007f62:	4b09      	ldr	r3, [pc, #36]	; (8007f88 <_Bfree+0x3c>)
 8007f64:	4809      	ldr	r0, [pc, #36]	; (8007f8c <_Bfree+0x40>)
 8007f66:	218a      	movs	r1, #138	; 0x8a
 8007f68:	f000 fda8 	bl	8008abc <__assert_func>
 8007f6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f70:	6006      	str	r6, [r0, #0]
 8007f72:	60c6      	str	r6, [r0, #12]
 8007f74:	b13c      	cbz	r4, 8007f86 <_Bfree+0x3a>
 8007f76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f78:	6862      	ldr	r2, [r4, #4]
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f80:	6021      	str	r1, [r4, #0]
 8007f82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f86:	bd70      	pop	{r4, r5, r6, pc}
 8007f88:	08008e19 	.word	0x08008e19
 8007f8c:	08008f00 	.word	0x08008f00

08007f90 <__multadd>:
 8007f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f94:	690e      	ldr	r6, [r1, #16]
 8007f96:	4607      	mov	r7, r0
 8007f98:	4698      	mov	r8, r3
 8007f9a:	460c      	mov	r4, r1
 8007f9c:	f101 0014 	add.w	r0, r1, #20
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	6805      	ldr	r5, [r0, #0]
 8007fa4:	b2a9      	uxth	r1, r5
 8007fa6:	fb02 8101 	mla	r1, r2, r1, r8
 8007faa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007fae:	0c2d      	lsrs	r5, r5, #16
 8007fb0:	fb02 c505 	mla	r5, r2, r5, ip
 8007fb4:	b289      	uxth	r1, r1
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007fbc:	429e      	cmp	r6, r3
 8007fbe:	f840 1b04 	str.w	r1, [r0], #4
 8007fc2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007fc6:	dcec      	bgt.n	8007fa2 <__multadd+0x12>
 8007fc8:	f1b8 0f00 	cmp.w	r8, #0
 8007fcc:	d022      	beq.n	8008014 <__multadd+0x84>
 8007fce:	68a3      	ldr	r3, [r4, #8]
 8007fd0:	42b3      	cmp	r3, r6
 8007fd2:	dc19      	bgt.n	8008008 <__multadd+0x78>
 8007fd4:	6861      	ldr	r1, [r4, #4]
 8007fd6:	4638      	mov	r0, r7
 8007fd8:	3101      	adds	r1, #1
 8007fda:	f7ff ff77 	bl	8007ecc <_Balloc>
 8007fde:	4605      	mov	r5, r0
 8007fe0:	b928      	cbnz	r0, 8007fee <__multadd+0x5e>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	4b0d      	ldr	r3, [pc, #52]	; (800801c <__multadd+0x8c>)
 8007fe6:	480e      	ldr	r0, [pc, #56]	; (8008020 <__multadd+0x90>)
 8007fe8:	21b5      	movs	r1, #181	; 0xb5
 8007fea:	f000 fd67 	bl	8008abc <__assert_func>
 8007fee:	6922      	ldr	r2, [r4, #16]
 8007ff0:	3202      	adds	r2, #2
 8007ff2:	f104 010c 	add.w	r1, r4, #12
 8007ff6:	0092      	lsls	r2, r2, #2
 8007ff8:	300c      	adds	r0, #12
 8007ffa:	f7ff ff59 	bl	8007eb0 <memcpy>
 8007ffe:	4621      	mov	r1, r4
 8008000:	4638      	mov	r0, r7
 8008002:	f7ff ffa3 	bl	8007f4c <_Bfree>
 8008006:	462c      	mov	r4, r5
 8008008:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800800c:	3601      	adds	r6, #1
 800800e:	f8c3 8014 	str.w	r8, [r3, #20]
 8008012:	6126      	str	r6, [r4, #16]
 8008014:	4620      	mov	r0, r4
 8008016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800801a:	bf00      	nop
 800801c:	08008e8f 	.word	0x08008e8f
 8008020:	08008f00 	.word	0x08008f00

08008024 <__hi0bits>:
 8008024:	0c03      	lsrs	r3, r0, #16
 8008026:	041b      	lsls	r3, r3, #16
 8008028:	b9d3      	cbnz	r3, 8008060 <__hi0bits+0x3c>
 800802a:	0400      	lsls	r0, r0, #16
 800802c:	2310      	movs	r3, #16
 800802e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008032:	bf04      	itt	eq
 8008034:	0200      	lsleq	r0, r0, #8
 8008036:	3308      	addeq	r3, #8
 8008038:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800803c:	bf04      	itt	eq
 800803e:	0100      	lsleq	r0, r0, #4
 8008040:	3304      	addeq	r3, #4
 8008042:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008046:	bf04      	itt	eq
 8008048:	0080      	lsleq	r0, r0, #2
 800804a:	3302      	addeq	r3, #2
 800804c:	2800      	cmp	r0, #0
 800804e:	db05      	blt.n	800805c <__hi0bits+0x38>
 8008050:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008054:	f103 0301 	add.w	r3, r3, #1
 8008058:	bf08      	it	eq
 800805a:	2320      	moveq	r3, #32
 800805c:	4618      	mov	r0, r3
 800805e:	4770      	bx	lr
 8008060:	2300      	movs	r3, #0
 8008062:	e7e4      	b.n	800802e <__hi0bits+0xa>

08008064 <__lo0bits>:
 8008064:	6803      	ldr	r3, [r0, #0]
 8008066:	f013 0207 	ands.w	r2, r3, #7
 800806a:	4601      	mov	r1, r0
 800806c:	d00b      	beq.n	8008086 <__lo0bits+0x22>
 800806e:	07da      	lsls	r2, r3, #31
 8008070:	d424      	bmi.n	80080bc <__lo0bits+0x58>
 8008072:	0798      	lsls	r0, r3, #30
 8008074:	bf49      	itett	mi
 8008076:	085b      	lsrmi	r3, r3, #1
 8008078:	089b      	lsrpl	r3, r3, #2
 800807a:	2001      	movmi	r0, #1
 800807c:	600b      	strmi	r3, [r1, #0]
 800807e:	bf5c      	itt	pl
 8008080:	600b      	strpl	r3, [r1, #0]
 8008082:	2002      	movpl	r0, #2
 8008084:	4770      	bx	lr
 8008086:	b298      	uxth	r0, r3
 8008088:	b9b0      	cbnz	r0, 80080b8 <__lo0bits+0x54>
 800808a:	0c1b      	lsrs	r3, r3, #16
 800808c:	2010      	movs	r0, #16
 800808e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008092:	bf04      	itt	eq
 8008094:	0a1b      	lsreq	r3, r3, #8
 8008096:	3008      	addeq	r0, #8
 8008098:	071a      	lsls	r2, r3, #28
 800809a:	bf04      	itt	eq
 800809c:	091b      	lsreq	r3, r3, #4
 800809e:	3004      	addeq	r0, #4
 80080a0:	079a      	lsls	r2, r3, #30
 80080a2:	bf04      	itt	eq
 80080a4:	089b      	lsreq	r3, r3, #2
 80080a6:	3002      	addeq	r0, #2
 80080a8:	07da      	lsls	r2, r3, #31
 80080aa:	d403      	bmi.n	80080b4 <__lo0bits+0x50>
 80080ac:	085b      	lsrs	r3, r3, #1
 80080ae:	f100 0001 	add.w	r0, r0, #1
 80080b2:	d005      	beq.n	80080c0 <__lo0bits+0x5c>
 80080b4:	600b      	str	r3, [r1, #0]
 80080b6:	4770      	bx	lr
 80080b8:	4610      	mov	r0, r2
 80080ba:	e7e8      	b.n	800808e <__lo0bits+0x2a>
 80080bc:	2000      	movs	r0, #0
 80080be:	4770      	bx	lr
 80080c0:	2020      	movs	r0, #32
 80080c2:	4770      	bx	lr

080080c4 <__i2b>:
 80080c4:	b510      	push	{r4, lr}
 80080c6:	460c      	mov	r4, r1
 80080c8:	2101      	movs	r1, #1
 80080ca:	f7ff feff 	bl	8007ecc <_Balloc>
 80080ce:	4602      	mov	r2, r0
 80080d0:	b928      	cbnz	r0, 80080de <__i2b+0x1a>
 80080d2:	4b05      	ldr	r3, [pc, #20]	; (80080e8 <__i2b+0x24>)
 80080d4:	4805      	ldr	r0, [pc, #20]	; (80080ec <__i2b+0x28>)
 80080d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80080da:	f000 fcef 	bl	8008abc <__assert_func>
 80080de:	2301      	movs	r3, #1
 80080e0:	6144      	str	r4, [r0, #20]
 80080e2:	6103      	str	r3, [r0, #16]
 80080e4:	bd10      	pop	{r4, pc}
 80080e6:	bf00      	nop
 80080e8:	08008e8f 	.word	0x08008e8f
 80080ec:	08008f00 	.word	0x08008f00

080080f0 <__multiply>:
 80080f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f4:	4614      	mov	r4, r2
 80080f6:	690a      	ldr	r2, [r1, #16]
 80080f8:	6923      	ldr	r3, [r4, #16]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	bfb8      	it	lt
 80080fe:	460b      	movlt	r3, r1
 8008100:	460d      	mov	r5, r1
 8008102:	bfbc      	itt	lt
 8008104:	4625      	movlt	r5, r4
 8008106:	461c      	movlt	r4, r3
 8008108:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800810c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008110:	68ab      	ldr	r3, [r5, #8]
 8008112:	6869      	ldr	r1, [r5, #4]
 8008114:	eb0a 0709 	add.w	r7, sl, r9
 8008118:	42bb      	cmp	r3, r7
 800811a:	b085      	sub	sp, #20
 800811c:	bfb8      	it	lt
 800811e:	3101      	addlt	r1, #1
 8008120:	f7ff fed4 	bl	8007ecc <_Balloc>
 8008124:	b930      	cbnz	r0, 8008134 <__multiply+0x44>
 8008126:	4602      	mov	r2, r0
 8008128:	4b42      	ldr	r3, [pc, #264]	; (8008234 <__multiply+0x144>)
 800812a:	4843      	ldr	r0, [pc, #268]	; (8008238 <__multiply+0x148>)
 800812c:	f240 115d 	movw	r1, #349	; 0x15d
 8008130:	f000 fcc4 	bl	8008abc <__assert_func>
 8008134:	f100 0614 	add.w	r6, r0, #20
 8008138:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800813c:	4633      	mov	r3, r6
 800813e:	2200      	movs	r2, #0
 8008140:	4543      	cmp	r3, r8
 8008142:	d31e      	bcc.n	8008182 <__multiply+0x92>
 8008144:	f105 0c14 	add.w	ip, r5, #20
 8008148:	f104 0314 	add.w	r3, r4, #20
 800814c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008150:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008154:	9202      	str	r2, [sp, #8]
 8008156:	ebac 0205 	sub.w	r2, ip, r5
 800815a:	3a15      	subs	r2, #21
 800815c:	f022 0203 	bic.w	r2, r2, #3
 8008160:	3204      	adds	r2, #4
 8008162:	f105 0115 	add.w	r1, r5, #21
 8008166:	458c      	cmp	ip, r1
 8008168:	bf38      	it	cc
 800816a:	2204      	movcc	r2, #4
 800816c:	9201      	str	r2, [sp, #4]
 800816e:	9a02      	ldr	r2, [sp, #8]
 8008170:	9303      	str	r3, [sp, #12]
 8008172:	429a      	cmp	r2, r3
 8008174:	d808      	bhi.n	8008188 <__multiply+0x98>
 8008176:	2f00      	cmp	r7, #0
 8008178:	dc55      	bgt.n	8008226 <__multiply+0x136>
 800817a:	6107      	str	r7, [r0, #16]
 800817c:	b005      	add	sp, #20
 800817e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008182:	f843 2b04 	str.w	r2, [r3], #4
 8008186:	e7db      	b.n	8008140 <__multiply+0x50>
 8008188:	f8b3 a000 	ldrh.w	sl, [r3]
 800818c:	f1ba 0f00 	cmp.w	sl, #0
 8008190:	d020      	beq.n	80081d4 <__multiply+0xe4>
 8008192:	f105 0e14 	add.w	lr, r5, #20
 8008196:	46b1      	mov	r9, r6
 8008198:	2200      	movs	r2, #0
 800819a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800819e:	f8d9 b000 	ldr.w	fp, [r9]
 80081a2:	b2a1      	uxth	r1, r4
 80081a4:	fa1f fb8b 	uxth.w	fp, fp
 80081a8:	fb0a b101 	mla	r1, sl, r1, fp
 80081ac:	4411      	add	r1, r2
 80081ae:	f8d9 2000 	ldr.w	r2, [r9]
 80081b2:	0c24      	lsrs	r4, r4, #16
 80081b4:	0c12      	lsrs	r2, r2, #16
 80081b6:	fb0a 2404 	mla	r4, sl, r4, r2
 80081ba:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80081be:	b289      	uxth	r1, r1
 80081c0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80081c4:	45f4      	cmp	ip, lr
 80081c6:	f849 1b04 	str.w	r1, [r9], #4
 80081ca:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80081ce:	d8e4      	bhi.n	800819a <__multiply+0xaa>
 80081d0:	9901      	ldr	r1, [sp, #4]
 80081d2:	5072      	str	r2, [r6, r1]
 80081d4:	9a03      	ldr	r2, [sp, #12]
 80081d6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80081da:	3304      	adds	r3, #4
 80081dc:	f1b9 0f00 	cmp.w	r9, #0
 80081e0:	d01f      	beq.n	8008222 <__multiply+0x132>
 80081e2:	6834      	ldr	r4, [r6, #0]
 80081e4:	f105 0114 	add.w	r1, r5, #20
 80081e8:	46b6      	mov	lr, r6
 80081ea:	f04f 0a00 	mov.w	sl, #0
 80081ee:	880a      	ldrh	r2, [r1, #0]
 80081f0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80081f4:	fb09 b202 	mla	r2, r9, r2, fp
 80081f8:	4492      	add	sl, r2
 80081fa:	b2a4      	uxth	r4, r4
 80081fc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008200:	f84e 4b04 	str.w	r4, [lr], #4
 8008204:	f851 4b04 	ldr.w	r4, [r1], #4
 8008208:	f8be 2000 	ldrh.w	r2, [lr]
 800820c:	0c24      	lsrs	r4, r4, #16
 800820e:	fb09 2404 	mla	r4, r9, r4, r2
 8008212:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008216:	458c      	cmp	ip, r1
 8008218:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800821c:	d8e7      	bhi.n	80081ee <__multiply+0xfe>
 800821e:	9a01      	ldr	r2, [sp, #4]
 8008220:	50b4      	str	r4, [r6, r2]
 8008222:	3604      	adds	r6, #4
 8008224:	e7a3      	b.n	800816e <__multiply+0x7e>
 8008226:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1a5      	bne.n	800817a <__multiply+0x8a>
 800822e:	3f01      	subs	r7, #1
 8008230:	e7a1      	b.n	8008176 <__multiply+0x86>
 8008232:	bf00      	nop
 8008234:	08008e8f 	.word	0x08008e8f
 8008238:	08008f00 	.word	0x08008f00

0800823c <__pow5mult>:
 800823c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008240:	4615      	mov	r5, r2
 8008242:	f012 0203 	ands.w	r2, r2, #3
 8008246:	4606      	mov	r6, r0
 8008248:	460f      	mov	r7, r1
 800824a:	d007      	beq.n	800825c <__pow5mult+0x20>
 800824c:	4c25      	ldr	r4, [pc, #148]	; (80082e4 <__pow5mult+0xa8>)
 800824e:	3a01      	subs	r2, #1
 8008250:	2300      	movs	r3, #0
 8008252:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008256:	f7ff fe9b 	bl	8007f90 <__multadd>
 800825a:	4607      	mov	r7, r0
 800825c:	10ad      	asrs	r5, r5, #2
 800825e:	d03d      	beq.n	80082dc <__pow5mult+0xa0>
 8008260:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008262:	b97c      	cbnz	r4, 8008284 <__pow5mult+0x48>
 8008264:	2010      	movs	r0, #16
 8008266:	f7ff fe1b 	bl	8007ea0 <malloc>
 800826a:	4602      	mov	r2, r0
 800826c:	6270      	str	r0, [r6, #36]	; 0x24
 800826e:	b928      	cbnz	r0, 800827c <__pow5mult+0x40>
 8008270:	4b1d      	ldr	r3, [pc, #116]	; (80082e8 <__pow5mult+0xac>)
 8008272:	481e      	ldr	r0, [pc, #120]	; (80082ec <__pow5mult+0xb0>)
 8008274:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008278:	f000 fc20 	bl	8008abc <__assert_func>
 800827c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008280:	6004      	str	r4, [r0, #0]
 8008282:	60c4      	str	r4, [r0, #12]
 8008284:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008288:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800828c:	b94c      	cbnz	r4, 80082a2 <__pow5mult+0x66>
 800828e:	f240 2171 	movw	r1, #625	; 0x271
 8008292:	4630      	mov	r0, r6
 8008294:	f7ff ff16 	bl	80080c4 <__i2b>
 8008298:	2300      	movs	r3, #0
 800829a:	f8c8 0008 	str.w	r0, [r8, #8]
 800829e:	4604      	mov	r4, r0
 80082a0:	6003      	str	r3, [r0, #0]
 80082a2:	f04f 0900 	mov.w	r9, #0
 80082a6:	07eb      	lsls	r3, r5, #31
 80082a8:	d50a      	bpl.n	80082c0 <__pow5mult+0x84>
 80082aa:	4639      	mov	r1, r7
 80082ac:	4622      	mov	r2, r4
 80082ae:	4630      	mov	r0, r6
 80082b0:	f7ff ff1e 	bl	80080f0 <__multiply>
 80082b4:	4639      	mov	r1, r7
 80082b6:	4680      	mov	r8, r0
 80082b8:	4630      	mov	r0, r6
 80082ba:	f7ff fe47 	bl	8007f4c <_Bfree>
 80082be:	4647      	mov	r7, r8
 80082c0:	106d      	asrs	r5, r5, #1
 80082c2:	d00b      	beq.n	80082dc <__pow5mult+0xa0>
 80082c4:	6820      	ldr	r0, [r4, #0]
 80082c6:	b938      	cbnz	r0, 80082d8 <__pow5mult+0x9c>
 80082c8:	4622      	mov	r2, r4
 80082ca:	4621      	mov	r1, r4
 80082cc:	4630      	mov	r0, r6
 80082ce:	f7ff ff0f 	bl	80080f0 <__multiply>
 80082d2:	6020      	str	r0, [r4, #0]
 80082d4:	f8c0 9000 	str.w	r9, [r0]
 80082d8:	4604      	mov	r4, r0
 80082da:	e7e4      	b.n	80082a6 <__pow5mult+0x6a>
 80082dc:	4638      	mov	r0, r7
 80082de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082e2:	bf00      	nop
 80082e4:	08009050 	.word	0x08009050
 80082e8:	08008e19 	.word	0x08008e19
 80082ec:	08008f00 	.word	0x08008f00

080082f0 <__lshift>:
 80082f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082f4:	460c      	mov	r4, r1
 80082f6:	6849      	ldr	r1, [r1, #4]
 80082f8:	6923      	ldr	r3, [r4, #16]
 80082fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80082fe:	68a3      	ldr	r3, [r4, #8]
 8008300:	4607      	mov	r7, r0
 8008302:	4691      	mov	r9, r2
 8008304:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008308:	f108 0601 	add.w	r6, r8, #1
 800830c:	42b3      	cmp	r3, r6
 800830e:	db0b      	blt.n	8008328 <__lshift+0x38>
 8008310:	4638      	mov	r0, r7
 8008312:	f7ff fddb 	bl	8007ecc <_Balloc>
 8008316:	4605      	mov	r5, r0
 8008318:	b948      	cbnz	r0, 800832e <__lshift+0x3e>
 800831a:	4602      	mov	r2, r0
 800831c:	4b28      	ldr	r3, [pc, #160]	; (80083c0 <__lshift+0xd0>)
 800831e:	4829      	ldr	r0, [pc, #164]	; (80083c4 <__lshift+0xd4>)
 8008320:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008324:	f000 fbca 	bl	8008abc <__assert_func>
 8008328:	3101      	adds	r1, #1
 800832a:	005b      	lsls	r3, r3, #1
 800832c:	e7ee      	b.n	800830c <__lshift+0x1c>
 800832e:	2300      	movs	r3, #0
 8008330:	f100 0114 	add.w	r1, r0, #20
 8008334:	f100 0210 	add.w	r2, r0, #16
 8008338:	4618      	mov	r0, r3
 800833a:	4553      	cmp	r3, sl
 800833c:	db33      	blt.n	80083a6 <__lshift+0xb6>
 800833e:	6920      	ldr	r0, [r4, #16]
 8008340:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008344:	f104 0314 	add.w	r3, r4, #20
 8008348:	f019 091f 	ands.w	r9, r9, #31
 800834c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008350:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008354:	d02b      	beq.n	80083ae <__lshift+0xbe>
 8008356:	f1c9 0e20 	rsb	lr, r9, #32
 800835a:	468a      	mov	sl, r1
 800835c:	2200      	movs	r2, #0
 800835e:	6818      	ldr	r0, [r3, #0]
 8008360:	fa00 f009 	lsl.w	r0, r0, r9
 8008364:	4302      	orrs	r2, r0
 8008366:	f84a 2b04 	str.w	r2, [sl], #4
 800836a:	f853 2b04 	ldr.w	r2, [r3], #4
 800836e:	459c      	cmp	ip, r3
 8008370:	fa22 f20e 	lsr.w	r2, r2, lr
 8008374:	d8f3      	bhi.n	800835e <__lshift+0x6e>
 8008376:	ebac 0304 	sub.w	r3, ip, r4
 800837a:	3b15      	subs	r3, #21
 800837c:	f023 0303 	bic.w	r3, r3, #3
 8008380:	3304      	adds	r3, #4
 8008382:	f104 0015 	add.w	r0, r4, #21
 8008386:	4584      	cmp	ip, r0
 8008388:	bf38      	it	cc
 800838a:	2304      	movcc	r3, #4
 800838c:	50ca      	str	r2, [r1, r3]
 800838e:	b10a      	cbz	r2, 8008394 <__lshift+0xa4>
 8008390:	f108 0602 	add.w	r6, r8, #2
 8008394:	3e01      	subs	r6, #1
 8008396:	4638      	mov	r0, r7
 8008398:	612e      	str	r6, [r5, #16]
 800839a:	4621      	mov	r1, r4
 800839c:	f7ff fdd6 	bl	8007f4c <_Bfree>
 80083a0:	4628      	mov	r0, r5
 80083a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80083aa:	3301      	adds	r3, #1
 80083ac:	e7c5      	b.n	800833a <__lshift+0x4a>
 80083ae:	3904      	subs	r1, #4
 80083b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80083b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80083b8:	459c      	cmp	ip, r3
 80083ba:	d8f9      	bhi.n	80083b0 <__lshift+0xc0>
 80083bc:	e7ea      	b.n	8008394 <__lshift+0xa4>
 80083be:	bf00      	nop
 80083c0:	08008e8f 	.word	0x08008e8f
 80083c4:	08008f00 	.word	0x08008f00

080083c8 <__mcmp>:
 80083c8:	b530      	push	{r4, r5, lr}
 80083ca:	6902      	ldr	r2, [r0, #16]
 80083cc:	690c      	ldr	r4, [r1, #16]
 80083ce:	1b12      	subs	r2, r2, r4
 80083d0:	d10e      	bne.n	80083f0 <__mcmp+0x28>
 80083d2:	f100 0314 	add.w	r3, r0, #20
 80083d6:	3114      	adds	r1, #20
 80083d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80083dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80083e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80083e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80083e8:	42a5      	cmp	r5, r4
 80083ea:	d003      	beq.n	80083f4 <__mcmp+0x2c>
 80083ec:	d305      	bcc.n	80083fa <__mcmp+0x32>
 80083ee:	2201      	movs	r2, #1
 80083f0:	4610      	mov	r0, r2
 80083f2:	bd30      	pop	{r4, r5, pc}
 80083f4:	4283      	cmp	r3, r0
 80083f6:	d3f3      	bcc.n	80083e0 <__mcmp+0x18>
 80083f8:	e7fa      	b.n	80083f0 <__mcmp+0x28>
 80083fa:	f04f 32ff 	mov.w	r2, #4294967295
 80083fe:	e7f7      	b.n	80083f0 <__mcmp+0x28>

08008400 <__mdiff>:
 8008400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008404:	460c      	mov	r4, r1
 8008406:	4606      	mov	r6, r0
 8008408:	4611      	mov	r1, r2
 800840a:	4620      	mov	r0, r4
 800840c:	4617      	mov	r7, r2
 800840e:	f7ff ffdb 	bl	80083c8 <__mcmp>
 8008412:	1e05      	subs	r5, r0, #0
 8008414:	d110      	bne.n	8008438 <__mdiff+0x38>
 8008416:	4629      	mov	r1, r5
 8008418:	4630      	mov	r0, r6
 800841a:	f7ff fd57 	bl	8007ecc <_Balloc>
 800841e:	b930      	cbnz	r0, 800842e <__mdiff+0x2e>
 8008420:	4b39      	ldr	r3, [pc, #228]	; (8008508 <__mdiff+0x108>)
 8008422:	4602      	mov	r2, r0
 8008424:	f240 2132 	movw	r1, #562	; 0x232
 8008428:	4838      	ldr	r0, [pc, #224]	; (800850c <__mdiff+0x10c>)
 800842a:	f000 fb47 	bl	8008abc <__assert_func>
 800842e:	2301      	movs	r3, #1
 8008430:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008434:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008438:	bfa4      	itt	ge
 800843a:	463b      	movge	r3, r7
 800843c:	4627      	movge	r7, r4
 800843e:	4630      	mov	r0, r6
 8008440:	6879      	ldr	r1, [r7, #4]
 8008442:	bfa6      	itte	ge
 8008444:	461c      	movge	r4, r3
 8008446:	2500      	movge	r5, #0
 8008448:	2501      	movlt	r5, #1
 800844a:	f7ff fd3f 	bl	8007ecc <_Balloc>
 800844e:	b920      	cbnz	r0, 800845a <__mdiff+0x5a>
 8008450:	4b2d      	ldr	r3, [pc, #180]	; (8008508 <__mdiff+0x108>)
 8008452:	4602      	mov	r2, r0
 8008454:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008458:	e7e6      	b.n	8008428 <__mdiff+0x28>
 800845a:	693e      	ldr	r6, [r7, #16]
 800845c:	60c5      	str	r5, [r0, #12]
 800845e:	6925      	ldr	r5, [r4, #16]
 8008460:	f107 0114 	add.w	r1, r7, #20
 8008464:	f104 0914 	add.w	r9, r4, #20
 8008468:	f100 0e14 	add.w	lr, r0, #20
 800846c:	f107 0210 	add.w	r2, r7, #16
 8008470:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008474:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008478:	46f2      	mov	sl, lr
 800847a:	2700      	movs	r7, #0
 800847c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008480:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008484:	fa1f f883 	uxth.w	r8, r3
 8008488:	fa17 f78b 	uxtah	r7, r7, fp
 800848c:	0c1b      	lsrs	r3, r3, #16
 800848e:	eba7 0808 	sub.w	r8, r7, r8
 8008492:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008496:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800849a:	fa1f f888 	uxth.w	r8, r8
 800849e:	141f      	asrs	r7, r3, #16
 80084a0:	454d      	cmp	r5, r9
 80084a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80084a6:	f84a 3b04 	str.w	r3, [sl], #4
 80084aa:	d8e7      	bhi.n	800847c <__mdiff+0x7c>
 80084ac:	1b2b      	subs	r3, r5, r4
 80084ae:	3b15      	subs	r3, #21
 80084b0:	f023 0303 	bic.w	r3, r3, #3
 80084b4:	3304      	adds	r3, #4
 80084b6:	3415      	adds	r4, #21
 80084b8:	42a5      	cmp	r5, r4
 80084ba:	bf38      	it	cc
 80084bc:	2304      	movcc	r3, #4
 80084be:	4419      	add	r1, r3
 80084c0:	4473      	add	r3, lr
 80084c2:	469e      	mov	lr, r3
 80084c4:	460d      	mov	r5, r1
 80084c6:	4565      	cmp	r5, ip
 80084c8:	d30e      	bcc.n	80084e8 <__mdiff+0xe8>
 80084ca:	f10c 0203 	add.w	r2, ip, #3
 80084ce:	1a52      	subs	r2, r2, r1
 80084d0:	f022 0203 	bic.w	r2, r2, #3
 80084d4:	3903      	subs	r1, #3
 80084d6:	458c      	cmp	ip, r1
 80084d8:	bf38      	it	cc
 80084da:	2200      	movcc	r2, #0
 80084dc:	441a      	add	r2, r3
 80084de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80084e2:	b17b      	cbz	r3, 8008504 <__mdiff+0x104>
 80084e4:	6106      	str	r6, [r0, #16]
 80084e6:	e7a5      	b.n	8008434 <__mdiff+0x34>
 80084e8:	f855 8b04 	ldr.w	r8, [r5], #4
 80084ec:	fa17 f488 	uxtah	r4, r7, r8
 80084f0:	1422      	asrs	r2, r4, #16
 80084f2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80084f6:	b2a4      	uxth	r4, r4
 80084f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80084fc:	f84e 4b04 	str.w	r4, [lr], #4
 8008500:	1417      	asrs	r7, r2, #16
 8008502:	e7e0      	b.n	80084c6 <__mdiff+0xc6>
 8008504:	3e01      	subs	r6, #1
 8008506:	e7ea      	b.n	80084de <__mdiff+0xde>
 8008508:	08008e8f 	.word	0x08008e8f
 800850c:	08008f00 	.word	0x08008f00

08008510 <__d2b>:
 8008510:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008514:	4689      	mov	r9, r1
 8008516:	2101      	movs	r1, #1
 8008518:	ec57 6b10 	vmov	r6, r7, d0
 800851c:	4690      	mov	r8, r2
 800851e:	f7ff fcd5 	bl	8007ecc <_Balloc>
 8008522:	4604      	mov	r4, r0
 8008524:	b930      	cbnz	r0, 8008534 <__d2b+0x24>
 8008526:	4602      	mov	r2, r0
 8008528:	4b25      	ldr	r3, [pc, #148]	; (80085c0 <__d2b+0xb0>)
 800852a:	4826      	ldr	r0, [pc, #152]	; (80085c4 <__d2b+0xb4>)
 800852c:	f240 310a 	movw	r1, #778	; 0x30a
 8008530:	f000 fac4 	bl	8008abc <__assert_func>
 8008534:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008538:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800853c:	bb35      	cbnz	r5, 800858c <__d2b+0x7c>
 800853e:	2e00      	cmp	r6, #0
 8008540:	9301      	str	r3, [sp, #4]
 8008542:	d028      	beq.n	8008596 <__d2b+0x86>
 8008544:	4668      	mov	r0, sp
 8008546:	9600      	str	r6, [sp, #0]
 8008548:	f7ff fd8c 	bl	8008064 <__lo0bits>
 800854c:	9900      	ldr	r1, [sp, #0]
 800854e:	b300      	cbz	r0, 8008592 <__d2b+0x82>
 8008550:	9a01      	ldr	r2, [sp, #4]
 8008552:	f1c0 0320 	rsb	r3, r0, #32
 8008556:	fa02 f303 	lsl.w	r3, r2, r3
 800855a:	430b      	orrs	r3, r1
 800855c:	40c2      	lsrs	r2, r0
 800855e:	6163      	str	r3, [r4, #20]
 8008560:	9201      	str	r2, [sp, #4]
 8008562:	9b01      	ldr	r3, [sp, #4]
 8008564:	61a3      	str	r3, [r4, #24]
 8008566:	2b00      	cmp	r3, #0
 8008568:	bf14      	ite	ne
 800856a:	2202      	movne	r2, #2
 800856c:	2201      	moveq	r2, #1
 800856e:	6122      	str	r2, [r4, #16]
 8008570:	b1d5      	cbz	r5, 80085a8 <__d2b+0x98>
 8008572:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008576:	4405      	add	r5, r0
 8008578:	f8c9 5000 	str.w	r5, [r9]
 800857c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008580:	f8c8 0000 	str.w	r0, [r8]
 8008584:	4620      	mov	r0, r4
 8008586:	b003      	add	sp, #12
 8008588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800858c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008590:	e7d5      	b.n	800853e <__d2b+0x2e>
 8008592:	6161      	str	r1, [r4, #20]
 8008594:	e7e5      	b.n	8008562 <__d2b+0x52>
 8008596:	a801      	add	r0, sp, #4
 8008598:	f7ff fd64 	bl	8008064 <__lo0bits>
 800859c:	9b01      	ldr	r3, [sp, #4]
 800859e:	6163      	str	r3, [r4, #20]
 80085a0:	2201      	movs	r2, #1
 80085a2:	6122      	str	r2, [r4, #16]
 80085a4:	3020      	adds	r0, #32
 80085a6:	e7e3      	b.n	8008570 <__d2b+0x60>
 80085a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80085ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80085b0:	f8c9 0000 	str.w	r0, [r9]
 80085b4:	6918      	ldr	r0, [r3, #16]
 80085b6:	f7ff fd35 	bl	8008024 <__hi0bits>
 80085ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80085be:	e7df      	b.n	8008580 <__d2b+0x70>
 80085c0:	08008e8f 	.word	0x08008e8f
 80085c4:	08008f00 	.word	0x08008f00

080085c8 <_calloc_r>:
 80085c8:	b513      	push	{r0, r1, r4, lr}
 80085ca:	434a      	muls	r2, r1
 80085cc:	4611      	mov	r1, r2
 80085ce:	9201      	str	r2, [sp, #4]
 80085d0:	f000 f85a 	bl	8008688 <_malloc_r>
 80085d4:	4604      	mov	r4, r0
 80085d6:	b118      	cbz	r0, 80085e0 <_calloc_r+0x18>
 80085d8:	9a01      	ldr	r2, [sp, #4]
 80085da:	2100      	movs	r1, #0
 80085dc:	f7fd fe02 	bl	80061e4 <memset>
 80085e0:	4620      	mov	r0, r4
 80085e2:	b002      	add	sp, #8
 80085e4:	bd10      	pop	{r4, pc}
	...

080085e8 <_free_r>:
 80085e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085ea:	2900      	cmp	r1, #0
 80085ec:	d048      	beq.n	8008680 <_free_r+0x98>
 80085ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085f2:	9001      	str	r0, [sp, #4]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	f1a1 0404 	sub.w	r4, r1, #4
 80085fa:	bfb8      	it	lt
 80085fc:	18e4      	addlt	r4, r4, r3
 80085fe:	f000 fae3 	bl	8008bc8 <__malloc_lock>
 8008602:	4a20      	ldr	r2, [pc, #128]	; (8008684 <_free_r+0x9c>)
 8008604:	9801      	ldr	r0, [sp, #4]
 8008606:	6813      	ldr	r3, [r2, #0]
 8008608:	4615      	mov	r5, r2
 800860a:	b933      	cbnz	r3, 800861a <_free_r+0x32>
 800860c:	6063      	str	r3, [r4, #4]
 800860e:	6014      	str	r4, [r2, #0]
 8008610:	b003      	add	sp, #12
 8008612:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008616:	f000 badd 	b.w	8008bd4 <__malloc_unlock>
 800861a:	42a3      	cmp	r3, r4
 800861c:	d90b      	bls.n	8008636 <_free_r+0x4e>
 800861e:	6821      	ldr	r1, [r4, #0]
 8008620:	1862      	adds	r2, r4, r1
 8008622:	4293      	cmp	r3, r2
 8008624:	bf04      	itt	eq
 8008626:	681a      	ldreq	r2, [r3, #0]
 8008628:	685b      	ldreq	r3, [r3, #4]
 800862a:	6063      	str	r3, [r4, #4]
 800862c:	bf04      	itt	eq
 800862e:	1852      	addeq	r2, r2, r1
 8008630:	6022      	streq	r2, [r4, #0]
 8008632:	602c      	str	r4, [r5, #0]
 8008634:	e7ec      	b.n	8008610 <_free_r+0x28>
 8008636:	461a      	mov	r2, r3
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	b10b      	cbz	r3, 8008640 <_free_r+0x58>
 800863c:	42a3      	cmp	r3, r4
 800863e:	d9fa      	bls.n	8008636 <_free_r+0x4e>
 8008640:	6811      	ldr	r1, [r2, #0]
 8008642:	1855      	adds	r5, r2, r1
 8008644:	42a5      	cmp	r5, r4
 8008646:	d10b      	bne.n	8008660 <_free_r+0x78>
 8008648:	6824      	ldr	r4, [r4, #0]
 800864a:	4421      	add	r1, r4
 800864c:	1854      	adds	r4, r2, r1
 800864e:	42a3      	cmp	r3, r4
 8008650:	6011      	str	r1, [r2, #0]
 8008652:	d1dd      	bne.n	8008610 <_free_r+0x28>
 8008654:	681c      	ldr	r4, [r3, #0]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	6053      	str	r3, [r2, #4]
 800865a:	4421      	add	r1, r4
 800865c:	6011      	str	r1, [r2, #0]
 800865e:	e7d7      	b.n	8008610 <_free_r+0x28>
 8008660:	d902      	bls.n	8008668 <_free_r+0x80>
 8008662:	230c      	movs	r3, #12
 8008664:	6003      	str	r3, [r0, #0]
 8008666:	e7d3      	b.n	8008610 <_free_r+0x28>
 8008668:	6825      	ldr	r5, [r4, #0]
 800866a:	1961      	adds	r1, r4, r5
 800866c:	428b      	cmp	r3, r1
 800866e:	bf04      	itt	eq
 8008670:	6819      	ldreq	r1, [r3, #0]
 8008672:	685b      	ldreq	r3, [r3, #4]
 8008674:	6063      	str	r3, [r4, #4]
 8008676:	bf04      	itt	eq
 8008678:	1949      	addeq	r1, r1, r5
 800867a:	6021      	streq	r1, [r4, #0]
 800867c:	6054      	str	r4, [r2, #4]
 800867e:	e7c7      	b.n	8008610 <_free_r+0x28>
 8008680:	b003      	add	sp, #12
 8008682:	bd30      	pop	{r4, r5, pc}
 8008684:	20000304 	.word	0x20000304

08008688 <_malloc_r>:
 8008688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800868a:	1ccd      	adds	r5, r1, #3
 800868c:	f025 0503 	bic.w	r5, r5, #3
 8008690:	3508      	adds	r5, #8
 8008692:	2d0c      	cmp	r5, #12
 8008694:	bf38      	it	cc
 8008696:	250c      	movcc	r5, #12
 8008698:	2d00      	cmp	r5, #0
 800869a:	4606      	mov	r6, r0
 800869c:	db01      	blt.n	80086a2 <_malloc_r+0x1a>
 800869e:	42a9      	cmp	r1, r5
 80086a0:	d903      	bls.n	80086aa <_malloc_r+0x22>
 80086a2:	230c      	movs	r3, #12
 80086a4:	6033      	str	r3, [r6, #0]
 80086a6:	2000      	movs	r0, #0
 80086a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086aa:	f000 fa8d 	bl	8008bc8 <__malloc_lock>
 80086ae:	4921      	ldr	r1, [pc, #132]	; (8008734 <_malloc_r+0xac>)
 80086b0:	680a      	ldr	r2, [r1, #0]
 80086b2:	4614      	mov	r4, r2
 80086b4:	b99c      	cbnz	r4, 80086de <_malloc_r+0x56>
 80086b6:	4f20      	ldr	r7, [pc, #128]	; (8008738 <_malloc_r+0xb0>)
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	b923      	cbnz	r3, 80086c6 <_malloc_r+0x3e>
 80086bc:	4621      	mov	r1, r4
 80086be:	4630      	mov	r0, r6
 80086c0:	f000 f996 	bl	80089f0 <_sbrk_r>
 80086c4:	6038      	str	r0, [r7, #0]
 80086c6:	4629      	mov	r1, r5
 80086c8:	4630      	mov	r0, r6
 80086ca:	f000 f991 	bl	80089f0 <_sbrk_r>
 80086ce:	1c43      	adds	r3, r0, #1
 80086d0:	d123      	bne.n	800871a <_malloc_r+0x92>
 80086d2:	230c      	movs	r3, #12
 80086d4:	6033      	str	r3, [r6, #0]
 80086d6:	4630      	mov	r0, r6
 80086d8:	f000 fa7c 	bl	8008bd4 <__malloc_unlock>
 80086dc:	e7e3      	b.n	80086a6 <_malloc_r+0x1e>
 80086de:	6823      	ldr	r3, [r4, #0]
 80086e0:	1b5b      	subs	r3, r3, r5
 80086e2:	d417      	bmi.n	8008714 <_malloc_r+0x8c>
 80086e4:	2b0b      	cmp	r3, #11
 80086e6:	d903      	bls.n	80086f0 <_malloc_r+0x68>
 80086e8:	6023      	str	r3, [r4, #0]
 80086ea:	441c      	add	r4, r3
 80086ec:	6025      	str	r5, [r4, #0]
 80086ee:	e004      	b.n	80086fa <_malloc_r+0x72>
 80086f0:	6863      	ldr	r3, [r4, #4]
 80086f2:	42a2      	cmp	r2, r4
 80086f4:	bf0c      	ite	eq
 80086f6:	600b      	streq	r3, [r1, #0]
 80086f8:	6053      	strne	r3, [r2, #4]
 80086fa:	4630      	mov	r0, r6
 80086fc:	f000 fa6a 	bl	8008bd4 <__malloc_unlock>
 8008700:	f104 000b 	add.w	r0, r4, #11
 8008704:	1d23      	adds	r3, r4, #4
 8008706:	f020 0007 	bic.w	r0, r0, #7
 800870a:	1ac2      	subs	r2, r0, r3
 800870c:	d0cc      	beq.n	80086a8 <_malloc_r+0x20>
 800870e:	1a1b      	subs	r3, r3, r0
 8008710:	50a3      	str	r3, [r4, r2]
 8008712:	e7c9      	b.n	80086a8 <_malloc_r+0x20>
 8008714:	4622      	mov	r2, r4
 8008716:	6864      	ldr	r4, [r4, #4]
 8008718:	e7cc      	b.n	80086b4 <_malloc_r+0x2c>
 800871a:	1cc4      	adds	r4, r0, #3
 800871c:	f024 0403 	bic.w	r4, r4, #3
 8008720:	42a0      	cmp	r0, r4
 8008722:	d0e3      	beq.n	80086ec <_malloc_r+0x64>
 8008724:	1a21      	subs	r1, r4, r0
 8008726:	4630      	mov	r0, r6
 8008728:	f000 f962 	bl	80089f0 <_sbrk_r>
 800872c:	3001      	adds	r0, #1
 800872e:	d1dd      	bne.n	80086ec <_malloc_r+0x64>
 8008730:	e7cf      	b.n	80086d2 <_malloc_r+0x4a>
 8008732:	bf00      	nop
 8008734:	20000304 	.word	0x20000304
 8008738:	20000308 	.word	0x20000308

0800873c <__sfputc_r>:
 800873c:	6893      	ldr	r3, [r2, #8]
 800873e:	3b01      	subs	r3, #1
 8008740:	2b00      	cmp	r3, #0
 8008742:	b410      	push	{r4}
 8008744:	6093      	str	r3, [r2, #8]
 8008746:	da08      	bge.n	800875a <__sfputc_r+0x1e>
 8008748:	6994      	ldr	r4, [r2, #24]
 800874a:	42a3      	cmp	r3, r4
 800874c:	db01      	blt.n	8008752 <__sfputc_r+0x16>
 800874e:	290a      	cmp	r1, #10
 8008750:	d103      	bne.n	800875a <__sfputc_r+0x1e>
 8008752:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008756:	f7fe ba45 	b.w	8006be4 <__swbuf_r>
 800875a:	6813      	ldr	r3, [r2, #0]
 800875c:	1c58      	adds	r0, r3, #1
 800875e:	6010      	str	r0, [r2, #0]
 8008760:	7019      	strb	r1, [r3, #0]
 8008762:	4608      	mov	r0, r1
 8008764:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008768:	4770      	bx	lr

0800876a <__sfputs_r>:
 800876a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800876c:	4606      	mov	r6, r0
 800876e:	460f      	mov	r7, r1
 8008770:	4614      	mov	r4, r2
 8008772:	18d5      	adds	r5, r2, r3
 8008774:	42ac      	cmp	r4, r5
 8008776:	d101      	bne.n	800877c <__sfputs_r+0x12>
 8008778:	2000      	movs	r0, #0
 800877a:	e007      	b.n	800878c <__sfputs_r+0x22>
 800877c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008780:	463a      	mov	r2, r7
 8008782:	4630      	mov	r0, r6
 8008784:	f7ff ffda 	bl	800873c <__sfputc_r>
 8008788:	1c43      	adds	r3, r0, #1
 800878a:	d1f3      	bne.n	8008774 <__sfputs_r+0xa>
 800878c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008790 <_vfiprintf_r>:
 8008790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008794:	460d      	mov	r5, r1
 8008796:	b09d      	sub	sp, #116	; 0x74
 8008798:	4614      	mov	r4, r2
 800879a:	4698      	mov	r8, r3
 800879c:	4606      	mov	r6, r0
 800879e:	b118      	cbz	r0, 80087a8 <_vfiprintf_r+0x18>
 80087a0:	6983      	ldr	r3, [r0, #24]
 80087a2:	b90b      	cbnz	r3, 80087a8 <_vfiprintf_r+0x18>
 80087a4:	f7ff fa72 	bl	8007c8c <__sinit>
 80087a8:	4b89      	ldr	r3, [pc, #548]	; (80089d0 <_vfiprintf_r+0x240>)
 80087aa:	429d      	cmp	r5, r3
 80087ac:	d11b      	bne.n	80087e6 <_vfiprintf_r+0x56>
 80087ae:	6875      	ldr	r5, [r6, #4]
 80087b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087b2:	07d9      	lsls	r1, r3, #31
 80087b4:	d405      	bmi.n	80087c2 <_vfiprintf_r+0x32>
 80087b6:	89ab      	ldrh	r3, [r5, #12]
 80087b8:	059a      	lsls	r2, r3, #22
 80087ba:	d402      	bmi.n	80087c2 <_vfiprintf_r+0x32>
 80087bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087be:	f7ff fb08 	bl	8007dd2 <__retarget_lock_acquire_recursive>
 80087c2:	89ab      	ldrh	r3, [r5, #12]
 80087c4:	071b      	lsls	r3, r3, #28
 80087c6:	d501      	bpl.n	80087cc <_vfiprintf_r+0x3c>
 80087c8:	692b      	ldr	r3, [r5, #16]
 80087ca:	b9eb      	cbnz	r3, 8008808 <_vfiprintf_r+0x78>
 80087cc:	4629      	mov	r1, r5
 80087ce:	4630      	mov	r0, r6
 80087d0:	f7fe fa5a 	bl	8006c88 <__swsetup_r>
 80087d4:	b1c0      	cbz	r0, 8008808 <_vfiprintf_r+0x78>
 80087d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087d8:	07dc      	lsls	r4, r3, #31
 80087da:	d50e      	bpl.n	80087fa <_vfiprintf_r+0x6a>
 80087dc:	f04f 30ff 	mov.w	r0, #4294967295
 80087e0:	b01d      	add	sp, #116	; 0x74
 80087e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087e6:	4b7b      	ldr	r3, [pc, #492]	; (80089d4 <_vfiprintf_r+0x244>)
 80087e8:	429d      	cmp	r5, r3
 80087ea:	d101      	bne.n	80087f0 <_vfiprintf_r+0x60>
 80087ec:	68b5      	ldr	r5, [r6, #8]
 80087ee:	e7df      	b.n	80087b0 <_vfiprintf_r+0x20>
 80087f0:	4b79      	ldr	r3, [pc, #484]	; (80089d8 <_vfiprintf_r+0x248>)
 80087f2:	429d      	cmp	r5, r3
 80087f4:	bf08      	it	eq
 80087f6:	68f5      	ldreq	r5, [r6, #12]
 80087f8:	e7da      	b.n	80087b0 <_vfiprintf_r+0x20>
 80087fa:	89ab      	ldrh	r3, [r5, #12]
 80087fc:	0598      	lsls	r0, r3, #22
 80087fe:	d4ed      	bmi.n	80087dc <_vfiprintf_r+0x4c>
 8008800:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008802:	f7ff fae7 	bl	8007dd4 <__retarget_lock_release_recursive>
 8008806:	e7e9      	b.n	80087dc <_vfiprintf_r+0x4c>
 8008808:	2300      	movs	r3, #0
 800880a:	9309      	str	r3, [sp, #36]	; 0x24
 800880c:	2320      	movs	r3, #32
 800880e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008812:	f8cd 800c 	str.w	r8, [sp, #12]
 8008816:	2330      	movs	r3, #48	; 0x30
 8008818:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80089dc <_vfiprintf_r+0x24c>
 800881c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008820:	f04f 0901 	mov.w	r9, #1
 8008824:	4623      	mov	r3, r4
 8008826:	469a      	mov	sl, r3
 8008828:	f813 2b01 	ldrb.w	r2, [r3], #1
 800882c:	b10a      	cbz	r2, 8008832 <_vfiprintf_r+0xa2>
 800882e:	2a25      	cmp	r2, #37	; 0x25
 8008830:	d1f9      	bne.n	8008826 <_vfiprintf_r+0x96>
 8008832:	ebba 0b04 	subs.w	fp, sl, r4
 8008836:	d00b      	beq.n	8008850 <_vfiprintf_r+0xc0>
 8008838:	465b      	mov	r3, fp
 800883a:	4622      	mov	r2, r4
 800883c:	4629      	mov	r1, r5
 800883e:	4630      	mov	r0, r6
 8008840:	f7ff ff93 	bl	800876a <__sfputs_r>
 8008844:	3001      	adds	r0, #1
 8008846:	f000 80aa 	beq.w	800899e <_vfiprintf_r+0x20e>
 800884a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800884c:	445a      	add	r2, fp
 800884e:	9209      	str	r2, [sp, #36]	; 0x24
 8008850:	f89a 3000 	ldrb.w	r3, [sl]
 8008854:	2b00      	cmp	r3, #0
 8008856:	f000 80a2 	beq.w	800899e <_vfiprintf_r+0x20e>
 800885a:	2300      	movs	r3, #0
 800885c:	f04f 32ff 	mov.w	r2, #4294967295
 8008860:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008864:	f10a 0a01 	add.w	sl, sl, #1
 8008868:	9304      	str	r3, [sp, #16]
 800886a:	9307      	str	r3, [sp, #28]
 800886c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008870:	931a      	str	r3, [sp, #104]	; 0x68
 8008872:	4654      	mov	r4, sl
 8008874:	2205      	movs	r2, #5
 8008876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800887a:	4858      	ldr	r0, [pc, #352]	; (80089dc <_vfiprintf_r+0x24c>)
 800887c:	f7f7 fce8 	bl	8000250 <memchr>
 8008880:	9a04      	ldr	r2, [sp, #16]
 8008882:	b9d8      	cbnz	r0, 80088bc <_vfiprintf_r+0x12c>
 8008884:	06d1      	lsls	r1, r2, #27
 8008886:	bf44      	itt	mi
 8008888:	2320      	movmi	r3, #32
 800888a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800888e:	0713      	lsls	r3, r2, #28
 8008890:	bf44      	itt	mi
 8008892:	232b      	movmi	r3, #43	; 0x2b
 8008894:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008898:	f89a 3000 	ldrb.w	r3, [sl]
 800889c:	2b2a      	cmp	r3, #42	; 0x2a
 800889e:	d015      	beq.n	80088cc <_vfiprintf_r+0x13c>
 80088a0:	9a07      	ldr	r2, [sp, #28]
 80088a2:	4654      	mov	r4, sl
 80088a4:	2000      	movs	r0, #0
 80088a6:	f04f 0c0a 	mov.w	ip, #10
 80088aa:	4621      	mov	r1, r4
 80088ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088b0:	3b30      	subs	r3, #48	; 0x30
 80088b2:	2b09      	cmp	r3, #9
 80088b4:	d94e      	bls.n	8008954 <_vfiprintf_r+0x1c4>
 80088b6:	b1b0      	cbz	r0, 80088e6 <_vfiprintf_r+0x156>
 80088b8:	9207      	str	r2, [sp, #28]
 80088ba:	e014      	b.n	80088e6 <_vfiprintf_r+0x156>
 80088bc:	eba0 0308 	sub.w	r3, r0, r8
 80088c0:	fa09 f303 	lsl.w	r3, r9, r3
 80088c4:	4313      	orrs	r3, r2
 80088c6:	9304      	str	r3, [sp, #16]
 80088c8:	46a2      	mov	sl, r4
 80088ca:	e7d2      	b.n	8008872 <_vfiprintf_r+0xe2>
 80088cc:	9b03      	ldr	r3, [sp, #12]
 80088ce:	1d19      	adds	r1, r3, #4
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	9103      	str	r1, [sp, #12]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	bfbb      	ittet	lt
 80088d8:	425b      	neglt	r3, r3
 80088da:	f042 0202 	orrlt.w	r2, r2, #2
 80088de:	9307      	strge	r3, [sp, #28]
 80088e0:	9307      	strlt	r3, [sp, #28]
 80088e2:	bfb8      	it	lt
 80088e4:	9204      	strlt	r2, [sp, #16]
 80088e6:	7823      	ldrb	r3, [r4, #0]
 80088e8:	2b2e      	cmp	r3, #46	; 0x2e
 80088ea:	d10c      	bne.n	8008906 <_vfiprintf_r+0x176>
 80088ec:	7863      	ldrb	r3, [r4, #1]
 80088ee:	2b2a      	cmp	r3, #42	; 0x2a
 80088f0:	d135      	bne.n	800895e <_vfiprintf_r+0x1ce>
 80088f2:	9b03      	ldr	r3, [sp, #12]
 80088f4:	1d1a      	adds	r2, r3, #4
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	9203      	str	r2, [sp, #12]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	bfb8      	it	lt
 80088fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8008902:	3402      	adds	r4, #2
 8008904:	9305      	str	r3, [sp, #20]
 8008906:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80089ec <_vfiprintf_r+0x25c>
 800890a:	7821      	ldrb	r1, [r4, #0]
 800890c:	2203      	movs	r2, #3
 800890e:	4650      	mov	r0, sl
 8008910:	f7f7 fc9e 	bl	8000250 <memchr>
 8008914:	b140      	cbz	r0, 8008928 <_vfiprintf_r+0x198>
 8008916:	2340      	movs	r3, #64	; 0x40
 8008918:	eba0 000a 	sub.w	r0, r0, sl
 800891c:	fa03 f000 	lsl.w	r0, r3, r0
 8008920:	9b04      	ldr	r3, [sp, #16]
 8008922:	4303      	orrs	r3, r0
 8008924:	3401      	adds	r4, #1
 8008926:	9304      	str	r3, [sp, #16]
 8008928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800892c:	482c      	ldr	r0, [pc, #176]	; (80089e0 <_vfiprintf_r+0x250>)
 800892e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008932:	2206      	movs	r2, #6
 8008934:	f7f7 fc8c 	bl	8000250 <memchr>
 8008938:	2800      	cmp	r0, #0
 800893a:	d03f      	beq.n	80089bc <_vfiprintf_r+0x22c>
 800893c:	4b29      	ldr	r3, [pc, #164]	; (80089e4 <_vfiprintf_r+0x254>)
 800893e:	bb1b      	cbnz	r3, 8008988 <_vfiprintf_r+0x1f8>
 8008940:	9b03      	ldr	r3, [sp, #12]
 8008942:	3307      	adds	r3, #7
 8008944:	f023 0307 	bic.w	r3, r3, #7
 8008948:	3308      	adds	r3, #8
 800894a:	9303      	str	r3, [sp, #12]
 800894c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800894e:	443b      	add	r3, r7
 8008950:	9309      	str	r3, [sp, #36]	; 0x24
 8008952:	e767      	b.n	8008824 <_vfiprintf_r+0x94>
 8008954:	fb0c 3202 	mla	r2, ip, r2, r3
 8008958:	460c      	mov	r4, r1
 800895a:	2001      	movs	r0, #1
 800895c:	e7a5      	b.n	80088aa <_vfiprintf_r+0x11a>
 800895e:	2300      	movs	r3, #0
 8008960:	3401      	adds	r4, #1
 8008962:	9305      	str	r3, [sp, #20]
 8008964:	4619      	mov	r1, r3
 8008966:	f04f 0c0a 	mov.w	ip, #10
 800896a:	4620      	mov	r0, r4
 800896c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008970:	3a30      	subs	r2, #48	; 0x30
 8008972:	2a09      	cmp	r2, #9
 8008974:	d903      	bls.n	800897e <_vfiprintf_r+0x1ee>
 8008976:	2b00      	cmp	r3, #0
 8008978:	d0c5      	beq.n	8008906 <_vfiprintf_r+0x176>
 800897a:	9105      	str	r1, [sp, #20]
 800897c:	e7c3      	b.n	8008906 <_vfiprintf_r+0x176>
 800897e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008982:	4604      	mov	r4, r0
 8008984:	2301      	movs	r3, #1
 8008986:	e7f0      	b.n	800896a <_vfiprintf_r+0x1da>
 8008988:	ab03      	add	r3, sp, #12
 800898a:	9300      	str	r3, [sp, #0]
 800898c:	462a      	mov	r2, r5
 800898e:	4b16      	ldr	r3, [pc, #88]	; (80089e8 <_vfiprintf_r+0x258>)
 8008990:	a904      	add	r1, sp, #16
 8008992:	4630      	mov	r0, r6
 8008994:	f7fd fcce 	bl	8006334 <_printf_float>
 8008998:	4607      	mov	r7, r0
 800899a:	1c78      	adds	r0, r7, #1
 800899c:	d1d6      	bne.n	800894c <_vfiprintf_r+0x1bc>
 800899e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089a0:	07d9      	lsls	r1, r3, #31
 80089a2:	d405      	bmi.n	80089b0 <_vfiprintf_r+0x220>
 80089a4:	89ab      	ldrh	r3, [r5, #12]
 80089a6:	059a      	lsls	r2, r3, #22
 80089a8:	d402      	bmi.n	80089b0 <_vfiprintf_r+0x220>
 80089aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089ac:	f7ff fa12 	bl	8007dd4 <__retarget_lock_release_recursive>
 80089b0:	89ab      	ldrh	r3, [r5, #12]
 80089b2:	065b      	lsls	r3, r3, #25
 80089b4:	f53f af12 	bmi.w	80087dc <_vfiprintf_r+0x4c>
 80089b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089ba:	e711      	b.n	80087e0 <_vfiprintf_r+0x50>
 80089bc:	ab03      	add	r3, sp, #12
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	462a      	mov	r2, r5
 80089c2:	4b09      	ldr	r3, [pc, #36]	; (80089e8 <_vfiprintf_r+0x258>)
 80089c4:	a904      	add	r1, sp, #16
 80089c6:	4630      	mov	r0, r6
 80089c8:	f7fd ff58 	bl	800687c <_printf_i>
 80089cc:	e7e4      	b.n	8008998 <_vfiprintf_r+0x208>
 80089ce:	bf00      	nop
 80089d0:	08008ec0 	.word	0x08008ec0
 80089d4:	08008ee0 	.word	0x08008ee0
 80089d8:	08008ea0 	.word	0x08008ea0
 80089dc:	0800905c 	.word	0x0800905c
 80089e0:	08009066 	.word	0x08009066
 80089e4:	08006335 	.word	0x08006335
 80089e8:	0800876b 	.word	0x0800876b
 80089ec:	08009062 	.word	0x08009062

080089f0 <_sbrk_r>:
 80089f0:	b538      	push	{r3, r4, r5, lr}
 80089f2:	4d06      	ldr	r5, [pc, #24]	; (8008a0c <_sbrk_r+0x1c>)
 80089f4:	2300      	movs	r3, #0
 80089f6:	4604      	mov	r4, r0
 80089f8:	4608      	mov	r0, r1
 80089fa:	602b      	str	r3, [r5, #0]
 80089fc:	f7f8 feb6 	bl	800176c <_sbrk>
 8008a00:	1c43      	adds	r3, r0, #1
 8008a02:	d102      	bne.n	8008a0a <_sbrk_r+0x1a>
 8008a04:	682b      	ldr	r3, [r5, #0]
 8008a06:	b103      	cbz	r3, 8008a0a <_sbrk_r+0x1a>
 8008a08:	6023      	str	r3, [r4, #0]
 8008a0a:	bd38      	pop	{r3, r4, r5, pc}
 8008a0c:	20000490 	.word	0x20000490

08008a10 <__sread>:
 8008a10:	b510      	push	{r4, lr}
 8008a12:	460c      	mov	r4, r1
 8008a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a18:	f000 f8e2 	bl	8008be0 <_read_r>
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	bfab      	itete	ge
 8008a20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a22:	89a3      	ldrhlt	r3, [r4, #12]
 8008a24:	181b      	addge	r3, r3, r0
 8008a26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a2a:	bfac      	ite	ge
 8008a2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a2e:	81a3      	strhlt	r3, [r4, #12]
 8008a30:	bd10      	pop	{r4, pc}

08008a32 <__swrite>:
 8008a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a36:	461f      	mov	r7, r3
 8008a38:	898b      	ldrh	r3, [r1, #12]
 8008a3a:	05db      	lsls	r3, r3, #23
 8008a3c:	4605      	mov	r5, r0
 8008a3e:	460c      	mov	r4, r1
 8008a40:	4616      	mov	r6, r2
 8008a42:	d505      	bpl.n	8008a50 <__swrite+0x1e>
 8008a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a48:	2302      	movs	r3, #2
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f000 f898 	bl	8008b80 <_lseek_r>
 8008a50:	89a3      	ldrh	r3, [r4, #12]
 8008a52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a5a:	81a3      	strh	r3, [r4, #12]
 8008a5c:	4632      	mov	r2, r6
 8008a5e:	463b      	mov	r3, r7
 8008a60:	4628      	mov	r0, r5
 8008a62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a66:	f000 b817 	b.w	8008a98 <_write_r>

08008a6a <__sseek>:
 8008a6a:	b510      	push	{r4, lr}
 8008a6c:	460c      	mov	r4, r1
 8008a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a72:	f000 f885 	bl	8008b80 <_lseek_r>
 8008a76:	1c43      	adds	r3, r0, #1
 8008a78:	89a3      	ldrh	r3, [r4, #12]
 8008a7a:	bf15      	itete	ne
 8008a7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a86:	81a3      	strheq	r3, [r4, #12]
 8008a88:	bf18      	it	ne
 8008a8a:	81a3      	strhne	r3, [r4, #12]
 8008a8c:	bd10      	pop	{r4, pc}

08008a8e <__sclose>:
 8008a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a92:	f000 b831 	b.w	8008af8 <_close_r>
	...

08008a98 <_write_r>:
 8008a98:	b538      	push	{r3, r4, r5, lr}
 8008a9a:	4d07      	ldr	r5, [pc, #28]	; (8008ab8 <_write_r+0x20>)
 8008a9c:	4604      	mov	r4, r0
 8008a9e:	4608      	mov	r0, r1
 8008aa0:	4611      	mov	r1, r2
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	602a      	str	r2, [r5, #0]
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	f7f8 fe0f 	bl	80016ca <_write>
 8008aac:	1c43      	adds	r3, r0, #1
 8008aae:	d102      	bne.n	8008ab6 <_write_r+0x1e>
 8008ab0:	682b      	ldr	r3, [r5, #0]
 8008ab2:	b103      	cbz	r3, 8008ab6 <_write_r+0x1e>
 8008ab4:	6023      	str	r3, [r4, #0]
 8008ab6:	bd38      	pop	{r3, r4, r5, pc}
 8008ab8:	20000490 	.word	0x20000490

08008abc <__assert_func>:
 8008abc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008abe:	4614      	mov	r4, r2
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	4b09      	ldr	r3, [pc, #36]	; (8008ae8 <__assert_func+0x2c>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4605      	mov	r5, r0
 8008ac8:	68d8      	ldr	r0, [r3, #12]
 8008aca:	b14c      	cbz	r4, 8008ae0 <__assert_func+0x24>
 8008acc:	4b07      	ldr	r3, [pc, #28]	; (8008aec <__assert_func+0x30>)
 8008ace:	9100      	str	r1, [sp, #0]
 8008ad0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ad4:	4906      	ldr	r1, [pc, #24]	; (8008af0 <__assert_func+0x34>)
 8008ad6:	462b      	mov	r3, r5
 8008ad8:	f000 f81e 	bl	8008b18 <fiprintf>
 8008adc:	f000 f89f 	bl	8008c1e <abort>
 8008ae0:	4b04      	ldr	r3, [pc, #16]	; (8008af4 <__assert_func+0x38>)
 8008ae2:	461c      	mov	r4, r3
 8008ae4:	e7f3      	b.n	8008ace <__assert_func+0x12>
 8008ae6:	bf00      	nop
 8008ae8:	20000024 	.word	0x20000024
 8008aec:	0800906d 	.word	0x0800906d
 8008af0:	0800907a 	.word	0x0800907a
 8008af4:	080090a8 	.word	0x080090a8

08008af8 <_close_r>:
 8008af8:	b538      	push	{r3, r4, r5, lr}
 8008afa:	4d06      	ldr	r5, [pc, #24]	; (8008b14 <_close_r+0x1c>)
 8008afc:	2300      	movs	r3, #0
 8008afe:	4604      	mov	r4, r0
 8008b00:	4608      	mov	r0, r1
 8008b02:	602b      	str	r3, [r5, #0]
 8008b04:	f7f8 fdfd 	bl	8001702 <_close>
 8008b08:	1c43      	adds	r3, r0, #1
 8008b0a:	d102      	bne.n	8008b12 <_close_r+0x1a>
 8008b0c:	682b      	ldr	r3, [r5, #0]
 8008b0e:	b103      	cbz	r3, 8008b12 <_close_r+0x1a>
 8008b10:	6023      	str	r3, [r4, #0]
 8008b12:	bd38      	pop	{r3, r4, r5, pc}
 8008b14:	20000490 	.word	0x20000490

08008b18 <fiprintf>:
 8008b18:	b40e      	push	{r1, r2, r3}
 8008b1a:	b503      	push	{r0, r1, lr}
 8008b1c:	4601      	mov	r1, r0
 8008b1e:	ab03      	add	r3, sp, #12
 8008b20:	4805      	ldr	r0, [pc, #20]	; (8008b38 <fiprintf+0x20>)
 8008b22:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b26:	6800      	ldr	r0, [r0, #0]
 8008b28:	9301      	str	r3, [sp, #4]
 8008b2a:	f7ff fe31 	bl	8008790 <_vfiprintf_r>
 8008b2e:	b002      	add	sp, #8
 8008b30:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b34:	b003      	add	sp, #12
 8008b36:	4770      	bx	lr
 8008b38:	20000024 	.word	0x20000024

08008b3c <_fstat_r>:
 8008b3c:	b538      	push	{r3, r4, r5, lr}
 8008b3e:	4d07      	ldr	r5, [pc, #28]	; (8008b5c <_fstat_r+0x20>)
 8008b40:	2300      	movs	r3, #0
 8008b42:	4604      	mov	r4, r0
 8008b44:	4608      	mov	r0, r1
 8008b46:	4611      	mov	r1, r2
 8008b48:	602b      	str	r3, [r5, #0]
 8008b4a:	f7f8 fde6 	bl	800171a <_fstat>
 8008b4e:	1c43      	adds	r3, r0, #1
 8008b50:	d102      	bne.n	8008b58 <_fstat_r+0x1c>
 8008b52:	682b      	ldr	r3, [r5, #0]
 8008b54:	b103      	cbz	r3, 8008b58 <_fstat_r+0x1c>
 8008b56:	6023      	str	r3, [r4, #0]
 8008b58:	bd38      	pop	{r3, r4, r5, pc}
 8008b5a:	bf00      	nop
 8008b5c:	20000490 	.word	0x20000490

08008b60 <_isatty_r>:
 8008b60:	b538      	push	{r3, r4, r5, lr}
 8008b62:	4d06      	ldr	r5, [pc, #24]	; (8008b7c <_isatty_r+0x1c>)
 8008b64:	2300      	movs	r3, #0
 8008b66:	4604      	mov	r4, r0
 8008b68:	4608      	mov	r0, r1
 8008b6a:	602b      	str	r3, [r5, #0]
 8008b6c:	f7f8 fde5 	bl	800173a <_isatty>
 8008b70:	1c43      	adds	r3, r0, #1
 8008b72:	d102      	bne.n	8008b7a <_isatty_r+0x1a>
 8008b74:	682b      	ldr	r3, [r5, #0]
 8008b76:	b103      	cbz	r3, 8008b7a <_isatty_r+0x1a>
 8008b78:	6023      	str	r3, [r4, #0]
 8008b7a:	bd38      	pop	{r3, r4, r5, pc}
 8008b7c:	20000490 	.word	0x20000490

08008b80 <_lseek_r>:
 8008b80:	b538      	push	{r3, r4, r5, lr}
 8008b82:	4d07      	ldr	r5, [pc, #28]	; (8008ba0 <_lseek_r+0x20>)
 8008b84:	4604      	mov	r4, r0
 8008b86:	4608      	mov	r0, r1
 8008b88:	4611      	mov	r1, r2
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	602a      	str	r2, [r5, #0]
 8008b8e:	461a      	mov	r2, r3
 8008b90:	f7f8 fdde 	bl	8001750 <_lseek>
 8008b94:	1c43      	adds	r3, r0, #1
 8008b96:	d102      	bne.n	8008b9e <_lseek_r+0x1e>
 8008b98:	682b      	ldr	r3, [r5, #0]
 8008b9a:	b103      	cbz	r3, 8008b9e <_lseek_r+0x1e>
 8008b9c:	6023      	str	r3, [r4, #0]
 8008b9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ba0:	20000490 	.word	0x20000490

08008ba4 <__ascii_mbtowc>:
 8008ba4:	b082      	sub	sp, #8
 8008ba6:	b901      	cbnz	r1, 8008baa <__ascii_mbtowc+0x6>
 8008ba8:	a901      	add	r1, sp, #4
 8008baa:	b142      	cbz	r2, 8008bbe <__ascii_mbtowc+0x1a>
 8008bac:	b14b      	cbz	r3, 8008bc2 <__ascii_mbtowc+0x1e>
 8008bae:	7813      	ldrb	r3, [r2, #0]
 8008bb0:	600b      	str	r3, [r1, #0]
 8008bb2:	7812      	ldrb	r2, [r2, #0]
 8008bb4:	1e10      	subs	r0, r2, #0
 8008bb6:	bf18      	it	ne
 8008bb8:	2001      	movne	r0, #1
 8008bba:	b002      	add	sp, #8
 8008bbc:	4770      	bx	lr
 8008bbe:	4610      	mov	r0, r2
 8008bc0:	e7fb      	b.n	8008bba <__ascii_mbtowc+0x16>
 8008bc2:	f06f 0001 	mvn.w	r0, #1
 8008bc6:	e7f8      	b.n	8008bba <__ascii_mbtowc+0x16>

08008bc8 <__malloc_lock>:
 8008bc8:	4801      	ldr	r0, [pc, #4]	; (8008bd0 <__malloc_lock+0x8>)
 8008bca:	f7ff b902 	b.w	8007dd2 <__retarget_lock_acquire_recursive>
 8008bce:	bf00      	nop
 8008bd0:	20000488 	.word	0x20000488

08008bd4 <__malloc_unlock>:
 8008bd4:	4801      	ldr	r0, [pc, #4]	; (8008bdc <__malloc_unlock+0x8>)
 8008bd6:	f7ff b8fd 	b.w	8007dd4 <__retarget_lock_release_recursive>
 8008bda:	bf00      	nop
 8008bdc:	20000488 	.word	0x20000488

08008be0 <_read_r>:
 8008be0:	b538      	push	{r3, r4, r5, lr}
 8008be2:	4d07      	ldr	r5, [pc, #28]	; (8008c00 <_read_r+0x20>)
 8008be4:	4604      	mov	r4, r0
 8008be6:	4608      	mov	r0, r1
 8008be8:	4611      	mov	r1, r2
 8008bea:	2200      	movs	r2, #0
 8008bec:	602a      	str	r2, [r5, #0]
 8008bee:	461a      	mov	r2, r3
 8008bf0:	f7f8 fd4e 	bl	8001690 <_read>
 8008bf4:	1c43      	adds	r3, r0, #1
 8008bf6:	d102      	bne.n	8008bfe <_read_r+0x1e>
 8008bf8:	682b      	ldr	r3, [r5, #0]
 8008bfa:	b103      	cbz	r3, 8008bfe <_read_r+0x1e>
 8008bfc:	6023      	str	r3, [r4, #0]
 8008bfe:	bd38      	pop	{r3, r4, r5, pc}
 8008c00:	20000490 	.word	0x20000490

08008c04 <__ascii_wctomb>:
 8008c04:	b149      	cbz	r1, 8008c1a <__ascii_wctomb+0x16>
 8008c06:	2aff      	cmp	r2, #255	; 0xff
 8008c08:	bf85      	ittet	hi
 8008c0a:	238a      	movhi	r3, #138	; 0x8a
 8008c0c:	6003      	strhi	r3, [r0, #0]
 8008c0e:	700a      	strbls	r2, [r1, #0]
 8008c10:	f04f 30ff 	movhi.w	r0, #4294967295
 8008c14:	bf98      	it	ls
 8008c16:	2001      	movls	r0, #1
 8008c18:	4770      	bx	lr
 8008c1a:	4608      	mov	r0, r1
 8008c1c:	4770      	bx	lr

08008c1e <abort>:
 8008c1e:	b508      	push	{r3, lr}
 8008c20:	2006      	movs	r0, #6
 8008c22:	f000 f82b 	bl	8008c7c <raise>
 8008c26:	2001      	movs	r0, #1
 8008c28:	f7f8 fd28 	bl	800167c <_exit>

08008c2c <_raise_r>:
 8008c2c:	291f      	cmp	r1, #31
 8008c2e:	b538      	push	{r3, r4, r5, lr}
 8008c30:	4604      	mov	r4, r0
 8008c32:	460d      	mov	r5, r1
 8008c34:	d904      	bls.n	8008c40 <_raise_r+0x14>
 8008c36:	2316      	movs	r3, #22
 8008c38:	6003      	str	r3, [r0, #0]
 8008c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c3e:	bd38      	pop	{r3, r4, r5, pc}
 8008c40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008c42:	b112      	cbz	r2, 8008c4a <_raise_r+0x1e>
 8008c44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c48:	b94b      	cbnz	r3, 8008c5e <_raise_r+0x32>
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	f000 f830 	bl	8008cb0 <_getpid_r>
 8008c50:	462a      	mov	r2, r5
 8008c52:	4601      	mov	r1, r0
 8008c54:	4620      	mov	r0, r4
 8008c56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c5a:	f000 b817 	b.w	8008c8c <_kill_r>
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d00a      	beq.n	8008c78 <_raise_r+0x4c>
 8008c62:	1c59      	adds	r1, r3, #1
 8008c64:	d103      	bne.n	8008c6e <_raise_r+0x42>
 8008c66:	2316      	movs	r3, #22
 8008c68:	6003      	str	r3, [r0, #0]
 8008c6a:	2001      	movs	r0, #1
 8008c6c:	e7e7      	b.n	8008c3e <_raise_r+0x12>
 8008c6e:	2400      	movs	r4, #0
 8008c70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008c74:	4628      	mov	r0, r5
 8008c76:	4798      	blx	r3
 8008c78:	2000      	movs	r0, #0
 8008c7a:	e7e0      	b.n	8008c3e <_raise_r+0x12>

08008c7c <raise>:
 8008c7c:	4b02      	ldr	r3, [pc, #8]	; (8008c88 <raise+0xc>)
 8008c7e:	4601      	mov	r1, r0
 8008c80:	6818      	ldr	r0, [r3, #0]
 8008c82:	f7ff bfd3 	b.w	8008c2c <_raise_r>
 8008c86:	bf00      	nop
 8008c88:	20000024 	.word	0x20000024

08008c8c <_kill_r>:
 8008c8c:	b538      	push	{r3, r4, r5, lr}
 8008c8e:	4d07      	ldr	r5, [pc, #28]	; (8008cac <_kill_r+0x20>)
 8008c90:	2300      	movs	r3, #0
 8008c92:	4604      	mov	r4, r0
 8008c94:	4608      	mov	r0, r1
 8008c96:	4611      	mov	r1, r2
 8008c98:	602b      	str	r3, [r5, #0]
 8008c9a:	f7f8 fcdf 	bl	800165c <_kill>
 8008c9e:	1c43      	adds	r3, r0, #1
 8008ca0:	d102      	bne.n	8008ca8 <_kill_r+0x1c>
 8008ca2:	682b      	ldr	r3, [r5, #0]
 8008ca4:	b103      	cbz	r3, 8008ca8 <_kill_r+0x1c>
 8008ca6:	6023      	str	r3, [r4, #0]
 8008ca8:	bd38      	pop	{r3, r4, r5, pc}
 8008caa:	bf00      	nop
 8008cac:	20000490 	.word	0x20000490

08008cb0 <_getpid_r>:
 8008cb0:	f7f8 bccc 	b.w	800164c <_getpid>

08008cb4 <_init>:
 8008cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cb6:	bf00      	nop
 8008cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cba:	bc08      	pop	{r3}
 8008cbc:	469e      	mov	lr, r3
 8008cbe:	4770      	bx	lr

08008cc0 <_fini>:
 8008cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cc2:	bf00      	nop
 8008cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cc6:	bc08      	pop	{r3}
 8008cc8:	469e      	mov	lr, r3
 8008cca:	4770      	bx	lr
