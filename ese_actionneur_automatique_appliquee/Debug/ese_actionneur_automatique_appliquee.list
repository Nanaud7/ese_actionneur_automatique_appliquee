
ese_actionneur_automatique_appliquee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003410  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080035e8  080035e8  000135e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003694  08003694  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003694  08003694  00013694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800369c  0800369c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800369c  0800369c  0001369c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036a0  080036a0  000136a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080036a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  08003714  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08003714  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d4b8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fef  00000000  00000000  0002d558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a30  00000000  00000000  0002f548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002ff78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dfe2  00000000  00000000  000308d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b40e  00000000  00000000  0004e8b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b7701  00000000  00000000  00059cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001113c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e50  00000000  00000000  00111414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080035d0 	.word	0x080035d0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	080035d0 	.word	0x080035d0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08a      	sub	sp, #40	; 0x28
 8000514:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000516:	f107 0314 	add.w	r3, r7, #20
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
 8000524:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000526:	4b2b      	ldr	r3, [pc, #172]	; (80005d4 <MX_GPIO_Init+0xc4>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052a:	4a2a      	ldr	r2, [pc, #168]	; (80005d4 <MX_GPIO_Init+0xc4>)
 800052c:	f043 0304 	orr.w	r3, r3, #4
 8000530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000532:	4b28      	ldr	r3, [pc, #160]	; (80005d4 <MX_GPIO_Init+0xc4>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000536:	f003 0304 	and.w	r3, r3, #4
 800053a:	613b      	str	r3, [r7, #16]
 800053c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800053e:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <MX_GPIO_Init+0xc4>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000542:	4a24      	ldr	r2, [pc, #144]	; (80005d4 <MX_GPIO_Init+0xc4>)
 8000544:	f043 0320 	orr.w	r3, r3, #32
 8000548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054a:	4b22      	ldr	r3, [pc, #136]	; (80005d4 <MX_GPIO_Init+0xc4>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054e:	f003 0320 	and.w	r3, r3, #32
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <MX_GPIO_Init+0xc4>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055a:	4a1e      	ldr	r2, [pc, #120]	; (80005d4 <MX_GPIO_Init+0xc4>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000562:	4b1c      	ldr	r3, [pc, #112]	; (80005d4 <MX_GPIO_Init+0xc4>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <MX_GPIO_Init+0xc4>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000572:	4a18      	ldr	r2, [pc, #96]	; (80005d4 <MX_GPIO_Init+0xc4>)
 8000574:	f043 0302 	orr.w	r3, r3, #2
 8000578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057a:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <MX_GPIO_Init+0xc4>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057e:	f003 0302 	and.w	r3, r3, #2
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	2120      	movs	r1, #32
 800058a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058e:	f000 fd43 	bl	8001018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000592:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000598:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <MX_GPIO_Init+0xc8>)
 800059a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	4619      	mov	r1, r3
 80005a6:	480d      	ldr	r0, [pc, #52]	; (80005dc <MX_GPIO_Init+0xcc>)
 80005a8:	f000 fbb4 	bl	8000d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005ac:	2320      	movs	r3, #32
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b0:	2301      	movs	r3, #1
 80005b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b8:	2300      	movs	r3, #0
 80005ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	4619      	mov	r1, r3
 80005c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c6:	f000 fba5 	bl	8000d14 <HAL_GPIO_Init>

}
 80005ca:	bf00      	nop
 80005cc:	3728      	adds	r7, #40	; 0x28
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40021000 	.word	0x40021000
 80005d8:	10110000 	.word	0x10110000
 80005dc:	48000800 	.word	0x48000800

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f000 fa41 	bl	8000a6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f80a 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f7ff ff90 	bl	8000510 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005f0:	f000 f986 	bl	8000900 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Test\r\n");
 80005f4:	4801      	ldr	r0, [pc, #4]	; (80005fc <main+0x1c>)
 80005f6:	f002 fb93 	bl	8002d20 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fa:	e7fe      	b.n	80005fa <main+0x1a>
 80005fc:	080035e8 	.word	0x080035e8

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b0a4      	sub	sp, #144	; 0x90
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800060a:	2238      	movs	r2, #56	; 0x38
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f002 fb10 	bl	8002c34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000624:	463b      	mov	r3, r7
 8000626:	2244      	movs	r2, #68	; 0x44
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f002 fb02 	bl	8002c34 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000630:	2000      	movs	r0, #0
 8000632:	f000 fd09 	bl	8001048 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000636:	2302      	movs	r3, #2
 8000638:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800063e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000640:	2340      	movs	r3, #64	; 0x40
 8000642:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000644:	2302      	movs	r3, #2
 8000646:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000648:	2302      	movs	r3, #2
 800064a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800064c:	2304      	movs	r3, #4
 800064e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000650:	2355      	movs	r3, #85	; 0x55
 8000652:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000656:	2302      	movs	r3, #2
 8000658:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800065c:	2302      	movs	r3, #2
 800065e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800066c:	4618      	mov	r0, r3
 800066e:	f000 fd9f 	bl	80011b0 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000678:	f000 f826 	bl	80006c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	2303      	movs	r3, #3
 8000682:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000690:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000694:	2104      	movs	r1, #4
 8000696:	4618      	mov	r0, r3
 8000698:	f001 f8a2 	bl	80017e0 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006a2:	f000 f811 	bl	80006c8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80006a6:	2320      	movs	r3, #32
 80006a8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ae:	463b      	mov	r3, r7
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 fab1 	bl	8001c18 <HAL_RCCEx_PeriphCLKConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006bc:	f000 f804 	bl	80006c8 <Error_Handler>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3790      	adds	r7, #144	; 0x90
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006cc:	b672      	cpsid	i
}
 80006ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <Error_Handler+0x8>
	...

080006d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <HAL_MspInit+0x44>)
 80006dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006de:	4a0e      	ldr	r2, [pc, #56]	; (8000718 <HAL_MspInit+0x44>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6613      	str	r3, [r2, #96]	; 0x60
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <HAL_MspInit+0x44>)
 80006e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <HAL_MspInit+0x44>)
 80006f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006f6:	4a08      	ldr	r2, [pc, #32]	; (8000718 <HAL_MspInit+0x44>)
 80006f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fc:	6593      	str	r3, [r2, #88]	; 0x58
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <HAL_MspInit+0x44>)
 8000700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800070a:	f000 fd41 	bl	8001190 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40021000 	.word	0x40021000

0800071c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000724:	1d39      	adds	r1, r7, #4
 8000726:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800072a:	2201      	movs	r2, #1
 800072c:	4803      	ldr	r0, [pc, #12]	; (800073c <__io_putchar+0x20>)
 800072e:	f001 fcb3 	bl	8002098 <HAL_UART_Transmit>

  return ch;
 8000732:	687b      	ldr	r3, [r7, #4]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000098 	.word	0x20000098

08000740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000744:	e7fe      	b.n	8000744 <NMI_Handler+0x4>

08000746 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074a:	e7fe      	b.n	800074a <HardFault_Handler+0x4>

0800074c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000750:	e7fe      	b.n	8000750 <MemManage_Handler+0x4>

08000752 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000756:	e7fe      	b.n	8000756 <BusFault_Handler+0x4>

08000758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800075c:	e7fe      	b.n	800075c <UsageFault_Handler+0x4>

0800075e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800078c:	f000 f9c0 	bl	8000b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}

08000794 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	e00a      	b.n	80007bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007a6:	f3af 8000 	nop.w
 80007aa:	4601      	mov	r1, r0
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	1c5a      	adds	r2, r3, #1
 80007b0:	60ba      	str	r2, [r7, #8]
 80007b2:	b2ca      	uxtb	r2, r1
 80007b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	3301      	adds	r3, #1
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	697a      	ldr	r2, [r7, #20]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	dbf0      	blt.n	80007a6 <_read+0x12>
	}

return len;
 80007c4:	687b      	ldr	r3, [r7, #4]
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b086      	sub	sp, #24
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	60f8      	str	r0, [r7, #12]
 80007d6:	60b9      	str	r1, [r7, #8]
 80007d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
 80007de:	e009      	b.n	80007f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	60ba      	str	r2, [r7, #8]
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ff97 	bl	800071c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	3301      	adds	r3, #1
 80007f2:	617b      	str	r3, [r7, #20]
 80007f4:	697a      	ldr	r2, [r7, #20]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	dbf1      	blt.n	80007e0 <_write+0x12>
	}
	return len;
 80007fc:	687b      	ldr	r3, [r7, #4]
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3718      	adds	r7, #24
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <_close>:

int _close(int file)
{
 8000806:	b480      	push	{r7}
 8000808:	b083      	sub	sp, #12
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
	return -1;
 800080e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000812:	4618      	mov	r0, r3
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800081e:	b480      	push	{r7}
 8000820:	b083      	sub	sp, #12
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
 8000826:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800082e:	605a      	str	r2, [r3, #4]
	return 0;
 8000830:	2300      	movs	r3, #0
}
 8000832:	4618      	mov	r0, r3
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <_isatty>:

int _isatty(int file)
{
 800083e:	b480      	push	{r7}
 8000840:	b083      	sub	sp, #12
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
	return 1;
 8000846:	2301      	movs	r3, #1
}
 8000848:	4618      	mov	r0, r3
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
	return 0;
 8000860:	2300      	movs	r3, #0
}
 8000862:	4618      	mov	r0, r3
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
	...

08000870 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000878:	4a14      	ldr	r2, [pc, #80]	; (80008cc <_sbrk+0x5c>)
 800087a:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <_sbrk+0x60>)
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000884:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <_sbrk+0x64>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d102      	bne.n	8000892 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <_sbrk+0x64>)
 800088e:	4a12      	ldr	r2, [pc, #72]	; (80008d8 <_sbrk+0x68>)
 8000890:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <_sbrk+0x64>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4413      	add	r3, r2
 800089a:	693a      	ldr	r2, [r7, #16]
 800089c:	429a      	cmp	r2, r3
 800089e:	d207      	bcs.n	80008b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008a0:	f002 f99e 	bl	8002be0 <__errno>
 80008a4:	4603      	mov	r3, r0
 80008a6:	220c      	movs	r2, #12
 80008a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295
 80008ae:	e009      	b.n	80008c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <_sbrk+0x64>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008b6:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <_sbrk+0x64>)
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4413      	add	r3, r2
 80008be:	4a05      	ldr	r2, [pc, #20]	; (80008d4 <_sbrk+0x64>)
 80008c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008c2:	68fb      	ldr	r3, [r7, #12]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3718      	adds	r7, #24
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20008000 	.word	0x20008000
 80008d0:	00000400 	.word	0x00000400
 80008d4:	2000008c 	.word	0x2000008c
 80008d8:	20000140 	.word	0x20000140

080008dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <SystemInit+0x20>)
 80008e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008e6:	4a05      	ldr	r2, [pc, #20]	; (80008fc <SystemInit+0x20>)
 80008e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000904:	4b21      	ldr	r3, [pc, #132]	; (800098c <MX_LPUART1_UART_Init+0x8c>)
 8000906:	4a22      	ldr	r2, [pc, #136]	; (8000990 <MX_LPUART1_UART_Init+0x90>)
 8000908:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800090a:	4b20      	ldr	r3, [pc, #128]	; (800098c <MX_LPUART1_UART_Init+0x8c>)
 800090c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000910:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b1e      	ldr	r3, [pc, #120]	; (800098c <MX_LPUART1_UART_Init+0x8c>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b1c      	ldr	r3, [pc, #112]	; (800098c <MX_LPUART1_UART_Init+0x8c>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800091e:	4b1b      	ldr	r3, [pc, #108]	; (800098c <MX_LPUART1_UART_Init+0x8c>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b19      	ldr	r3, [pc, #100]	; (800098c <MX_LPUART1_UART_Init+0x8c>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b18      	ldr	r3, [pc, #96]	; (800098c <MX_LPUART1_UART_Init+0x8c>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000930:	4b16      	ldr	r3, [pc, #88]	; (800098c <MX_LPUART1_UART_Init+0x8c>)
 8000932:	2200      	movs	r2, #0
 8000934:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <MX_LPUART1_UART_Init+0x8c>)
 8000938:	2200      	movs	r2, #0
 800093a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <MX_LPUART1_UART_Init+0x8c>)
 800093e:	2200      	movs	r2, #0
 8000940:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000942:	4812      	ldr	r0, [pc, #72]	; (800098c <MX_LPUART1_UART_Init+0x8c>)
 8000944:	f001 fb58 	bl	8001ff8 <HAL_UART_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800094e:	f7ff febb 	bl	80006c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000952:	2100      	movs	r1, #0
 8000954:	480d      	ldr	r0, [pc, #52]	; (800098c <MX_LPUART1_UART_Init+0x8c>)
 8000956:	f002 f879 	bl	8002a4c <HAL_UARTEx_SetTxFifoThreshold>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000960:	f7ff feb2 	bl	80006c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000964:	2100      	movs	r1, #0
 8000966:	4809      	ldr	r0, [pc, #36]	; (800098c <MX_LPUART1_UART_Init+0x8c>)
 8000968:	f002 f8ae 	bl	8002ac8 <HAL_UARTEx_SetRxFifoThreshold>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000972:	f7ff fea9 	bl	80006c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_LPUART1_UART_Init+0x8c>)
 8000978:	f002 f82f 	bl	80029da <HAL_UARTEx_DisableFifoMode>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000982:	f7ff fea1 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000098 	.word	0x20000098
 8000990:	40008000 	.word	0x40008000

08000994 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	; 0x28
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a17      	ldr	r2, [pc, #92]	; (8000a10 <HAL_UART_MspInit+0x7c>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d128      	bne.n	8000a08 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80009b6:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <HAL_UART_MspInit+0x80>)
 80009b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009ba:	4a16      	ldr	r2, [pc, #88]	; (8000a14 <HAL_UART_MspInit+0x80>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	65d3      	str	r3, [r2, #92]	; 0x5c
 80009c2:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <HAL_UART_MspInit+0x80>)
 80009c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <HAL_UART_MspInit+0x80>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	4a10      	ldr	r2, [pc, #64]	; (8000a14 <HAL_UART_MspInit+0x80>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <HAL_UART_MspInit+0x80>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80009e6:	230c      	movs	r3, #12
 80009e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80009f6:	230c      	movs	r3, #12
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a04:	f000 f986 	bl	8000d14 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000a08:	bf00      	nop
 8000a0a:	3728      	adds	r7, #40	; 0x28
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40008000 	.word	0x40008000
 8000a14:	40021000 	.word	0x40021000

08000a18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a18:	480d      	ldr	r0, [pc, #52]	; (8000a50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a1a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a1c:	480d      	ldr	r0, [pc, #52]	; (8000a54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a1e:	490e      	ldr	r1, [pc, #56]	; (8000a58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a20:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <LoopForever+0xe>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a24:	e002      	b.n	8000a2c <LoopCopyDataInit>

08000a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2a:	3304      	adds	r3, #4

08000a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a30:	d3f9      	bcc.n	8000a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a32:	4a0b      	ldr	r2, [pc, #44]	; (8000a60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a34:	4c0b      	ldr	r4, [pc, #44]	; (8000a64 <LoopForever+0x16>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a38:	e001      	b.n	8000a3e <LoopFillZerobss>

08000a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a3c:	3204      	adds	r2, #4

08000a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a40:	d3fb      	bcc.n	8000a3a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a42:	f7ff ff4b 	bl	80008dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a46:	f002 f8d1 	bl	8002bec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a4a:	f7ff fdc9 	bl	80005e0 <main>

08000a4e <LoopForever>:

LoopForever:
    b LoopForever
 8000a4e:	e7fe      	b.n	8000a4e <LoopForever>
  ldr   r0, =_estack
 8000a50:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a58:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a5c:	080036a4 	.word	0x080036a4
  ldr r2, =_sbss
 8000a60:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a64:	2000013c 	.word	0x2000013c

08000a68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a68:	e7fe      	b.n	8000a68 <ADC1_2_IRQHandler>

08000a6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b082      	sub	sp, #8
 8000a6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a70:	2300      	movs	r3, #0
 8000a72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a74:	2003      	movs	r0, #3
 8000a76:	f000 f91b 	bl	8000cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f000 f80e 	bl	8000a9c <HAL_InitTick>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d002      	beq.n	8000a8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	71fb      	strb	r3, [r7, #7]
 8000a8a:	e001      	b.n	8000a90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a8c:	f7ff fe22 	bl	80006d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a90:	79fb      	ldrb	r3, [r7, #7]

}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000aa8:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <HAL_InitTick+0x68>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d022      	beq.n	8000af6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ab0:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <HAL_InitTick+0x6c>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <HAL_InitTick+0x68>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000abc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 f918 	bl	8000cfa <HAL_SYSTICK_Config>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d10f      	bne.n	8000af0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b0f      	cmp	r3, #15
 8000ad4:	d809      	bhi.n	8000aea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	6879      	ldr	r1, [r7, #4]
 8000ada:	f04f 30ff 	mov.w	r0, #4294967295
 8000ade:	f000 f8f2 	bl	8000cc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <HAL_InitTick+0x70>)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6013      	str	r3, [r2, #0]
 8000ae8:	e007      	b.n	8000afa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	73fb      	strb	r3, [r7, #15]
 8000aee:	e004      	b.n	8000afa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000af0:	2301      	movs	r3, #1
 8000af2:	73fb      	strb	r3, [r7, #15]
 8000af4:	e001      	b.n	8000afa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000008 	.word	0x20000008
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	20000004 	.word	0x20000004

08000b10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <HAL_IncTick+0x1c>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <HAL_IncTick+0x20>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	4a03      	ldr	r2, [pc, #12]	; (8000b2c <HAL_IncTick+0x1c>)
 8000b20:	6013      	str	r3, [r2, #0]
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	20000128 	.word	0x20000128
 8000b30:	20000008 	.word	0x20000008

08000b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return uwTick;
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <HAL_GetTick+0x14>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000128 	.word	0x20000128

08000b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7e:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	60d3      	str	r3, [r2, #12]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <__NVIC_GetPriorityGrouping+0x18>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	6039      	str	r1, [r7, #0]
 8000bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	db0a      	blt.n	8000bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	490c      	ldr	r1, [pc, #48]	; (8000bfc <__NVIC_SetPriority+0x4c>)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	0112      	lsls	r2, r2, #4
 8000bd0:	b2d2      	uxtb	r2, r2
 8000bd2:	440b      	add	r3, r1
 8000bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd8:	e00a      	b.n	8000bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4908      	ldr	r1, [pc, #32]	; (8000c00 <__NVIC_SetPriority+0x50>)
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	f003 030f 	and.w	r3, r3, #15
 8000be6:	3b04      	subs	r3, #4
 8000be8:	0112      	lsls	r2, r2, #4
 8000bea:	b2d2      	uxtb	r2, r2
 8000bec:	440b      	add	r3, r1
 8000bee:	761a      	strb	r2, [r3, #24]
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000e100 	.word	0xe000e100
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b089      	sub	sp, #36	; 0x24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	f1c3 0307 	rsb	r3, r3, #7
 8000c1e:	2b04      	cmp	r3, #4
 8000c20:	bf28      	it	cs
 8000c22:	2304      	movcs	r3, #4
 8000c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3304      	adds	r3, #4
 8000c2a:	2b06      	cmp	r3, #6
 8000c2c:	d902      	bls.n	8000c34 <NVIC_EncodePriority+0x30>
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3b03      	subs	r3, #3
 8000c32:	e000      	b.n	8000c36 <NVIC_EncodePriority+0x32>
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	f04f 32ff 	mov.w	r2, #4294967295
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43da      	mvns	r2, r3
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	401a      	ands	r2, r3
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	fa01 f303 	lsl.w	r3, r1, r3
 8000c56:	43d9      	mvns	r1, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5c:	4313      	orrs	r3, r2
         );
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3724      	adds	r7, #36	; 0x24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
	...

08000c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c7c:	d301      	bcc.n	8000c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e00f      	b.n	8000ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <SysTick_Config+0x40>)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c8a:	210f      	movs	r1, #15
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	f7ff ff8e 	bl	8000bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <SysTick_Config+0x40>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9a:	4b04      	ldr	r3, [pc, #16]	; (8000cac <SysTick_Config+0x40>)
 8000c9c:	2207      	movs	r2, #7
 8000c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	e000e010 	.word	0xe000e010

08000cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff ff47 	bl	8000b4c <__NVIC_SetPriorityGrouping>
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b086      	sub	sp, #24
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	4603      	mov	r3, r0
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
 8000cd2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd4:	f7ff ff5e 	bl	8000b94 <__NVIC_GetPriorityGrouping>
 8000cd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	68b9      	ldr	r1, [r7, #8]
 8000cde:	6978      	ldr	r0, [r7, #20]
 8000ce0:	f7ff ff90 	bl	8000c04 <NVIC_EncodePriority>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cea:	4611      	mov	r1, r2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff5f 	bl	8000bb0 <__NVIC_SetPriority>
}
 8000cf2:	bf00      	nop
 8000cf4:	3718      	adds	r7, #24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff ffb2 	bl	8000c6c <SysTick_Config>
 8000d08:	4603      	mov	r3, r0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b087      	sub	sp, #28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d22:	e15a      	b.n	8000fda <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	2101      	movs	r1, #1
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d30:	4013      	ands	r3, r2
 8000d32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	f000 814c 	beq.w	8000fd4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d00b      	beq.n	8000d5c <HAL_GPIO_Init+0x48>
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d007      	beq.n	8000d5c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d50:	2b11      	cmp	r3, #17
 8000d52:	d003      	beq.n	8000d5c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	2b12      	cmp	r3, #18
 8000d5a:	d130      	bne.n	8000dbe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	2203      	movs	r2, #3
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	68da      	ldr	r2, [r3, #12]
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d92:	2201      	movs	r2, #1
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	091b      	lsrs	r3, r3, #4
 8000da8:	f003 0201 	and.w	r2, r3, #1
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	2203      	movs	r2, #3
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	689a      	ldr	r2, [r3, #8]
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d003      	beq.n	8000dfe <HAL_GPIO_Init+0xea>
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	2b12      	cmp	r3, #18
 8000dfc:	d123      	bne.n	8000e46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	08da      	lsrs	r2, r3, #3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3208      	adds	r2, #8
 8000e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	220f      	movs	r2, #15
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	691a      	ldr	r2, [r3, #16]
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	f003 0307 	and.w	r3, r3, #7
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	08da      	lsrs	r2, r3, #3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3208      	adds	r2, #8
 8000e40:	6939      	ldr	r1, [r7, #16]
 8000e42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	2203      	movs	r2, #3
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43db      	mvns	r3, r3
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 0203 	and.w	r2, r3, #3
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f000 80a6 	beq.w	8000fd4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e88:	4b5b      	ldr	r3, [pc, #364]	; (8000ff8 <HAL_GPIO_Init+0x2e4>)
 8000e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e8c:	4a5a      	ldr	r2, [pc, #360]	; (8000ff8 <HAL_GPIO_Init+0x2e4>)
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	6613      	str	r3, [r2, #96]	; 0x60
 8000e94:	4b58      	ldr	r3, [pc, #352]	; (8000ff8 <HAL_GPIO_Init+0x2e4>)
 8000e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ea0:	4a56      	ldr	r2, [pc, #344]	; (8000ffc <HAL_GPIO_Init+0x2e8>)
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	089b      	lsrs	r3, r3, #2
 8000ea6:	3302      	adds	r3, #2
 8000ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	f003 0303 	and.w	r3, r3, #3
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	220f      	movs	r2, #15
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000eca:	d01f      	beq.n	8000f0c <HAL_GPIO_Init+0x1f8>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a4c      	ldr	r2, [pc, #304]	; (8001000 <HAL_GPIO_Init+0x2ec>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d019      	beq.n	8000f08 <HAL_GPIO_Init+0x1f4>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a4b      	ldr	r2, [pc, #300]	; (8001004 <HAL_GPIO_Init+0x2f0>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d013      	beq.n	8000f04 <HAL_GPIO_Init+0x1f0>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a4a      	ldr	r2, [pc, #296]	; (8001008 <HAL_GPIO_Init+0x2f4>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d00d      	beq.n	8000f00 <HAL_GPIO_Init+0x1ec>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a49      	ldr	r2, [pc, #292]	; (800100c <HAL_GPIO_Init+0x2f8>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d007      	beq.n	8000efc <HAL_GPIO_Init+0x1e8>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a48      	ldr	r2, [pc, #288]	; (8001010 <HAL_GPIO_Init+0x2fc>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d101      	bne.n	8000ef8 <HAL_GPIO_Init+0x1e4>
 8000ef4:	2305      	movs	r3, #5
 8000ef6:	e00a      	b.n	8000f0e <HAL_GPIO_Init+0x1fa>
 8000ef8:	2306      	movs	r3, #6
 8000efa:	e008      	b.n	8000f0e <HAL_GPIO_Init+0x1fa>
 8000efc:	2304      	movs	r3, #4
 8000efe:	e006      	b.n	8000f0e <HAL_GPIO_Init+0x1fa>
 8000f00:	2303      	movs	r3, #3
 8000f02:	e004      	b.n	8000f0e <HAL_GPIO_Init+0x1fa>
 8000f04:	2302      	movs	r3, #2
 8000f06:	e002      	b.n	8000f0e <HAL_GPIO_Init+0x1fa>
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e000      	b.n	8000f0e <HAL_GPIO_Init+0x1fa>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	f002 0203 	and.w	r2, r2, #3
 8000f14:	0092      	lsls	r2, r2, #2
 8000f16:	4093      	lsls	r3, r2
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f1e:	4937      	ldr	r1, [pc, #220]	; (8000ffc <HAL_GPIO_Init+0x2e8>)
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	089b      	lsrs	r3, r3, #2
 8000f24:	3302      	adds	r3, #2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f2c:	4b39      	ldr	r3, [pc, #228]	; (8001014 <HAL_GPIO_Init+0x300>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f50:	4a30      	ldr	r2, [pc, #192]	; (8001014 <HAL_GPIO_Init+0x300>)
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000f56:	4b2f      	ldr	r3, [pc, #188]	; (8001014 <HAL_GPIO_Init+0x300>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f7a:	4a26      	ldr	r2, [pc, #152]	; (8001014 <HAL_GPIO_Init+0x300>)
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f80:	4b24      	ldr	r3, [pc, #144]	; (8001014 <HAL_GPIO_Init+0x300>)
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fa4:	4a1b      	ldr	r2, [pc, #108]	; (8001014 <HAL_GPIO_Init+0x300>)
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000faa:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <HAL_GPIO_Init+0x300>)
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fce:	4a11      	ldr	r2, [pc, #68]	; (8001014 <HAL_GPIO_Init+0x300>)
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f47f ae9d 	bne.w	8000d24 <HAL_GPIO_Init+0x10>
  }
}
 8000fea:	bf00      	nop
 8000fec:	bf00      	nop
 8000fee:	371c      	adds	r7, #28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40010000 	.word	0x40010000
 8001000:	48000400 	.word	0x48000400
 8001004:	48000800 	.word	0x48000800
 8001008:	48000c00 	.word	0x48000c00
 800100c:	48001000 	.word	0x48001000
 8001010:	48001400 	.word	0x48001400
 8001014:	40010400 	.word	0x40010400

08001018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	807b      	strh	r3, [r7, #2]
 8001024:	4613      	mov	r3, r2
 8001026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001028:	787b      	ldrb	r3, [r7, #1]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800102e:	887a      	ldrh	r2, [r7, #2]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001034:	e002      	b.n	800103c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001036:	887a      	ldrh	r2, [r7, #2]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d141      	bne.n	80010da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001056:	4b4b      	ldr	r3, [pc, #300]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800105e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001062:	d131      	bne.n	80010c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001064:	4b47      	ldr	r3, [pc, #284]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001066:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800106a:	4a46      	ldr	r2, [pc, #280]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800106c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001070:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001074:	4b43      	ldr	r3, [pc, #268]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800107c:	4a41      	ldr	r2, [pc, #260]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800107e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001082:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001084:	4b40      	ldr	r3, [pc, #256]	; (8001188 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2232      	movs	r2, #50	; 0x32
 800108a:	fb02 f303 	mul.w	r3, r2, r3
 800108e:	4a3f      	ldr	r2, [pc, #252]	; (800118c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001090:	fba2 2303 	umull	r2, r3, r2, r3
 8001094:	0c9b      	lsrs	r3, r3, #18
 8001096:	3301      	adds	r3, #1
 8001098:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800109a:	e002      	b.n	80010a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	3b01      	subs	r3, #1
 80010a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010a2:	4b38      	ldr	r3, [pc, #224]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ae:	d102      	bne.n	80010b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1f2      	bne.n	800109c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010b6:	4b33      	ldr	r3, [pc, #204]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010c2:	d158      	bne.n	8001176 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e057      	b.n	8001178 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010c8:	4b2e      	ldr	r3, [pc, #184]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010ce:	4a2d      	ldr	r2, [pc, #180]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80010d8:	e04d      	b.n	8001176 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010e0:	d141      	bne.n	8001166 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80010e2:	4b28      	ldr	r3, [pc, #160]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ee:	d131      	bne.n	8001154 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010f0:	4b24      	ldr	r3, [pc, #144]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010f6:	4a23      	ldr	r2, [pc, #140]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001100:	4b20      	ldr	r3, [pc, #128]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001108:	4a1e      	ldr	r2, [pc, #120]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800110a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800110e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001110:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2232      	movs	r2, #50	; 0x32
 8001116:	fb02 f303 	mul.w	r3, r2, r3
 800111a:	4a1c      	ldr	r2, [pc, #112]	; (800118c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800111c:	fba2 2303 	umull	r2, r3, r2, r3
 8001120:	0c9b      	lsrs	r3, r3, #18
 8001122:	3301      	adds	r3, #1
 8001124:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001126:	e002      	b.n	800112e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	3b01      	subs	r3, #1
 800112c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800112e:	4b15      	ldr	r3, [pc, #84]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800113a:	d102      	bne.n	8001142 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1f2      	bne.n	8001128 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800114a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800114e:	d112      	bne.n	8001176 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001150:	2303      	movs	r3, #3
 8001152:	e011      	b.n	8001178 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001154:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001156:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800115a:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800115c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001160:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001164:	e007      	b.n	8001176 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001166:	4b07      	ldr	r3, [pc, #28]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800116e:	4a05      	ldr	r2, [pc, #20]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001170:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001174:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001176:	2300      	movs	r3, #0
}
 8001178:	4618      	mov	r0, r3
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	40007000 	.word	0x40007000
 8001188:	20000000 	.word	0x20000000
 800118c:	431bde83 	.word	0x431bde83

08001190 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	4a04      	ldr	r2, [pc, #16]	; (80011ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800119a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800119e:	6093      	str	r3, [r2, #8]
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40007000 	.word	0x40007000

080011b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d101      	bne.n	80011c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e308      	b.n	80017d4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d075      	beq.n	80012ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011ce:	4ba3      	ldr	r3, [pc, #652]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 030c 	and.w	r3, r3, #12
 80011d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011d8:	4ba0      	ldr	r3, [pc, #640]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	2b0c      	cmp	r3, #12
 80011e6:	d102      	bne.n	80011ee <HAL_RCC_OscConfig+0x3e>
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	d002      	beq.n	80011f4 <HAL_RCC_OscConfig+0x44>
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	2b08      	cmp	r3, #8
 80011f2:	d10b      	bne.n	800120c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f4:	4b99      	ldr	r3, [pc, #612]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d05b      	beq.n	80012b8 <HAL_RCC_OscConfig+0x108>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d157      	bne.n	80012b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e2e3      	b.n	80017d4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001214:	d106      	bne.n	8001224 <HAL_RCC_OscConfig+0x74>
 8001216:	4b91      	ldr	r3, [pc, #580]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a90      	ldr	r2, [pc, #576]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 800121c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	e01d      	b.n	8001260 <HAL_RCC_OscConfig+0xb0>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800122c:	d10c      	bne.n	8001248 <HAL_RCC_OscConfig+0x98>
 800122e:	4b8b      	ldr	r3, [pc, #556]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a8a      	ldr	r2, [pc, #552]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 8001234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	4b88      	ldr	r3, [pc, #544]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a87      	ldr	r2, [pc, #540]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 8001240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	e00b      	b.n	8001260 <HAL_RCC_OscConfig+0xb0>
 8001248:	4b84      	ldr	r3, [pc, #528]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a83      	ldr	r2, [pc, #524]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 800124e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	4b81      	ldr	r3, [pc, #516]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a80      	ldr	r2, [pc, #512]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 800125a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800125e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d013      	beq.n	8001290 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001268:	f7ff fc64 	bl	8000b34 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001270:	f7ff fc60 	bl	8000b34 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b64      	cmp	r3, #100	; 0x64
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e2a8      	b.n	80017d4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001282:	4b76      	ldr	r3, [pc, #472]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0f0      	beq.n	8001270 <HAL_RCC_OscConfig+0xc0>
 800128e:	e014      	b.n	80012ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001290:	f7ff fc50 	bl	8000b34 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001298:	f7ff fc4c 	bl	8000b34 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b64      	cmp	r3, #100	; 0x64
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e294      	b.n	80017d4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012aa:	4b6c      	ldr	r3, [pc, #432]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f0      	bne.n	8001298 <HAL_RCC_OscConfig+0xe8>
 80012b6:	e000      	b.n	80012ba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d075      	beq.n	80013b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012c6:	4b65      	ldr	r3, [pc, #404]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f003 030c 	and.w	r3, r3, #12
 80012ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012d0:	4b62      	ldr	r3, [pc, #392]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	f003 0303 	and.w	r3, r3, #3
 80012d8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	2b0c      	cmp	r3, #12
 80012de:	d102      	bne.n	80012e6 <HAL_RCC_OscConfig+0x136>
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d002      	beq.n	80012ec <HAL_RCC_OscConfig+0x13c>
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	2b04      	cmp	r3, #4
 80012ea:	d11f      	bne.n	800132c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012ec:	4b5b      	ldr	r3, [pc, #364]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d005      	beq.n	8001304 <HAL_RCC_OscConfig+0x154>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d101      	bne.n	8001304 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e267      	b.n	80017d4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001304:	4b55      	ldr	r3, [pc, #340]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	061b      	lsls	r3, r3, #24
 8001312:	4952      	ldr	r1, [pc, #328]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 8001314:	4313      	orrs	r3, r2
 8001316:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001318:	4b51      	ldr	r3, [pc, #324]	; (8001460 <HAL_RCC_OscConfig+0x2b0>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fbbd 	bl	8000a9c <HAL_InitTick>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d043      	beq.n	80013b0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e253      	b.n	80017d4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d023      	beq.n	800137c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001334:	4b49      	ldr	r3, [pc, #292]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a48      	ldr	r2, [pc, #288]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 800133a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800133e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001340:	f7ff fbf8 	bl	8000b34 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001348:	f7ff fbf4 	bl	8000b34 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e23c      	b.n	80017d4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800135a:	4b40      	ldr	r3, [pc, #256]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0f0      	beq.n	8001348 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001366:	4b3d      	ldr	r3, [pc, #244]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	061b      	lsls	r3, r3, #24
 8001374:	4939      	ldr	r1, [pc, #228]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 8001376:	4313      	orrs	r3, r2
 8001378:	604b      	str	r3, [r1, #4]
 800137a:	e01a      	b.n	80013b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800137c:	4b37      	ldr	r3, [pc, #220]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a36      	ldr	r2, [pc, #216]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 8001382:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001386:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001388:	f7ff fbd4 	bl	8000b34 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001390:	f7ff fbd0 	bl	8000b34 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e218      	b.n	80017d4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013a2:	4b2e      	ldr	r3, [pc, #184]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0x1e0>
 80013ae:	e000      	b.n	80013b2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d03c      	beq.n	8001438 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d01c      	beq.n	8001400 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c6:	4b25      	ldr	r3, [pc, #148]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 80013c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013cc:	4a23      	ldr	r2, [pc, #140]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d6:	f7ff fbad 	bl	8000b34 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013de:	f7ff fba9 	bl	8000b34 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e1f1      	b.n	80017d4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013f0:	4b1a      	ldr	r3, [pc, #104]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 80013f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0ef      	beq.n	80013de <HAL_RCC_OscConfig+0x22e>
 80013fe:	e01b      	b.n	8001438 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001400:	4b16      	ldr	r3, [pc, #88]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 8001402:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001406:	4a15      	ldr	r2, [pc, #84]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 8001408:	f023 0301 	bic.w	r3, r3, #1
 800140c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001410:	f7ff fb90 	bl	8000b34 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001418:	f7ff fb8c 	bl	8000b34 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e1d4      	b.n	80017d4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800142a:	4b0c      	ldr	r3, [pc, #48]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 800142c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1ef      	bne.n	8001418 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	2b00      	cmp	r3, #0
 8001442:	f000 80ab 	beq.w	800159c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001446:	2300      	movs	r3, #0
 8001448:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800144a:	4b04      	ldr	r3, [pc, #16]	; (800145c <HAL_RCC_OscConfig+0x2ac>)
 800144c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d106      	bne.n	8001464 <HAL_RCC_OscConfig+0x2b4>
 8001456:	2301      	movs	r3, #1
 8001458:	e005      	b.n	8001466 <HAL_RCC_OscConfig+0x2b6>
 800145a:	bf00      	nop
 800145c:	40021000 	.word	0x40021000
 8001460:	20000004 	.word	0x20000004
 8001464:	2300      	movs	r3, #0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d00d      	beq.n	8001486 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800146a:	4baf      	ldr	r3, [pc, #700]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 800146c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146e:	4aae      	ldr	r2, [pc, #696]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 8001470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001474:	6593      	str	r3, [r2, #88]	; 0x58
 8001476:	4bac      	ldr	r3, [pc, #688]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 8001478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001482:	2301      	movs	r3, #1
 8001484:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001486:	4ba9      	ldr	r3, [pc, #676]	; (800172c <HAL_RCC_OscConfig+0x57c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148e:	2b00      	cmp	r3, #0
 8001490:	d118      	bne.n	80014c4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001492:	4ba6      	ldr	r3, [pc, #664]	; (800172c <HAL_RCC_OscConfig+0x57c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4aa5      	ldr	r2, [pc, #660]	; (800172c <HAL_RCC_OscConfig+0x57c>)
 8001498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800149c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800149e:	f7ff fb49 	bl	8000b34 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014a6:	f7ff fb45 	bl	8000b34 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e18d      	b.n	80017d4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014b8:	4b9c      	ldr	r3, [pc, #624]	; (800172c <HAL_RCC_OscConfig+0x57c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0f0      	beq.n	80014a6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d108      	bne.n	80014de <HAL_RCC_OscConfig+0x32e>
 80014cc:	4b96      	ldr	r3, [pc, #600]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 80014ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014d2:	4a95      	ldr	r2, [pc, #596]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014dc:	e024      	b.n	8001528 <HAL_RCC_OscConfig+0x378>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2b05      	cmp	r3, #5
 80014e4:	d110      	bne.n	8001508 <HAL_RCC_OscConfig+0x358>
 80014e6:	4b90      	ldr	r3, [pc, #576]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 80014e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ec:	4a8e      	ldr	r2, [pc, #568]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 80014ee:	f043 0304 	orr.w	r3, r3, #4
 80014f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014f6:	4b8c      	ldr	r3, [pc, #560]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 80014f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014fc:	4a8a      	ldr	r2, [pc, #552]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001506:	e00f      	b.n	8001528 <HAL_RCC_OscConfig+0x378>
 8001508:	4b87      	ldr	r3, [pc, #540]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 800150a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800150e:	4a86      	ldr	r2, [pc, #536]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 8001510:	f023 0301 	bic.w	r3, r3, #1
 8001514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001518:	4b83      	ldr	r3, [pc, #524]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 800151a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800151e:	4a82      	ldr	r2, [pc, #520]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 8001520:	f023 0304 	bic.w	r3, r3, #4
 8001524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d016      	beq.n	800155e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001530:	f7ff fb00 	bl	8000b34 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001536:	e00a      	b.n	800154e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001538:	f7ff fafc 	bl	8000b34 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	f241 3288 	movw	r2, #5000	; 0x1388
 8001546:	4293      	cmp	r3, r2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e142      	b.n	80017d4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800154e:	4b76      	ldr	r3, [pc, #472]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 8001550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0ed      	beq.n	8001538 <HAL_RCC_OscConfig+0x388>
 800155c:	e015      	b.n	800158a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155e:	f7ff fae9 	bl	8000b34 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001564:	e00a      	b.n	800157c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001566:	f7ff fae5 	bl	8000b34 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	f241 3288 	movw	r2, #5000	; 0x1388
 8001574:	4293      	cmp	r3, r2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e12b      	b.n	80017d4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800157c:	4b6a      	ldr	r3, [pc, #424]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 800157e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1ed      	bne.n	8001566 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800158a:	7ffb      	ldrb	r3, [r7, #31]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d105      	bne.n	800159c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001590:	4b65      	ldr	r3, [pc, #404]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 8001592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001594:	4a64      	ldr	r2, [pc, #400]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 8001596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800159a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0320 	and.w	r3, r3, #32
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d03c      	beq.n	8001622 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d01c      	beq.n	80015ea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015b0:	4b5d      	ldr	r3, [pc, #372]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 80015b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015b6:	4a5c      	ldr	r2, [pc, #368]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c0:	f7ff fab8 	bl	8000b34 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015c8:	f7ff fab4 	bl	8000b34 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e0fc      	b.n	80017d4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015da:	4b53      	ldr	r3, [pc, #332]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 80015dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0ef      	beq.n	80015c8 <HAL_RCC_OscConfig+0x418>
 80015e8:	e01b      	b.n	8001622 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015ea:	4b4f      	ldr	r3, [pc, #316]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 80015ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015f0:	4a4d      	ldr	r2, [pc, #308]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 80015f2:	f023 0301 	bic.w	r3, r3, #1
 80015f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015fa:	f7ff fa9b 	bl	8000b34 <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001602:	f7ff fa97 	bl	8000b34 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e0df      	b.n	80017d4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001614:	4b44      	ldr	r3, [pc, #272]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 8001616:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1ef      	bne.n	8001602 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	2b00      	cmp	r3, #0
 8001628:	f000 80d3 	beq.w	80017d2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800162c:	4b3e      	ldr	r3, [pc, #248]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f003 030c 	and.w	r3, r3, #12
 8001634:	2b0c      	cmp	r3, #12
 8001636:	f000 808d 	beq.w	8001754 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d15a      	bne.n	80016f8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001642:	4b39      	ldr	r3, [pc, #228]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a38      	ldr	r2, [pc, #224]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 8001648:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800164c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164e:	f7ff fa71 	bl	8000b34 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001656:	f7ff fa6d 	bl	8000b34 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e0b5      	b.n	80017d4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001668:	4b2f      	ldr	r3, [pc, #188]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1f0      	bne.n	8001656 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001674:	4b2c      	ldr	r3, [pc, #176]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 8001676:	68da      	ldr	r2, [r3, #12]
 8001678:	4b2d      	ldr	r3, [pc, #180]	; (8001730 <HAL_RCC_OscConfig+0x580>)
 800167a:	4013      	ands	r3, r2
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6a11      	ldr	r1, [r2, #32]
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001684:	3a01      	subs	r2, #1
 8001686:	0112      	lsls	r2, r2, #4
 8001688:	4311      	orrs	r1, r2
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800168e:	0212      	lsls	r2, r2, #8
 8001690:	4311      	orrs	r1, r2
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001696:	0852      	lsrs	r2, r2, #1
 8001698:	3a01      	subs	r2, #1
 800169a:	0552      	lsls	r2, r2, #21
 800169c:	4311      	orrs	r1, r2
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016a2:	0852      	lsrs	r2, r2, #1
 80016a4:	3a01      	subs	r2, #1
 80016a6:	0652      	lsls	r2, r2, #25
 80016a8:	4311      	orrs	r1, r2
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80016ae:	06d2      	lsls	r2, r2, #27
 80016b0:	430a      	orrs	r2, r1
 80016b2:	491d      	ldr	r1, [pc, #116]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016b8:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a1a      	ldr	r2, [pc, #104]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 80016be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016c2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016c4:	4b18      	ldr	r3, [pc, #96]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	4a17      	ldr	r2, [pc, #92]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 80016ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d0:	f7ff fa30 	bl	8000b34 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d8:	f7ff fa2c 	bl	8000b34 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e074      	b.n	80017d4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0f0      	beq.n	80016d8 <HAL_RCC_OscConfig+0x528>
 80016f6:	e06c      	b.n	80017d2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f8:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 80016fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001702:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001704:	4b08      	ldr	r3, [pc, #32]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	4a07      	ldr	r2, [pc, #28]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 800170a:	f023 0303 	bic.w	r3, r3, #3
 800170e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	4a04      	ldr	r2, [pc, #16]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 8001716:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800171a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800171e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001720:	f7ff fa08 	bl	8000b34 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001726:	e00e      	b.n	8001746 <HAL_RCC_OscConfig+0x596>
 8001728:	40021000 	.word	0x40021000
 800172c:	40007000 	.word	0x40007000
 8001730:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001734:	f7ff f9fe 	bl	8000b34 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e046      	b.n	80017d4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001746:	4b25      	ldr	r3, [pc, #148]	; (80017dc <HAL_RCC_OscConfig+0x62c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x584>
 8001752:	e03e      	b.n	80017d2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d101      	bne.n	8001760 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e039      	b.n	80017d4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001760:	4b1e      	ldr	r3, [pc, #120]	; (80017dc <HAL_RCC_OscConfig+0x62c>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	f003 0203 	and.w	r2, r3, #3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	429a      	cmp	r2, r3
 8001772:	d12c      	bne.n	80017ce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177e:	3b01      	subs	r3, #1
 8001780:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001782:	429a      	cmp	r2, r3
 8001784:	d123      	bne.n	80017ce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001790:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001792:	429a      	cmp	r2, r3
 8001794:	d11b      	bne.n	80017ce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d113      	bne.n	80017ce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b0:	085b      	lsrs	r3, r3, #1
 80017b2:	3b01      	subs	r3, #1
 80017b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d109      	bne.n	80017ce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c4:	085b      	lsrs	r3, r3, #1
 80017c6:	3b01      	subs	r3, #1
 80017c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d001      	beq.n	80017d2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e000      	b.n	80017d4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3720      	adds	r7, #32
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40021000 	.word	0x40021000

080017e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e11e      	b.n	8001a36 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017f8:	4b91      	ldr	r3, [pc, #580]	; (8001a40 <HAL_RCC_ClockConfig+0x260>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 030f 	and.w	r3, r3, #15
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	429a      	cmp	r2, r3
 8001804:	d910      	bls.n	8001828 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001806:	4b8e      	ldr	r3, [pc, #568]	; (8001a40 <HAL_RCC_ClockConfig+0x260>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f023 020f 	bic.w	r2, r3, #15
 800180e:	498c      	ldr	r1, [pc, #560]	; (8001a40 <HAL_RCC_ClockConfig+0x260>)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	4313      	orrs	r3, r2
 8001814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001816:	4b8a      	ldr	r3, [pc, #552]	; (8001a40 <HAL_RCC_ClockConfig+0x260>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	429a      	cmp	r2, r3
 8001822:	d001      	beq.n	8001828 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e106      	b.n	8001a36 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b00      	cmp	r3, #0
 8001832:	d073      	beq.n	800191c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2b03      	cmp	r3, #3
 800183a:	d129      	bne.n	8001890 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800183c:	4b81      	ldr	r3, [pc, #516]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e0f4      	b.n	8001a36 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800184c:	f000 f99e 	bl	8001b8c <RCC_GetSysClockFreqFromPLLSource>
 8001850:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	4a7c      	ldr	r2, [pc, #496]	; (8001a48 <HAL_RCC_ClockConfig+0x268>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d93f      	bls.n	80018da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800185a:	4b7a      	ldr	r3, [pc, #488]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d009      	beq.n	800187a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800186e:	2b00      	cmp	r3, #0
 8001870:	d033      	beq.n	80018da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001876:	2b00      	cmp	r3, #0
 8001878:	d12f      	bne.n	80018da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800187a:	4b72      	ldr	r3, [pc, #456]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001882:	4a70      	ldr	r2, [pc, #448]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 8001884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001888:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800188a:	2380      	movs	r3, #128	; 0x80
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	e024      	b.n	80018da <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b02      	cmp	r3, #2
 8001896:	d107      	bne.n	80018a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001898:	4b6a      	ldr	r3, [pc, #424]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d109      	bne.n	80018b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0c6      	b.n	8001a36 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018a8:	4b66      	ldr	r3, [pc, #408]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e0be      	b.n	8001a36 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80018b8:	f000 f8ce 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 80018bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	4a61      	ldr	r2, [pc, #388]	; (8001a48 <HAL_RCC_ClockConfig+0x268>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d909      	bls.n	80018da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80018c6:	4b5f      	ldr	r3, [pc, #380]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018ce:	4a5d      	ldr	r2, [pc, #372]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 80018d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80018d6:	2380      	movs	r3, #128	; 0x80
 80018d8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018da:	4b5a      	ldr	r3, [pc, #360]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f023 0203 	bic.w	r2, r3, #3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	4957      	ldr	r1, [pc, #348]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018ec:	f7ff f922 	bl	8000b34 <HAL_GetTick>
 80018f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f2:	e00a      	b.n	800190a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f4:	f7ff f91e 	bl	8000b34 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001902:	4293      	cmp	r3, r2
 8001904:	d901      	bls.n	800190a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e095      	b.n	8001a36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800190a:	4b4e      	ldr	r3, [pc, #312]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 020c 	and.w	r2, r3, #12
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	429a      	cmp	r2, r3
 800191a:	d1eb      	bne.n	80018f4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d023      	beq.n	8001970 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	2b00      	cmp	r3, #0
 8001932:	d005      	beq.n	8001940 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001934:	4b43      	ldr	r3, [pc, #268]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	4a42      	ldr	r2, [pc, #264]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 800193a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800193e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0308 	and.w	r3, r3, #8
 8001948:	2b00      	cmp	r3, #0
 800194a:	d007      	beq.n	800195c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800194c:	4b3d      	ldr	r3, [pc, #244]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001954:	4a3b      	ldr	r2, [pc, #236]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 8001956:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800195a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800195c:	4b39      	ldr	r3, [pc, #228]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	4936      	ldr	r1, [pc, #216]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 800196a:	4313      	orrs	r3, r2
 800196c:	608b      	str	r3, [r1, #8]
 800196e:	e008      	b.n	8001982 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	2b80      	cmp	r3, #128	; 0x80
 8001974:	d105      	bne.n	8001982 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001976:	4b33      	ldr	r3, [pc, #204]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	4a32      	ldr	r2, [pc, #200]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 800197c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001980:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001982:	4b2f      	ldr	r3, [pc, #188]	; (8001a40 <HAL_RCC_ClockConfig+0x260>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	429a      	cmp	r2, r3
 800198e:	d21d      	bcs.n	80019cc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001990:	4b2b      	ldr	r3, [pc, #172]	; (8001a40 <HAL_RCC_ClockConfig+0x260>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f023 020f 	bic.w	r2, r3, #15
 8001998:	4929      	ldr	r1, [pc, #164]	; (8001a40 <HAL_RCC_ClockConfig+0x260>)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	4313      	orrs	r3, r2
 800199e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019a0:	f7ff f8c8 	bl	8000b34 <HAL_GetTick>
 80019a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a6:	e00a      	b.n	80019be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a8:	f7ff f8c4 	bl	8000b34 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e03b      	b.n	8001a36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019be:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <HAL_RCC_ClockConfig+0x260>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d1ed      	bne.n	80019a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d008      	beq.n	80019ea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019d8:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	4917      	ldr	r1, [pc, #92]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d009      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019f6:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	490f      	ldr	r1, [pc, #60]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a0a:	f000 f825 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <HAL_RCC_ClockConfig+0x264>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	091b      	lsrs	r3, r3, #4
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	490c      	ldr	r1, [pc, #48]	; (8001a4c <HAL_RCC_ClockConfig+0x26c>)
 8001a1c:	5ccb      	ldrb	r3, [r1, r3]
 8001a1e:	f003 031f 	and.w	r3, r3, #31
 8001a22:	fa22 f303 	lsr.w	r3, r2, r3
 8001a26:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <HAL_RCC_ClockConfig+0x270>)
 8001a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <HAL_RCC_ClockConfig+0x274>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff f834 	bl	8000a9c <HAL_InitTick>
 8001a34:	4603      	mov	r3, r0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40022000 	.word	0x40022000
 8001a44:	40021000 	.word	0x40021000
 8001a48:	04c4b400 	.word	0x04c4b400
 8001a4c:	080035f0 	.word	0x080035f0
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000004 	.word	0x20000004

08001a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b087      	sub	sp, #28
 8001a5c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a5e:	4b2c      	ldr	r3, [pc, #176]	; (8001b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 030c 	and.w	r3, r3, #12
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d102      	bne.n	8001a70 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a6a:	4b2a      	ldr	r3, [pc, #168]	; (8001b14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	e047      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a70:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 030c 	and.w	r3, r3, #12
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d102      	bne.n	8001a82 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a7c:	4b26      	ldr	r3, [pc, #152]	; (8001b18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	e03e      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001a82:	4b23      	ldr	r3, [pc, #140]	; (8001b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 030c 	and.w	r3, r3, #12
 8001a8a:	2b0c      	cmp	r3, #12
 8001a8c:	d136      	bne.n	8001afc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a8e:	4b20      	ldr	r3, [pc, #128]	; (8001b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a98:	4b1d      	ldr	r3, [pc, #116]	; (8001b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d10c      	bne.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001aac:	4a1a      	ldr	r2, [pc, #104]	; (8001b18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab4:	4a16      	ldr	r2, [pc, #88]	; (8001b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ab6:	68d2      	ldr	r2, [r2, #12]
 8001ab8:	0a12      	lsrs	r2, r2, #8
 8001aba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001abe:	fb02 f303 	mul.w	r3, r2, r3
 8001ac2:	617b      	str	r3, [r7, #20]
      break;
 8001ac4:	e00c      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ac6:	4a13      	ldr	r2, [pc, #76]	; (8001b14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ace:	4a10      	ldr	r2, [pc, #64]	; (8001b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ad0:	68d2      	ldr	r2, [r2, #12]
 8001ad2:	0a12      	lsrs	r2, r2, #8
 8001ad4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ad8:	fb02 f303 	mul.w	r3, r2, r3
 8001adc:	617b      	str	r3, [r7, #20]
      break;
 8001ade:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	0e5b      	lsrs	r3, r3, #25
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	3301      	adds	r3, #1
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	e001      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b00:	693b      	ldr	r3, [r7, #16]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	371c      	adds	r7, #28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40021000 	.word	0x40021000
 8001b14:	00f42400 	.word	0x00f42400
 8001b18:	016e3600 	.word	0x016e3600

08001b1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b22:	681b      	ldr	r3, [r3, #0]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000000 	.word	0x20000000

08001b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b38:	f7ff fff0 	bl	8001b1c <HAL_RCC_GetHCLKFreq>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	0a1b      	lsrs	r3, r3, #8
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	4904      	ldr	r1, [pc, #16]	; (8001b5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b4a:	5ccb      	ldrb	r3, [r1, r3]
 8001b4c:	f003 031f 	and.w	r3, r3, #31
 8001b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	08003600 	.word	0x08003600

08001b60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b64:	f7ff ffda 	bl	8001b1c <HAL_RCC_GetHCLKFreq>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	0adb      	lsrs	r3, r3, #11
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	4904      	ldr	r1, [pc, #16]	; (8001b88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b76:	5ccb      	ldrb	r3, [r1, r3]
 8001b78:	f003 031f 	and.w	r3, r3, #31
 8001b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40021000 	.word	0x40021000
 8001b88:	08003600 	.word	0x08003600

08001b8c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b92:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d10c      	bne.n	8001bca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bb0:	4a17      	ldr	r2, [pc, #92]	; (8001c10 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb8:	4a14      	ldr	r2, [pc, #80]	; (8001c0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bba:	68d2      	ldr	r2, [r2, #12]
 8001bbc:	0a12      	lsrs	r2, r2, #8
 8001bbe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bc2:	fb02 f303 	mul.w	r3, r2, r3
 8001bc6:	617b      	str	r3, [r7, #20]
    break;
 8001bc8:	e00c      	b.n	8001be4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bca:	4a12      	ldr	r2, [pc, #72]	; (8001c14 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd2:	4a0e      	ldr	r2, [pc, #56]	; (8001c0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bd4:	68d2      	ldr	r2, [r2, #12]
 8001bd6:	0a12      	lsrs	r2, r2, #8
 8001bd8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bdc:	fb02 f303 	mul.w	r3, r2, r3
 8001be0:	617b      	str	r3, [r7, #20]
    break;
 8001be2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001be4:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	0e5b      	lsrs	r3, r3, #25
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	3301      	adds	r3, #1
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001bfe:	687b      	ldr	r3, [r7, #4]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	371c      	adds	r7, #28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	016e3600 	.word	0x016e3600
 8001c14:	00f42400 	.word	0x00f42400

08001c18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c20:	2300      	movs	r3, #0
 8001c22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c24:	2300      	movs	r3, #0
 8001c26:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 8098 	beq.w	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c36:	2300      	movs	r3, #0
 8001c38:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c3a:	4b43      	ldr	r3, [pc, #268]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10d      	bne.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c46:	4b40      	ldr	r3, [pc, #256]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4a:	4a3f      	ldr	r2, [pc, #252]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c50:	6593      	str	r3, [r2, #88]	; 0x58
 8001c52:	4b3d      	ldr	r3, [pc, #244]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c62:	4b3a      	ldr	r3, [pc, #232]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a39      	ldr	r2, [pc, #228]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c6e:	f7fe ff61 	bl	8000b34 <HAL_GetTick>
 8001c72:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c74:	e009      	b.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c76:	f7fe ff5d 	bl	8000b34 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d902      	bls.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	74fb      	strb	r3, [r7, #19]
        break;
 8001c88:	e005      	b.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c8a:	4b30      	ldr	r3, [pc, #192]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0ef      	beq.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001c96:	7cfb      	ldrb	r3, [r7, #19]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d159      	bne.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c9c:	4b2a      	ldr	r3, [pc, #168]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ca6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d01e      	beq.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d019      	beq.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001cb8:	4b23      	ldr	r3, [pc, #140]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cc2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001cc4:	4b20      	ldr	r3, [pc, #128]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cca:	4a1f      	ldr	r2, [pc, #124]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001cd4:	4b1c      	ldr	r3, [pc, #112]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cda:	4a1b      	ldr	r2, [pc, #108]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ce0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ce4:	4a18      	ldr	r2, [pc, #96]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d016      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf6:	f7fe ff1d 	bl	8000b34 <HAL_GetTick>
 8001cfa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cfc:	e00b      	b.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfe:	f7fe ff19 	bl	8000b34 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d902      	bls.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	74fb      	strb	r3, [r7, #19]
            break;
 8001d14:	e006      	b.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d16:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0ec      	beq.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001d24:	7cfb      	ldrb	r3, [r7, #19]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10b      	bne.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d2a:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	4903      	ldr	r1, [pc, #12]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001d40:	e008      	b.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d42:	7cfb      	ldrb	r3, [r7, #19]
 8001d44:	74bb      	strb	r3, [r7, #18]
 8001d46:	e005      	b.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d50:	7cfb      	ldrb	r3, [r7, #19]
 8001d52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d54:	7c7b      	ldrb	r3, [r7, #17]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d105      	bne.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d5a:	4ba6      	ldr	r3, [pc, #664]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5e:	4aa5      	ldr	r2, [pc, #660]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00a      	beq.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d72:	4ba0      	ldr	r3, [pc, #640]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d78:	f023 0203 	bic.w	r2, r3, #3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	499c      	ldr	r1, [pc, #624]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00a      	beq.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d94:	4b97      	ldr	r3, [pc, #604]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d9a:	f023 020c 	bic.w	r2, r3, #12
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	4994      	ldr	r1, [pc, #592]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0304 	and.w	r3, r3, #4
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00a      	beq.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001db6:	4b8f      	ldr	r3, [pc, #572]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dbc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	498b      	ldr	r1, [pc, #556]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00a      	beq.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001dd8:	4b86      	ldr	r3, [pc, #536]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dde:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	4983      	ldr	r1, [pc, #524]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0320 	and.w	r3, r3, #32
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00a      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001dfa:	4b7e      	ldr	r3, [pc, #504]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e00:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	497a      	ldr	r1, [pc, #488]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00a      	beq.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e1c:	4b75      	ldr	r3, [pc, #468]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e22:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	4972      	ldr	r1, [pc, #456]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00a      	beq.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e3e:	4b6d      	ldr	r3, [pc, #436]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	69db      	ldr	r3, [r3, #28]
 8001e4c:	4969      	ldr	r1, [pc, #420]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00a      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e60:	4b64      	ldr	r3, [pc, #400]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e66:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	4961      	ldr	r1, [pc, #388]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00a      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e82:	4b5c      	ldr	r3, [pc, #368]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	4958      	ldr	r1, [pc, #352]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d015      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ea4:	4b53      	ldr	r3, [pc, #332]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eaa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb2:	4950      	ldr	r1, [pc, #320]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ec2:	d105      	bne.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ec4:	4b4b      	ldr	r3, [pc, #300]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	4a4a      	ldr	r2, [pc, #296]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ece:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d015      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001edc:	4b45      	ldr	r3, [pc, #276]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eea:	4942      	ldr	r1, [pc, #264]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001efa:	d105      	bne.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001efc:	4b3d      	ldr	r3, [pc, #244]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	4a3c      	ldr	r2, [pc, #240]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f06:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d015      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001f14:	4b37      	ldr	r3, [pc, #220]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f1a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	4934      	ldr	r1, [pc, #208]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f32:	d105      	bne.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f34:	4b2f      	ldr	r3, [pc, #188]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	4a2e      	ldr	r2, [pc, #184]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f3e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d015      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f4c:	4b29      	ldr	r3, [pc, #164]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f5a:	4926      	ldr	r1, [pc, #152]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f6a:	d105      	bne.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f6c:	4b21      	ldr	r3, [pc, #132]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	4a20      	ldr	r2, [pc, #128]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f76:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d015      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f84:	4b1b      	ldr	r3, [pc, #108]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f92:	4918      	ldr	r1, [pc, #96]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fa2:	d105      	bne.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fa4:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	4a12      	ldr	r2, [pc, #72]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001faa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d015      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001fbc:	4b0d      	ldr	r3, [pc, #52]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fca:	490a      	ldr	r1, [pc, #40]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001fda:	d105      	bne.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001fdc:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	4a04      	ldr	r2, [pc, #16]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8001fe8:	7cbb      	ldrb	r3, [r7, #18]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40021000 	.word	0x40021000

08001ff8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e042      	b.n	8002090 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002010:	2b00      	cmp	r3, #0
 8002012:	d106      	bne.n	8002022 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7fe fcb9 	bl	8000994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2224      	movs	r2, #36	; 0x24
 8002026:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0201 	bic.w	r2, r2, #1
 8002038:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f8c2 	bl	80021c4 <UART_SetConfig>
 8002040:	4603      	mov	r3, r0
 8002042:	2b01      	cmp	r3, #1
 8002044:	d101      	bne.n	800204a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e022      	b.n	8002090 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204e:	2b00      	cmp	r3, #0
 8002050:	d002      	beq.n	8002058 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 fb54 	bl	8002700 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002066:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002076:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0201 	orr.w	r2, r2, #1
 8002086:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 fbdb 	bl	8002844 <UART_CheckIdleState>
 800208e:	4603      	mov	r3, r0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08a      	sub	sp, #40	; 0x28
 800209c:	af02      	add	r7, sp, #8
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	603b      	str	r3, [r7, #0]
 80020a4:	4613      	mov	r3, r2
 80020a6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020ae:	2b20      	cmp	r3, #32
 80020b0:	f040 8083 	bne.w	80021ba <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d002      	beq.n	80020c0 <HAL_UART_Transmit+0x28>
 80020ba:	88fb      	ldrh	r3, [r7, #6]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e07b      	b.n	80021bc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d101      	bne.n	80020d2 <HAL_UART_Transmit+0x3a>
 80020ce:	2302      	movs	r3, #2
 80020d0:	e074      	b.n	80021bc <HAL_UART_Transmit+0x124>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2221      	movs	r2, #33	; 0x21
 80020e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020ea:	f7fe fd23 	bl	8000b34 <HAL_GetTick>
 80020ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	88fa      	ldrh	r2, [r7, #6]
 80020f4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	88fa      	ldrh	r2, [r7, #6]
 80020fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002108:	d108      	bne.n	800211c <HAL_UART_Transmit+0x84>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d104      	bne.n	800211c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	61bb      	str	r3, [r7, #24]
 800211a:	e003      	b.n	8002124 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002120:	2300      	movs	r3, #0
 8002122:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800212c:	e02c      	b.n	8002188 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	2200      	movs	r2, #0
 8002136:	2180      	movs	r1, #128	; 0x80
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f000 fbce 	bl	80028da <UART_WaitOnFlagUntilTimeout>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e039      	b.n	80021bc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10b      	bne.n	8002166 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	881b      	ldrh	r3, [r3, #0]
 8002152:	461a      	mov	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800215c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	3302      	adds	r3, #2
 8002162:	61bb      	str	r3, [r7, #24]
 8002164:	e007      	b.n	8002176 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	781a      	ldrb	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	3301      	adds	r3, #1
 8002174:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800217c:	b29b      	uxth	r3, r3
 800217e:	3b01      	subs	r3, #1
 8002180:	b29a      	uxth	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800218e:	b29b      	uxth	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1cc      	bne.n	800212e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	2200      	movs	r2, #0
 800219c:	2140      	movs	r1, #64	; 0x40
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f000 fb9b 	bl	80028da <UART_WaitOnFlagUntilTimeout>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e006      	b.n	80021bc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2220      	movs	r2, #32
 80021b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	e000      	b.n	80021bc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80021ba:	2302      	movs	r3, #2
  }
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3720      	adds	r7, #32
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021c4:	b5b0      	push	{r4, r5, r7, lr}
 80021c6:	b088      	sub	sp, #32
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80021cc:	2300      	movs	r3, #0
 80021ce:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	431a      	orrs	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	4baf      	ldr	r3, [pc, #700]	; (80024ac <UART_SetConfig+0x2e8>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6812      	ldr	r2, [r2, #0]
 80021f6:	69f9      	ldr	r1, [r7, #28]
 80021f8:	430b      	orrs	r3, r1
 80021fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4aa4      	ldr	r2, [pc, #656]	; (80024b0 <UART_SetConfig+0x2ec>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d004      	beq.n	800222c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	69fa      	ldr	r2, [r7, #28]
 8002228:	4313      	orrs	r3, r2
 800222a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002236:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6812      	ldr	r2, [r2, #0]
 800223e:	69f9      	ldr	r1, [r7, #28]
 8002240:	430b      	orrs	r3, r1
 8002242:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224a:	f023 010f 	bic.w	r1, r3, #15
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a95      	ldr	r2, [pc, #596]	; (80024b4 <UART_SetConfig+0x2f0>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d120      	bne.n	80022a6 <UART_SetConfig+0xe2>
 8002264:	4b94      	ldr	r3, [pc, #592]	; (80024b8 <UART_SetConfig+0x2f4>)
 8002266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	2b03      	cmp	r3, #3
 8002270:	d816      	bhi.n	80022a0 <UART_SetConfig+0xdc>
 8002272:	a201      	add	r2, pc, #4	; (adr r2, 8002278 <UART_SetConfig+0xb4>)
 8002274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002278:	08002289 	.word	0x08002289
 800227c:	08002295 	.word	0x08002295
 8002280:	0800228f 	.word	0x0800228f
 8002284:	0800229b 	.word	0x0800229b
 8002288:	2301      	movs	r3, #1
 800228a:	76fb      	strb	r3, [r7, #27]
 800228c:	e0bc      	b.n	8002408 <UART_SetConfig+0x244>
 800228e:	2302      	movs	r3, #2
 8002290:	76fb      	strb	r3, [r7, #27]
 8002292:	e0b9      	b.n	8002408 <UART_SetConfig+0x244>
 8002294:	2304      	movs	r3, #4
 8002296:	76fb      	strb	r3, [r7, #27]
 8002298:	e0b6      	b.n	8002408 <UART_SetConfig+0x244>
 800229a:	2308      	movs	r3, #8
 800229c:	76fb      	strb	r3, [r7, #27]
 800229e:	e0b3      	b.n	8002408 <UART_SetConfig+0x244>
 80022a0:	2310      	movs	r3, #16
 80022a2:	76fb      	strb	r3, [r7, #27]
 80022a4:	e0b0      	b.n	8002408 <UART_SetConfig+0x244>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a84      	ldr	r2, [pc, #528]	; (80024bc <UART_SetConfig+0x2f8>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d132      	bne.n	8002316 <UART_SetConfig+0x152>
 80022b0:	4b81      	ldr	r3, [pc, #516]	; (80024b8 <UART_SetConfig+0x2f4>)
 80022b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b6:	f003 030c 	and.w	r3, r3, #12
 80022ba:	2b0c      	cmp	r3, #12
 80022bc:	d828      	bhi.n	8002310 <UART_SetConfig+0x14c>
 80022be:	a201      	add	r2, pc, #4	; (adr r2, 80022c4 <UART_SetConfig+0x100>)
 80022c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c4:	080022f9 	.word	0x080022f9
 80022c8:	08002311 	.word	0x08002311
 80022cc:	08002311 	.word	0x08002311
 80022d0:	08002311 	.word	0x08002311
 80022d4:	08002305 	.word	0x08002305
 80022d8:	08002311 	.word	0x08002311
 80022dc:	08002311 	.word	0x08002311
 80022e0:	08002311 	.word	0x08002311
 80022e4:	080022ff 	.word	0x080022ff
 80022e8:	08002311 	.word	0x08002311
 80022ec:	08002311 	.word	0x08002311
 80022f0:	08002311 	.word	0x08002311
 80022f4:	0800230b 	.word	0x0800230b
 80022f8:	2300      	movs	r3, #0
 80022fa:	76fb      	strb	r3, [r7, #27]
 80022fc:	e084      	b.n	8002408 <UART_SetConfig+0x244>
 80022fe:	2302      	movs	r3, #2
 8002300:	76fb      	strb	r3, [r7, #27]
 8002302:	e081      	b.n	8002408 <UART_SetConfig+0x244>
 8002304:	2304      	movs	r3, #4
 8002306:	76fb      	strb	r3, [r7, #27]
 8002308:	e07e      	b.n	8002408 <UART_SetConfig+0x244>
 800230a:	2308      	movs	r3, #8
 800230c:	76fb      	strb	r3, [r7, #27]
 800230e:	e07b      	b.n	8002408 <UART_SetConfig+0x244>
 8002310:	2310      	movs	r3, #16
 8002312:	76fb      	strb	r3, [r7, #27]
 8002314:	e078      	b.n	8002408 <UART_SetConfig+0x244>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a69      	ldr	r2, [pc, #420]	; (80024c0 <UART_SetConfig+0x2fc>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d120      	bne.n	8002362 <UART_SetConfig+0x19e>
 8002320:	4b65      	ldr	r3, [pc, #404]	; (80024b8 <UART_SetConfig+0x2f4>)
 8002322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002326:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800232a:	2b30      	cmp	r3, #48	; 0x30
 800232c:	d013      	beq.n	8002356 <UART_SetConfig+0x192>
 800232e:	2b30      	cmp	r3, #48	; 0x30
 8002330:	d814      	bhi.n	800235c <UART_SetConfig+0x198>
 8002332:	2b20      	cmp	r3, #32
 8002334:	d009      	beq.n	800234a <UART_SetConfig+0x186>
 8002336:	2b20      	cmp	r3, #32
 8002338:	d810      	bhi.n	800235c <UART_SetConfig+0x198>
 800233a:	2b00      	cmp	r3, #0
 800233c:	d002      	beq.n	8002344 <UART_SetConfig+0x180>
 800233e:	2b10      	cmp	r3, #16
 8002340:	d006      	beq.n	8002350 <UART_SetConfig+0x18c>
 8002342:	e00b      	b.n	800235c <UART_SetConfig+0x198>
 8002344:	2300      	movs	r3, #0
 8002346:	76fb      	strb	r3, [r7, #27]
 8002348:	e05e      	b.n	8002408 <UART_SetConfig+0x244>
 800234a:	2302      	movs	r3, #2
 800234c:	76fb      	strb	r3, [r7, #27]
 800234e:	e05b      	b.n	8002408 <UART_SetConfig+0x244>
 8002350:	2304      	movs	r3, #4
 8002352:	76fb      	strb	r3, [r7, #27]
 8002354:	e058      	b.n	8002408 <UART_SetConfig+0x244>
 8002356:	2308      	movs	r3, #8
 8002358:	76fb      	strb	r3, [r7, #27]
 800235a:	e055      	b.n	8002408 <UART_SetConfig+0x244>
 800235c:	2310      	movs	r3, #16
 800235e:	76fb      	strb	r3, [r7, #27]
 8002360:	e052      	b.n	8002408 <UART_SetConfig+0x244>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a57      	ldr	r2, [pc, #348]	; (80024c4 <UART_SetConfig+0x300>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d120      	bne.n	80023ae <UART_SetConfig+0x1ea>
 800236c:	4b52      	ldr	r3, [pc, #328]	; (80024b8 <UART_SetConfig+0x2f4>)
 800236e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002372:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002376:	2bc0      	cmp	r3, #192	; 0xc0
 8002378:	d013      	beq.n	80023a2 <UART_SetConfig+0x1de>
 800237a:	2bc0      	cmp	r3, #192	; 0xc0
 800237c:	d814      	bhi.n	80023a8 <UART_SetConfig+0x1e4>
 800237e:	2b80      	cmp	r3, #128	; 0x80
 8002380:	d009      	beq.n	8002396 <UART_SetConfig+0x1d2>
 8002382:	2b80      	cmp	r3, #128	; 0x80
 8002384:	d810      	bhi.n	80023a8 <UART_SetConfig+0x1e4>
 8002386:	2b00      	cmp	r3, #0
 8002388:	d002      	beq.n	8002390 <UART_SetConfig+0x1cc>
 800238a:	2b40      	cmp	r3, #64	; 0x40
 800238c:	d006      	beq.n	800239c <UART_SetConfig+0x1d8>
 800238e:	e00b      	b.n	80023a8 <UART_SetConfig+0x1e4>
 8002390:	2300      	movs	r3, #0
 8002392:	76fb      	strb	r3, [r7, #27]
 8002394:	e038      	b.n	8002408 <UART_SetConfig+0x244>
 8002396:	2302      	movs	r3, #2
 8002398:	76fb      	strb	r3, [r7, #27]
 800239a:	e035      	b.n	8002408 <UART_SetConfig+0x244>
 800239c:	2304      	movs	r3, #4
 800239e:	76fb      	strb	r3, [r7, #27]
 80023a0:	e032      	b.n	8002408 <UART_SetConfig+0x244>
 80023a2:	2308      	movs	r3, #8
 80023a4:	76fb      	strb	r3, [r7, #27]
 80023a6:	e02f      	b.n	8002408 <UART_SetConfig+0x244>
 80023a8:	2310      	movs	r3, #16
 80023aa:	76fb      	strb	r3, [r7, #27]
 80023ac:	e02c      	b.n	8002408 <UART_SetConfig+0x244>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a3f      	ldr	r2, [pc, #252]	; (80024b0 <UART_SetConfig+0x2ec>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d125      	bne.n	8002404 <UART_SetConfig+0x240>
 80023b8:	4b3f      	ldr	r3, [pc, #252]	; (80024b8 <UART_SetConfig+0x2f4>)
 80023ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023be:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80023c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80023c6:	d017      	beq.n	80023f8 <UART_SetConfig+0x234>
 80023c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80023cc:	d817      	bhi.n	80023fe <UART_SetConfig+0x23a>
 80023ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023d2:	d00b      	beq.n	80023ec <UART_SetConfig+0x228>
 80023d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023d8:	d811      	bhi.n	80023fe <UART_SetConfig+0x23a>
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <UART_SetConfig+0x222>
 80023de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023e2:	d006      	beq.n	80023f2 <UART_SetConfig+0x22e>
 80023e4:	e00b      	b.n	80023fe <UART_SetConfig+0x23a>
 80023e6:	2300      	movs	r3, #0
 80023e8:	76fb      	strb	r3, [r7, #27]
 80023ea:	e00d      	b.n	8002408 <UART_SetConfig+0x244>
 80023ec:	2302      	movs	r3, #2
 80023ee:	76fb      	strb	r3, [r7, #27]
 80023f0:	e00a      	b.n	8002408 <UART_SetConfig+0x244>
 80023f2:	2304      	movs	r3, #4
 80023f4:	76fb      	strb	r3, [r7, #27]
 80023f6:	e007      	b.n	8002408 <UART_SetConfig+0x244>
 80023f8:	2308      	movs	r3, #8
 80023fa:	76fb      	strb	r3, [r7, #27]
 80023fc:	e004      	b.n	8002408 <UART_SetConfig+0x244>
 80023fe:	2310      	movs	r3, #16
 8002400:	76fb      	strb	r3, [r7, #27]
 8002402:	e001      	b.n	8002408 <UART_SetConfig+0x244>
 8002404:	2310      	movs	r3, #16
 8002406:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a28      	ldr	r2, [pc, #160]	; (80024b0 <UART_SetConfig+0x2ec>)
 800240e:	4293      	cmp	r3, r2
 8002410:	f040 809e 	bne.w	8002550 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002414:	7efb      	ldrb	r3, [r7, #27]
 8002416:	2b08      	cmp	r3, #8
 8002418:	d823      	bhi.n	8002462 <UART_SetConfig+0x29e>
 800241a:	a201      	add	r2, pc, #4	; (adr r2, 8002420 <UART_SetConfig+0x25c>)
 800241c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002420:	08002445 	.word	0x08002445
 8002424:	08002463 	.word	0x08002463
 8002428:	0800244d 	.word	0x0800244d
 800242c:	08002463 	.word	0x08002463
 8002430:	08002453 	.word	0x08002453
 8002434:	08002463 	.word	0x08002463
 8002438:	08002463 	.word	0x08002463
 800243c:	08002463 	.word	0x08002463
 8002440:	0800245b 	.word	0x0800245b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002444:	f7ff fb76 	bl	8001b34 <HAL_RCC_GetPCLK1Freq>
 8002448:	6178      	str	r0, [r7, #20]
        break;
 800244a:	e00f      	b.n	800246c <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800244c:	4b1e      	ldr	r3, [pc, #120]	; (80024c8 <UART_SetConfig+0x304>)
 800244e:	617b      	str	r3, [r7, #20]
        break;
 8002450:	e00c      	b.n	800246c <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002452:	f7ff fb01 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 8002456:	6178      	str	r0, [r7, #20]
        break;
 8002458:	e008      	b.n	800246c <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800245a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800245e:	617b      	str	r3, [r7, #20]
        break;
 8002460:	e004      	b.n	800246c <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	76bb      	strb	r3, [r7, #26]
        break;
 800246a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 812e 	beq.w	80026d0 <UART_SetConfig+0x50c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	4a14      	ldr	r2, [pc, #80]	; (80024cc <UART_SetConfig+0x308>)
 800247a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800247e:	461a      	mov	r2, r3
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	fbb3 f3f2 	udiv	r3, r3, r2
 8002486:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	4413      	add	r3, r2
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	429a      	cmp	r2, r3
 8002496:	d305      	bcc.n	80024a4 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d915      	bls.n	80024d0 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	76bb      	strb	r3, [r7, #26]
 80024a8:	e112      	b.n	80026d0 <UART_SetConfig+0x50c>
 80024aa:	bf00      	nop
 80024ac:	cfff69f3 	.word	0xcfff69f3
 80024b0:	40008000 	.word	0x40008000
 80024b4:	40013800 	.word	0x40013800
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40004400 	.word	0x40004400
 80024c0:	40004800 	.word	0x40004800
 80024c4:	40004c00 	.word	0x40004c00
 80024c8:	00f42400 	.word	0x00f42400
 80024cc:	08003608 	.word	0x08003608
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f04f 0100 	mov.w	r1, #0
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	4a86      	ldr	r2, [pc, #536]	; (80026f8 <UART_SetConfig+0x534>)
 80024de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	f04f 0300 	mov.w	r3, #0
 80024e8:	f7fd fe96 	bl	8000218 <__aeabi_uldivmod>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4610      	mov	r0, r2
 80024f2:	4619      	mov	r1, r3
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	f04f 0300 	mov.w	r3, #0
 80024fc:	020b      	lsls	r3, r1, #8
 80024fe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002502:	0202      	lsls	r2, r0, #8
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	6849      	ldr	r1, [r1, #4]
 8002508:	0849      	lsrs	r1, r1, #1
 800250a:	4608      	mov	r0, r1
 800250c:	f04f 0100 	mov.w	r1, #0
 8002510:	1814      	adds	r4, r2, r0
 8002512:	eb43 0501 	adc.w	r5, r3, r1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	461a      	mov	r2, r3
 800251c:	f04f 0300 	mov.w	r3, #0
 8002520:	4620      	mov	r0, r4
 8002522:	4629      	mov	r1, r5
 8002524:	f7fd fe78 	bl	8000218 <__aeabi_uldivmod>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4613      	mov	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002536:	d308      	bcc.n	800254a <UART_SetConfig+0x386>
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800253e:	d204      	bcs.n	800254a <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	60da      	str	r2, [r3, #12]
 8002548:	e0c2      	b.n	80026d0 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	76bb      	strb	r3, [r7, #26]
 800254e:	e0bf      	b.n	80026d0 <UART_SetConfig+0x50c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002558:	d165      	bne.n	8002626 <UART_SetConfig+0x462>
  {
    switch (clocksource)
 800255a:	7efb      	ldrb	r3, [r7, #27]
 800255c:	2b08      	cmp	r3, #8
 800255e:	d828      	bhi.n	80025b2 <UART_SetConfig+0x3ee>
 8002560:	a201      	add	r2, pc, #4	; (adr r2, 8002568 <UART_SetConfig+0x3a4>)
 8002562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002566:	bf00      	nop
 8002568:	0800258d 	.word	0x0800258d
 800256c:	08002595 	.word	0x08002595
 8002570:	0800259d 	.word	0x0800259d
 8002574:	080025b3 	.word	0x080025b3
 8002578:	080025a3 	.word	0x080025a3
 800257c:	080025b3 	.word	0x080025b3
 8002580:	080025b3 	.word	0x080025b3
 8002584:	080025b3 	.word	0x080025b3
 8002588:	080025ab 	.word	0x080025ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800258c:	f7ff fad2 	bl	8001b34 <HAL_RCC_GetPCLK1Freq>
 8002590:	6178      	str	r0, [r7, #20]
        break;
 8002592:	e013      	b.n	80025bc <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002594:	f7ff fae4 	bl	8001b60 <HAL_RCC_GetPCLK2Freq>
 8002598:	6178      	str	r0, [r7, #20]
        break;
 800259a:	e00f      	b.n	80025bc <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800259c:	4b57      	ldr	r3, [pc, #348]	; (80026fc <UART_SetConfig+0x538>)
 800259e:	617b      	str	r3, [r7, #20]
        break;
 80025a0:	e00c      	b.n	80025bc <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025a2:	f7ff fa59 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 80025a6:	6178      	str	r0, [r7, #20]
        break;
 80025a8:	e008      	b.n	80025bc <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025ae:	617b      	str	r3, [r7, #20]
        break;
 80025b0:	e004      	b.n	80025bc <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	76bb      	strb	r3, [r7, #26]
        break;
 80025ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 8086 	beq.w	80026d0 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	4a4b      	ldr	r2, [pc, #300]	; (80026f8 <UART_SetConfig+0x534>)
 80025ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025ce:	461a      	mov	r2, r3
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80025d6:	005a      	lsls	r2, r3, #1
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	085b      	lsrs	r3, r3, #1
 80025de:	441a      	add	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	2b0f      	cmp	r3, #15
 80025f0:	d916      	bls.n	8002620 <UART_SetConfig+0x45c>
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f8:	d212      	bcs.n	8002620 <UART_SetConfig+0x45c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	f023 030f 	bic.w	r3, r3, #15
 8002602:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	085b      	lsrs	r3, r3, #1
 8002608:	b29b      	uxth	r3, r3
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	b29a      	uxth	r2, r3
 8002610:	89fb      	ldrh	r3, [r7, #14]
 8002612:	4313      	orrs	r3, r2
 8002614:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	89fa      	ldrh	r2, [r7, #14]
 800261c:	60da      	str	r2, [r3, #12]
 800261e:	e057      	b.n	80026d0 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	76bb      	strb	r3, [r7, #26]
 8002624:	e054      	b.n	80026d0 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002626:	7efb      	ldrb	r3, [r7, #27]
 8002628:	2b08      	cmp	r3, #8
 800262a:	d828      	bhi.n	800267e <UART_SetConfig+0x4ba>
 800262c:	a201      	add	r2, pc, #4	; (adr r2, 8002634 <UART_SetConfig+0x470>)
 800262e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002632:	bf00      	nop
 8002634:	08002659 	.word	0x08002659
 8002638:	08002661 	.word	0x08002661
 800263c:	08002669 	.word	0x08002669
 8002640:	0800267f 	.word	0x0800267f
 8002644:	0800266f 	.word	0x0800266f
 8002648:	0800267f 	.word	0x0800267f
 800264c:	0800267f 	.word	0x0800267f
 8002650:	0800267f 	.word	0x0800267f
 8002654:	08002677 	.word	0x08002677
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002658:	f7ff fa6c 	bl	8001b34 <HAL_RCC_GetPCLK1Freq>
 800265c:	6178      	str	r0, [r7, #20]
        break;
 800265e:	e013      	b.n	8002688 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002660:	f7ff fa7e 	bl	8001b60 <HAL_RCC_GetPCLK2Freq>
 8002664:	6178      	str	r0, [r7, #20]
        break;
 8002666:	e00f      	b.n	8002688 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002668:	4b24      	ldr	r3, [pc, #144]	; (80026fc <UART_SetConfig+0x538>)
 800266a:	617b      	str	r3, [r7, #20]
        break;
 800266c:	e00c      	b.n	8002688 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800266e:	f7ff f9f3 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 8002672:	6178      	str	r0, [r7, #20]
        break;
 8002674:	e008      	b.n	8002688 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800267a:	617b      	str	r3, [r7, #20]
        break;
 800267c:	e004      	b.n	8002688 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	76bb      	strb	r3, [r7, #26]
        break;
 8002686:	bf00      	nop
    }

    if (pclk != 0U)
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d020      	beq.n	80026d0 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	4a19      	ldr	r2, [pc, #100]	; (80026f8 <UART_SetConfig+0x534>)
 8002694:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002698:	461a      	mov	r2, r3
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	fbb3 f2f2 	udiv	r2, r3, r2
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	085b      	lsrs	r3, r3, #1
 80026a6:	441a      	add	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	2b0f      	cmp	r3, #15
 80026b8:	d908      	bls.n	80026cc <UART_SetConfig+0x508>
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c0:	d204      	bcs.n	80026cc <UART_SetConfig+0x508>
      {
        huart->Instance->BRR = usartdiv;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	e001      	b.n	80026d0 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80026ec:	7ebb      	ldrb	r3, [r7, #26]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3720      	adds	r7, #32
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bdb0      	pop	{r4, r5, r7, pc}
 80026f6:	bf00      	nop
 80026f8:	08003608 	.word	0x08003608
 80026fc:	00f42400 	.word	0x00f42400

08002700 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00a      	beq.n	800272a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	430a      	orrs	r2, r1
 8002728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00a      	beq.n	800274c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00a      	beq.n	800276e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00a      	beq.n	8002790 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002794:	f003 0310 	and.w	r3, r3, #16
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00a      	beq.n	80027b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b6:	f003 0320 	and.w	r3, r3, #32
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00a      	beq.n	80027d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d01a      	beq.n	8002816 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027fe:	d10a      	bne.n	8002816 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00a      	beq.n	8002838 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	605a      	str	r2, [r3, #4]
  }
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af02      	add	r7, sp, #8
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002854:	f7fe f96e 	bl	8000b34 <HAL_GetTick>
 8002858:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b08      	cmp	r3, #8
 8002866:	d10e      	bne.n	8002886 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002868:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f82f 	bl	80028da <UART_WaitOnFlagUntilTimeout>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e025      	b.n	80028d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b04      	cmp	r3, #4
 8002892:	d10e      	bne.n	80028b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002894:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f819 	bl	80028da <UART_WaitOnFlagUntilTimeout>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e00f      	b.n	80028d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2220      	movs	r2, #32
 80028b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2220      	movs	r2, #32
 80028be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b084      	sub	sp, #16
 80028de:	af00      	add	r7, sp, #0
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	603b      	str	r3, [r7, #0]
 80028e6:	4613      	mov	r3, r2
 80028e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028ea:	e062      	b.n	80029b2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f2:	d05e      	beq.n	80029b2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028f4:	f7fe f91e 	bl	8000b34 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	429a      	cmp	r2, r3
 8002902:	d302      	bcc.n	800290a <UART_WaitOnFlagUntilTimeout+0x30>
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d11d      	bne.n	8002946 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002918:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 0201 	bic.w	r2, r2, #1
 8002928:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2220      	movs	r2, #32
 800292e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2220      	movs	r2, #32
 8002936:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e045      	b.n	80029d2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d02e      	beq.n	80029b2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800295e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002962:	d126      	bne.n	80029b2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800296c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800297c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0201 	bic.w	r2, r2, #1
 800298c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2220      	movs	r2, #32
 8002992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2220      	movs	r2, #32
 800299a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2220      	movs	r2, #32
 80029a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e00f      	b.n	80029d2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	69da      	ldr	r2, [r3, #28]
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	4013      	ands	r3, r2
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	429a      	cmp	r2, r3
 80029c0:	bf0c      	ite	eq
 80029c2:	2301      	moveq	r3, #1
 80029c4:	2300      	movne	r3, #0
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	461a      	mov	r2, r3
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d08d      	beq.n	80028ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80029da:	b480      	push	{r7}
 80029dc:	b085      	sub	sp, #20
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_UARTEx_DisableFifoMode+0x16>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e027      	b.n	8002a40 <HAL_UARTEx_DisableFifoMode+0x66>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2224      	movs	r2, #36	; 0x24
 80029fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0201 	bic.w	r2, r2, #1
 8002a16:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002a1e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2220      	movs	r2, #32
 8002a32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d101      	bne.n	8002a64 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002a60:	2302      	movs	r3, #2
 8002a62:	e02d      	b.n	8002ac0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2224      	movs	r2, #36	; 0x24
 8002a70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0201 	bic.w	r2, r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 f84f 	bl	8002b44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e02d      	b.n	8002b3c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2224      	movs	r2, #36	; 0x24
 8002aec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0201 	bic.w	r2, r2, #1
 8002b06:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f811 	bl	8002b44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d108      	bne.n	8002b66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002b64:	e031      	b.n	8002bca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002b66:	2308      	movs	r3, #8
 8002b68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002b6a:	2308      	movs	r3, #8
 8002b6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	0e5b      	lsrs	r3, r3, #25
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	0f5b      	lsrs	r3, r3, #29
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002b8e:	7bbb      	ldrb	r3, [r7, #14]
 8002b90:	7b3a      	ldrb	r2, [r7, #12]
 8002b92:	4911      	ldr	r1, [pc, #68]	; (8002bd8 <UARTEx_SetNbDataToProcess+0x94>)
 8002b94:	5c8a      	ldrb	r2, [r1, r2]
 8002b96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002b9a:	7b3a      	ldrb	r2, [r7, #12]
 8002b9c:	490f      	ldr	r1, [pc, #60]	; (8002bdc <UARTEx_SetNbDataToProcess+0x98>)
 8002b9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002ba0:	fb93 f3f2 	sdiv	r3, r3, r2
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
 8002bae:	7b7a      	ldrb	r2, [r7, #13]
 8002bb0:	4909      	ldr	r1, [pc, #36]	; (8002bd8 <UARTEx_SetNbDataToProcess+0x94>)
 8002bb2:	5c8a      	ldrb	r2, [r1, r2]
 8002bb4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002bb8:	7b7a      	ldrb	r2, [r7, #13]
 8002bba:	4908      	ldr	r1, [pc, #32]	; (8002bdc <UARTEx_SetNbDataToProcess+0x98>)
 8002bbc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002bbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8002bca:	bf00      	nop
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	08003620 	.word	0x08003620
 8002bdc:	08003628 	.word	0x08003628

08002be0 <__errno>:
 8002be0:	4b01      	ldr	r3, [pc, #4]	; (8002be8 <__errno+0x8>)
 8002be2:	6818      	ldr	r0, [r3, #0]
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	2000000c 	.word	0x2000000c

08002bec <__libc_init_array>:
 8002bec:	b570      	push	{r4, r5, r6, lr}
 8002bee:	4d0d      	ldr	r5, [pc, #52]	; (8002c24 <__libc_init_array+0x38>)
 8002bf0:	4c0d      	ldr	r4, [pc, #52]	; (8002c28 <__libc_init_array+0x3c>)
 8002bf2:	1b64      	subs	r4, r4, r5
 8002bf4:	10a4      	asrs	r4, r4, #2
 8002bf6:	2600      	movs	r6, #0
 8002bf8:	42a6      	cmp	r6, r4
 8002bfa:	d109      	bne.n	8002c10 <__libc_init_array+0x24>
 8002bfc:	4d0b      	ldr	r5, [pc, #44]	; (8002c2c <__libc_init_array+0x40>)
 8002bfe:	4c0c      	ldr	r4, [pc, #48]	; (8002c30 <__libc_init_array+0x44>)
 8002c00:	f000 fce6 	bl	80035d0 <_init>
 8002c04:	1b64      	subs	r4, r4, r5
 8002c06:	10a4      	asrs	r4, r4, #2
 8002c08:	2600      	movs	r6, #0
 8002c0a:	42a6      	cmp	r6, r4
 8002c0c:	d105      	bne.n	8002c1a <__libc_init_array+0x2e>
 8002c0e:	bd70      	pop	{r4, r5, r6, pc}
 8002c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c14:	4798      	blx	r3
 8002c16:	3601      	adds	r6, #1
 8002c18:	e7ee      	b.n	8002bf8 <__libc_init_array+0xc>
 8002c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c1e:	4798      	blx	r3
 8002c20:	3601      	adds	r6, #1
 8002c22:	e7f2      	b.n	8002c0a <__libc_init_array+0x1e>
 8002c24:	0800369c 	.word	0x0800369c
 8002c28:	0800369c 	.word	0x0800369c
 8002c2c:	0800369c 	.word	0x0800369c
 8002c30:	080036a0 	.word	0x080036a0

08002c34 <memset>:
 8002c34:	4402      	add	r2, r0
 8002c36:	4603      	mov	r3, r0
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d100      	bne.n	8002c3e <memset+0xa>
 8002c3c:	4770      	bx	lr
 8002c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c42:	e7f9      	b.n	8002c38 <memset+0x4>

08002c44 <_puts_r>:
 8002c44:	b570      	push	{r4, r5, r6, lr}
 8002c46:	460e      	mov	r6, r1
 8002c48:	4605      	mov	r5, r0
 8002c4a:	b118      	cbz	r0, 8002c54 <_puts_r+0x10>
 8002c4c:	6983      	ldr	r3, [r0, #24]
 8002c4e:	b90b      	cbnz	r3, 8002c54 <_puts_r+0x10>
 8002c50:	f000 fa48 	bl	80030e4 <__sinit>
 8002c54:	69ab      	ldr	r3, [r5, #24]
 8002c56:	68ac      	ldr	r4, [r5, #8]
 8002c58:	b913      	cbnz	r3, 8002c60 <_puts_r+0x1c>
 8002c5a:	4628      	mov	r0, r5
 8002c5c:	f000 fa42 	bl	80030e4 <__sinit>
 8002c60:	4b2c      	ldr	r3, [pc, #176]	; (8002d14 <_puts_r+0xd0>)
 8002c62:	429c      	cmp	r4, r3
 8002c64:	d120      	bne.n	8002ca8 <_puts_r+0x64>
 8002c66:	686c      	ldr	r4, [r5, #4]
 8002c68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c6a:	07db      	lsls	r3, r3, #31
 8002c6c:	d405      	bmi.n	8002c7a <_puts_r+0x36>
 8002c6e:	89a3      	ldrh	r3, [r4, #12]
 8002c70:	0598      	lsls	r0, r3, #22
 8002c72:	d402      	bmi.n	8002c7a <_puts_r+0x36>
 8002c74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c76:	f000 fad3 	bl	8003220 <__retarget_lock_acquire_recursive>
 8002c7a:	89a3      	ldrh	r3, [r4, #12]
 8002c7c:	0719      	lsls	r1, r3, #28
 8002c7e:	d51d      	bpl.n	8002cbc <_puts_r+0x78>
 8002c80:	6923      	ldr	r3, [r4, #16]
 8002c82:	b1db      	cbz	r3, 8002cbc <_puts_r+0x78>
 8002c84:	3e01      	subs	r6, #1
 8002c86:	68a3      	ldr	r3, [r4, #8]
 8002c88:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	60a3      	str	r3, [r4, #8]
 8002c90:	bb39      	cbnz	r1, 8002ce2 <_puts_r+0x9e>
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	da38      	bge.n	8002d08 <_puts_r+0xc4>
 8002c96:	4622      	mov	r2, r4
 8002c98:	210a      	movs	r1, #10
 8002c9a:	4628      	mov	r0, r5
 8002c9c:	f000 f848 	bl	8002d30 <__swbuf_r>
 8002ca0:	3001      	adds	r0, #1
 8002ca2:	d011      	beq.n	8002cc8 <_puts_r+0x84>
 8002ca4:	250a      	movs	r5, #10
 8002ca6:	e011      	b.n	8002ccc <_puts_r+0x88>
 8002ca8:	4b1b      	ldr	r3, [pc, #108]	; (8002d18 <_puts_r+0xd4>)
 8002caa:	429c      	cmp	r4, r3
 8002cac:	d101      	bne.n	8002cb2 <_puts_r+0x6e>
 8002cae:	68ac      	ldr	r4, [r5, #8]
 8002cb0:	e7da      	b.n	8002c68 <_puts_r+0x24>
 8002cb2:	4b1a      	ldr	r3, [pc, #104]	; (8002d1c <_puts_r+0xd8>)
 8002cb4:	429c      	cmp	r4, r3
 8002cb6:	bf08      	it	eq
 8002cb8:	68ec      	ldreq	r4, [r5, #12]
 8002cba:	e7d5      	b.n	8002c68 <_puts_r+0x24>
 8002cbc:	4621      	mov	r1, r4
 8002cbe:	4628      	mov	r0, r5
 8002cc0:	f000 f888 	bl	8002dd4 <__swsetup_r>
 8002cc4:	2800      	cmp	r0, #0
 8002cc6:	d0dd      	beq.n	8002c84 <_puts_r+0x40>
 8002cc8:	f04f 35ff 	mov.w	r5, #4294967295
 8002ccc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002cce:	07da      	lsls	r2, r3, #31
 8002cd0:	d405      	bmi.n	8002cde <_puts_r+0x9a>
 8002cd2:	89a3      	ldrh	r3, [r4, #12]
 8002cd4:	059b      	lsls	r3, r3, #22
 8002cd6:	d402      	bmi.n	8002cde <_puts_r+0x9a>
 8002cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002cda:	f000 faa2 	bl	8003222 <__retarget_lock_release_recursive>
 8002cde:	4628      	mov	r0, r5
 8002ce0:	bd70      	pop	{r4, r5, r6, pc}
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	da04      	bge.n	8002cf0 <_puts_r+0xac>
 8002ce6:	69a2      	ldr	r2, [r4, #24]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	dc06      	bgt.n	8002cfa <_puts_r+0xb6>
 8002cec:	290a      	cmp	r1, #10
 8002cee:	d004      	beq.n	8002cfa <_puts_r+0xb6>
 8002cf0:	6823      	ldr	r3, [r4, #0]
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	6022      	str	r2, [r4, #0]
 8002cf6:	7019      	strb	r1, [r3, #0]
 8002cf8:	e7c5      	b.n	8002c86 <_puts_r+0x42>
 8002cfa:	4622      	mov	r2, r4
 8002cfc:	4628      	mov	r0, r5
 8002cfe:	f000 f817 	bl	8002d30 <__swbuf_r>
 8002d02:	3001      	adds	r0, #1
 8002d04:	d1bf      	bne.n	8002c86 <_puts_r+0x42>
 8002d06:	e7df      	b.n	8002cc8 <_puts_r+0x84>
 8002d08:	6823      	ldr	r3, [r4, #0]
 8002d0a:	250a      	movs	r5, #10
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	6022      	str	r2, [r4, #0]
 8002d10:	701d      	strb	r5, [r3, #0]
 8002d12:	e7db      	b.n	8002ccc <_puts_r+0x88>
 8002d14:	08003654 	.word	0x08003654
 8002d18:	08003674 	.word	0x08003674
 8002d1c:	08003634 	.word	0x08003634

08002d20 <puts>:
 8002d20:	4b02      	ldr	r3, [pc, #8]	; (8002d2c <puts+0xc>)
 8002d22:	4601      	mov	r1, r0
 8002d24:	6818      	ldr	r0, [r3, #0]
 8002d26:	f7ff bf8d 	b.w	8002c44 <_puts_r>
 8002d2a:	bf00      	nop
 8002d2c:	2000000c 	.word	0x2000000c

08002d30 <__swbuf_r>:
 8002d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d32:	460e      	mov	r6, r1
 8002d34:	4614      	mov	r4, r2
 8002d36:	4605      	mov	r5, r0
 8002d38:	b118      	cbz	r0, 8002d42 <__swbuf_r+0x12>
 8002d3a:	6983      	ldr	r3, [r0, #24]
 8002d3c:	b90b      	cbnz	r3, 8002d42 <__swbuf_r+0x12>
 8002d3e:	f000 f9d1 	bl	80030e4 <__sinit>
 8002d42:	4b21      	ldr	r3, [pc, #132]	; (8002dc8 <__swbuf_r+0x98>)
 8002d44:	429c      	cmp	r4, r3
 8002d46:	d12b      	bne.n	8002da0 <__swbuf_r+0x70>
 8002d48:	686c      	ldr	r4, [r5, #4]
 8002d4a:	69a3      	ldr	r3, [r4, #24]
 8002d4c:	60a3      	str	r3, [r4, #8]
 8002d4e:	89a3      	ldrh	r3, [r4, #12]
 8002d50:	071a      	lsls	r2, r3, #28
 8002d52:	d52f      	bpl.n	8002db4 <__swbuf_r+0x84>
 8002d54:	6923      	ldr	r3, [r4, #16]
 8002d56:	b36b      	cbz	r3, 8002db4 <__swbuf_r+0x84>
 8002d58:	6923      	ldr	r3, [r4, #16]
 8002d5a:	6820      	ldr	r0, [r4, #0]
 8002d5c:	1ac0      	subs	r0, r0, r3
 8002d5e:	6963      	ldr	r3, [r4, #20]
 8002d60:	b2f6      	uxtb	r6, r6
 8002d62:	4283      	cmp	r3, r0
 8002d64:	4637      	mov	r7, r6
 8002d66:	dc04      	bgt.n	8002d72 <__swbuf_r+0x42>
 8002d68:	4621      	mov	r1, r4
 8002d6a:	4628      	mov	r0, r5
 8002d6c:	f000 f926 	bl	8002fbc <_fflush_r>
 8002d70:	bb30      	cbnz	r0, 8002dc0 <__swbuf_r+0x90>
 8002d72:	68a3      	ldr	r3, [r4, #8]
 8002d74:	3b01      	subs	r3, #1
 8002d76:	60a3      	str	r3, [r4, #8]
 8002d78:	6823      	ldr	r3, [r4, #0]
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	6022      	str	r2, [r4, #0]
 8002d7e:	701e      	strb	r6, [r3, #0]
 8002d80:	6963      	ldr	r3, [r4, #20]
 8002d82:	3001      	adds	r0, #1
 8002d84:	4283      	cmp	r3, r0
 8002d86:	d004      	beq.n	8002d92 <__swbuf_r+0x62>
 8002d88:	89a3      	ldrh	r3, [r4, #12]
 8002d8a:	07db      	lsls	r3, r3, #31
 8002d8c:	d506      	bpl.n	8002d9c <__swbuf_r+0x6c>
 8002d8e:	2e0a      	cmp	r6, #10
 8002d90:	d104      	bne.n	8002d9c <__swbuf_r+0x6c>
 8002d92:	4621      	mov	r1, r4
 8002d94:	4628      	mov	r0, r5
 8002d96:	f000 f911 	bl	8002fbc <_fflush_r>
 8002d9a:	b988      	cbnz	r0, 8002dc0 <__swbuf_r+0x90>
 8002d9c:	4638      	mov	r0, r7
 8002d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002da0:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <__swbuf_r+0x9c>)
 8002da2:	429c      	cmp	r4, r3
 8002da4:	d101      	bne.n	8002daa <__swbuf_r+0x7a>
 8002da6:	68ac      	ldr	r4, [r5, #8]
 8002da8:	e7cf      	b.n	8002d4a <__swbuf_r+0x1a>
 8002daa:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <__swbuf_r+0xa0>)
 8002dac:	429c      	cmp	r4, r3
 8002dae:	bf08      	it	eq
 8002db0:	68ec      	ldreq	r4, [r5, #12]
 8002db2:	e7ca      	b.n	8002d4a <__swbuf_r+0x1a>
 8002db4:	4621      	mov	r1, r4
 8002db6:	4628      	mov	r0, r5
 8002db8:	f000 f80c 	bl	8002dd4 <__swsetup_r>
 8002dbc:	2800      	cmp	r0, #0
 8002dbe:	d0cb      	beq.n	8002d58 <__swbuf_r+0x28>
 8002dc0:	f04f 37ff 	mov.w	r7, #4294967295
 8002dc4:	e7ea      	b.n	8002d9c <__swbuf_r+0x6c>
 8002dc6:	bf00      	nop
 8002dc8:	08003654 	.word	0x08003654
 8002dcc:	08003674 	.word	0x08003674
 8002dd0:	08003634 	.word	0x08003634

08002dd4 <__swsetup_r>:
 8002dd4:	4b32      	ldr	r3, [pc, #200]	; (8002ea0 <__swsetup_r+0xcc>)
 8002dd6:	b570      	push	{r4, r5, r6, lr}
 8002dd8:	681d      	ldr	r5, [r3, #0]
 8002dda:	4606      	mov	r6, r0
 8002ddc:	460c      	mov	r4, r1
 8002dde:	b125      	cbz	r5, 8002dea <__swsetup_r+0x16>
 8002de0:	69ab      	ldr	r3, [r5, #24]
 8002de2:	b913      	cbnz	r3, 8002dea <__swsetup_r+0x16>
 8002de4:	4628      	mov	r0, r5
 8002de6:	f000 f97d 	bl	80030e4 <__sinit>
 8002dea:	4b2e      	ldr	r3, [pc, #184]	; (8002ea4 <__swsetup_r+0xd0>)
 8002dec:	429c      	cmp	r4, r3
 8002dee:	d10f      	bne.n	8002e10 <__swsetup_r+0x3c>
 8002df0:	686c      	ldr	r4, [r5, #4]
 8002df2:	89a3      	ldrh	r3, [r4, #12]
 8002df4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002df8:	0719      	lsls	r1, r3, #28
 8002dfa:	d42c      	bmi.n	8002e56 <__swsetup_r+0x82>
 8002dfc:	06dd      	lsls	r5, r3, #27
 8002dfe:	d411      	bmi.n	8002e24 <__swsetup_r+0x50>
 8002e00:	2309      	movs	r3, #9
 8002e02:	6033      	str	r3, [r6, #0]
 8002e04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002e08:	81a3      	strh	r3, [r4, #12]
 8002e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e0e:	e03e      	b.n	8002e8e <__swsetup_r+0xba>
 8002e10:	4b25      	ldr	r3, [pc, #148]	; (8002ea8 <__swsetup_r+0xd4>)
 8002e12:	429c      	cmp	r4, r3
 8002e14:	d101      	bne.n	8002e1a <__swsetup_r+0x46>
 8002e16:	68ac      	ldr	r4, [r5, #8]
 8002e18:	e7eb      	b.n	8002df2 <__swsetup_r+0x1e>
 8002e1a:	4b24      	ldr	r3, [pc, #144]	; (8002eac <__swsetup_r+0xd8>)
 8002e1c:	429c      	cmp	r4, r3
 8002e1e:	bf08      	it	eq
 8002e20:	68ec      	ldreq	r4, [r5, #12]
 8002e22:	e7e6      	b.n	8002df2 <__swsetup_r+0x1e>
 8002e24:	0758      	lsls	r0, r3, #29
 8002e26:	d512      	bpl.n	8002e4e <__swsetup_r+0x7a>
 8002e28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e2a:	b141      	cbz	r1, 8002e3e <__swsetup_r+0x6a>
 8002e2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e30:	4299      	cmp	r1, r3
 8002e32:	d002      	beq.n	8002e3a <__swsetup_r+0x66>
 8002e34:	4630      	mov	r0, r6
 8002e36:	f000 fa59 	bl	80032ec <_free_r>
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	6363      	str	r3, [r4, #52]	; 0x34
 8002e3e:	89a3      	ldrh	r3, [r4, #12]
 8002e40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002e44:	81a3      	strh	r3, [r4, #12]
 8002e46:	2300      	movs	r3, #0
 8002e48:	6063      	str	r3, [r4, #4]
 8002e4a:	6923      	ldr	r3, [r4, #16]
 8002e4c:	6023      	str	r3, [r4, #0]
 8002e4e:	89a3      	ldrh	r3, [r4, #12]
 8002e50:	f043 0308 	orr.w	r3, r3, #8
 8002e54:	81a3      	strh	r3, [r4, #12]
 8002e56:	6923      	ldr	r3, [r4, #16]
 8002e58:	b94b      	cbnz	r3, 8002e6e <__swsetup_r+0x9a>
 8002e5a:	89a3      	ldrh	r3, [r4, #12]
 8002e5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002e60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e64:	d003      	beq.n	8002e6e <__swsetup_r+0x9a>
 8002e66:	4621      	mov	r1, r4
 8002e68:	4630      	mov	r0, r6
 8002e6a:	f000 f9ff 	bl	800326c <__smakebuf_r>
 8002e6e:	89a0      	ldrh	r0, [r4, #12]
 8002e70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e74:	f010 0301 	ands.w	r3, r0, #1
 8002e78:	d00a      	beq.n	8002e90 <__swsetup_r+0xbc>
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60a3      	str	r3, [r4, #8]
 8002e7e:	6963      	ldr	r3, [r4, #20]
 8002e80:	425b      	negs	r3, r3
 8002e82:	61a3      	str	r3, [r4, #24]
 8002e84:	6923      	ldr	r3, [r4, #16]
 8002e86:	b943      	cbnz	r3, 8002e9a <__swsetup_r+0xc6>
 8002e88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002e8c:	d1ba      	bne.n	8002e04 <__swsetup_r+0x30>
 8002e8e:	bd70      	pop	{r4, r5, r6, pc}
 8002e90:	0781      	lsls	r1, r0, #30
 8002e92:	bf58      	it	pl
 8002e94:	6963      	ldrpl	r3, [r4, #20]
 8002e96:	60a3      	str	r3, [r4, #8]
 8002e98:	e7f4      	b.n	8002e84 <__swsetup_r+0xb0>
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	e7f7      	b.n	8002e8e <__swsetup_r+0xba>
 8002e9e:	bf00      	nop
 8002ea0:	2000000c 	.word	0x2000000c
 8002ea4:	08003654 	.word	0x08003654
 8002ea8:	08003674 	.word	0x08003674
 8002eac:	08003634 	.word	0x08003634

08002eb0 <__sflush_r>:
 8002eb0:	898a      	ldrh	r2, [r1, #12]
 8002eb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002eb6:	4605      	mov	r5, r0
 8002eb8:	0710      	lsls	r0, r2, #28
 8002eba:	460c      	mov	r4, r1
 8002ebc:	d458      	bmi.n	8002f70 <__sflush_r+0xc0>
 8002ebe:	684b      	ldr	r3, [r1, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	dc05      	bgt.n	8002ed0 <__sflush_r+0x20>
 8002ec4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	dc02      	bgt.n	8002ed0 <__sflush_r+0x20>
 8002eca:	2000      	movs	r0, #0
 8002ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ed0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ed2:	2e00      	cmp	r6, #0
 8002ed4:	d0f9      	beq.n	8002eca <__sflush_r+0x1a>
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002edc:	682f      	ldr	r7, [r5, #0]
 8002ede:	602b      	str	r3, [r5, #0]
 8002ee0:	d032      	beq.n	8002f48 <__sflush_r+0x98>
 8002ee2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002ee4:	89a3      	ldrh	r3, [r4, #12]
 8002ee6:	075a      	lsls	r2, r3, #29
 8002ee8:	d505      	bpl.n	8002ef6 <__sflush_r+0x46>
 8002eea:	6863      	ldr	r3, [r4, #4]
 8002eec:	1ac0      	subs	r0, r0, r3
 8002eee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002ef0:	b10b      	cbz	r3, 8002ef6 <__sflush_r+0x46>
 8002ef2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ef4:	1ac0      	subs	r0, r0, r3
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	4602      	mov	r2, r0
 8002efa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002efc:	6a21      	ldr	r1, [r4, #32]
 8002efe:	4628      	mov	r0, r5
 8002f00:	47b0      	blx	r6
 8002f02:	1c43      	adds	r3, r0, #1
 8002f04:	89a3      	ldrh	r3, [r4, #12]
 8002f06:	d106      	bne.n	8002f16 <__sflush_r+0x66>
 8002f08:	6829      	ldr	r1, [r5, #0]
 8002f0a:	291d      	cmp	r1, #29
 8002f0c:	d82c      	bhi.n	8002f68 <__sflush_r+0xb8>
 8002f0e:	4a2a      	ldr	r2, [pc, #168]	; (8002fb8 <__sflush_r+0x108>)
 8002f10:	40ca      	lsrs	r2, r1
 8002f12:	07d6      	lsls	r6, r2, #31
 8002f14:	d528      	bpl.n	8002f68 <__sflush_r+0xb8>
 8002f16:	2200      	movs	r2, #0
 8002f18:	6062      	str	r2, [r4, #4]
 8002f1a:	04d9      	lsls	r1, r3, #19
 8002f1c:	6922      	ldr	r2, [r4, #16]
 8002f1e:	6022      	str	r2, [r4, #0]
 8002f20:	d504      	bpl.n	8002f2c <__sflush_r+0x7c>
 8002f22:	1c42      	adds	r2, r0, #1
 8002f24:	d101      	bne.n	8002f2a <__sflush_r+0x7a>
 8002f26:	682b      	ldr	r3, [r5, #0]
 8002f28:	b903      	cbnz	r3, 8002f2c <__sflush_r+0x7c>
 8002f2a:	6560      	str	r0, [r4, #84]	; 0x54
 8002f2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f2e:	602f      	str	r7, [r5, #0]
 8002f30:	2900      	cmp	r1, #0
 8002f32:	d0ca      	beq.n	8002eca <__sflush_r+0x1a>
 8002f34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f38:	4299      	cmp	r1, r3
 8002f3a:	d002      	beq.n	8002f42 <__sflush_r+0x92>
 8002f3c:	4628      	mov	r0, r5
 8002f3e:	f000 f9d5 	bl	80032ec <_free_r>
 8002f42:	2000      	movs	r0, #0
 8002f44:	6360      	str	r0, [r4, #52]	; 0x34
 8002f46:	e7c1      	b.n	8002ecc <__sflush_r+0x1c>
 8002f48:	6a21      	ldr	r1, [r4, #32]
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	4628      	mov	r0, r5
 8002f4e:	47b0      	blx	r6
 8002f50:	1c41      	adds	r1, r0, #1
 8002f52:	d1c7      	bne.n	8002ee4 <__sflush_r+0x34>
 8002f54:	682b      	ldr	r3, [r5, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0c4      	beq.n	8002ee4 <__sflush_r+0x34>
 8002f5a:	2b1d      	cmp	r3, #29
 8002f5c:	d001      	beq.n	8002f62 <__sflush_r+0xb2>
 8002f5e:	2b16      	cmp	r3, #22
 8002f60:	d101      	bne.n	8002f66 <__sflush_r+0xb6>
 8002f62:	602f      	str	r7, [r5, #0]
 8002f64:	e7b1      	b.n	8002eca <__sflush_r+0x1a>
 8002f66:	89a3      	ldrh	r3, [r4, #12]
 8002f68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f6c:	81a3      	strh	r3, [r4, #12]
 8002f6e:	e7ad      	b.n	8002ecc <__sflush_r+0x1c>
 8002f70:	690f      	ldr	r7, [r1, #16]
 8002f72:	2f00      	cmp	r7, #0
 8002f74:	d0a9      	beq.n	8002eca <__sflush_r+0x1a>
 8002f76:	0793      	lsls	r3, r2, #30
 8002f78:	680e      	ldr	r6, [r1, #0]
 8002f7a:	bf08      	it	eq
 8002f7c:	694b      	ldreq	r3, [r1, #20]
 8002f7e:	600f      	str	r7, [r1, #0]
 8002f80:	bf18      	it	ne
 8002f82:	2300      	movne	r3, #0
 8002f84:	eba6 0807 	sub.w	r8, r6, r7
 8002f88:	608b      	str	r3, [r1, #8]
 8002f8a:	f1b8 0f00 	cmp.w	r8, #0
 8002f8e:	dd9c      	ble.n	8002eca <__sflush_r+0x1a>
 8002f90:	6a21      	ldr	r1, [r4, #32]
 8002f92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002f94:	4643      	mov	r3, r8
 8002f96:	463a      	mov	r2, r7
 8002f98:	4628      	mov	r0, r5
 8002f9a:	47b0      	blx	r6
 8002f9c:	2800      	cmp	r0, #0
 8002f9e:	dc06      	bgt.n	8002fae <__sflush_r+0xfe>
 8002fa0:	89a3      	ldrh	r3, [r4, #12]
 8002fa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fa6:	81a3      	strh	r3, [r4, #12]
 8002fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fac:	e78e      	b.n	8002ecc <__sflush_r+0x1c>
 8002fae:	4407      	add	r7, r0
 8002fb0:	eba8 0800 	sub.w	r8, r8, r0
 8002fb4:	e7e9      	b.n	8002f8a <__sflush_r+0xda>
 8002fb6:	bf00      	nop
 8002fb8:	20400001 	.word	0x20400001

08002fbc <_fflush_r>:
 8002fbc:	b538      	push	{r3, r4, r5, lr}
 8002fbe:	690b      	ldr	r3, [r1, #16]
 8002fc0:	4605      	mov	r5, r0
 8002fc2:	460c      	mov	r4, r1
 8002fc4:	b913      	cbnz	r3, 8002fcc <_fflush_r+0x10>
 8002fc6:	2500      	movs	r5, #0
 8002fc8:	4628      	mov	r0, r5
 8002fca:	bd38      	pop	{r3, r4, r5, pc}
 8002fcc:	b118      	cbz	r0, 8002fd6 <_fflush_r+0x1a>
 8002fce:	6983      	ldr	r3, [r0, #24]
 8002fd0:	b90b      	cbnz	r3, 8002fd6 <_fflush_r+0x1a>
 8002fd2:	f000 f887 	bl	80030e4 <__sinit>
 8002fd6:	4b14      	ldr	r3, [pc, #80]	; (8003028 <_fflush_r+0x6c>)
 8002fd8:	429c      	cmp	r4, r3
 8002fda:	d11b      	bne.n	8003014 <_fflush_r+0x58>
 8002fdc:	686c      	ldr	r4, [r5, #4]
 8002fde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0ef      	beq.n	8002fc6 <_fflush_r+0xa>
 8002fe6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002fe8:	07d0      	lsls	r0, r2, #31
 8002fea:	d404      	bmi.n	8002ff6 <_fflush_r+0x3a>
 8002fec:	0599      	lsls	r1, r3, #22
 8002fee:	d402      	bmi.n	8002ff6 <_fflush_r+0x3a>
 8002ff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ff2:	f000 f915 	bl	8003220 <__retarget_lock_acquire_recursive>
 8002ff6:	4628      	mov	r0, r5
 8002ff8:	4621      	mov	r1, r4
 8002ffa:	f7ff ff59 	bl	8002eb0 <__sflush_r>
 8002ffe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003000:	07da      	lsls	r2, r3, #31
 8003002:	4605      	mov	r5, r0
 8003004:	d4e0      	bmi.n	8002fc8 <_fflush_r+0xc>
 8003006:	89a3      	ldrh	r3, [r4, #12]
 8003008:	059b      	lsls	r3, r3, #22
 800300a:	d4dd      	bmi.n	8002fc8 <_fflush_r+0xc>
 800300c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800300e:	f000 f908 	bl	8003222 <__retarget_lock_release_recursive>
 8003012:	e7d9      	b.n	8002fc8 <_fflush_r+0xc>
 8003014:	4b05      	ldr	r3, [pc, #20]	; (800302c <_fflush_r+0x70>)
 8003016:	429c      	cmp	r4, r3
 8003018:	d101      	bne.n	800301e <_fflush_r+0x62>
 800301a:	68ac      	ldr	r4, [r5, #8]
 800301c:	e7df      	b.n	8002fde <_fflush_r+0x22>
 800301e:	4b04      	ldr	r3, [pc, #16]	; (8003030 <_fflush_r+0x74>)
 8003020:	429c      	cmp	r4, r3
 8003022:	bf08      	it	eq
 8003024:	68ec      	ldreq	r4, [r5, #12]
 8003026:	e7da      	b.n	8002fde <_fflush_r+0x22>
 8003028:	08003654 	.word	0x08003654
 800302c:	08003674 	.word	0x08003674
 8003030:	08003634 	.word	0x08003634

08003034 <std>:
 8003034:	2300      	movs	r3, #0
 8003036:	b510      	push	{r4, lr}
 8003038:	4604      	mov	r4, r0
 800303a:	e9c0 3300 	strd	r3, r3, [r0]
 800303e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003042:	6083      	str	r3, [r0, #8]
 8003044:	8181      	strh	r1, [r0, #12]
 8003046:	6643      	str	r3, [r0, #100]	; 0x64
 8003048:	81c2      	strh	r2, [r0, #14]
 800304a:	6183      	str	r3, [r0, #24]
 800304c:	4619      	mov	r1, r3
 800304e:	2208      	movs	r2, #8
 8003050:	305c      	adds	r0, #92	; 0x5c
 8003052:	f7ff fdef 	bl	8002c34 <memset>
 8003056:	4b05      	ldr	r3, [pc, #20]	; (800306c <std+0x38>)
 8003058:	6263      	str	r3, [r4, #36]	; 0x24
 800305a:	4b05      	ldr	r3, [pc, #20]	; (8003070 <std+0x3c>)
 800305c:	62a3      	str	r3, [r4, #40]	; 0x28
 800305e:	4b05      	ldr	r3, [pc, #20]	; (8003074 <std+0x40>)
 8003060:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003062:	4b05      	ldr	r3, [pc, #20]	; (8003078 <std+0x44>)
 8003064:	6224      	str	r4, [r4, #32]
 8003066:	6323      	str	r3, [r4, #48]	; 0x30
 8003068:	bd10      	pop	{r4, pc}
 800306a:	bf00      	nop
 800306c:	08003461 	.word	0x08003461
 8003070:	08003483 	.word	0x08003483
 8003074:	080034bb 	.word	0x080034bb
 8003078:	080034df 	.word	0x080034df

0800307c <_cleanup_r>:
 800307c:	4901      	ldr	r1, [pc, #4]	; (8003084 <_cleanup_r+0x8>)
 800307e:	f000 b8af 	b.w	80031e0 <_fwalk_reent>
 8003082:	bf00      	nop
 8003084:	08002fbd 	.word	0x08002fbd

08003088 <__sfmoreglue>:
 8003088:	b570      	push	{r4, r5, r6, lr}
 800308a:	1e4a      	subs	r2, r1, #1
 800308c:	2568      	movs	r5, #104	; 0x68
 800308e:	4355      	muls	r5, r2
 8003090:	460e      	mov	r6, r1
 8003092:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003096:	f000 f979 	bl	800338c <_malloc_r>
 800309a:	4604      	mov	r4, r0
 800309c:	b140      	cbz	r0, 80030b0 <__sfmoreglue+0x28>
 800309e:	2100      	movs	r1, #0
 80030a0:	e9c0 1600 	strd	r1, r6, [r0]
 80030a4:	300c      	adds	r0, #12
 80030a6:	60a0      	str	r0, [r4, #8]
 80030a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80030ac:	f7ff fdc2 	bl	8002c34 <memset>
 80030b0:	4620      	mov	r0, r4
 80030b2:	bd70      	pop	{r4, r5, r6, pc}

080030b4 <__sfp_lock_acquire>:
 80030b4:	4801      	ldr	r0, [pc, #4]	; (80030bc <__sfp_lock_acquire+0x8>)
 80030b6:	f000 b8b3 	b.w	8003220 <__retarget_lock_acquire_recursive>
 80030ba:	bf00      	nop
 80030bc:	20000134 	.word	0x20000134

080030c0 <__sfp_lock_release>:
 80030c0:	4801      	ldr	r0, [pc, #4]	; (80030c8 <__sfp_lock_release+0x8>)
 80030c2:	f000 b8ae 	b.w	8003222 <__retarget_lock_release_recursive>
 80030c6:	bf00      	nop
 80030c8:	20000134 	.word	0x20000134

080030cc <__sinit_lock_acquire>:
 80030cc:	4801      	ldr	r0, [pc, #4]	; (80030d4 <__sinit_lock_acquire+0x8>)
 80030ce:	f000 b8a7 	b.w	8003220 <__retarget_lock_acquire_recursive>
 80030d2:	bf00      	nop
 80030d4:	2000012f 	.word	0x2000012f

080030d8 <__sinit_lock_release>:
 80030d8:	4801      	ldr	r0, [pc, #4]	; (80030e0 <__sinit_lock_release+0x8>)
 80030da:	f000 b8a2 	b.w	8003222 <__retarget_lock_release_recursive>
 80030de:	bf00      	nop
 80030e0:	2000012f 	.word	0x2000012f

080030e4 <__sinit>:
 80030e4:	b510      	push	{r4, lr}
 80030e6:	4604      	mov	r4, r0
 80030e8:	f7ff fff0 	bl	80030cc <__sinit_lock_acquire>
 80030ec:	69a3      	ldr	r3, [r4, #24]
 80030ee:	b11b      	cbz	r3, 80030f8 <__sinit+0x14>
 80030f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030f4:	f7ff bff0 	b.w	80030d8 <__sinit_lock_release>
 80030f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80030fc:	6523      	str	r3, [r4, #80]	; 0x50
 80030fe:	4b13      	ldr	r3, [pc, #76]	; (800314c <__sinit+0x68>)
 8003100:	4a13      	ldr	r2, [pc, #76]	; (8003150 <__sinit+0x6c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	62a2      	str	r2, [r4, #40]	; 0x28
 8003106:	42a3      	cmp	r3, r4
 8003108:	bf04      	itt	eq
 800310a:	2301      	moveq	r3, #1
 800310c:	61a3      	streq	r3, [r4, #24]
 800310e:	4620      	mov	r0, r4
 8003110:	f000 f820 	bl	8003154 <__sfp>
 8003114:	6060      	str	r0, [r4, #4]
 8003116:	4620      	mov	r0, r4
 8003118:	f000 f81c 	bl	8003154 <__sfp>
 800311c:	60a0      	str	r0, [r4, #8]
 800311e:	4620      	mov	r0, r4
 8003120:	f000 f818 	bl	8003154 <__sfp>
 8003124:	2200      	movs	r2, #0
 8003126:	60e0      	str	r0, [r4, #12]
 8003128:	2104      	movs	r1, #4
 800312a:	6860      	ldr	r0, [r4, #4]
 800312c:	f7ff ff82 	bl	8003034 <std>
 8003130:	68a0      	ldr	r0, [r4, #8]
 8003132:	2201      	movs	r2, #1
 8003134:	2109      	movs	r1, #9
 8003136:	f7ff ff7d 	bl	8003034 <std>
 800313a:	68e0      	ldr	r0, [r4, #12]
 800313c:	2202      	movs	r2, #2
 800313e:	2112      	movs	r1, #18
 8003140:	f7ff ff78 	bl	8003034 <std>
 8003144:	2301      	movs	r3, #1
 8003146:	61a3      	str	r3, [r4, #24]
 8003148:	e7d2      	b.n	80030f0 <__sinit+0xc>
 800314a:	bf00      	nop
 800314c:	08003630 	.word	0x08003630
 8003150:	0800307d 	.word	0x0800307d

08003154 <__sfp>:
 8003154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003156:	4607      	mov	r7, r0
 8003158:	f7ff ffac 	bl	80030b4 <__sfp_lock_acquire>
 800315c:	4b1e      	ldr	r3, [pc, #120]	; (80031d8 <__sfp+0x84>)
 800315e:	681e      	ldr	r6, [r3, #0]
 8003160:	69b3      	ldr	r3, [r6, #24]
 8003162:	b913      	cbnz	r3, 800316a <__sfp+0x16>
 8003164:	4630      	mov	r0, r6
 8003166:	f7ff ffbd 	bl	80030e4 <__sinit>
 800316a:	3648      	adds	r6, #72	; 0x48
 800316c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003170:	3b01      	subs	r3, #1
 8003172:	d503      	bpl.n	800317c <__sfp+0x28>
 8003174:	6833      	ldr	r3, [r6, #0]
 8003176:	b30b      	cbz	r3, 80031bc <__sfp+0x68>
 8003178:	6836      	ldr	r6, [r6, #0]
 800317a:	e7f7      	b.n	800316c <__sfp+0x18>
 800317c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003180:	b9d5      	cbnz	r5, 80031b8 <__sfp+0x64>
 8003182:	4b16      	ldr	r3, [pc, #88]	; (80031dc <__sfp+0x88>)
 8003184:	60e3      	str	r3, [r4, #12]
 8003186:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800318a:	6665      	str	r5, [r4, #100]	; 0x64
 800318c:	f000 f847 	bl	800321e <__retarget_lock_init_recursive>
 8003190:	f7ff ff96 	bl	80030c0 <__sfp_lock_release>
 8003194:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003198:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800319c:	6025      	str	r5, [r4, #0]
 800319e:	61a5      	str	r5, [r4, #24]
 80031a0:	2208      	movs	r2, #8
 80031a2:	4629      	mov	r1, r5
 80031a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80031a8:	f7ff fd44 	bl	8002c34 <memset>
 80031ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80031b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80031b4:	4620      	mov	r0, r4
 80031b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031b8:	3468      	adds	r4, #104	; 0x68
 80031ba:	e7d9      	b.n	8003170 <__sfp+0x1c>
 80031bc:	2104      	movs	r1, #4
 80031be:	4638      	mov	r0, r7
 80031c0:	f7ff ff62 	bl	8003088 <__sfmoreglue>
 80031c4:	4604      	mov	r4, r0
 80031c6:	6030      	str	r0, [r6, #0]
 80031c8:	2800      	cmp	r0, #0
 80031ca:	d1d5      	bne.n	8003178 <__sfp+0x24>
 80031cc:	f7ff ff78 	bl	80030c0 <__sfp_lock_release>
 80031d0:	230c      	movs	r3, #12
 80031d2:	603b      	str	r3, [r7, #0]
 80031d4:	e7ee      	b.n	80031b4 <__sfp+0x60>
 80031d6:	bf00      	nop
 80031d8:	08003630 	.word	0x08003630
 80031dc:	ffff0001 	.word	0xffff0001

080031e0 <_fwalk_reent>:
 80031e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031e4:	4606      	mov	r6, r0
 80031e6:	4688      	mov	r8, r1
 80031e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80031ec:	2700      	movs	r7, #0
 80031ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80031f2:	f1b9 0901 	subs.w	r9, r9, #1
 80031f6:	d505      	bpl.n	8003204 <_fwalk_reent+0x24>
 80031f8:	6824      	ldr	r4, [r4, #0]
 80031fa:	2c00      	cmp	r4, #0
 80031fc:	d1f7      	bne.n	80031ee <_fwalk_reent+0xe>
 80031fe:	4638      	mov	r0, r7
 8003200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003204:	89ab      	ldrh	r3, [r5, #12]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d907      	bls.n	800321a <_fwalk_reent+0x3a>
 800320a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800320e:	3301      	adds	r3, #1
 8003210:	d003      	beq.n	800321a <_fwalk_reent+0x3a>
 8003212:	4629      	mov	r1, r5
 8003214:	4630      	mov	r0, r6
 8003216:	47c0      	blx	r8
 8003218:	4307      	orrs	r7, r0
 800321a:	3568      	adds	r5, #104	; 0x68
 800321c:	e7e9      	b.n	80031f2 <_fwalk_reent+0x12>

0800321e <__retarget_lock_init_recursive>:
 800321e:	4770      	bx	lr

08003220 <__retarget_lock_acquire_recursive>:
 8003220:	4770      	bx	lr

08003222 <__retarget_lock_release_recursive>:
 8003222:	4770      	bx	lr

08003224 <__swhatbuf_r>:
 8003224:	b570      	push	{r4, r5, r6, lr}
 8003226:	460e      	mov	r6, r1
 8003228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800322c:	2900      	cmp	r1, #0
 800322e:	b096      	sub	sp, #88	; 0x58
 8003230:	4614      	mov	r4, r2
 8003232:	461d      	mov	r5, r3
 8003234:	da07      	bge.n	8003246 <__swhatbuf_r+0x22>
 8003236:	2300      	movs	r3, #0
 8003238:	602b      	str	r3, [r5, #0]
 800323a:	89b3      	ldrh	r3, [r6, #12]
 800323c:	061a      	lsls	r2, r3, #24
 800323e:	d410      	bmi.n	8003262 <__swhatbuf_r+0x3e>
 8003240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003244:	e00e      	b.n	8003264 <__swhatbuf_r+0x40>
 8003246:	466a      	mov	r2, sp
 8003248:	f000 f970 	bl	800352c <_fstat_r>
 800324c:	2800      	cmp	r0, #0
 800324e:	dbf2      	blt.n	8003236 <__swhatbuf_r+0x12>
 8003250:	9a01      	ldr	r2, [sp, #4]
 8003252:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003256:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800325a:	425a      	negs	r2, r3
 800325c:	415a      	adcs	r2, r3
 800325e:	602a      	str	r2, [r5, #0]
 8003260:	e7ee      	b.n	8003240 <__swhatbuf_r+0x1c>
 8003262:	2340      	movs	r3, #64	; 0x40
 8003264:	2000      	movs	r0, #0
 8003266:	6023      	str	r3, [r4, #0]
 8003268:	b016      	add	sp, #88	; 0x58
 800326a:	bd70      	pop	{r4, r5, r6, pc}

0800326c <__smakebuf_r>:
 800326c:	898b      	ldrh	r3, [r1, #12]
 800326e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003270:	079d      	lsls	r5, r3, #30
 8003272:	4606      	mov	r6, r0
 8003274:	460c      	mov	r4, r1
 8003276:	d507      	bpl.n	8003288 <__smakebuf_r+0x1c>
 8003278:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800327c:	6023      	str	r3, [r4, #0]
 800327e:	6123      	str	r3, [r4, #16]
 8003280:	2301      	movs	r3, #1
 8003282:	6163      	str	r3, [r4, #20]
 8003284:	b002      	add	sp, #8
 8003286:	bd70      	pop	{r4, r5, r6, pc}
 8003288:	ab01      	add	r3, sp, #4
 800328a:	466a      	mov	r2, sp
 800328c:	f7ff ffca 	bl	8003224 <__swhatbuf_r>
 8003290:	9900      	ldr	r1, [sp, #0]
 8003292:	4605      	mov	r5, r0
 8003294:	4630      	mov	r0, r6
 8003296:	f000 f879 	bl	800338c <_malloc_r>
 800329a:	b948      	cbnz	r0, 80032b0 <__smakebuf_r+0x44>
 800329c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032a0:	059a      	lsls	r2, r3, #22
 80032a2:	d4ef      	bmi.n	8003284 <__smakebuf_r+0x18>
 80032a4:	f023 0303 	bic.w	r3, r3, #3
 80032a8:	f043 0302 	orr.w	r3, r3, #2
 80032ac:	81a3      	strh	r3, [r4, #12]
 80032ae:	e7e3      	b.n	8003278 <__smakebuf_r+0xc>
 80032b0:	4b0d      	ldr	r3, [pc, #52]	; (80032e8 <__smakebuf_r+0x7c>)
 80032b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80032b4:	89a3      	ldrh	r3, [r4, #12]
 80032b6:	6020      	str	r0, [r4, #0]
 80032b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032bc:	81a3      	strh	r3, [r4, #12]
 80032be:	9b00      	ldr	r3, [sp, #0]
 80032c0:	6163      	str	r3, [r4, #20]
 80032c2:	9b01      	ldr	r3, [sp, #4]
 80032c4:	6120      	str	r0, [r4, #16]
 80032c6:	b15b      	cbz	r3, 80032e0 <__smakebuf_r+0x74>
 80032c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032cc:	4630      	mov	r0, r6
 80032ce:	f000 f93f 	bl	8003550 <_isatty_r>
 80032d2:	b128      	cbz	r0, 80032e0 <__smakebuf_r+0x74>
 80032d4:	89a3      	ldrh	r3, [r4, #12]
 80032d6:	f023 0303 	bic.w	r3, r3, #3
 80032da:	f043 0301 	orr.w	r3, r3, #1
 80032de:	81a3      	strh	r3, [r4, #12]
 80032e0:	89a0      	ldrh	r0, [r4, #12]
 80032e2:	4305      	orrs	r5, r0
 80032e4:	81a5      	strh	r5, [r4, #12]
 80032e6:	e7cd      	b.n	8003284 <__smakebuf_r+0x18>
 80032e8:	0800307d 	.word	0x0800307d

080032ec <_free_r>:
 80032ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80032ee:	2900      	cmp	r1, #0
 80032f0:	d048      	beq.n	8003384 <_free_r+0x98>
 80032f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032f6:	9001      	str	r0, [sp, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f1a1 0404 	sub.w	r4, r1, #4
 80032fe:	bfb8      	it	lt
 8003300:	18e4      	addlt	r4, r4, r3
 8003302:	f000 f947 	bl	8003594 <__malloc_lock>
 8003306:	4a20      	ldr	r2, [pc, #128]	; (8003388 <_free_r+0x9c>)
 8003308:	9801      	ldr	r0, [sp, #4]
 800330a:	6813      	ldr	r3, [r2, #0]
 800330c:	4615      	mov	r5, r2
 800330e:	b933      	cbnz	r3, 800331e <_free_r+0x32>
 8003310:	6063      	str	r3, [r4, #4]
 8003312:	6014      	str	r4, [r2, #0]
 8003314:	b003      	add	sp, #12
 8003316:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800331a:	f000 b941 	b.w	80035a0 <__malloc_unlock>
 800331e:	42a3      	cmp	r3, r4
 8003320:	d90b      	bls.n	800333a <_free_r+0x4e>
 8003322:	6821      	ldr	r1, [r4, #0]
 8003324:	1862      	adds	r2, r4, r1
 8003326:	4293      	cmp	r3, r2
 8003328:	bf04      	itt	eq
 800332a:	681a      	ldreq	r2, [r3, #0]
 800332c:	685b      	ldreq	r3, [r3, #4]
 800332e:	6063      	str	r3, [r4, #4]
 8003330:	bf04      	itt	eq
 8003332:	1852      	addeq	r2, r2, r1
 8003334:	6022      	streq	r2, [r4, #0]
 8003336:	602c      	str	r4, [r5, #0]
 8003338:	e7ec      	b.n	8003314 <_free_r+0x28>
 800333a:	461a      	mov	r2, r3
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	b10b      	cbz	r3, 8003344 <_free_r+0x58>
 8003340:	42a3      	cmp	r3, r4
 8003342:	d9fa      	bls.n	800333a <_free_r+0x4e>
 8003344:	6811      	ldr	r1, [r2, #0]
 8003346:	1855      	adds	r5, r2, r1
 8003348:	42a5      	cmp	r5, r4
 800334a:	d10b      	bne.n	8003364 <_free_r+0x78>
 800334c:	6824      	ldr	r4, [r4, #0]
 800334e:	4421      	add	r1, r4
 8003350:	1854      	adds	r4, r2, r1
 8003352:	42a3      	cmp	r3, r4
 8003354:	6011      	str	r1, [r2, #0]
 8003356:	d1dd      	bne.n	8003314 <_free_r+0x28>
 8003358:	681c      	ldr	r4, [r3, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	6053      	str	r3, [r2, #4]
 800335e:	4421      	add	r1, r4
 8003360:	6011      	str	r1, [r2, #0]
 8003362:	e7d7      	b.n	8003314 <_free_r+0x28>
 8003364:	d902      	bls.n	800336c <_free_r+0x80>
 8003366:	230c      	movs	r3, #12
 8003368:	6003      	str	r3, [r0, #0]
 800336a:	e7d3      	b.n	8003314 <_free_r+0x28>
 800336c:	6825      	ldr	r5, [r4, #0]
 800336e:	1961      	adds	r1, r4, r5
 8003370:	428b      	cmp	r3, r1
 8003372:	bf04      	itt	eq
 8003374:	6819      	ldreq	r1, [r3, #0]
 8003376:	685b      	ldreq	r3, [r3, #4]
 8003378:	6063      	str	r3, [r4, #4]
 800337a:	bf04      	itt	eq
 800337c:	1949      	addeq	r1, r1, r5
 800337e:	6021      	streq	r1, [r4, #0]
 8003380:	6054      	str	r4, [r2, #4]
 8003382:	e7c7      	b.n	8003314 <_free_r+0x28>
 8003384:	b003      	add	sp, #12
 8003386:	bd30      	pop	{r4, r5, pc}
 8003388:	20000090 	.word	0x20000090

0800338c <_malloc_r>:
 800338c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800338e:	1ccd      	adds	r5, r1, #3
 8003390:	f025 0503 	bic.w	r5, r5, #3
 8003394:	3508      	adds	r5, #8
 8003396:	2d0c      	cmp	r5, #12
 8003398:	bf38      	it	cc
 800339a:	250c      	movcc	r5, #12
 800339c:	2d00      	cmp	r5, #0
 800339e:	4606      	mov	r6, r0
 80033a0:	db01      	blt.n	80033a6 <_malloc_r+0x1a>
 80033a2:	42a9      	cmp	r1, r5
 80033a4:	d903      	bls.n	80033ae <_malloc_r+0x22>
 80033a6:	230c      	movs	r3, #12
 80033a8:	6033      	str	r3, [r6, #0]
 80033aa:	2000      	movs	r0, #0
 80033ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033ae:	f000 f8f1 	bl	8003594 <__malloc_lock>
 80033b2:	4921      	ldr	r1, [pc, #132]	; (8003438 <_malloc_r+0xac>)
 80033b4:	680a      	ldr	r2, [r1, #0]
 80033b6:	4614      	mov	r4, r2
 80033b8:	b99c      	cbnz	r4, 80033e2 <_malloc_r+0x56>
 80033ba:	4f20      	ldr	r7, [pc, #128]	; (800343c <_malloc_r+0xb0>)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	b923      	cbnz	r3, 80033ca <_malloc_r+0x3e>
 80033c0:	4621      	mov	r1, r4
 80033c2:	4630      	mov	r0, r6
 80033c4:	f000 f83c 	bl	8003440 <_sbrk_r>
 80033c8:	6038      	str	r0, [r7, #0]
 80033ca:	4629      	mov	r1, r5
 80033cc:	4630      	mov	r0, r6
 80033ce:	f000 f837 	bl	8003440 <_sbrk_r>
 80033d2:	1c43      	adds	r3, r0, #1
 80033d4:	d123      	bne.n	800341e <_malloc_r+0x92>
 80033d6:	230c      	movs	r3, #12
 80033d8:	6033      	str	r3, [r6, #0]
 80033da:	4630      	mov	r0, r6
 80033dc:	f000 f8e0 	bl	80035a0 <__malloc_unlock>
 80033e0:	e7e3      	b.n	80033aa <_malloc_r+0x1e>
 80033e2:	6823      	ldr	r3, [r4, #0]
 80033e4:	1b5b      	subs	r3, r3, r5
 80033e6:	d417      	bmi.n	8003418 <_malloc_r+0x8c>
 80033e8:	2b0b      	cmp	r3, #11
 80033ea:	d903      	bls.n	80033f4 <_malloc_r+0x68>
 80033ec:	6023      	str	r3, [r4, #0]
 80033ee:	441c      	add	r4, r3
 80033f0:	6025      	str	r5, [r4, #0]
 80033f2:	e004      	b.n	80033fe <_malloc_r+0x72>
 80033f4:	6863      	ldr	r3, [r4, #4]
 80033f6:	42a2      	cmp	r2, r4
 80033f8:	bf0c      	ite	eq
 80033fa:	600b      	streq	r3, [r1, #0]
 80033fc:	6053      	strne	r3, [r2, #4]
 80033fe:	4630      	mov	r0, r6
 8003400:	f000 f8ce 	bl	80035a0 <__malloc_unlock>
 8003404:	f104 000b 	add.w	r0, r4, #11
 8003408:	1d23      	adds	r3, r4, #4
 800340a:	f020 0007 	bic.w	r0, r0, #7
 800340e:	1ac2      	subs	r2, r0, r3
 8003410:	d0cc      	beq.n	80033ac <_malloc_r+0x20>
 8003412:	1a1b      	subs	r3, r3, r0
 8003414:	50a3      	str	r3, [r4, r2]
 8003416:	e7c9      	b.n	80033ac <_malloc_r+0x20>
 8003418:	4622      	mov	r2, r4
 800341a:	6864      	ldr	r4, [r4, #4]
 800341c:	e7cc      	b.n	80033b8 <_malloc_r+0x2c>
 800341e:	1cc4      	adds	r4, r0, #3
 8003420:	f024 0403 	bic.w	r4, r4, #3
 8003424:	42a0      	cmp	r0, r4
 8003426:	d0e3      	beq.n	80033f0 <_malloc_r+0x64>
 8003428:	1a21      	subs	r1, r4, r0
 800342a:	4630      	mov	r0, r6
 800342c:	f000 f808 	bl	8003440 <_sbrk_r>
 8003430:	3001      	adds	r0, #1
 8003432:	d1dd      	bne.n	80033f0 <_malloc_r+0x64>
 8003434:	e7cf      	b.n	80033d6 <_malloc_r+0x4a>
 8003436:	bf00      	nop
 8003438:	20000090 	.word	0x20000090
 800343c:	20000094 	.word	0x20000094

08003440 <_sbrk_r>:
 8003440:	b538      	push	{r3, r4, r5, lr}
 8003442:	4d06      	ldr	r5, [pc, #24]	; (800345c <_sbrk_r+0x1c>)
 8003444:	2300      	movs	r3, #0
 8003446:	4604      	mov	r4, r0
 8003448:	4608      	mov	r0, r1
 800344a:	602b      	str	r3, [r5, #0]
 800344c:	f7fd fa10 	bl	8000870 <_sbrk>
 8003450:	1c43      	adds	r3, r0, #1
 8003452:	d102      	bne.n	800345a <_sbrk_r+0x1a>
 8003454:	682b      	ldr	r3, [r5, #0]
 8003456:	b103      	cbz	r3, 800345a <_sbrk_r+0x1a>
 8003458:	6023      	str	r3, [r4, #0]
 800345a:	bd38      	pop	{r3, r4, r5, pc}
 800345c:	20000138 	.word	0x20000138

08003460 <__sread>:
 8003460:	b510      	push	{r4, lr}
 8003462:	460c      	mov	r4, r1
 8003464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003468:	f000 f8a0 	bl	80035ac <_read_r>
 800346c:	2800      	cmp	r0, #0
 800346e:	bfab      	itete	ge
 8003470:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003472:	89a3      	ldrhlt	r3, [r4, #12]
 8003474:	181b      	addge	r3, r3, r0
 8003476:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800347a:	bfac      	ite	ge
 800347c:	6563      	strge	r3, [r4, #84]	; 0x54
 800347e:	81a3      	strhlt	r3, [r4, #12]
 8003480:	bd10      	pop	{r4, pc}

08003482 <__swrite>:
 8003482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003486:	461f      	mov	r7, r3
 8003488:	898b      	ldrh	r3, [r1, #12]
 800348a:	05db      	lsls	r3, r3, #23
 800348c:	4605      	mov	r5, r0
 800348e:	460c      	mov	r4, r1
 8003490:	4616      	mov	r6, r2
 8003492:	d505      	bpl.n	80034a0 <__swrite+0x1e>
 8003494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003498:	2302      	movs	r3, #2
 800349a:	2200      	movs	r2, #0
 800349c:	f000 f868 	bl	8003570 <_lseek_r>
 80034a0:	89a3      	ldrh	r3, [r4, #12]
 80034a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034aa:	81a3      	strh	r3, [r4, #12]
 80034ac:	4632      	mov	r2, r6
 80034ae:	463b      	mov	r3, r7
 80034b0:	4628      	mov	r0, r5
 80034b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034b6:	f000 b817 	b.w	80034e8 <_write_r>

080034ba <__sseek>:
 80034ba:	b510      	push	{r4, lr}
 80034bc:	460c      	mov	r4, r1
 80034be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034c2:	f000 f855 	bl	8003570 <_lseek_r>
 80034c6:	1c43      	adds	r3, r0, #1
 80034c8:	89a3      	ldrh	r3, [r4, #12]
 80034ca:	bf15      	itete	ne
 80034cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80034ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80034d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80034d6:	81a3      	strheq	r3, [r4, #12]
 80034d8:	bf18      	it	ne
 80034da:	81a3      	strhne	r3, [r4, #12]
 80034dc:	bd10      	pop	{r4, pc}

080034de <__sclose>:
 80034de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034e2:	f000 b813 	b.w	800350c <_close_r>
	...

080034e8 <_write_r>:
 80034e8:	b538      	push	{r3, r4, r5, lr}
 80034ea:	4d07      	ldr	r5, [pc, #28]	; (8003508 <_write_r+0x20>)
 80034ec:	4604      	mov	r4, r0
 80034ee:	4608      	mov	r0, r1
 80034f0:	4611      	mov	r1, r2
 80034f2:	2200      	movs	r2, #0
 80034f4:	602a      	str	r2, [r5, #0]
 80034f6:	461a      	mov	r2, r3
 80034f8:	f7fd f969 	bl	80007ce <_write>
 80034fc:	1c43      	adds	r3, r0, #1
 80034fe:	d102      	bne.n	8003506 <_write_r+0x1e>
 8003500:	682b      	ldr	r3, [r5, #0]
 8003502:	b103      	cbz	r3, 8003506 <_write_r+0x1e>
 8003504:	6023      	str	r3, [r4, #0]
 8003506:	bd38      	pop	{r3, r4, r5, pc}
 8003508:	20000138 	.word	0x20000138

0800350c <_close_r>:
 800350c:	b538      	push	{r3, r4, r5, lr}
 800350e:	4d06      	ldr	r5, [pc, #24]	; (8003528 <_close_r+0x1c>)
 8003510:	2300      	movs	r3, #0
 8003512:	4604      	mov	r4, r0
 8003514:	4608      	mov	r0, r1
 8003516:	602b      	str	r3, [r5, #0]
 8003518:	f7fd f975 	bl	8000806 <_close>
 800351c:	1c43      	adds	r3, r0, #1
 800351e:	d102      	bne.n	8003526 <_close_r+0x1a>
 8003520:	682b      	ldr	r3, [r5, #0]
 8003522:	b103      	cbz	r3, 8003526 <_close_r+0x1a>
 8003524:	6023      	str	r3, [r4, #0]
 8003526:	bd38      	pop	{r3, r4, r5, pc}
 8003528:	20000138 	.word	0x20000138

0800352c <_fstat_r>:
 800352c:	b538      	push	{r3, r4, r5, lr}
 800352e:	4d07      	ldr	r5, [pc, #28]	; (800354c <_fstat_r+0x20>)
 8003530:	2300      	movs	r3, #0
 8003532:	4604      	mov	r4, r0
 8003534:	4608      	mov	r0, r1
 8003536:	4611      	mov	r1, r2
 8003538:	602b      	str	r3, [r5, #0]
 800353a:	f7fd f970 	bl	800081e <_fstat>
 800353e:	1c43      	adds	r3, r0, #1
 8003540:	d102      	bne.n	8003548 <_fstat_r+0x1c>
 8003542:	682b      	ldr	r3, [r5, #0]
 8003544:	b103      	cbz	r3, 8003548 <_fstat_r+0x1c>
 8003546:	6023      	str	r3, [r4, #0]
 8003548:	bd38      	pop	{r3, r4, r5, pc}
 800354a:	bf00      	nop
 800354c:	20000138 	.word	0x20000138

08003550 <_isatty_r>:
 8003550:	b538      	push	{r3, r4, r5, lr}
 8003552:	4d06      	ldr	r5, [pc, #24]	; (800356c <_isatty_r+0x1c>)
 8003554:	2300      	movs	r3, #0
 8003556:	4604      	mov	r4, r0
 8003558:	4608      	mov	r0, r1
 800355a:	602b      	str	r3, [r5, #0]
 800355c:	f7fd f96f 	bl	800083e <_isatty>
 8003560:	1c43      	adds	r3, r0, #1
 8003562:	d102      	bne.n	800356a <_isatty_r+0x1a>
 8003564:	682b      	ldr	r3, [r5, #0]
 8003566:	b103      	cbz	r3, 800356a <_isatty_r+0x1a>
 8003568:	6023      	str	r3, [r4, #0]
 800356a:	bd38      	pop	{r3, r4, r5, pc}
 800356c:	20000138 	.word	0x20000138

08003570 <_lseek_r>:
 8003570:	b538      	push	{r3, r4, r5, lr}
 8003572:	4d07      	ldr	r5, [pc, #28]	; (8003590 <_lseek_r+0x20>)
 8003574:	4604      	mov	r4, r0
 8003576:	4608      	mov	r0, r1
 8003578:	4611      	mov	r1, r2
 800357a:	2200      	movs	r2, #0
 800357c:	602a      	str	r2, [r5, #0]
 800357e:	461a      	mov	r2, r3
 8003580:	f7fd f968 	bl	8000854 <_lseek>
 8003584:	1c43      	adds	r3, r0, #1
 8003586:	d102      	bne.n	800358e <_lseek_r+0x1e>
 8003588:	682b      	ldr	r3, [r5, #0]
 800358a:	b103      	cbz	r3, 800358e <_lseek_r+0x1e>
 800358c:	6023      	str	r3, [r4, #0]
 800358e:	bd38      	pop	{r3, r4, r5, pc}
 8003590:	20000138 	.word	0x20000138

08003594 <__malloc_lock>:
 8003594:	4801      	ldr	r0, [pc, #4]	; (800359c <__malloc_lock+0x8>)
 8003596:	f7ff be43 	b.w	8003220 <__retarget_lock_acquire_recursive>
 800359a:	bf00      	nop
 800359c:	20000130 	.word	0x20000130

080035a0 <__malloc_unlock>:
 80035a0:	4801      	ldr	r0, [pc, #4]	; (80035a8 <__malloc_unlock+0x8>)
 80035a2:	f7ff be3e 	b.w	8003222 <__retarget_lock_release_recursive>
 80035a6:	bf00      	nop
 80035a8:	20000130 	.word	0x20000130

080035ac <_read_r>:
 80035ac:	b538      	push	{r3, r4, r5, lr}
 80035ae:	4d07      	ldr	r5, [pc, #28]	; (80035cc <_read_r+0x20>)
 80035b0:	4604      	mov	r4, r0
 80035b2:	4608      	mov	r0, r1
 80035b4:	4611      	mov	r1, r2
 80035b6:	2200      	movs	r2, #0
 80035b8:	602a      	str	r2, [r5, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	f7fd f8ea 	bl	8000794 <_read>
 80035c0:	1c43      	adds	r3, r0, #1
 80035c2:	d102      	bne.n	80035ca <_read_r+0x1e>
 80035c4:	682b      	ldr	r3, [r5, #0]
 80035c6:	b103      	cbz	r3, 80035ca <_read_r+0x1e>
 80035c8:	6023      	str	r3, [r4, #0]
 80035ca:	bd38      	pop	{r3, r4, r5, pc}
 80035cc:	20000138 	.word	0x20000138

080035d0 <_init>:
 80035d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d2:	bf00      	nop
 80035d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035d6:	bc08      	pop	{r3}
 80035d8:	469e      	mov	lr, r3
 80035da:	4770      	bx	lr

080035dc <_fini>:
 80035dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035de:	bf00      	nop
 80035e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035e2:	bc08      	pop	{r3}
 80035e4:	469e      	mov	lr, r3
 80035e6:	4770      	bx	lr
