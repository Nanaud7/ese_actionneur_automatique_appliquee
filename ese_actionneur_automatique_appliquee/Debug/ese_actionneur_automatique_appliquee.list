
ese_actionneur_automatique_appliquee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c7c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  08008e60  08008e60  00018e60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009334  08009334  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009334  08009334  00019334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800933c  0800933c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800933c  0800933c  0001933c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009340  08009340  00019340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009344  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  200001e8  0800952c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c8  0800952c  000206c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001604d  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d91  00000000  00000000  00036265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  00038ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a0  00000000  00000000  0003a1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ff66  00000000  00000000  0003b260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013632  00000000  00000000  0005b1c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c71f5  00000000  00000000  0006e7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001359ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ad0  00000000  00000000  00135a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008e44 	.word	0x08008e44

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	08008e44 	.word	0x08008e44

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	; 0x28
 8000ef4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f06:	4b3e      	ldr	r3, [pc, #248]	; (8001000 <MX_GPIO_Init+0x110>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0a:	4a3d      	ldr	r2, [pc, #244]	; (8001000 <MX_GPIO_Init+0x110>)
 8000f0c:	f043 0304 	orr.w	r3, r3, #4
 8000f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f12:	4b3b      	ldr	r3, [pc, #236]	; (8001000 <MX_GPIO_Init+0x110>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	f003 0304 	and.w	r3, r3, #4
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f1e:	4b38      	ldr	r3, [pc, #224]	; (8001000 <MX_GPIO_Init+0x110>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	4a37      	ldr	r2, [pc, #220]	; (8001000 <MX_GPIO_Init+0x110>)
 8000f24:	f043 0320 	orr.w	r3, r3, #32
 8000f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2a:	4b35      	ldr	r3, [pc, #212]	; (8001000 <MX_GPIO_Init+0x110>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	f003 0320 	and.w	r3, r3, #32
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	4b32      	ldr	r3, [pc, #200]	; (8001000 <MX_GPIO_Init+0x110>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3a:	4a31      	ldr	r2, [pc, #196]	; (8001000 <MX_GPIO_Init+0x110>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f42:	4b2f      	ldr	r3, [pc, #188]	; (8001000 <MX_GPIO_Init+0x110>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4e:	4b2c      	ldr	r3, [pc, #176]	; (8001000 <MX_GPIO_Init+0x110>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	4a2b      	ldr	r2, [pc, #172]	; (8001000 <MX_GPIO_Init+0x110>)
 8000f54:	f043 0302 	orr.w	r3, r3, #2
 8000f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5a:	4b29      	ldr	r3, [pc, #164]	; (8001000 <MX_GPIO_Init+0x110>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2103      	movs	r1, #3
 8000f6a:	4826      	ldr	r0, [pc, #152]	; (8001004 <MX_GPIO_Init+0x114>)
 8000f6c:	f001 fac0 	bl	80024f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN4_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2130      	movs	r1, #48	; 0x30
 8000f74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f78:	f001 faba 	bl	80024f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2101      	movs	r1, #1
 8000f80:	4821      	ldr	r0, [pc, #132]	; (8001008 <MX_GPIO_Init+0x118>)
 8000f82:	f001 fab5 	bl	80024f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	; (800100c <MX_GPIO_Init+0x11c>)
 8000f8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4619      	mov	r1, r3
 8000f9a:	481a      	ldr	r0, [pc, #104]	; (8001004 <MX_GPIO_Init+0x114>)
 8000f9c:	f001 f926 	bl	80021ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4813      	ldr	r0, [pc, #76]	; (8001004 <MX_GPIO_Init+0x114>)
 8000fb8:	f001 f918 	bl	80021ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IN4_Pin|LD2_Pin;
 8000fbc:	2330      	movs	r3, #48	; 0x30
 8000fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd6:	f001 f909 	bl	80021ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN3_Pin;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN3_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_GPIO_Init+0x118>)
 8000ff2:	f001 f8fb 	bl	80021ec <HAL_GPIO_Init>

}
 8000ff6:	bf00      	nop
 8000ff8:	3728      	adds	r7, #40	; 0x28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40021000 	.word	0x40021000
 8001004:	48000800 	.word	0x48000800
 8001008:	48000400 	.word	0x48000400
 800100c:	10110000 	.word	0x10110000

08001010 <fonction>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int fonction(int argc, char ** argv) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
	printf("Fonction Test\r\n");
 800101a:	4810      	ldr	r0, [pc, #64]	; (800105c <fonction+0x4c>)
 800101c:	f005 fea4 	bl	8006d68 <puts>

	printf("argc = %d\r\n", argc);
 8001020:	6879      	ldr	r1, [r7, #4]
 8001022:	480f      	ldr	r0, [pc, #60]	; (8001060 <fonction+0x50>)
 8001024:	f005 fe1a 	bl	8006c5c <iprintf>

	for (int i = 0 ; i < argc ; i++) {
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	e00c      	b.n	8001048 <fonction+0x38>
		printf("arg numero %d = %s\r\n", i, argv[i]);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	683a      	ldr	r2, [r7, #0]
 8001034:	4413      	add	r3, r2
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	68f9      	ldr	r1, [r7, #12]
 800103c:	4809      	ldr	r0, [pc, #36]	; (8001064 <fonction+0x54>)
 800103e:	f005 fe0d 	bl	8006c5c <iprintf>
	for (int i = 0 ; i < argc ; i++) {
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	3301      	adds	r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	429a      	cmp	r2, r3
 800104e:	dbee      	blt.n	800102e <fonction+0x1e>
	}

	return 0;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	08008e60 	.word	0x08008e60
 8001060:	08008e70 	.word	0x08008e70
 8001064:	08008e7c 	.word	0x08008e7c

08001068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106c:	f000 fe5b 	bl	8001d26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001070:	f000 f828 	bl	80010c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001074:	f7ff ff3c 	bl	8000ef0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001078:	f000 fd98 	bl	8001bac <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 800107c:	f000 fb8e 	bl	800179c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001080:	f000 fc2c 	bl	80018dc <MX_TIM2_Init>
  MX_TIM6_Init();
 8001084:	f000 fc7e 	bl	8001984 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  shell_init();
 8001088:	f000 f92e 	bl	80012e8 <shell_init>
  shell_add('f', fonction, "Une fonction inutile");
 800108c:	4a08      	ldr	r2, [pc, #32]	; (80010b0 <main+0x48>)
 800108e:	4909      	ldr	r1, [pc, #36]	; (80010b4 <main+0x4c>)
 8001090:	2066      	movs	r0, #102	; 0x66
 8001092:	f000 f955 	bl	8001340 <shell_add>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001096:	2100      	movs	r1, #0
 8001098:	4807      	ldr	r0, [pc, #28]	; (80010b8 <main+0x50>)
 800109a:	f002 fb33 	bl	8003704 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim6);
 800109e:	4807      	ldr	r0, [pc, #28]	; (80010bc <main+0x54>)
 80010a0:	f002 fa6e 	bl	8003580 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80010a4:	213c      	movs	r1, #60	; 0x3c
 80010a6:	4806      	ldr	r0, [pc, #24]	; (80010c0 <main+0x58>)
 80010a8:	f002 fcd2 	bl	8003a50 <HAL_TIM_Encoder_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010ac:	e7fe      	b.n	80010ac <main+0x44>
 80010ae:	bf00      	nop
 80010b0:	08008e94 	.word	0x08008e94
 80010b4:	08001011 	.word	0x08001011
 80010b8:	2000058c 	.word	0x2000058c
 80010bc:	20000540 	.word	0x20000540
 80010c0:	200005d8 	.word	0x200005d8

080010c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b0a4      	sub	sp, #144	; 0x90
 80010c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010ce:	2238      	movs	r2, #56	; 0x38
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f005 f950 	bl	8006378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e8:	463b      	mov	r3, r7
 80010ea:	2244      	movs	r2, #68	; 0x44
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f005 f942 	bl	8006378 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80010f4:	2000      	movs	r0, #0
 80010f6:	f001 fa13 	bl	8002520 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010fa:	2302      	movs	r3, #2
 80010fc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001102:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001104:	2340      	movs	r3, #64	; 0x40
 8001106:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001108:	2302      	movs	r3, #2
 800110a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800110c:	2302      	movs	r3, #2
 800110e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001110:	2304      	movs	r3, #4
 8001112:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001114:	2355      	movs	r3, #85	; 0x55
 8001116:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800111a:	2302      	movs	r3, #2
 800111c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001120:	2302      	movs	r3, #2
 8001122:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001126:	2302      	movs	r3, #2
 8001128:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800112c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001130:	4618      	mov	r0, r3
 8001132:	f001 faa9 	bl	8002688 <HAL_RCC_OscConfig>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800113c:	f000 f876 	bl	800122c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001140:	230f      	movs	r3, #15
 8001142:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001144:	2303      	movs	r3, #3
 8001146:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001148:	2300      	movs	r3, #0
 800114a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800114c:	2300      	movs	r3, #0
 800114e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001154:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001158:	2104      	movs	r1, #4
 800115a:	4618      	mov	r0, r3
 800115c:	f001 fdac 	bl	8002cb8 <HAL_RCC_ClockConfig>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001166:	f000 f861 	bl	800122c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800116a:	2320      	movs	r3, #32
 800116c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001172:	463b      	mov	r3, r7
 8001174:	4618      	mov	r0, r3
 8001176:	f001 ffbb 	bl	80030f0 <HAL_RCCEx_PeriphCLKConfig>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001180:	f000 f854 	bl	800122c <Error_Handler>
  }
}
 8001184:	bf00      	nop
 8001186:	3790      	adds	r7, #144	; 0x90
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	if(huart->Instance == LPUART1){
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a06      	ldr	r2, [pc, #24]	; (80011b4 <HAL_UART_RxCpltCallback+0x28>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d106      	bne.n	80011ac <HAL_UART_RxCpltCallback+0x20>
		shell_char_received();
 800119e:	f000 f90d 	bl	80013bc <shell_char_received>
		HAL_UART_Receive_IT(&hlpuart1, (uint8_t*)&c, 1);
 80011a2:	2201      	movs	r2, #1
 80011a4:	4904      	ldr	r1, [pc, #16]	; (80011b8 <HAL_UART_RxCpltCallback+0x2c>)
 80011a6:	4805      	ldr	r0, [pc, #20]	; (80011bc <HAL_UART_RxCpltCallback+0x30>)
 80011a8:	f003 fcf8 	bl	8004b9c <HAL_UART_Receive_IT>
	}
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40008000 	.word	0x40008000
 80011b8:	20000204 	.word	0x20000204
 80011bc:	20000624 	.word	0x20000624

080011c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a14      	ldr	r2, [pc, #80]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d121      	bne.n	8001216 <HAL_TIM_PeriodElapsedCallback+0x56>
		int16_t ticks = TIM2->CNT;
 80011d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d8:	81fb      	strh	r3, [r7, #14]
		TIM2->CNT = 0;
 80011da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011de:	2200      	movs	r2, #0
 80011e0:	625a      	str	r2, [r3, #36]	; 0x24
		printf("ticks = %d\t speed = %0.2f tr/s\r\n",ticks,(float)(ticks*10)/40);
 80011e2:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 80011e6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	ee07 3a90 	vmov	s15, r3
 80011f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011fa:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001224 <HAL_TIM_PeriodElapsedCallback+0x64>
 80011fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001202:	ee16 0a90 	vmov	r0, s13
 8001206:	f7ff f9c7 	bl	8000598 <__aeabi_f2d>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4621      	mov	r1, r4
 8001210:	4805      	ldr	r0, [pc, #20]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001212:	f005 fd23 	bl	8006c5c <iprintf>
	}
}
 8001216:	bf00      	nop
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	bd90      	pop	{r4, r7, pc}
 800121e:	bf00      	nop
 8001220:	40001000 	.word	0x40001000
 8001224:	42200000 	.word	0x42200000
 8001228:	08008eac 	.word	0x08008eac

0800122c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001230:	b672      	cpsid	i
}
 8001232:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001234:	e7fe      	b.n	8001234 <Error_Handler+0x8>
	...

08001238 <__io_putchar>:
static int shell_func_list_size = 0;
static shell_func_t shell_func_list[_SHELL_FUNC_LIST_MAX_SIZE];

static int dataReady = 0;

int __io_putchar(int ch) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001240:	1d39      	adds	r1, r7, #4
 8001242:	f04f 33ff 	mov.w	r3, #4294967295
 8001246:	2201      	movs	r2, #1
 8001248:	4803      	ldr	r0, [pc, #12]	; (8001258 <__io_putchar+0x20>)
 800124a:	f003 fc11 	bl	8004a70 <HAL_UART_Transmit>
	return ch;
 800124e:	687b      	ldr	r3, [r7, #4]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000624 	.word	0x20000624

0800125c <uart_write>:
	HAL_UART_Receive(&UART_DEVICE, (uint8_t*)(&c), 1, 0xFFFFFFFF);

	return c;
}

int uart_write(char * s, uint16_t size) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, 0xFFFF);
 8001268:	887a      	ldrh	r2, [r7, #2]
 800126a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	4803      	ldr	r0, [pc, #12]	; (8001280 <uart_write+0x24>)
 8001272:	f003 fbfd 	bl	8004a70 <HAL_UART_Transmit>
	return size;
 8001276:	887b      	ldrh	r3, [r7, #2]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000624 	.word	0x20000624

08001284 <sh_help>:

void uart_data_ready() {
	dataReady = 1;
}

int sh_help(int argc, char ** argv) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	e019      	b.n	80012c8 <sh_help+0x44>
		printf("%c %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 8001294:	4911      	ldr	r1, [pc, #68]	; (80012dc <sh_help+0x58>)
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	4613      	mov	r3, r2
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	4413      	add	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	440b      	add	r3, r1
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	490d      	ldr	r1, [pc, #52]	; (80012dc <sh_help+0x58>)
 80012a8:	68fa      	ldr	r2, [r7, #12]
 80012aa:	4613      	mov	r3, r2
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	4413      	add	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	440b      	add	r3, r1
 80012b4:	3308      	adds	r3, #8
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4601      	mov	r1, r0
 80012bc:	4808      	ldr	r0, [pc, #32]	; (80012e0 <sh_help+0x5c>)
 80012be:	f005 fccd 	bl	8006c5c <iprintf>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	3301      	adds	r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <sh_help+0x60>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	dbe0      	blt.n	8001294 <sh_help+0x10>
	}

	return 0;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000234 	.word	0x20000234
 80012e0:	08008ed0 	.word	0x08008ed0
 80012e4:	20000230 	.word	0x20000230

080012e8 <shell_init>:

void shell_init() {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
	printf("\r\n\r\n===== Shell =====\r\n");
 80012ee:	480f      	ldr	r0, [pc, #60]	; (800132c <shell_init+0x44>)
 80012f0:	f005 fd3a 	bl	8006d68 <puts>
	HAL_UART_Receive_IT(&UART_DEVICE, (uint8_t*)&c, 1);
 80012f4:	2201      	movs	r2, #1
 80012f6:	490e      	ldr	r1, [pc, #56]	; (8001330 <shell_init+0x48>)
 80012f8:	480e      	ldr	r0, [pc, #56]	; (8001334 <shell_init+0x4c>)
 80012fa:	f003 fc4f 	bl	8004b9c <HAL_UART_Receive_IT>
	//uart_write(prompt,sizeof(prompt));

	shell_add('h', sh_help, help);
 80012fe:	4a0e      	ldr	r2, [pc, #56]	; (8001338 <shell_init+0x50>)
 8001300:	490e      	ldr	r1, [pc, #56]	; (800133c <shell_init+0x54>)
 8001302:	2068      	movs	r0, #104	; 0x68
 8001304:	f000 f81c 	bl	8001340 <shell_add>

	for (int i = 0 ; i < 3 ; i++) {
 8001308:	2300      	movs	r3, #0
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	e005      	b.n	800131a <shell_init+0x32>

		HAL_Delay(200);
 800130e:	20c8      	movs	r0, #200	; 0xc8
 8001310:	f000 fd7a 	bl	8001e08 <HAL_Delay>
	for (int i = 0 ; i < 3 ; i++) {
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3301      	adds	r3, #1
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b02      	cmp	r3, #2
 800131e:	ddf6      	ble.n	800130e <shell_init+0x26>
	}
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	08008ed8 	.word	0x08008ed8
 8001330:	20000204 	.word	0x20000204
 8001334:	20000624 	.word	0x20000624
 8001338:	20000000 	.word	0x20000000
 800133c:	08001285 	.word	0x08001285

08001340 <shell_add>:

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
 800134c:	73fb      	strb	r3, [r7, #15]
	if (shell_func_list_size < _SHELL_FUNC_LIST_MAX_SIZE) {
 800134e:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <shell_add+0x74>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2b3f      	cmp	r3, #63	; 0x3f
 8001354:	dc26      	bgt.n	80013a4 <shell_add+0x64>
		shell_func_list[shell_func_list_size].c = c;
 8001356:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <shell_add+0x74>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	4917      	ldr	r1, [pc, #92]	; (80013b8 <shell_add+0x78>)
 800135c:	4613      	mov	r3, r2
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4413      	add	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	440b      	add	r3, r1
 8001366:	7bfa      	ldrb	r2, [r7, #15]
 8001368:	701a      	strb	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 800136a:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <shell_add+0x74>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	4912      	ldr	r1, [pc, #72]	; (80013b8 <shell_add+0x78>)
 8001370:	4613      	mov	r3, r2
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	4413      	add	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	3304      	adds	r3, #4
 800137c:	68ba      	ldr	r2, [r7, #8]
 800137e:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <shell_add+0x74>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	490c      	ldr	r1, [pc, #48]	; (80013b8 <shell_add+0x78>)
 8001386:	4613      	mov	r3, r2
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	4413      	add	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	440b      	add	r3, r1
 8001390:	3308      	adds	r3, #8
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 8001396:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <shell_add+0x74>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	3301      	adds	r3, #1
 800139c:	4a05      	ldr	r2, [pc, #20]	; (80013b4 <shell_add+0x74>)
 800139e:	6013      	str	r3, [r2, #0]
		return 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	e001      	b.n	80013a8 <shell_add+0x68>
	}

	return -1;
 80013a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	20000230 	.word	0x20000230
 80013b8:	20000234 	.word	0x20000234

080013bc <shell_char_received>:

void shell_char_received() {
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0

	switch (c) {
 80013c0:	4b23      	ldr	r3, [pc, #140]	; (8001450 <shell_char_received+0x94>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b08      	cmp	r3, #8
 80013c6:	d01c      	beq.n	8001402 <shell_char_received+0x46>
 80013c8:	2b0d      	cmp	r3, #13
 80013ca:	d129      	bne.n	8001420 <shell_char_received+0x64>

	case '\r':
		// Enter
		printf("\r\n");
 80013cc:	4821      	ldr	r0, [pc, #132]	; (8001454 <shell_char_received+0x98>)
 80013ce:	f005 fccb 	bl	8006d68 <puts>
		buf[pos++] = 0;
 80013d2:	4b21      	ldr	r3, [pc, #132]	; (8001458 <shell_char_received+0x9c>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	1c5a      	adds	r2, r3, #1
 80013d8:	b2d1      	uxtb	r1, r2
 80013da:	4a1f      	ldr	r2, [pc, #124]	; (8001458 <shell_char_received+0x9c>)
 80013dc:	7011      	strb	r1, [r2, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	4b1e      	ldr	r3, [pc, #120]	; (800145c <shell_char_received+0xa0>)
 80013e2:	2100      	movs	r1, #0
 80013e4:	5499      	strb	r1, [r3, r2]
		printf(":%s\r\n", buf);
 80013e6:	491d      	ldr	r1, [pc, #116]	; (800145c <shell_char_received+0xa0>)
 80013e8:	481d      	ldr	r0, [pc, #116]	; (8001460 <shell_char_received+0xa4>)
 80013ea:	f005 fc37 	bl	8006c5c <iprintf>
		pos = 0;
 80013ee:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <shell_char_received+0x9c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
		shell_exec(buf[0], buf);
 80013f4:	4b19      	ldr	r3, [pc, #100]	; (800145c <shell_char_received+0xa0>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4918      	ldr	r1, [pc, #96]	; (800145c <shell_char_received+0xa0>)
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 f834 	bl	8001468 <shell_exec>
		break;
 8001400:	e023      	b.n	800144a <shell_char_received+0x8e>

		// Delete
	case '\b':
		if (pos > 0) {
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <shell_char_received+0x9c>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d01e      	beq.n	8001448 <shell_char_received+0x8c>
			pos--;
 800140a:	4b13      	ldr	r3, [pc, #76]	; (8001458 <shell_char_received+0x9c>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	3b01      	subs	r3, #1
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <shell_char_received+0x9c>)
 8001414:	701a      	strb	r2, [r3, #0]
			uart_write(backspace, 3);
 8001416:	2103      	movs	r1, #3
 8001418:	4812      	ldr	r0, [pc, #72]	; (8001464 <shell_char_received+0xa8>)
 800141a:	f7ff ff1f 	bl	800125c <uart_write>
		}
		break;
 800141e:	e013      	b.n	8001448 <shell_char_received+0x8c>

	default:
		if (pos < BUFFER_SIZE) {
 8001420:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <shell_char_received+0x9c>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b27      	cmp	r3, #39	; 0x27
 8001426:	d810      	bhi.n	800144a <shell_char_received+0x8e>
			uart_write(&c, 1);
 8001428:	2101      	movs	r1, #1
 800142a:	4809      	ldr	r0, [pc, #36]	; (8001450 <shell_char_received+0x94>)
 800142c:	f7ff ff16 	bl	800125c <uart_write>
			buf[pos++] = c;
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <shell_char_received+0x9c>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	1c5a      	adds	r2, r3, #1
 8001436:	b2d1      	uxtb	r1, r2
 8001438:	4a07      	ldr	r2, [pc, #28]	; (8001458 <shell_char_received+0x9c>)
 800143a:	7011      	strb	r1, [r2, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	4b04      	ldr	r3, [pc, #16]	; (8001450 <shell_char_received+0x94>)
 8001440:	7819      	ldrb	r1, [r3, #0]
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <shell_char_received+0xa0>)
 8001444:	5499      	strb	r1, [r3, r2]
		}
	}
}
 8001446:	e000      	b.n	800144a <shell_char_received+0x8e>
		break;
 8001448:	bf00      	nop
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000204 	.word	0x20000204
 8001454:	08008ef0 	.word	0x08008ef0
 8001458:	20000205 	.word	0x20000205
 800145c:	20000208 	.word	0x20000208
 8001460:	08008ef4 	.word	0x08008ef4
 8001464:	20000008 	.word	0x20000008

08001468 <shell_exec>:

int shell_exec(char c, char * buf) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b08e      	sub	sp, #56	; 0x38
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	6039      	str	r1, [r7, #0]
 8001472:	71fb      	strb	r3, [r7, #7]

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < shell_func_list_size ; i++) {
 8001474:	2300      	movs	r3, #0
 8001476:	637b      	str	r3, [r7, #52]	; 0x34
 8001478:	e040      	b.n	80014fc <shell_exec+0x94>
		if (shell_func_list[i].c == c) {
 800147a:	4928      	ldr	r1, [pc, #160]	; (800151c <shell_exec+0xb4>)
 800147c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800147e:	4613      	mov	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4413      	add	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	440b      	add	r3, r1
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	79fa      	ldrb	r2, [r7, #7]
 800148c:	429a      	cmp	r2, r3
 800148e:	d132      	bne.n	80014f6 <shell_exec+0x8e>
			argc = 1;
 8001490:	2301      	movs	r3, #1
 8001492:	633b      	str	r3, [r7, #48]	; 0x30
			argv[0] = buf;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800149c:	e014      	b.n	80014c8 <shell_exec+0x60>
				if(*p == ' ') {
 800149e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b20      	cmp	r3, #32
 80014a4:	d10d      	bne.n	80014c2 <shell_exec+0x5a>
					*p = '\0';
 80014a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a8:	2200      	movs	r2, #0
 80014aa:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 80014ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ae:	1c5a      	adds	r2, r3, #1
 80014b0:	633a      	str	r2, [r7, #48]	; 0x30
 80014b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014b4:	3201      	adds	r2, #1
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80014bc:	440b      	add	r3, r1
 80014be:	f843 2c2c 	str.w	r2, [r3, #-44]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 80014c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c4:	3301      	adds	r3, #1
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <shell_exec+0x6e>
 80014d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014d2:	2b07      	cmp	r3, #7
 80014d4:	dde3      	ble.n	800149e <shell_exec+0x36>
				}
			}

			return shell_func_list[i].func(argc, argv);
 80014d6:	4911      	ldr	r1, [pc, #68]	; (800151c <shell_exec+0xb4>)
 80014d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014da:	4613      	mov	r3, r2
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4413      	add	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	440b      	add	r3, r1
 80014e4:	3304      	adds	r3, #4
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f107 020c 	add.w	r2, r7, #12
 80014ec:	4611      	mov	r1, r2
 80014ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80014f0:	4798      	blx	r3
 80014f2:	4603      	mov	r3, r0
 80014f4:	e00e      	b.n	8001514 <shell_exec+0xac>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 80014f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014f8:	3301      	adds	r3, #1
 80014fa:	637b      	str	r3, [r7, #52]	; 0x34
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <shell_exec+0xb8>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001502:	429a      	cmp	r2, r3
 8001504:	dbb9      	blt.n	800147a <shell_exec+0x12>
		}
	}
	printf("%c: no such command\r\n", c);
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	4619      	mov	r1, r3
 800150a:	4806      	ldr	r0, [pc, #24]	; (8001524 <shell_exec+0xbc>)
 800150c:	f005 fba6 	bl	8006c5c <iprintf>
	return -1;
 8001510:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001514:	4618      	mov	r0, r3
 8001516:	3738      	adds	r7, #56	; 0x38
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000234 	.word	0x20000234
 8001520:	20000230 	.word	0x20000230
 8001524:	08008efc 	.word	0x08008efc

08001528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <HAL_MspInit+0x44>)
 8001530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001532:	4a0e      	ldr	r2, [pc, #56]	; (800156c <HAL_MspInit+0x44>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6613      	str	r3, [r2, #96]	; 0x60
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <HAL_MspInit+0x44>)
 800153c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <HAL_MspInit+0x44>)
 8001548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154a:	4a08      	ldr	r2, [pc, #32]	; (800156c <HAL_MspInit+0x44>)
 800154c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001550:	6593      	str	r3, [r2, #88]	; 0x58
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_MspInit+0x44>)
 8001554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800155e:	f001 f883 	bl	8002668 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40021000 	.word	0x40021000

08001570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <NMI_Handler+0x4>

08001576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157a:	e7fe      	b.n	800157a <HardFault_Handler+0x4>

0800157c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <MemManage_Handler+0x4>

08001582 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001586:	e7fe      	b.n	8001586 <BusFault_Handler+0x4>

08001588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800158c:	e7fe      	b.n	800158c <UsageFault_Handler+0x4>

0800158e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015bc:	f000 fc06 	bl	8001dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015c8:	4802      	ldr	r0, [pc, #8]	; (80015d4 <TIM6_DAC_IRQHandler+0x10>)
 80015ca:	f002 facf 	bl	8003b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000540 	.word	0x20000540

080015d8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80015dc:	4802      	ldr	r0, [pc, #8]	; (80015e8 <LPUART1_IRQHandler+0x10>)
 80015de:	f003 fb23 	bl	8004c28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000624 	.word	0x20000624

080015ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
	return 1;
 80015f0:	2301      	movs	r3, #1
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <_kill>:

int _kill(int pid, int sig)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001606:	f004 fe8d 	bl	8006324 <__errno>
 800160a:	4603      	mov	r3, r0
 800160c:	2216      	movs	r2, #22
 800160e:	601a      	str	r2, [r3, #0]
	return -1;
 8001610:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <_exit>:

void _exit (int status)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001624:	f04f 31ff 	mov.w	r1, #4294967295
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ffe7 	bl	80015fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800162e:	e7fe      	b.n	800162e <_exit+0x12>

08001630 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	e00a      	b.n	8001658 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001642:	f3af 8000 	nop.w
 8001646:	4601      	mov	r1, r0
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	1c5a      	adds	r2, r3, #1
 800164c:	60ba      	str	r2, [r7, #8]
 800164e:	b2ca      	uxtb	r2, r1
 8001650:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	3301      	adds	r3, #1
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	429a      	cmp	r2, r3
 800165e:	dbf0      	blt.n	8001642 <_read+0x12>
	}

return len;
 8001660:	687b      	ldr	r3, [r7, #4]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b086      	sub	sp, #24
 800166e:	af00      	add	r7, sp, #0
 8001670:	60f8      	str	r0, [r7, #12]
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	e009      	b.n	8001690 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	1c5a      	adds	r2, r3, #1
 8001680:	60ba      	str	r2, [r7, #8]
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fdd7 	bl	8001238 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	3301      	adds	r3, #1
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	429a      	cmp	r2, r3
 8001696:	dbf1      	blt.n	800167c <_write+0x12>
	}
	return len;
 8001698:	687b      	ldr	r3, [r7, #4]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <_close>:

int _close(int file)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
	return -1;
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ca:	605a      	str	r2, [r3, #4]
	return 0;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <_isatty>:

int _isatty(int file)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
	return 1;
 80016e2:	2301      	movs	r3, #1
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
	return 0;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
	...

0800170c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001714:	4a14      	ldr	r2, [pc, #80]	; (8001768 <_sbrk+0x5c>)
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <_sbrk+0x60>)
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001720:	4b13      	ldr	r3, [pc, #76]	; (8001770 <_sbrk+0x64>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d102      	bne.n	800172e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001728:	4b11      	ldr	r3, [pc, #68]	; (8001770 <_sbrk+0x64>)
 800172a:	4a12      	ldr	r2, [pc, #72]	; (8001774 <_sbrk+0x68>)
 800172c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <_sbrk+0x64>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	429a      	cmp	r2, r3
 800173a:	d207      	bcs.n	800174c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800173c:	f004 fdf2 	bl	8006324 <__errno>
 8001740:	4603      	mov	r3, r0
 8001742:	220c      	movs	r2, #12
 8001744:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001746:	f04f 33ff 	mov.w	r3, #4294967295
 800174a:	e009      	b.n	8001760 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800174c:	4b08      	ldr	r3, [pc, #32]	; (8001770 <_sbrk+0x64>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001752:	4b07      	ldr	r3, [pc, #28]	; (8001770 <_sbrk+0x64>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	4a05      	ldr	r2, [pc, #20]	; (8001770 <_sbrk+0x64>)
 800175c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800175e:	68fb      	ldr	r3, [r7, #12]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20008000 	.word	0x20008000
 800176c:	00000400 	.word	0x00000400
 8001770:	20000534 	.word	0x20000534
 8001774:	200006c8 	.word	0x200006c8

08001778 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <SystemInit+0x20>)
 800177e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001782:	4a05      	ldr	r2, [pc, #20]	; (8001798 <SystemInit+0x20>)
 8001784:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001788:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b098      	sub	sp, #96	; 0x60
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
 80017bc:	611a      	str	r2, [r3, #16]
 80017be:	615a      	str	r2, [r3, #20]
 80017c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	2234      	movs	r2, #52	; 0x34
 80017c6:	2100      	movs	r1, #0
 80017c8:	4618      	mov	r0, r3
 80017ca:	f004 fdd5 	bl	8006378 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017ce:	4b41      	ldr	r3, [pc, #260]	; (80018d4 <MX_TIM1_Init+0x138>)
 80017d0:	4a41      	ldr	r2, [pc, #260]	; (80018d8 <MX_TIM1_Init+0x13c>)
 80017d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10;
 80017d4:	4b3f      	ldr	r3, [pc, #252]	; (80018d4 <MX_TIM1_Init+0x138>)
 80017d6:	220a      	movs	r2, #10
 80017d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017da:	4b3e      	ldr	r3, [pc, #248]	; (80018d4 <MX_TIM1_Init+0x138>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 80017e0:	4b3c      	ldr	r3, [pc, #240]	; (80018d4 <MX_TIM1_Init+0x138>)
 80017e2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80017e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e8:	4b3a      	ldr	r3, [pc, #232]	; (80018d4 <MX_TIM1_Init+0x138>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017ee:	4b39      	ldr	r3, [pc, #228]	; (80018d4 <MX_TIM1_Init+0x138>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f4:	4b37      	ldr	r3, [pc, #220]	; (80018d4 <MX_TIM1_Init+0x138>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80017fa:	4836      	ldr	r0, [pc, #216]	; (80018d4 <MX_TIM1_Init+0x138>)
 80017fc:	f001 ff2a 	bl	8003654 <HAL_TIM_OC_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001806:	f7ff fd11 	bl	800122c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800180a:	2300      	movs	r3, #0
 800180c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800180e:	2300      	movs	r3, #0
 8001810:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001816:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800181a:	4619      	mov	r1, r3
 800181c:	482d      	ldr	r0, [pc, #180]	; (80018d4 <MX_TIM1_Init+0x138>)
 800181e:	f002 ff6f 	bl	8004700 <HAL_TIMEx_MasterConfigSynchronization>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001828:	f7ff fd00 	bl	800122c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800182c:	2300      	movs	r3, #0
 800182e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001834:	2300      	movs	r3, #0
 8001836:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001838:	2300      	movs	r3, #0
 800183a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800183c:	2300      	movs	r3, #0
 800183e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001840:	2300      	movs	r3, #0
 8001842:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001844:	2300      	movs	r3, #0
 8001846:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001848:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800184c:	2200      	movs	r2, #0
 800184e:	4619      	mov	r1, r3
 8001850:	4820      	ldr	r0, [pc, #128]	; (80018d4 <MX_TIM1_Init+0x138>)
 8001852:	f002 fb0b 	bl	8003e6c <HAL_TIM_OC_ConfigChannel>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800185c:	f7ff fce6 	bl	800122c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001860:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001864:	2204      	movs	r2, #4
 8001866:	4619      	mov	r1, r3
 8001868:	481a      	ldr	r0, [pc, #104]	; (80018d4 <MX_TIM1_Init+0x138>)
 800186a:	f002 faff 	bl	8003e6c <HAL_TIM_OC_ConfigChannel>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001874:	f7ff fcda 	bl	800122c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800187c:	2300      	movs	r3, #0
 800187e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 203;
 8001884:	23cb      	movs	r3, #203	; 0xcb
 8001886:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800188c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001890:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001896:	2300      	movs	r3, #0
 8001898:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800189a:	2300      	movs	r3, #0
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800189e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80018a8:	2300      	movs	r3, #0
 80018aa:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018b0:	1d3b      	adds	r3, r7, #4
 80018b2:	4619      	mov	r1, r3
 80018b4:	4807      	ldr	r0, [pc, #28]	; (80018d4 <MX_TIM1_Init+0x138>)
 80018b6:	f002 ffa5 	bl	8004804 <HAL_TIMEx_ConfigBreakDeadTime>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80018c0:	f7ff fcb4 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018c4:	4803      	ldr	r0, [pc, #12]	; (80018d4 <MX_TIM1_Init+0x138>)
 80018c6:	f000 f91b 	bl	8001b00 <HAL_TIM_MspPostInit>

}
 80018ca:	bf00      	nop
 80018cc:	3760      	adds	r7, #96	; 0x60
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	2000058c 	.word	0x2000058c
 80018d8:	40012c00 	.word	0x40012c00

080018dc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08c      	sub	sp, #48	; 0x30
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018e2:	f107 030c 	add.w	r3, r7, #12
 80018e6:	2224      	movs	r2, #36	; 0x24
 80018e8:	2100      	movs	r1, #0
 80018ea:	4618      	mov	r0, r3
 80018ec:	f004 fd44 	bl	8006378 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f0:	463b      	mov	r3, r7
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018fa:	4b21      	ldr	r3, [pc, #132]	; (8001980 <MX_TIM2_Init+0xa4>)
 80018fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001900:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001902:	4b1f      	ldr	r3, [pc, #124]	; (8001980 <MX_TIM2_Init+0xa4>)
 8001904:	2200      	movs	r2, #0
 8001906:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001908:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <MX_TIM2_Init+0xa4>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 800190e:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <MX_TIM2_Init+0xa4>)
 8001910:	f04f 32ff 	mov.w	r2, #4294967295
 8001914:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001916:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <MX_TIM2_Init+0xa4>)
 8001918:	2200      	movs	r2, #0
 800191a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191c:	4b18      	ldr	r3, [pc, #96]	; (8001980 <MX_TIM2_Init+0xa4>)
 800191e:	2200      	movs	r2, #0
 8001920:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001922:	2301      	movs	r3, #1
 8001924:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800192a:	2301      	movs	r3, #1
 800192c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800192e:	2300      	movs	r3, #0
 8001930:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001936:	2300      	movs	r3, #0
 8001938:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800193a:	2301      	movs	r3, #1
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800193e:	2300      	movs	r3, #0
 8001940:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001946:	f107 030c 	add.w	r3, r7, #12
 800194a:	4619      	mov	r1, r3
 800194c:	480c      	ldr	r0, [pc, #48]	; (8001980 <MX_TIM2_Init+0xa4>)
 800194e:	f001 ffd9 	bl	8003904 <HAL_TIM_Encoder_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001958:	f7ff fc68 	bl	800122c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800195c:	2300      	movs	r3, #0
 800195e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001960:	2300      	movs	r3, #0
 8001962:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001964:	463b      	mov	r3, r7
 8001966:	4619      	mov	r1, r3
 8001968:	4805      	ldr	r0, [pc, #20]	; (8001980 <MX_TIM2_Init+0xa4>)
 800196a:	f002 fec9 	bl	8004700 <HAL_TIMEx_MasterConfigSynchronization>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001974:	f7ff fc5a 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001978:	bf00      	nop
 800197a:	3730      	adds	r7, #48	; 0x30
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	200005d8 	.word	0x200005d8

08001984 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001994:	4b15      	ldr	r3, [pc, #84]	; (80019ec <MX_TIM6_Init+0x68>)
 8001996:	4a16      	ldr	r2, [pc, #88]	; (80019f0 <MX_TIM6_Init+0x6c>)
 8001998:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 17000-1;
 800199a:	4b14      	ldr	r3, [pc, #80]	; (80019ec <MX_TIM6_Init+0x68>)
 800199c:	f244 2267 	movw	r2, #16999	; 0x4267
 80019a0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <MX_TIM6_Init+0x68>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80019a8:	4b10      	ldr	r3, [pc, #64]	; (80019ec <MX_TIM6_Init+0x68>)
 80019aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019ae:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b0:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <MX_TIM6_Init+0x68>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80019b6:	480d      	ldr	r0, [pc, #52]	; (80019ec <MX_TIM6_Init+0x68>)
 80019b8:	f001 fd8a 	bl	80034d0 <HAL_TIM_Base_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80019c2:	f7ff fc33 	bl	800122c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	4619      	mov	r1, r3
 80019d2:	4806      	ldr	r0, [pc, #24]	; (80019ec <MX_TIM6_Init+0x68>)
 80019d4:	f002 fe94 	bl	8004700 <HAL_TIMEx_MasterConfigSynchronization>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80019de:	f7ff fc25 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000540 	.word	0x20000540
 80019f0:	40001000 	.word	0x40001000

080019f4 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <HAL_TIM_OC_MspInit+0x38>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d10b      	bne.n	8001a1e <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a06:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <HAL_TIM_OC_MspInit+0x3c>)
 8001a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a0a:	4a09      	ldr	r2, [pc, #36]	; (8001a30 <HAL_TIM_OC_MspInit+0x3c>)
 8001a0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a10:	6613      	str	r3, [r2, #96]	; 0x60
 8001a12:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <HAL_TIM_OC_MspInit+0x3c>)
 8001a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001a1e:	bf00      	nop
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40012c00 	.word	0x40012c00
 8001a30:	40021000 	.word	0x40021000

08001a34 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08a      	sub	sp, #40	; 0x28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a54:	d128      	bne.n	8001aa8 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a56:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5a:	4a15      	ldr	r2, [pc, #84]	; (8001ab0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	6593      	str	r3, [r2, #88]	; 0x58
 8001a62:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	4a0f      	ldr	r2, [pc, #60]	; (8001ab0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a7a:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8001a86:	2303      	movs	r3, #3
 8001a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a92:	2300      	movs	r3, #0
 8001a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a96:	2301      	movs	r3, #1
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9a:	f107 0314 	add.w	r3, r7, #20
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa4:	f000 fba2 	bl	80021ec <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	3728      	adds	r7, #40	; 0x28
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40021000 	.word	0x40021000

08001ab4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a0d      	ldr	r2, [pc, #52]	; (8001af8 <HAL_TIM_Base_MspInit+0x44>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d113      	bne.n	8001aee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001ac6:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <HAL_TIM_Base_MspInit+0x48>)
 8001ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aca:	4a0c      	ldr	r2, [pc, #48]	; (8001afc <HAL_TIM_Base_MspInit+0x48>)
 8001acc:	f043 0310 	orr.w	r3, r3, #16
 8001ad0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <HAL_TIM_Base_MspInit+0x48>)
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad6:	f003 0310 	and.w	r3, r3, #16
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	2036      	movs	r0, #54	; 0x36
 8001ae4:	f000 fa8d 	bl	8002002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ae8:	2036      	movs	r0, #54	; 0x36
 8001aea:	f000 faa4 	bl	8002036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001aee:	bf00      	nop
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40001000 	.word	0x40001000
 8001afc:	40021000 	.word	0x40021000

08001b00 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08a      	sub	sp, #40	; 0x28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a20      	ldr	r2, [pc, #128]	; (8001ba0 <HAL_TIM_MspPostInit+0xa0>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d13a      	bne.n	8001b98 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b22:	4b20      	ldr	r3, [pc, #128]	; (8001ba4 <HAL_TIM_MspPostInit+0xa4>)
 8001b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b26:	4a1f      	ldr	r2, [pc, #124]	; (8001ba4 <HAL_TIM_MspPostInit+0xa4>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <HAL_TIM_MspPostInit+0xa4>)
 8001b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3a:	4b1a      	ldr	r3, [pc, #104]	; (8001ba4 <HAL_TIM_MspPostInit+0xa4>)
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3e:	4a19      	ldr	r2, [pc, #100]	; (8001ba4 <HAL_TIM_MspPostInit+0xa4>)
 8001b40:	f043 0302 	orr.w	r3, r3, #2
 8001b44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b46:	4b17      	ldr	r3, [pc, #92]	; (8001ba4 <HAL_TIM_MspPostInit+0xa4>)
 8001b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001b52:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	2300      	movs	r3, #0
 8001b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001b64:	2306      	movs	r3, #6
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b72:	f000 fb3b 	bl	80021ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001b76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b84:	2300      	movs	r3, #0
 8001b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001b88:	2306      	movs	r3, #6
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	4619      	mov	r1, r3
 8001b92:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <HAL_TIM_MspPostInit+0xa8>)
 8001b94:	f000 fb2a 	bl	80021ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b98:	bf00      	nop
 8001b9a:	3728      	adds	r7, #40	; 0x28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40012c00 	.word	0x40012c00
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	48000400 	.word	0x48000400

08001bac <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001bb0:	4b21      	ldr	r3, [pc, #132]	; (8001c38 <MX_LPUART1_UART_Init+0x8c>)
 8001bb2:	4a22      	ldr	r2, [pc, #136]	; (8001c3c <MX_LPUART1_UART_Init+0x90>)
 8001bb4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001bb6:	4b20      	ldr	r3, [pc, #128]	; (8001c38 <MX_LPUART1_UART_Init+0x8c>)
 8001bb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bbc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bbe:	4b1e      	ldr	r3, [pc, #120]	; (8001c38 <MX_LPUART1_UART_Init+0x8c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001bc4:	4b1c      	ldr	r3, [pc, #112]	; (8001c38 <MX_LPUART1_UART_Init+0x8c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001bca:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <MX_LPUART1_UART_Init+0x8c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001bd0:	4b19      	ldr	r3, [pc, #100]	; (8001c38 <MX_LPUART1_UART_Init+0x8c>)
 8001bd2:	220c      	movs	r2, #12
 8001bd4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bd6:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <MX_LPUART1_UART_Init+0x8c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bdc:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <MX_LPUART1_UART_Init+0x8c>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <MX_LPUART1_UART_Init+0x8c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001be8:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <MX_LPUART1_UART_Init+0x8c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001bee:	4812      	ldr	r0, [pc, #72]	; (8001c38 <MX_LPUART1_UART_Init+0x8c>)
 8001bf0:	f002 feee 	bl	80049d0 <HAL_UART_Init>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001bfa:	f7ff fb17 	bl	800122c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bfe:	2100      	movs	r1, #0
 8001c00:	480d      	ldr	r0, [pc, #52]	; (8001c38 <MX_LPUART1_UART_Init+0x8c>)
 8001c02:	f004 fac4 	bl	800618e <HAL_UARTEx_SetTxFifoThreshold>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001c0c:	f7ff fb0e 	bl	800122c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c10:	2100      	movs	r1, #0
 8001c12:	4809      	ldr	r0, [pc, #36]	; (8001c38 <MX_LPUART1_UART_Init+0x8c>)
 8001c14:	f004 faf9 	bl	800620a <HAL_UARTEx_SetRxFifoThreshold>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001c1e:	f7ff fb05 	bl	800122c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001c22:	4805      	ldr	r0, [pc, #20]	; (8001c38 <MX_LPUART1_UART_Init+0x8c>)
 8001c24:	f004 fa7a 	bl	800611c <HAL_UARTEx_DisableFifoMode>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001c2e:	f7ff fafd 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000624 	.word	0x20000624
 8001c3c:	40008000 	.word	0x40008000

08001c40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	; 0x28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a1b      	ldr	r2, [pc, #108]	; (8001ccc <HAL_UART_MspInit+0x8c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d130      	bne.n	8001cc4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001c62:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <HAL_UART_MspInit+0x90>)
 8001c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c66:	4a1a      	ldr	r2, [pc, #104]	; (8001cd0 <HAL_UART_MspInit+0x90>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001c6e:	4b18      	ldr	r3, [pc, #96]	; (8001cd0 <HAL_UART_MspInit+0x90>)
 8001c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <HAL_UART_MspInit+0x90>)
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7e:	4a14      	ldr	r2, [pc, #80]	; (8001cd0 <HAL_UART_MspInit+0x90>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c86:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_UART_MspInit+0x90>)
 8001c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001c92:	230c      	movs	r3, #12
 8001c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c96:	2302      	movs	r3, #2
 8001c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001ca2:	230c      	movs	r3, #12
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca6:	f107 0314 	add.w	r3, r7, #20
 8001caa:	4619      	mov	r1, r3
 8001cac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb0:	f000 fa9c 	bl	80021ec <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	205b      	movs	r0, #91	; 0x5b
 8001cba:	f000 f9a2 	bl	8002002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001cbe:	205b      	movs	r0, #91	; 0x5b
 8001cc0:	f000 f9b9 	bl	8002036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	3728      	adds	r7, #40	; 0x28
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40008000 	.word	0x40008000
 8001cd0:	40021000 	.word	0x40021000

08001cd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cd4:	480d      	ldr	r0, [pc, #52]	; (8001d0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cd6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cd8:	480d      	ldr	r0, [pc, #52]	; (8001d10 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cda:	490e      	ldr	r1, [pc, #56]	; (8001d14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cdc:	4a0e      	ldr	r2, [pc, #56]	; (8001d18 <LoopForever+0xe>)
  movs r3, #0
 8001cde:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001ce0:	e002      	b.n	8001ce8 <LoopCopyDataInit>

08001ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ce6:	3304      	adds	r3, #4

08001ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cec:	d3f9      	bcc.n	8001ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cee:	4a0b      	ldr	r2, [pc, #44]	; (8001d1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cf0:	4c0b      	ldr	r4, [pc, #44]	; (8001d20 <LoopForever+0x16>)
  movs r3, #0
 8001cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf4:	e001      	b.n	8001cfa <LoopFillZerobss>

08001cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf8:	3204      	adds	r2, #4

08001cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cfc:	d3fb      	bcc.n	8001cf6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cfe:	f7ff fd3b 	bl	8001778 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d02:	f004 fb15 	bl	8006330 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d06:	f7ff f9af 	bl	8001068 <main>

08001d0a <LoopForever>:

LoopForever:
    b LoopForever
 8001d0a:	e7fe      	b.n	8001d0a <LoopForever>
  ldr   r0, =_estack
 8001d0c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d14:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001d18:	08009344 	.word	0x08009344
  ldr r2, =_sbss
 8001d1c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001d20:	200006c8 	.word	0x200006c8

08001d24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d24:	e7fe      	b.n	8001d24 <ADC1_2_IRQHandler>

08001d26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d30:	2003      	movs	r0, #3
 8001d32:	f000 f95b 	bl	8001fec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d36:	2000      	movs	r0, #0
 8001d38:	f000 f80e 	bl	8001d58 <HAL_InitTick>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	71fb      	strb	r3, [r7, #7]
 8001d46:	e001      	b.n	8001d4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d48:	f7ff fbee 	bl	8001528 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d4c:	79fb      	ldrb	r3, [r7, #7]

}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d60:	2300      	movs	r3, #0
 8001d62:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d64:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <HAL_InitTick+0x68>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d022      	beq.n	8001db2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d6c:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <HAL_InitTick+0x6c>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <HAL_InitTick+0x68>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d78:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d80:	4618      	mov	r0, r3
 8001d82:	f000 f966 	bl	8002052 <HAL_SYSTICK_Config>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10f      	bne.n	8001dac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b0f      	cmp	r3, #15
 8001d90:	d809      	bhi.n	8001da6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d92:	2200      	movs	r2, #0
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	f04f 30ff 	mov.w	r0, #4294967295
 8001d9a:	f000 f932 	bl	8002002 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <HAL_InitTick+0x70>)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	e007      	b.n	8001db6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	73fb      	strb	r3, [r7, #15]
 8001daa:	e004      	b.n	8001db6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	73fb      	strb	r3, [r7, #15]
 8001db0:	e001      	b.n	8001db6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000014 	.word	0x20000014
 8001dc4:	2000000c 	.word	0x2000000c
 8001dc8:	20000010 	.word	0x20000010

08001dcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dd0:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <HAL_IncTick+0x1c>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <HAL_IncTick+0x20>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4413      	add	r3, r2
 8001dda:	4a03      	ldr	r2, [pc, #12]	; (8001de8 <HAL_IncTick+0x1c>)
 8001ddc:	6013      	str	r3, [r2, #0]
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	200006b4 	.word	0x200006b4
 8001dec:	20000014 	.word	0x20000014

08001df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return uwTick;
 8001df4:	4b03      	ldr	r3, [pc, #12]	; (8001e04 <HAL_GetTick+0x14>)
 8001df6:	681b      	ldr	r3, [r3, #0]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	200006b4 	.word	0x200006b4

08001e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e10:	f7ff ffee 	bl	8001df0 <HAL_GetTick>
 8001e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e20:	d004      	beq.n	8001e2c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e22:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <HAL_Delay+0x40>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	4413      	add	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e2c:	bf00      	nop
 8001e2e:	f7ff ffdf 	bl	8001df0 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d8f7      	bhi.n	8001e2e <HAL_Delay+0x26>
  {
  }
}
 8001e3e:	bf00      	nop
 8001e40:	bf00      	nop
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20000014 	.word	0x20000014

08001e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <__NVIC_SetPriorityGrouping+0x44>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e7e:	4a04      	ldr	r2, [pc, #16]	; (8001e90 <__NVIC_SetPriorityGrouping+0x44>)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	60d3      	str	r3, [r2, #12]
}
 8001e84:	bf00      	nop
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e98:	4b04      	ldr	r3, [pc, #16]	; (8001eac <__NVIC_GetPriorityGrouping+0x18>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	0a1b      	lsrs	r3, r3, #8
 8001e9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	db0b      	blt.n	8001eda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	f003 021f 	and.w	r2, r3, #31
 8001ec8:	4907      	ldr	r1, [pc, #28]	; (8001ee8 <__NVIC_EnableIRQ+0x38>)
 8001eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ece:	095b      	lsrs	r3, r3, #5
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000e100 	.word	0xe000e100

08001eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	6039      	str	r1, [r7, #0]
 8001ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	db0a      	blt.n	8001f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	490c      	ldr	r1, [pc, #48]	; (8001f38 <__NVIC_SetPriority+0x4c>)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	0112      	lsls	r2, r2, #4
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	440b      	add	r3, r1
 8001f10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f14:	e00a      	b.n	8001f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	4908      	ldr	r1, [pc, #32]	; (8001f3c <__NVIC_SetPriority+0x50>)
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	3b04      	subs	r3, #4
 8001f24:	0112      	lsls	r2, r2, #4
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	440b      	add	r3, r1
 8001f2a:	761a      	strb	r2, [r3, #24]
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000e100 	.word	0xe000e100
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b089      	sub	sp, #36	; 0x24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f1c3 0307 	rsb	r3, r3, #7
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	bf28      	it	cs
 8001f5e:	2304      	movcs	r3, #4
 8001f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3304      	adds	r3, #4
 8001f66:	2b06      	cmp	r3, #6
 8001f68:	d902      	bls.n	8001f70 <NVIC_EncodePriority+0x30>
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3b03      	subs	r3, #3
 8001f6e:	e000      	b.n	8001f72 <NVIC_EncodePriority+0x32>
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f74:	f04f 32ff 	mov.w	r2, #4294967295
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43da      	mvns	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	401a      	ands	r2, r3
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f88:	f04f 31ff 	mov.w	r1, #4294967295
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f92:	43d9      	mvns	r1, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f98:	4313      	orrs	r3, r2
         );
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3724      	adds	r7, #36	; 0x24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
	...

08001fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fb8:	d301      	bcc.n	8001fbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e00f      	b.n	8001fde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <SysTick_Config+0x40>)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fc6:	210f      	movs	r1, #15
 8001fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fcc:	f7ff ff8e 	bl	8001eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <SysTick_Config+0x40>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fd6:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <SysTick_Config+0x40>)
 8001fd8:	2207      	movs	r2, #7
 8001fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	e000e010 	.word	0xe000e010

08001fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7ff ff29 	bl	8001e4c <__NVIC_SetPriorityGrouping>
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b086      	sub	sp, #24
 8002006:	af00      	add	r7, sp, #0
 8002008:	4603      	mov	r3, r0
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	607a      	str	r2, [r7, #4]
 800200e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002010:	f7ff ff40 	bl	8001e94 <__NVIC_GetPriorityGrouping>
 8002014:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	68b9      	ldr	r1, [r7, #8]
 800201a:	6978      	ldr	r0, [r7, #20]
 800201c:	f7ff ff90 	bl	8001f40 <NVIC_EncodePriority>
 8002020:	4602      	mov	r2, r0
 8002022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002026:	4611      	mov	r1, r2
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff ff5f 	bl	8001eec <__NVIC_SetPriority>
}
 800202e:	bf00      	nop
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
 800203c:	4603      	mov	r3, r0
 800203e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff ff33 	bl	8001eb0 <__NVIC_EnableIRQ>
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b082      	sub	sp, #8
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff ffa4 	bl	8001fa8 <SysTick_Config>
 8002060:	4603      	mov	r3, r0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800206a:	b480      	push	{r7}
 800206c:	b085      	sub	sp, #20
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002072:	2300      	movs	r3, #0
 8002074:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d005      	beq.n	800208e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2204      	movs	r2, #4
 8002086:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	73fb      	strb	r3, [r7, #15]
 800208c:	e037      	b.n	80020fe <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 020e 	bic.w	r2, r2, #14
 800209c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020ac:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 0201 	bic.w	r2, r2, #1
 80020bc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c2:	f003 021f 	and.w	r2, r3, #31
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	2101      	movs	r1, #1
 80020cc:	fa01 f202 	lsl.w	r2, r1, r2
 80020d0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80020da:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00c      	beq.n	80020fe <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020f2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80020fc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800210e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002124:	2300      	movs	r3, #0
 8002126:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d00d      	beq.n	8002150 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2204      	movs	r2, #4
 8002138:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	73fb      	strb	r3, [r7, #15]
 800214e:	e047      	b.n	80021e0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 020e 	bic.w	r2, r2, #14
 800215e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0201 	bic.w	r2, r2, #1
 800216e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800217a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800217e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002184:	f003 021f 	and.w	r2, r3, #31
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	2101      	movs	r1, #1
 800218e:	fa01 f202 	lsl.w	r2, r1, r2
 8002192:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800219c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00c      	beq.n	80021c0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021b4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80021be:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	4798      	blx	r3
    }
  }
  return status;
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b087      	sub	sp, #28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80021fa:	e15a      	b.n	80024b2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	2101      	movs	r1, #1
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	fa01 f303 	lsl.w	r3, r1, r3
 8002208:	4013      	ands	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 814c 	beq.w	80024ac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d00b      	beq.n	8002234 <HAL_GPIO_Init+0x48>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b02      	cmp	r3, #2
 8002222:	d007      	beq.n	8002234 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002228:	2b11      	cmp	r3, #17
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b12      	cmp	r3, #18
 8002232:	d130      	bne.n	8002296 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	2203      	movs	r2, #3
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4013      	ands	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800226a:	2201      	movs	r2, #1
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43db      	mvns	r3, r3
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4013      	ands	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	091b      	lsrs	r3, r3, #4
 8002280:	f003 0201 	and.w	r2, r3, #1
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	2203      	movs	r2, #3
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43db      	mvns	r3, r3
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	4013      	ands	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_Init+0xea>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b12      	cmp	r3, #18
 80022d4:	d123      	bne.n	800231e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	08da      	lsrs	r2, r3, #3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3208      	adds	r2, #8
 80022de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	220f      	movs	r2, #15
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4013      	ands	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	691a      	ldr	r2, [r3, #16]
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	08da      	lsrs	r2, r3, #3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3208      	adds	r2, #8
 8002318:	6939      	ldr	r1, [r7, #16]
 800231a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	2203      	movs	r2, #3
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	4013      	ands	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f003 0203 	and.w	r2, r3, #3
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	4313      	orrs	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 80a6 	beq.w	80024ac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002360:	4b5b      	ldr	r3, [pc, #364]	; (80024d0 <HAL_GPIO_Init+0x2e4>)
 8002362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002364:	4a5a      	ldr	r2, [pc, #360]	; (80024d0 <HAL_GPIO_Init+0x2e4>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	6613      	str	r3, [r2, #96]	; 0x60
 800236c:	4b58      	ldr	r3, [pc, #352]	; (80024d0 <HAL_GPIO_Init+0x2e4>)
 800236e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002378:	4a56      	ldr	r2, [pc, #344]	; (80024d4 <HAL_GPIO_Init+0x2e8>)
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	089b      	lsrs	r3, r3, #2
 800237e:	3302      	adds	r3, #2
 8002380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002384:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	220f      	movs	r2, #15
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4013      	ands	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023a2:	d01f      	beq.n	80023e4 <HAL_GPIO_Init+0x1f8>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a4c      	ldr	r2, [pc, #304]	; (80024d8 <HAL_GPIO_Init+0x2ec>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d019      	beq.n	80023e0 <HAL_GPIO_Init+0x1f4>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a4b      	ldr	r2, [pc, #300]	; (80024dc <HAL_GPIO_Init+0x2f0>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d013      	beq.n	80023dc <HAL_GPIO_Init+0x1f0>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a4a      	ldr	r2, [pc, #296]	; (80024e0 <HAL_GPIO_Init+0x2f4>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d00d      	beq.n	80023d8 <HAL_GPIO_Init+0x1ec>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a49      	ldr	r2, [pc, #292]	; (80024e4 <HAL_GPIO_Init+0x2f8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d007      	beq.n	80023d4 <HAL_GPIO_Init+0x1e8>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a48      	ldr	r2, [pc, #288]	; (80024e8 <HAL_GPIO_Init+0x2fc>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d101      	bne.n	80023d0 <HAL_GPIO_Init+0x1e4>
 80023cc:	2305      	movs	r3, #5
 80023ce:	e00a      	b.n	80023e6 <HAL_GPIO_Init+0x1fa>
 80023d0:	2306      	movs	r3, #6
 80023d2:	e008      	b.n	80023e6 <HAL_GPIO_Init+0x1fa>
 80023d4:	2304      	movs	r3, #4
 80023d6:	e006      	b.n	80023e6 <HAL_GPIO_Init+0x1fa>
 80023d8:	2303      	movs	r3, #3
 80023da:	e004      	b.n	80023e6 <HAL_GPIO_Init+0x1fa>
 80023dc:	2302      	movs	r3, #2
 80023de:	e002      	b.n	80023e6 <HAL_GPIO_Init+0x1fa>
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <HAL_GPIO_Init+0x1fa>
 80023e4:	2300      	movs	r3, #0
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	f002 0203 	and.w	r2, r2, #3
 80023ec:	0092      	lsls	r2, r2, #2
 80023ee:	4093      	lsls	r3, r2
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023f6:	4937      	ldr	r1, [pc, #220]	; (80024d4 <HAL_GPIO_Init+0x2e8>)
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	089b      	lsrs	r3, r3, #2
 80023fc:	3302      	adds	r3, #2
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002404:	4b39      	ldr	r3, [pc, #228]	; (80024ec <HAL_GPIO_Init+0x300>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	43db      	mvns	r3, r3
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4013      	ands	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	4313      	orrs	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002428:	4a30      	ldr	r2, [pc, #192]	; (80024ec <HAL_GPIO_Init+0x300>)
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800242e:	4b2f      	ldr	r3, [pc, #188]	; (80024ec <HAL_GPIO_Init+0x300>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	43db      	mvns	r3, r3
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4013      	ands	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4313      	orrs	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002452:	4a26      	ldr	r2, [pc, #152]	; (80024ec <HAL_GPIO_Init+0x300>)
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002458:	4b24      	ldr	r3, [pc, #144]	; (80024ec <HAL_GPIO_Init+0x300>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	43db      	mvns	r3, r3
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4013      	ands	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4313      	orrs	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800247c:	4a1b      	ldr	r2, [pc, #108]	; (80024ec <HAL_GPIO_Init+0x300>)
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002482:	4b1a      	ldr	r3, [pc, #104]	; (80024ec <HAL_GPIO_Init+0x300>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	43db      	mvns	r3, r3
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4013      	ands	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024a6:	4a11      	ldr	r2, [pc, #68]	; (80024ec <HAL_GPIO_Init+0x300>)
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	3301      	adds	r3, #1
 80024b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	fa22 f303 	lsr.w	r3, r2, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f47f ae9d 	bne.w	80021fc <HAL_GPIO_Init+0x10>
  }
}
 80024c2:	bf00      	nop
 80024c4:	bf00      	nop
 80024c6:	371c      	adds	r7, #28
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	40021000 	.word	0x40021000
 80024d4:	40010000 	.word	0x40010000
 80024d8:	48000400 	.word	0x48000400
 80024dc:	48000800 	.word	0x48000800
 80024e0:	48000c00 	.word	0x48000c00
 80024e4:	48001000 	.word	0x48001000
 80024e8:	48001400 	.word	0x48001400
 80024ec:	40010400 	.word	0x40010400

080024f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	807b      	strh	r3, [r7, #2]
 80024fc:	4613      	mov	r3, r2
 80024fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002500:	787b      	ldrb	r3, [r7, #1]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002506:	887a      	ldrh	r2, [r7, #2]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800250c:	e002      	b.n	8002514 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800250e:	887a      	ldrh	r2, [r7, #2]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d141      	bne.n	80025b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800252e:	4b4b      	ldr	r3, [pc, #300]	; (800265c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800253a:	d131      	bne.n	80025a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800253c:	4b47      	ldr	r3, [pc, #284]	; (800265c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800253e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002542:	4a46      	ldr	r2, [pc, #280]	; (800265c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002548:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800254c:	4b43      	ldr	r3, [pc, #268]	; (800265c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002554:	4a41      	ldr	r2, [pc, #260]	; (800265c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002556:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800255a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800255c:	4b40      	ldr	r3, [pc, #256]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2232      	movs	r2, #50	; 0x32
 8002562:	fb02 f303 	mul.w	r3, r2, r3
 8002566:	4a3f      	ldr	r2, [pc, #252]	; (8002664 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002568:	fba2 2303 	umull	r2, r3, r2, r3
 800256c:	0c9b      	lsrs	r3, r3, #18
 800256e:	3301      	adds	r3, #1
 8002570:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002572:	e002      	b.n	800257a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	3b01      	subs	r3, #1
 8002578:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800257a:	4b38      	ldr	r3, [pc, #224]	; (800265c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002586:	d102      	bne.n	800258e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f2      	bne.n	8002574 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800258e:	4b33      	ldr	r3, [pc, #204]	; (800265c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800259a:	d158      	bne.n	800264e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e057      	b.n	8002650 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025a0:	4b2e      	ldr	r3, [pc, #184]	; (800265c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025a6:	4a2d      	ldr	r2, [pc, #180]	; (800265c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80025b0:	e04d      	b.n	800264e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025b8:	d141      	bne.n	800263e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80025ba:	4b28      	ldr	r3, [pc, #160]	; (800265c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c6:	d131      	bne.n	800262c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025c8:	4b24      	ldr	r3, [pc, #144]	; (800265c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025ce:	4a23      	ldr	r2, [pc, #140]	; (800265c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025d8:	4b20      	ldr	r3, [pc, #128]	; (800265c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025e0:	4a1e      	ldr	r2, [pc, #120]	; (800265c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025e8:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2232      	movs	r2, #50	; 0x32
 80025ee:	fb02 f303 	mul.w	r3, r2, r3
 80025f2:	4a1c      	ldr	r2, [pc, #112]	; (8002664 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80025f4:	fba2 2303 	umull	r2, r3, r2, r3
 80025f8:	0c9b      	lsrs	r3, r3, #18
 80025fa:	3301      	adds	r3, #1
 80025fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025fe:	e002      	b.n	8002606 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	3b01      	subs	r3, #1
 8002604:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002606:	4b15      	ldr	r3, [pc, #84]	; (800265c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800260e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002612:	d102      	bne.n	800261a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f2      	bne.n	8002600 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800261a:	4b10      	ldr	r3, [pc, #64]	; (800265c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002626:	d112      	bne.n	800264e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e011      	b.n	8002650 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800262e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002632:	4a0a      	ldr	r2, [pc, #40]	; (800265c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002638:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800263c:	e007      	b.n	800264e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800263e:	4b07      	ldr	r3, [pc, #28]	; (800265c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002646:	4a05      	ldr	r2, [pc, #20]	; (800265c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002648:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800264c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	40007000 	.word	0x40007000
 8002660:	2000000c 	.word	0x2000000c
 8002664:	431bde83 	.word	0x431bde83

08002668 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	4a04      	ldr	r2, [pc, #16]	; (8002684 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002676:	6093      	str	r3, [r2, #8]
}
 8002678:	bf00      	nop
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40007000 	.word	0x40007000

08002688 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b088      	sub	sp, #32
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e308      	b.n	8002cac <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d075      	beq.n	8002792 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026a6:	4ba3      	ldr	r3, [pc, #652]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 030c 	and.w	r3, r3, #12
 80026ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026b0:	4ba0      	ldr	r3, [pc, #640]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	2b0c      	cmp	r3, #12
 80026be:	d102      	bne.n	80026c6 <HAL_RCC_OscConfig+0x3e>
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d002      	beq.n	80026cc <HAL_RCC_OscConfig+0x44>
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d10b      	bne.n	80026e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026cc:	4b99      	ldr	r3, [pc, #612]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d05b      	beq.n	8002790 <HAL_RCC_OscConfig+0x108>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d157      	bne.n	8002790 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e2e3      	b.n	8002cac <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ec:	d106      	bne.n	80026fc <HAL_RCC_OscConfig+0x74>
 80026ee:	4b91      	ldr	r3, [pc, #580]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a90      	ldr	r2, [pc, #576]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 80026f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	e01d      	b.n	8002738 <HAL_RCC_OscConfig+0xb0>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002704:	d10c      	bne.n	8002720 <HAL_RCC_OscConfig+0x98>
 8002706:	4b8b      	ldr	r3, [pc, #556]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a8a      	ldr	r2, [pc, #552]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 800270c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	4b88      	ldr	r3, [pc, #544]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a87      	ldr	r2, [pc, #540]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 8002718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	e00b      	b.n	8002738 <HAL_RCC_OscConfig+0xb0>
 8002720:	4b84      	ldr	r3, [pc, #528]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a83      	ldr	r2, [pc, #524]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 8002726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800272a:	6013      	str	r3, [r2, #0]
 800272c:	4b81      	ldr	r3, [pc, #516]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a80      	ldr	r2, [pc, #512]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 8002732:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002736:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d013      	beq.n	8002768 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002740:	f7ff fb56 	bl	8001df0 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002748:	f7ff fb52 	bl	8001df0 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b64      	cmp	r3, #100	; 0x64
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e2a8      	b.n	8002cac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800275a:	4b76      	ldr	r3, [pc, #472]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0f0      	beq.n	8002748 <HAL_RCC_OscConfig+0xc0>
 8002766:	e014      	b.n	8002792 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002768:	f7ff fb42 	bl	8001df0 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002770:	f7ff fb3e 	bl	8001df0 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b64      	cmp	r3, #100	; 0x64
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e294      	b.n	8002cac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002782:	4b6c      	ldr	r3, [pc, #432]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0xe8>
 800278e:	e000      	b.n	8002792 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002790:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d075      	beq.n	800288a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800279e:	4b65      	ldr	r3, [pc, #404]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 030c 	and.w	r3, r3, #12
 80027a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027a8:	4b62      	ldr	r3, [pc, #392]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f003 0303 	and.w	r3, r3, #3
 80027b0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	2b0c      	cmp	r3, #12
 80027b6:	d102      	bne.n	80027be <HAL_RCC_OscConfig+0x136>
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d002      	beq.n	80027c4 <HAL_RCC_OscConfig+0x13c>
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d11f      	bne.n	8002804 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027c4:	4b5b      	ldr	r3, [pc, #364]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d005      	beq.n	80027dc <HAL_RCC_OscConfig+0x154>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e267      	b.n	8002cac <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027dc:	4b55      	ldr	r3, [pc, #340]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	061b      	lsls	r3, r3, #24
 80027ea:	4952      	ldr	r1, [pc, #328]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80027f0:	4b51      	ldr	r3, [pc, #324]	; (8002938 <HAL_RCC_OscConfig+0x2b0>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff faaf 	bl	8001d58 <HAL_InitTick>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d043      	beq.n	8002888 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e253      	b.n	8002cac <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d023      	beq.n	8002854 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800280c:	4b49      	ldr	r3, [pc, #292]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a48      	ldr	r2, [pc, #288]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 8002812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002818:	f7ff faea 	bl	8001df0 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002820:	f7ff fae6 	bl	8001df0 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e23c      	b.n	8002cac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002832:	4b40      	ldr	r3, [pc, #256]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0f0      	beq.n	8002820 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283e:	4b3d      	ldr	r3, [pc, #244]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	061b      	lsls	r3, r3, #24
 800284c:	4939      	ldr	r1, [pc, #228]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 800284e:	4313      	orrs	r3, r2
 8002850:	604b      	str	r3, [r1, #4]
 8002852:	e01a      	b.n	800288a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002854:	4b37      	ldr	r3, [pc, #220]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a36      	ldr	r2, [pc, #216]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 800285a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800285e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002860:	f7ff fac6 	bl	8001df0 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002868:	f7ff fac2 	bl	8001df0 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e218      	b.n	8002cac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800287a:	4b2e      	ldr	r3, [pc, #184]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f0      	bne.n	8002868 <HAL_RCC_OscConfig+0x1e0>
 8002886:	e000      	b.n	800288a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002888:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	2b00      	cmp	r3, #0
 8002894:	d03c      	beq.n	8002910 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d01c      	beq.n	80028d8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800289e:	4b25      	ldr	r3, [pc, #148]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 80028a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028a4:	4a23      	ldr	r2, [pc, #140]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 80028a6:	f043 0301 	orr.w	r3, r3, #1
 80028aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ae:	f7ff fa9f 	bl	8001df0 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b6:	f7ff fa9b 	bl	8001df0 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e1f1      	b.n	8002cac <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028c8:	4b1a      	ldr	r3, [pc, #104]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 80028ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0ef      	beq.n	80028b6 <HAL_RCC_OscConfig+0x22e>
 80028d6:	e01b      	b.n	8002910 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028d8:	4b16      	ldr	r3, [pc, #88]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 80028da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028de:	4a15      	ldr	r2, [pc, #84]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 80028e0:	f023 0301 	bic.w	r3, r3, #1
 80028e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e8:	f7ff fa82 	bl	8001df0 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028f0:	f7ff fa7e 	bl	8001df0 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e1d4      	b.n	8002cac <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002902:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 8002904:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1ef      	bne.n	80028f0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 80ab 	beq.w	8002a74 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800291e:	2300      	movs	r3, #0
 8002920:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002922:	4b04      	ldr	r3, [pc, #16]	; (8002934 <HAL_RCC_OscConfig+0x2ac>)
 8002924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d106      	bne.n	800293c <HAL_RCC_OscConfig+0x2b4>
 800292e:	2301      	movs	r3, #1
 8002930:	e005      	b.n	800293e <HAL_RCC_OscConfig+0x2b6>
 8002932:	bf00      	nop
 8002934:	40021000 	.word	0x40021000
 8002938:	20000010 	.word	0x20000010
 800293c:	2300      	movs	r3, #0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00d      	beq.n	800295e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002942:	4baf      	ldr	r3, [pc, #700]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 8002944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002946:	4aae      	ldr	r2, [pc, #696]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 8002948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800294c:	6593      	str	r3, [r2, #88]	; 0x58
 800294e:	4bac      	ldr	r3, [pc, #688]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 8002950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800295a:	2301      	movs	r3, #1
 800295c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800295e:	4ba9      	ldr	r3, [pc, #676]	; (8002c04 <HAL_RCC_OscConfig+0x57c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002966:	2b00      	cmp	r3, #0
 8002968:	d118      	bne.n	800299c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800296a:	4ba6      	ldr	r3, [pc, #664]	; (8002c04 <HAL_RCC_OscConfig+0x57c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4aa5      	ldr	r2, [pc, #660]	; (8002c04 <HAL_RCC_OscConfig+0x57c>)
 8002970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002976:	f7ff fa3b 	bl	8001df0 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800297e:	f7ff fa37 	bl	8001df0 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e18d      	b.n	8002cac <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002990:	4b9c      	ldr	r3, [pc, #624]	; (8002c04 <HAL_RCC_OscConfig+0x57c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0f0      	beq.n	800297e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d108      	bne.n	80029b6 <HAL_RCC_OscConfig+0x32e>
 80029a4:	4b96      	ldr	r3, [pc, #600]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 80029a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029aa:	4a95      	ldr	r2, [pc, #596]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029b4:	e024      	b.n	8002a00 <HAL_RCC_OscConfig+0x378>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2b05      	cmp	r3, #5
 80029bc:	d110      	bne.n	80029e0 <HAL_RCC_OscConfig+0x358>
 80029be:	4b90      	ldr	r3, [pc, #576]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 80029c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c4:	4a8e      	ldr	r2, [pc, #568]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 80029c6:	f043 0304 	orr.w	r3, r3, #4
 80029ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029ce:	4b8c      	ldr	r3, [pc, #560]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 80029d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d4:	4a8a      	ldr	r2, [pc, #552]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 80029d6:	f043 0301 	orr.w	r3, r3, #1
 80029da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029de:	e00f      	b.n	8002a00 <HAL_RCC_OscConfig+0x378>
 80029e0:	4b87      	ldr	r3, [pc, #540]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 80029e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e6:	4a86      	ldr	r2, [pc, #536]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 80029e8:	f023 0301 	bic.w	r3, r3, #1
 80029ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029f0:	4b83      	ldr	r3, [pc, #524]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 80029f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f6:	4a82      	ldr	r2, [pc, #520]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 80029f8:	f023 0304 	bic.w	r3, r3, #4
 80029fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d016      	beq.n	8002a36 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a08:	f7ff f9f2 	bl	8001df0 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a0e:	e00a      	b.n	8002a26 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a10:	f7ff f9ee 	bl	8001df0 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e142      	b.n	8002cac <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a26:	4b76      	ldr	r3, [pc, #472]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 8002a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0ed      	beq.n	8002a10 <HAL_RCC_OscConfig+0x388>
 8002a34:	e015      	b.n	8002a62 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a36:	f7ff f9db 	bl	8001df0 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a3c:	e00a      	b.n	8002a54 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a3e:	f7ff f9d7 	bl	8001df0 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e12b      	b.n	8002cac <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a54:	4b6a      	ldr	r3, [pc, #424]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 8002a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1ed      	bne.n	8002a3e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a62:	7ffb      	ldrb	r3, [r7, #31]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d105      	bne.n	8002a74 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a68:	4b65      	ldr	r3, [pc, #404]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 8002a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6c:	4a64      	ldr	r2, [pc, #400]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 8002a6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a72:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0320 	and.w	r3, r3, #32
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d03c      	beq.n	8002afa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d01c      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a88:	4b5d      	ldr	r3, [pc, #372]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 8002a8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a8e:	4a5c      	ldr	r2, [pc, #368]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a98:	f7ff f9aa 	bl	8001df0 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002aa0:	f7ff f9a6 	bl	8001df0 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e0fc      	b.n	8002cac <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ab2:	4b53      	ldr	r3, [pc, #332]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 8002ab4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0ef      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x418>
 8002ac0:	e01b      	b.n	8002afa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ac2:	4b4f      	ldr	r3, [pc, #316]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 8002ac4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ac8:	4a4d      	ldr	r2, [pc, #308]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 8002aca:	f023 0301 	bic.w	r3, r3, #1
 8002ace:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad2:	f7ff f98d 	bl	8001df0 <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ada:	f7ff f989 	bl	8001df0 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e0df      	b.n	8002cac <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002aec:	4b44      	ldr	r3, [pc, #272]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 8002aee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1ef      	bne.n	8002ada <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 80d3 	beq.w	8002caa <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b04:	4b3e      	ldr	r3, [pc, #248]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 030c 	and.w	r3, r3, #12
 8002b0c:	2b0c      	cmp	r3, #12
 8002b0e:	f000 808d 	beq.w	8002c2c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d15a      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b1a:	4b39      	ldr	r3, [pc, #228]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a38      	ldr	r2, [pc, #224]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 8002b20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b26:	f7ff f963 	bl	8001df0 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b2e:	f7ff f95f 	bl	8001df0 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e0b5      	b.n	8002cac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b40:	4b2f      	ldr	r3, [pc, #188]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1f0      	bne.n	8002b2e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b4c:	4b2c      	ldr	r3, [pc, #176]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 8002b4e:	68da      	ldr	r2, [r3, #12]
 8002b50:	4b2d      	ldr	r3, [pc, #180]	; (8002c08 <HAL_RCC_OscConfig+0x580>)
 8002b52:	4013      	ands	r3, r2
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6a11      	ldr	r1, [r2, #32]
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b5c:	3a01      	subs	r2, #1
 8002b5e:	0112      	lsls	r2, r2, #4
 8002b60:	4311      	orrs	r1, r2
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002b66:	0212      	lsls	r2, r2, #8
 8002b68:	4311      	orrs	r1, r2
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b6e:	0852      	lsrs	r2, r2, #1
 8002b70:	3a01      	subs	r2, #1
 8002b72:	0552      	lsls	r2, r2, #21
 8002b74:	4311      	orrs	r1, r2
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b7a:	0852      	lsrs	r2, r2, #1
 8002b7c:	3a01      	subs	r2, #1
 8002b7e:	0652      	lsls	r2, r2, #25
 8002b80:	4311      	orrs	r1, r2
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b86:	06d2      	lsls	r2, r2, #27
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	491d      	ldr	r1, [pc, #116]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b90:	4b1b      	ldr	r3, [pc, #108]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a1a      	ldr	r2, [pc, #104]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 8002b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b9a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b9c:	4b18      	ldr	r3, [pc, #96]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	4a17      	ldr	r2, [pc, #92]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 8002ba2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ba6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7ff f922 	bl	8001df0 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb0:	f7ff f91e 	bl	8001df0 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e074      	b.n	8002cac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bc2:	4b0f      	ldr	r3, [pc, #60]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x528>
 8002bce:	e06c      	b.n	8002caa <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a0a      	ldr	r2, [pc, #40]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 8002bd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bda:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002bdc:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	4a07      	ldr	r2, [pc, #28]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 8002be2:	f023 0303 	bic.w	r3, r3, #3
 8002be6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002be8:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	4a04      	ldr	r2, [pc, #16]	; (8002c00 <HAL_RCC_OscConfig+0x578>)
 8002bee:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf8:	f7ff f8fa 	bl	8001df0 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bfe:	e00e      	b.n	8002c1e <HAL_RCC_OscConfig+0x596>
 8002c00:	40021000 	.word	0x40021000
 8002c04:	40007000 	.word	0x40007000
 8002c08:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c0c:	f7ff f8f0 	bl	8001df0 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e046      	b.n	8002cac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c1e:	4b25      	ldr	r3, [pc, #148]	; (8002cb4 <HAL_RCC_OscConfig+0x62c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f0      	bne.n	8002c0c <HAL_RCC_OscConfig+0x584>
 8002c2a:	e03e      	b.n	8002caa <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e039      	b.n	8002cac <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002c38:	4b1e      	ldr	r3, [pc, #120]	; (8002cb4 <HAL_RCC_OscConfig+0x62c>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f003 0203 	and.w	r2, r3, #3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d12c      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	3b01      	subs	r3, #1
 8002c58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d123      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c68:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d11b      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c78:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d113      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c88:	085b      	lsrs	r3, r3, #1
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d109      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c9c:	085b      	lsrs	r3, r3, #1
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d001      	beq.n	8002caa <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3720      	adds	r7, #32
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40021000 	.word	0x40021000

08002cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e11e      	b.n	8002f0e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cd0:	4b91      	ldr	r3, [pc, #580]	; (8002f18 <HAL_RCC_ClockConfig+0x260>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 030f 	and.w	r3, r3, #15
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d910      	bls.n	8002d00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cde:	4b8e      	ldr	r3, [pc, #568]	; (8002f18 <HAL_RCC_ClockConfig+0x260>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f023 020f 	bic.w	r2, r3, #15
 8002ce6:	498c      	ldr	r1, [pc, #560]	; (8002f18 <HAL_RCC_ClockConfig+0x260>)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cee:	4b8a      	ldr	r3, [pc, #552]	; (8002f18 <HAL_RCC_ClockConfig+0x260>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d001      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e106      	b.n	8002f0e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d073      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d129      	bne.n	8002d68 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d14:	4b81      	ldr	r3, [pc, #516]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0f4      	b.n	8002f0e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002d24:	f000 f99e 	bl	8003064 <RCC_GetSysClockFreqFromPLLSource>
 8002d28:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	4a7c      	ldr	r2, [pc, #496]	; (8002f20 <HAL_RCC_ClockConfig+0x268>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d93f      	bls.n	8002db2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002d32:	4b7a      	ldr	r3, [pc, #488]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d009      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d033      	beq.n	8002db2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d12f      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d52:	4b72      	ldr	r3, [pc, #456]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d5a:	4a70      	ldr	r2, [pc, #448]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d60:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d62:	2380      	movs	r3, #128	; 0x80
 8002d64:	617b      	str	r3, [r7, #20]
 8002d66:	e024      	b.n	8002db2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d107      	bne.n	8002d80 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d70:	4b6a      	ldr	r3, [pc, #424]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d109      	bne.n	8002d90 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0c6      	b.n	8002f0e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d80:	4b66      	ldr	r3, [pc, #408]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e0be      	b.n	8002f0e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002d90:	f000 f8ce 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8002d94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	4a61      	ldr	r2, [pc, #388]	; (8002f20 <HAL_RCC_ClockConfig+0x268>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d909      	bls.n	8002db2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d9e:	4b5f      	ldr	r3, [pc, #380]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002da6:	4a5d      	ldr	r2, [pc, #372]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002dae:	2380      	movs	r3, #128	; 0x80
 8002db0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002db2:	4b5a      	ldr	r3, [pc, #360]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f023 0203 	bic.w	r2, r3, #3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	4957      	ldr	r1, [pc, #348]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dc4:	f7ff f814 	bl	8001df0 <HAL_GetTick>
 8002dc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dca:	e00a      	b.n	8002de2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dcc:	f7ff f810 	bl	8001df0 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e095      	b.n	8002f0e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de2:	4b4e      	ldr	r3, [pc, #312]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 020c 	and.w	r2, r3, #12
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d1eb      	bne.n	8002dcc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d023      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e0c:	4b43      	ldr	r3, [pc, #268]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	4a42      	ldr	r2, [pc, #264]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002e12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e16:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0308 	and.w	r3, r3, #8
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d007      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002e24:	4b3d      	ldr	r3, [pc, #244]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002e2c:	4a3b      	ldr	r2, [pc, #236]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002e2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e34:	4b39      	ldr	r3, [pc, #228]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	4936      	ldr	r1, [pc, #216]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	608b      	str	r3, [r1, #8]
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	2b80      	cmp	r3, #128	; 0x80
 8002e4c:	d105      	bne.n	8002e5a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002e4e:	4b33      	ldr	r3, [pc, #204]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	4a32      	ldr	r2, [pc, #200]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002e54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e58:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e5a:	4b2f      	ldr	r3, [pc, #188]	; (8002f18 <HAL_RCC_ClockConfig+0x260>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d21d      	bcs.n	8002ea4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e68:	4b2b      	ldr	r3, [pc, #172]	; (8002f18 <HAL_RCC_ClockConfig+0x260>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f023 020f 	bic.w	r2, r3, #15
 8002e70:	4929      	ldr	r1, [pc, #164]	; (8002f18 <HAL_RCC_ClockConfig+0x260>)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e78:	f7fe ffba 	bl	8001df0 <HAL_GetTick>
 8002e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7e:	e00a      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e80:	f7fe ffb6 	bl	8001df0 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e03b      	b.n	8002f0e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e96:	4b20      	ldr	r3, [pc, #128]	; (8002f18 <HAL_RCC_ClockConfig+0x260>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d1ed      	bne.n	8002e80 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d008      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eb0:	4b1a      	ldr	r3, [pc, #104]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	4917      	ldr	r1, [pc, #92]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d009      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ece:	4b13      	ldr	r3, [pc, #76]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	490f      	ldr	r1, [pc, #60]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ee2:	f000 f825 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <HAL_RCC_ClockConfig+0x264>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	091b      	lsrs	r3, r3, #4
 8002eee:	f003 030f 	and.w	r3, r3, #15
 8002ef2:	490c      	ldr	r1, [pc, #48]	; (8002f24 <HAL_RCC_ClockConfig+0x26c>)
 8002ef4:	5ccb      	ldrb	r3, [r1, r3]
 8002ef6:	f003 031f 	and.w	r3, r3, #31
 8002efa:	fa22 f303 	lsr.w	r3, r2, r3
 8002efe:	4a0a      	ldr	r2, [pc, #40]	; (8002f28 <HAL_RCC_ClockConfig+0x270>)
 8002f00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002f02:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <HAL_RCC_ClockConfig+0x274>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fe ff26 	bl	8001d58 <HAL_InitTick>
 8002f0c:	4603      	mov	r3, r0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40022000 	.word	0x40022000
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	04c4b400 	.word	0x04c4b400
 8002f24:	08008f14 	.word	0x08008f14
 8002f28:	2000000c 	.word	0x2000000c
 8002f2c:	20000010 	.word	0x20000010

08002f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b087      	sub	sp, #28
 8002f34:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f36:	4b2c      	ldr	r3, [pc, #176]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d102      	bne.n	8002f48 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f42:	4b2a      	ldr	r3, [pc, #168]	; (8002fec <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	e047      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002f48:	4b27      	ldr	r3, [pc, #156]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 030c 	and.w	r3, r3, #12
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d102      	bne.n	8002f5a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f54:	4b26      	ldr	r3, [pc, #152]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	e03e      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002f5a:	4b23      	ldr	r3, [pc, #140]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 030c 	and.w	r3, r3, #12
 8002f62:	2b0c      	cmp	r3, #12
 8002f64:	d136      	bne.n	8002fd4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f66:	4b20      	ldr	r3, [pc, #128]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f70:	4b1d      	ldr	r3, [pc, #116]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	091b      	lsrs	r3, r3, #4
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2b03      	cmp	r3, #3
 8002f82:	d10c      	bne.n	8002f9e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f84:	4a1a      	ldr	r2, [pc, #104]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8c:	4a16      	ldr	r2, [pc, #88]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f8e:	68d2      	ldr	r2, [r2, #12]
 8002f90:	0a12      	lsrs	r2, r2, #8
 8002f92:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f96:	fb02 f303 	mul.w	r3, r2, r3
 8002f9a:	617b      	str	r3, [r7, #20]
      break;
 8002f9c:	e00c      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f9e:	4a13      	ldr	r2, [pc, #76]	; (8002fec <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa6:	4a10      	ldr	r2, [pc, #64]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fa8:	68d2      	ldr	r2, [r2, #12]
 8002faa:	0a12      	lsrs	r2, r2, #8
 8002fac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002fb0:	fb02 f303 	mul.w	r3, r2, r3
 8002fb4:	617b      	str	r3, [r7, #20]
      break;
 8002fb6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	0e5b      	lsrs	r3, r3, #25
 8002fbe:	f003 0303 	and.w	r3, r3, #3
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	e001      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002fd8:	693b      	ldr	r3, [r7, #16]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	371c      	adds	r7, #28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	00f42400 	.word	0x00f42400
 8002ff0:	016e3600 	.word	0x016e3600

08002ff4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ff8:	4b03      	ldr	r3, [pc, #12]	; (8003008 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	2000000c 	.word	0x2000000c

0800300c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003010:	f7ff fff0 	bl	8002ff4 <HAL_RCC_GetHCLKFreq>
 8003014:	4602      	mov	r2, r0
 8003016:	4b06      	ldr	r3, [pc, #24]	; (8003030 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	0a1b      	lsrs	r3, r3, #8
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	4904      	ldr	r1, [pc, #16]	; (8003034 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003022:	5ccb      	ldrb	r3, [r1, r3]
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800302c:	4618      	mov	r0, r3
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40021000 	.word	0x40021000
 8003034:	08008f24 	.word	0x08008f24

08003038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800303c:	f7ff ffda 	bl	8002ff4 <HAL_RCC_GetHCLKFreq>
 8003040:	4602      	mov	r2, r0
 8003042:	4b06      	ldr	r3, [pc, #24]	; (800305c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	0adb      	lsrs	r3, r3, #11
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	4904      	ldr	r1, [pc, #16]	; (8003060 <HAL_RCC_GetPCLK2Freq+0x28>)
 800304e:	5ccb      	ldrb	r3, [r1, r3]
 8003050:	f003 031f 	and.w	r3, r3, #31
 8003054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003058:	4618      	mov	r0, r3
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40021000 	.word	0x40021000
 8003060:	08008f24 	.word	0x08008f24

08003064 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003064:	b480      	push	{r7}
 8003066:	b087      	sub	sp, #28
 8003068:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800306a:	4b1e      	ldr	r3, [pc, #120]	; (80030e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003074:	4b1b      	ldr	r3, [pc, #108]	; (80030e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	091b      	lsrs	r3, r3, #4
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	3301      	adds	r3, #1
 8003080:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	2b03      	cmp	r3, #3
 8003086:	d10c      	bne.n	80030a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003088:	4a17      	ldr	r2, [pc, #92]	; (80030e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003090:	4a14      	ldr	r2, [pc, #80]	; (80030e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003092:	68d2      	ldr	r2, [r2, #12]
 8003094:	0a12      	lsrs	r2, r2, #8
 8003096:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800309a:	fb02 f303 	mul.w	r3, r2, r3
 800309e:	617b      	str	r3, [r7, #20]
    break;
 80030a0:	e00c      	b.n	80030bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030a2:	4a12      	ldr	r2, [pc, #72]	; (80030ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030aa:	4a0e      	ldr	r2, [pc, #56]	; (80030e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030ac:	68d2      	ldr	r2, [r2, #12]
 80030ae:	0a12      	lsrs	r2, r2, #8
 80030b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80030b4:	fb02 f303 	mul.w	r3, r2, r3
 80030b8:	617b      	str	r3, [r7, #20]
    break;
 80030ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030bc:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	0e5b      	lsrs	r3, r3, #25
 80030c2:	f003 0303 	and.w	r3, r3, #3
 80030c6:	3301      	adds	r3, #1
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80030d6:	687b      	ldr	r3, [r7, #4]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	371c      	adds	r7, #28
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	40021000 	.word	0x40021000
 80030e8:	016e3600 	.word	0x016e3600
 80030ec:	00f42400 	.word	0x00f42400

080030f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030f8:	2300      	movs	r3, #0
 80030fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030fc:	2300      	movs	r3, #0
 80030fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 8098 	beq.w	800323e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800310e:	2300      	movs	r3, #0
 8003110:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003112:	4b43      	ldr	r3, [pc, #268]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10d      	bne.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800311e:	4b40      	ldr	r3, [pc, #256]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003122:	4a3f      	ldr	r2, [pc, #252]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003128:	6593      	str	r3, [r2, #88]	; 0x58
 800312a:	4b3d      	ldr	r3, [pc, #244]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800312c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003132:	60bb      	str	r3, [r7, #8]
 8003134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003136:	2301      	movs	r3, #1
 8003138:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800313a:	4b3a      	ldr	r3, [pc, #232]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a39      	ldr	r2, [pc, #228]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003144:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003146:	f7fe fe53 	bl	8001df0 <HAL_GetTick>
 800314a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800314c:	e009      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800314e:	f7fe fe4f 	bl	8001df0 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d902      	bls.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	74fb      	strb	r3, [r7, #19]
        break;
 8003160:	e005      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003162:	4b30      	ldr	r3, [pc, #192]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0ef      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800316e:	7cfb      	ldrb	r3, [r7, #19]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d159      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003174:	4b2a      	ldr	r3, [pc, #168]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800317e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d01e      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	429a      	cmp	r2, r3
 800318e:	d019      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003190:	4b23      	ldr	r3, [pc, #140]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800319a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800319c:	4b20      	ldr	r3, [pc, #128]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a2:	4a1f      	ldr	r2, [pc, #124]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031ac:	4b1c      	ldr	r3, [pc, #112]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b2:	4a1b      	ldr	r2, [pc, #108]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031bc:	4a18      	ldr	r2, [pc, #96]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d016      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ce:	f7fe fe0f 	bl	8001df0 <HAL_GetTick>
 80031d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031d4:	e00b      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d6:	f7fe fe0b 	bl	8001df0 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d902      	bls.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	74fb      	strb	r3, [r7, #19]
            break;
 80031ec:	e006      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ee:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0ec      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80031fc:	7cfb      	ldrb	r3, [r7, #19]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10b      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003202:	4b07      	ldr	r3, [pc, #28]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003208:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	4903      	ldr	r1, [pc, #12]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003212:	4313      	orrs	r3, r2
 8003214:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003218:	e008      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800321a:	7cfb      	ldrb	r3, [r7, #19]
 800321c:	74bb      	strb	r3, [r7, #18]
 800321e:	e005      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003220:	40021000 	.word	0x40021000
 8003224:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003228:	7cfb      	ldrb	r3, [r7, #19]
 800322a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800322c:	7c7b      	ldrb	r3, [r7, #17]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d105      	bne.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003232:	4ba6      	ldr	r3, [pc, #664]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003236:	4aa5      	ldr	r2, [pc, #660]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800323c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800324a:	4ba0      	ldr	r3, [pc, #640]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800324c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003250:	f023 0203 	bic.w	r2, r3, #3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	499c      	ldr	r1, [pc, #624]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00a      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800326c:	4b97      	ldr	r3, [pc, #604]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800326e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003272:	f023 020c 	bic.w	r2, r3, #12
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	4994      	ldr	r1, [pc, #592]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800327c:	4313      	orrs	r3, r2
 800327e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800328e:	4b8f      	ldr	r3, [pc, #572]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003294:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	498b      	ldr	r1, [pc, #556]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00a      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032b0:	4b86      	ldr	r3, [pc, #536]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	4983      	ldr	r1, [pc, #524]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0320 	and.w	r3, r3, #32
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032d2:	4b7e      	ldr	r3, [pc, #504]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	497a      	ldr	r1, [pc, #488]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00a      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032f4:	4b75      	ldr	r3, [pc, #468]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	4972      	ldr	r1, [pc, #456]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003304:	4313      	orrs	r3, r2
 8003306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003316:	4b6d      	ldr	r3, [pc, #436]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	4969      	ldr	r1, [pc, #420]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003326:	4313      	orrs	r3, r2
 8003328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00a      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003338:	4b64      	ldr	r3, [pc, #400]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800333a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	4961      	ldr	r1, [pc, #388]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003348:	4313      	orrs	r3, r2
 800334a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00a      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800335a:	4b5c      	ldr	r3, [pc, #368]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800335c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003360:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	4958      	ldr	r1, [pc, #352]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003378:	2b00      	cmp	r3, #0
 800337a:	d015      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800337c:	4b53      	ldr	r3, [pc, #332]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800337e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003382:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338a:	4950      	ldr	r1, [pc, #320]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003396:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800339a:	d105      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800339c:	4b4b      	ldr	r3, [pc, #300]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	4a4a      	ldr	r2, [pc, #296]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d015      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033b4:	4b45      	ldr	r3, [pc, #276]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	4942      	ldr	r1, [pc, #264]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033d2:	d105      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033d4:	4b3d      	ldr	r3, [pc, #244]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	4a3c      	ldr	r2, [pc, #240]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033de:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d015      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80033ec:	4b37      	ldr	r3, [pc, #220]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	4934      	ldr	r1, [pc, #208]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800340a:	d105      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800340c:	4b2f      	ldr	r3, [pc, #188]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	4a2e      	ldr	r2, [pc, #184]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003412:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003416:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d015      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003424:	4b29      	ldr	r3, [pc, #164]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003432:	4926      	ldr	r1, [pc, #152]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003434:	4313      	orrs	r3, r2
 8003436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800343e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003442:	d105      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003444:	4b21      	ldr	r3, [pc, #132]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	4a20      	ldr	r2, [pc, #128]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800344a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800344e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d015      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800345c:	4b1b      	ldr	r3, [pc, #108]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800345e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003462:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346a:	4918      	ldr	r1, [pc, #96]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800346c:	4313      	orrs	r3, r2
 800346e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003476:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800347a:	d105      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800347c:	4b13      	ldr	r3, [pc, #76]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	4a12      	ldr	r2, [pc, #72]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003482:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003486:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d015      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003494:	4b0d      	ldr	r3, [pc, #52]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a2:	490a      	ldr	r1, [pc, #40]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034b2:	d105      	bne.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80034b4:	4b05      	ldr	r3, [pc, #20]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	4a04      	ldr	r2, [pc, #16]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034be:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80034c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40021000 	.word	0x40021000

080034d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e049      	b.n	8003576 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d106      	bne.n	80034fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7fe fadc 	bl	8001ab4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2202      	movs	r2, #2
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3304      	adds	r3, #4
 800350c:	4619      	mov	r1, r3
 800350e:	4610      	mov	r0, r2
 8003510:	f000 fd4a 	bl	8003fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b01      	cmp	r3, #1
 8003592:	d001      	beq.n	8003598 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e04a      	b.n	800362e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68da      	ldr	r2, [r3, #12]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0201 	orr.w	r2, r2, #1
 80035ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a21      	ldr	r2, [pc, #132]	; (800363c <HAL_TIM_Base_Start_IT+0xbc>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d018      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0x6c>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c2:	d013      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0x6c>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a1d      	ldr	r2, [pc, #116]	; (8003640 <HAL_TIM_Base_Start_IT+0xc0>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d00e      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0x6c>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a1c      	ldr	r2, [pc, #112]	; (8003644 <HAL_TIM_Base_Start_IT+0xc4>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d009      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0x6c>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a1a      	ldr	r2, [pc, #104]	; (8003648 <HAL_TIM_Base_Start_IT+0xc8>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d004      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0x6c>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a19      	ldr	r2, [pc, #100]	; (800364c <HAL_TIM_Base_Start_IT+0xcc>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d115      	bne.n	8003618 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	4b17      	ldr	r3, [pc, #92]	; (8003650 <HAL_TIM_Base_Start_IT+0xd0>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b06      	cmp	r3, #6
 80035fc:	d015      	beq.n	800362a <HAL_TIM_Base_Start_IT+0xaa>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003604:	d011      	beq.n	800362a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f042 0201 	orr.w	r2, r2, #1
 8003614:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003616:	e008      	b.n	800362a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0201 	orr.w	r2, r2, #1
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	e000      	b.n	800362c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800362a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	40012c00 	.word	0x40012c00
 8003640:	40000400 	.word	0x40000400
 8003644:	40000800 	.word	0x40000800
 8003648:	40013400 	.word	0x40013400
 800364c:	40014000 	.word	0x40014000
 8003650:	00010007 	.word	0x00010007

08003654 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e049      	b.n	80036fa <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d106      	bne.n	8003680 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7fe f9ba 	bl	80019f4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3304      	adds	r3, #4
 8003690:	4619      	mov	r1, r3
 8003692:	4610      	mov	r0, r2
 8003694:	f000 fc88 	bl	8003fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
	...

08003704 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d109      	bne.n	8003728 <HAL_TIM_PWM_Start+0x24>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b01      	cmp	r3, #1
 800371e:	bf14      	ite	ne
 8003720:	2301      	movne	r3, #1
 8003722:	2300      	moveq	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	e03c      	b.n	80037a2 <HAL_TIM_PWM_Start+0x9e>
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	2b04      	cmp	r3, #4
 800372c:	d109      	bne.n	8003742 <HAL_TIM_PWM_Start+0x3e>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b01      	cmp	r3, #1
 8003738:	bf14      	ite	ne
 800373a:	2301      	movne	r3, #1
 800373c:	2300      	moveq	r3, #0
 800373e:	b2db      	uxtb	r3, r3
 8003740:	e02f      	b.n	80037a2 <HAL_TIM_PWM_Start+0x9e>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	2b08      	cmp	r3, #8
 8003746:	d109      	bne.n	800375c <HAL_TIM_PWM_Start+0x58>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b01      	cmp	r3, #1
 8003752:	bf14      	ite	ne
 8003754:	2301      	movne	r3, #1
 8003756:	2300      	moveq	r3, #0
 8003758:	b2db      	uxtb	r3, r3
 800375a:	e022      	b.n	80037a2 <HAL_TIM_PWM_Start+0x9e>
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	2b0c      	cmp	r3, #12
 8003760:	d109      	bne.n	8003776 <HAL_TIM_PWM_Start+0x72>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b01      	cmp	r3, #1
 800376c:	bf14      	ite	ne
 800376e:	2301      	movne	r3, #1
 8003770:	2300      	moveq	r3, #0
 8003772:	b2db      	uxtb	r3, r3
 8003774:	e015      	b.n	80037a2 <HAL_TIM_PWM_Start+0x9e>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	2b10      	cmp	r3, #16
 800377a:	d109      	bne.n	8003790 <HAL_TIM_PWM_Start+0x8c>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b01      	cmp	r3, #1
 8003786:	bf14      	ite	ne
 8003788:	2301      	movne	r3, #1
 800378a:	2300      	moveq	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	e008      	b.n	80037a2 <HAL_TIM_PWM_Start+0x9e>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b01      	cmp	r3, #1
 800379a:	bf14      	ite	ne
 800379c:	2301      	movne	r3, #1
 800379e:	2300      	moveq	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e097      	b.n	80038da <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d104      	bne.n	80037ba <HAL_TIM_PWM_Start+0xb6>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037b8:	e023      	b.n	8003802 <HAL_TIM_PWM_Start+0xfe>
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d104      	bne.n	80037ca <HAL_TIM_PWM_Start+0xc6>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037c8:	e01b      	b.n	8003802 <HAL_TIM_PWM_Start+0xfe>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d104      	bne.n	80037da <HAL_TIM_PWM_Start+0xd6>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2202      	movs	r2, #2
 80037d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037d8:	e013      	b.n	8003802 <HAL_TIM_PWM_Start+0xfe>
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2b0c      	cmp	r3, #12
 80037de:	d104      	bne.n	80037ea <HAL_TIM_PWM_Start+0xe6>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037e8:	e00b      	b.n	8003802 <HAL_TIM_PWM_Start+0xfe>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b10      	cmp	r3, #16
 80037ee:	d104      	bne.n	80037fa <HAL_TIM_PWM_Start+0xf6>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2202      	movs	r2, #2
 80037f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037f8:	e003      	b.n	8003802 <HAL_TIM_PWM_Start+0xfe>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2202      	movs	r2, #2
 80037fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2201      	movs	r2, #1
 8003808:	6839      	ldr	r1, [r7, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f000 ff52 	bl	80046b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a33      	ldr	r2, [pc, #204]	; (80038e4 <HAL_TIM_PWM_Start+0x1e0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d013      	beq.n	8003842 <HAL_TIM_PWM_Start+0x13e>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a32      	ldr	r2, [pc, #200]	; (80038e8 <HAL_TIM_PWM_Start+0x1e4>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d00e      	beq.n	8003842 <HAL_TIM_PWM_Start+0x13e>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a30      	ldr	r2, [pc, #192]	; (80038ec <HAL_TIM_PWM_Start+0x1e8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d009      	beq.n	8003842 <HAL_TIM_PWM_Start+0x13e>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a2f      	ldr	r2, [pc, #188]	; (80038f0 <HAL_TIM_PWM_Start+0x1ec>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d004      	beq.n	8003842 <HAL_TIM_PWM_Start+0x13e>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a2d      	ldr	r2, [pc, #180]	; (80038f4 <HAL_TIM_PWM_Start+0x1f0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d101      	bne.n	8003846 <HAL_TIM_PWM_Start+0x142>
 8003842:	2301      	movs	r3, #1
 8003844:	e000      	b.n	8003848 <HAL_TIM_PWM_Start+0x144>
 8003846:	2300      	movs	r3, #0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d007      	beq.n	800385c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800385a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a20      	ldr	r2, [pc, #128]	; (80038e4 <HAL_TIM_PWM_Start+0x1e0>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d018      	beq.n	8003898 <HAL_TIM_PWM_Start+0x194>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386e:	d013      	beq.n	8003898 <HAL_TIM_PWM_Start+0x194>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a20      	ldr	r2, [pc, #128]	; (80038f8 <HAL_TIM_PWM_Start+0x1f4>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d00e      	beq.n	8003898 <HAL_TIM_PWM_Start+0x194>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a1f      	ldr	r2, [pc, #124]	; (80038fc <HAL_TIM_PWM_Start+0x1f8>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d009      	beq.n	8003898 <HAL_TIM_PWM_Start+0x194>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a17      	ldr	r2, [pc, #92]	; (80038e8 <HAL_TIM_PWM_Start+0x1e4>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d004      	beq.n	8003898 <HAL_TIM_PWM_Start+0x194>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a16      	ldr	r2, [pc, #88]	; (80038ec <HAL_TIM_PWM_Start+0x1e8>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d115      	bne.n	80038c4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689a      	ldr	r2, [r3, #8]
 800389e:	4b18      	ldr	r3, [pc, #96]	; (8003900 <HAL_TIM_PWM_Start+0x1fc>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2b06      	cmp	r3, #6
 80038a8:	d015      	beq.n	80038d6 <HAL_TIM_PWM_Start+0x1d2>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038b0:	d011      	beq.n	80038d6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f042 0201 	orr.w	r2, r2, #1
 80038c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038c2:	e008      	b.n	80038d6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0201 	orr.w	r2, r2, #1
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	e000      	b.n	80038d8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40012c00 	.word	0x40012c00
 80038e8:	40013400 	.word	0x40013400
 80038ec:	40014000 	.word	0x40014000
 80038f0:	40014400 	.word	0x40014400
 80038f4:	40014800 	.word	0x40014800
 80038f8:	40000400 	.word	0x40000400
 80038fc:	40000800 	.word	0x40000800
 8003900:	00010007 	.word	0x00010007

08003904 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e097      	b.n	8003a48 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	d106      	bne.n	8003932 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7fe f881 	bl	8001a34 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2202      	movs	r2, #2
 8003936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6812      	ldr	r2, [r2, #0]
 8003944:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003948:	f023 0307 	bic.w	r3, r3, #7
 800394c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	3304      	adds	r3, #4
 8003956:	4619      	mov	r1, r3
 8003958:	4610      	mov	r0, r2
 800395a:	f000 fb25 	bl	8003fa8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	4313      	orrs	r3, r2
 800397e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003986:	f023 0303 	bic.w	r3, r3, #3
 800398a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	021b      	lsls	r3, r3, #8
 8003996:	4313      	orrs	r3, r2
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	4313      	orrs	r3, r2
 800399c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80039a4:	f023 030c 	bic.w	r3, r3, #12
 80039a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	021b      	lsls	r3, r3, #8
 80039c0:	4313      	orrs	r3, r2
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	011a      	lsls	r2, r3, #4
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	031b      	lsls	r3, r3, #12
 80039d4:	4313      	orrs	r3, r2
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80039e2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80039ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	4313      	orrs	r3, r2
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a60:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a68:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a70:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a78:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d110      	bne.n	8003aa2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d102      	bne.n	8003a8c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a86:	7b7b      	ldrb	r3, [r7, #13]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d001      	beq.n	8003a90 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e069      	b.n	8003b64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2202      	movs	r2, #2
 8003a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003aa0:	e031      	b.n	8003b06 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	d110      	bne.n	8003aca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003aa8:	7bbb      	ldrb	r3, [r7, #14]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d102      	bne.n	8003ab4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003aae:	7b3b      	ldrb	r3, [r7, #12]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d001      	beq.n	8003ab8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e055      	b.n	8003b64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ac8:	e01d      	b.n	8003b06 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d108      	bne.n	8003ae2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ad0:	7bbb      	ldrb	r3, [r7, #14]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d105      	bne.n	8003ae2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ad6:	7b7b      	ldrb	r3, [r7, #13]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d102      	bne.n	8003ae2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003adc:	7b3b      	ldrb	r3, [r7, #12]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d001      	beq.n	8003ae6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e03e      	b.n	8003b64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2202      	movs	r2, #2
 8003aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2202      	movs	r2, #2
 8003af2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2202      	movs	r2, #2
 8003afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2202      	movs	r2, #2
 8003b02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <HAL_TIM_Encoder_Start+0xc4>
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	d008      	beq.n	8003b24 <HAL_TIM_Encoder_Start+0xd4>
 8003b12:	e00f      	b.n	8003b34 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 fdc9 	bl	80046b4 <TIM_CCxChannelCmd>
      break;
 8003b22:	e016      	b.n	8003b52 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	2104      	movs	r1, #4
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f000 fdc1 	bl	80046b4 <TIM_CCxChannelCmd>
      break;
 8003b32:	e00e      	b.n	8003b52 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 fdb9 	bl	80046b4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2201      	movs	r2, #1
 8003b48:	2104      	movs	r1, #4
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 fdb2 	bl	80046b4 <TIM_CCxChannelCmd>
      break;
 8003b50:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f042 0201 	orr.w	r2, r2, #1
 8003b60:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d122      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d11b      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f06f 0202 	mvn.w	r2, #2
 8003b98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f9dc 	bl	8003f6c <HAL_TIM_IC_CaptureCallback>
 8003bb4:	e005      	b.n	8003bc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f9ce 	bl	8003f58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f9df 	bl	8003f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d122      	bne.n	8003c1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d11b      	bne.n	8003c1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f06f 0204 	mvn.w	r2, #4
 8003bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f9b2 	bl	8003f6c <HAL_TIM_IC_CaptureCallback>
 8003c08:	e005      	b.n	8003c16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f9a4 	bl	8003f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f9b5 	bl	8003f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	f003 0308 	and.w	r3, r3, #8
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d122      	bne.n	8003c70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f003 0308 	and.w	r3, r3, #8
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	d11b      	bne.n	8003c70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f06f 0208 	mvn.w	r2, #8
 8003c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2204      	movs	r2, #4
 8003c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	f003 0303 	and.w	r3, r3, #3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f988 	bl	8003f6c <HAL_TIM_IC_CaptureCallback>
 8003c5c:	e005      	b.n	8003c6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f97a 	bl	8003f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f98b 	bl	8003f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	f003 0310 	and.w	r3, r3, #16
 8003c7a:	2b10      	cmp	r3, #16
 8003c7c:	d122      	bne.n	8003cc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f003 0310 	and.w	r3, r3, #16
 8003c88:	2b10      	cmp	r3, #16
 8003c8a:	d11b      	bne.n	8003cc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f06f 0210 	mvn.w	r2, #16
 8003c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2208      	movs	r2, #8
 8003c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f95e 	bl	8003f6c <HAL_TIM_IC_CaptureCallback>
 8003cb0:	e005      	b.n	8003cbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f950 	bl	8003f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 f961 	bl	8003f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d10e      	bne.n	8003cf0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d107      	bne.n	8003cf0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f06f 0201 	mvn.w	r2, #1
 8003ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7fd fa68 	bl	80011c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfa:	2b80      	cmp	r3, #128	; 0x80
 8003cfc:	d10e      	bne.n	8003d1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d08:	2b80      	cmp	r3, #128	; 0x80
 8003d0a:	d107      	bne.n	8003d1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fe1e 	bl	8004958 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d2a:	d10e      	bne.n	8003d4a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d36:	2b80      	cmp	r3, #128	; 0x80
 8003d38:	d107      	bne.n	8003d4a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 fe11 	bl	800496c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d54:	2b40      	cmp	r3, #64	; 0x40
 8003d56:	d10e      	bne.n	8003d76 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d62:	2b40      	cmp	r3, #64	; 0x40
 8003d64:	d107      	bne.n	8003d76 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 f90f 	bl	8003f94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	f003 0320 	and.w	r3, r3, #32
 8003d80:	2b20      	cmp	r3, #32
 8003d82:	d10e      	bne.n	8003da2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f003 0320 	and.w	r3, r3, #32
 8003d8e:	2b20      	cmp	r3, #32
 8003d90:	d107      	bne.n	8003da2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f06f 0220 	mvn.w	r2, #32
 8003d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 fdd1 	bl	8004944 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003db0:	d10f      	bne.n	8003dd2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dc0:	d107      	bne.n	8003dd2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 fdd7 	bl	8004980 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ddc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003de0:	d10f      	bne.n	8003e02 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003df0:	d107      	bne.n	8003e02 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 fdc9 	bl	8004994 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e10:	d10f      	bne.n	8003e32 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e20:	d107      	bne.n	8003e32 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 fdbb 	bl	80049a8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e40:	d10f      	bne.n	8003e62 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e50:	d107      	bne.n	8003e62 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 fdad 	bl	80049bc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e62:	bf00      	nop
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d101      	bne.n	8003e86 <HAL_TIM_OC_ConfigChannel+0x1a>
 8003e82:	2302      	movs	r3, #2
 8003e84:	e064      	b.n	8003f50 <HAL_TIM_OC_ConfigChannel+0xe4>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b14      	cmp	r3, #20
 8003e92:	d857      	bhi.n	8003f44 <HAL_TIM_OC_ConfigChannel+0xd8>
 8003e94:	a201      	add	r2, pc, #4	; (adr r2, 8003e9c <HAL_TIM_OC_ConfigChannel+0x30>)
 8003e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9a:	bf00      	nop
 8003e9c:	08003ef1 	.word	0x08003ef1
 8003ea0:	08003f45 	.word	0x08003f45
 8003ea4:	08003f45 	.word	0x08003f45
 8003ea8:	08003f45 	.word	0x08003f45
 8003eac:	08003eff 	.word	0x08003eff
 8003eb0:	08003f45 	.word	0x08003f45
 8003eb4:	08003f45 	.word	0x08003f45
 8003eb8:	08003f45 	.word	0x08003f45
 8003ebc:	08003f0d 	.word	0x08003f0d
 8003ec0:	08003f45 	.word	0x08003f45
 8003ec4:	08003f45 	.word	0x08003f45
 8003ec8:	08003f45 	.word	0x08003f45
 8003ecc:	08003f1b 	.word	0x08003f1b
 8003ed0:	08003f45 	.word	0x08003f45
 8003ed4:	08003f45 	.word	0x08003f45
 8003ed8:	08003f45 	.word	0x08003f45
 8003edc:	08003f29 	.word	0x08003f29
 8003ee0:	08003f45 	.word	0x08003f45
 8003ee4:	08003f45 	.word	0x08003f45
 8003ee8:	08003f45 	.word	0x08003f45
 8003eec:	08003f37 	.word	0x08003f37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68b9      	ldr	r1, [r7, #8]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 f8e6 	bl	80040c8 <TIM_OC1_SetConfig>
      break;
 8003efc:	e023      	b.n	8003f46 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68b9      	ldr	r1, [r7, #8]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 f96f 	bl	80041e8 <TIM_OC2_SetConfig>
      break;
 8003f0a:	e01c      	b.n	8003f46 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 f9f2 	bl	80042fc <TIM_OC3_SetConfig>
      break;
 8003f18:	e015      	b.n	8003f46 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68b9      	ldr	r1, [r7, #8]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 fa73 	bl	800440c <TIM_OC4_SetConfig>
      break;
 8003f26:	e00e      	b.n	8003f46 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68b9      	ldr	r1, [r7, #8]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 faf6 	bl	8004520 <TIM_OC5_SetConfig>
      break;
 8003f34:	e007      	b.n	8003f46 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68b9      	ldr	r1, [r7, #8]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f000 fb53 	bl	80045e8 <TIM_OC6_SetConfig>
      break;
 8003f42:	e000      	b.n	8003f46 <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8003f44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a3c      	ldr	r2, [pc, #240]	; (80040ac <TIM_Base_SetConfig+0x104>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d00f      	beq.n	8003fe0 <TIM_Base_SetConfig+0x38>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc6:	d00b      	beq.n	8003fe0 <TIM_Base_SetConfig+0x38>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a39      	ldr	r2, [pc, #228]	; (80040b0 <TIM_Base_SetConfig+0x108>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d007      	beq.n	8003fe0 <TIM_Base_SetConfig+0x38>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a38      	ldr	r2, [pc, #224]	; (80040b4 <TIM_Base_SetConfig+0x10c>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d003      	beq.n	8003fe0 <TIM_Base_SetConfig+0x38>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a37      	ldr	r2, [pc, #220]	; (80040b8 <TIM_Base_SetConfig+0x110>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d108      	bne.n	8003ff2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a2d      	ldr	r2, [pc, #180]	; (80040ac <TIM_Base_SetConfig+0x104>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d01b      	beq.n	8004032 <TIM_Base_SetConfig+0x8a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004000:	d017      	beq.n	8004032 <TIM_Base_SetConfig+0x8a>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a2a      	ldr	r2, [pc, #168]	; (80040b0 <TIM_Base_SetConfig+0x108>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d013      	beq.n	8004032 <TIM_Base_SetConfig+0x8a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a29      	ldr	r2, [pc, #164]	; (80040b4 <TIM_Base_SetConfig+0x10c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d00f      	beq.n	8004032 <TIM_Base_SetConfig+0x8a>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a28      	ldr	r2, [pc, #160]	; (80040b8 <TIM_Base_SetConfig+0x110>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00b      	beq.n	8004032 <TIM_Base_SetConfig+0x8a>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a27      	ldr	r2, [pc, #156]	; (80040bc <TIM_Base_SetConfig+0x114>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d007      	beq.n	8004032 <TIM_Base_SetConfig+0x8a>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a26      	ldr	r2, [pc, #152]	; (80040c0 <TIM_Base_SetConfig+0x118>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d003      	beq.n	8004032 <TIM_Base_SetConfig+0x8a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a25      	ldr	r2, [pc, #148]	; (80040c4 <TIM_Base_SetConfig+0x11c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d108      	bne.n	8004044 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	4313      	orrs	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	4313      	orrs	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a10      	ldr	r2, [pc, #64]	; (80040ac <TIM_Base_SetConfig+0x104>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d00f      	beq.n	8004090 <TIM_Base_SetConfig+0xe8>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a11      	ldr	r2, [pc, #68]	; (80040b8 <TIM_Base_SetConfig+0x110>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d00b      	beq.n	8004090 <TIM_Base_SetConfig+0xe8>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a10      	ldr	r2, [pc, #64]	; (80040bc <TIM_Base_SetConfig+0x114>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d007      	beq.n	8004090 <TIM_Base_SetConfig+0xe8>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a0f      	ldr	r2, [pc, #60]	; (80040c0 <TIM_Base_SetConfig+0x118>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d003      	beq.n	8004090 <TIM_Base_SetConfig+0xe8>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a0e      	ldr	r2, [pc, #56]	; (80040c4 <TIM_Base_SetConfig+0x11c>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d103      	bne.n	8004098 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	691a      	ldr	r2, [r3, #16]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	615a      	str	r2, [r3, #20]
}
 800409e:	bf00      	nop
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	40012c00 	.word	0x40012c00
 80040b0:	40000400 	.word	0x40000400
 80040b4:	40000800 	.word	0x40000800
 80040b8:	40013400 	.word	0x40013400
 80040bc:	40014000 	.word	0x40014000
 80040c0:	40014400 	.word	0x40014400
 80040c4:	40014800 	.word	0x40014800

080040c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	f023 0201 	bic.w	r2, r3, #1
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f023 0303 	bic.w	r3, r3, #3
 8004102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	4313      	orrs	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f023 0302 	bic.w	r3, r3, #2
 8004114:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	4313      	orrs	r3, r2
 800411e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a2c      	ldr	r2, [pc, #176]	; (80041d4 <TIM_OC1_SetConfig+0x10c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d00f      	beq.n	8004148 <TIM_OC1_SetConfig+0x80>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a2b      	ldr	r2, [pc, #172]	; (80041d8 <TIM_OC1_SetConfig+0x110>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d00b      	beq.n	8004148 <TIM_OC1_SetConfig+0x80>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a2a      	ldr	r2, [pc, #168]	; (80041dc <TIM_OC1_SetConfig+0x114>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d007      	beq.n	8004148 <TIM_OC1_SetConfig+0x80>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a29      	ldr	r2, [pc, #164]	; (80041e0 <TIM_OC1_SetConfig+0x118>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d003      	beq.n	8004148 <TIM_OC1_SetConfig+0x80>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a28      	ldr	r2, [pc, #160]	; (80041e4 <TIM_OC1_SetConfig+0x11c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d10c      	bne.n	8004162 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f023 0308 	bic.w	r3, r3, #8
 800414e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	4313      	orrs	r3, r2
 8004158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f023 0304 	bic.w	r3, r3, #4
 8004160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a1b      	ldr	r2, [pc, #108]	; (80041d4 <TIM_OC1_SetConfig+0x10c>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d00f      	beq.n	800418a <TIM_OC1_SetConfig+0xc2>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a1a      	ldr	r2, [pc, #104]	; (80041d8 <TIM_OC1_SetConfig+0x110>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d00b      	beq.n	800418a <TIM_OC1_SetConfig+0xc2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a19      	ldr	r2, [pc, #100]	; (80041dc <TIM_OC1_SetConfig+0x114>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d007      	beq.n	800418a <TIM_OC1_SetConfig+0xc2>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a18      	ldr	r2, [pc, #96]	; (80041e0 <TIM_OC1_SetConfig+0x118>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d003      	beq.n	800418a <TIM_OC1_SetConfig+0xc2>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a17      	ldr	r2, [pc, #92]	; (80041e4 <TIM_OC1_SetConfig+0x11c>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d111      	bne.n	80041ae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004190:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004198:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	621a      	str	r2, [r3, #32]
}
 80041c8:	bf00      	nop
 80041ca:	371c      	adds	r7, #28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	40012c00 	.word	0x40012c00
 80041d8:	40013400 	.word	0x40013400
 80041dc:	40014000 	.word	0x40014000
 80041e0:	40014400 	.word	0x40014400
 80041e4:	40014800 	.word	0x40014800

080041e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	f023 0210 	bic.w	r2, r3, #16
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800421a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	021b      	lsls	r3, r3, #8
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	4313      	orrs	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f023 0320 	bic.w	r3, r3, #32
 8004236:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4313      	orrs	r3, r2
 8004242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a28      	ldr	r2, [pc, #160]	; (80042e8 <TIM_OC2_SetConfig+0x100>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d003      	beq.n	8004254 <TIM_OC2_SetConfig+0x6c>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a27      	ldr	r2, [pc, #156]	; (80042ec <TIM_OC2_SetConfig+0x104>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d10d      	bne.n	8004270 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800425a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	4313      	orrs	r3, r2
 8004266:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800426e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a1d      	ldr	r2, [pc, #116]	; (80042e8 <TIM_OC2_SetConfig+0x100>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d00f      	beq.n	8004298 <TIM_OC2_SetConfig+0xb0>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a1c      	ldr	r2, [pc, #112]	; (80042ec <TIM_OC2_SetConfig+0x104>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d00b      	beq.n	8004298 <TIM_OC2_SetConfig+0xb0>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a1b      	ldr	r2, [pc, #108]	; (80042f0 <TIM_OC2_SetConfig+0x108>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d007      	beq.n	8004298 <TIM_OC2_SetConfig+0xb0>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a1a      	ldr	r2, [pc, #104]	; (80042f4 <TIM_OC2_SetConfig+0x10c>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d003      	beq.n	8004298 <TIM_OC2_SetConfig+0xb0>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a19      	ldr	r2, [pc, #100]	; (80042f8 <TIM_OC2_SetConfig+0x110>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d113      	bne.n	80042c0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800429e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	4313      	orrs	r3, r2
 80042be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	621a      	str	r2, [r3, #32]
}
 80042da:	bf00      	nop
 80042dc:	371c      	adds	r7, #28
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	40012c00 	.word	0x40012c00
 80042ec:	40013400 	.word	0x40013400
 80042f0:	40014000 	.word	0x40014000
 80042f4:	40014400 	.word	0x40014400
 80042f8:	40014800 	.word	0x40014800

080042fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b087      	sub	sp, #28
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800432a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f023 0303 	bic.w	r3, r3, #3
 8004336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4313      	orrs	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	021b      	lsls	r3, r3, #8
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	4313      	orrs	r3, r2
 8004354:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a27      	ldr	r2, [pc, #156]	; (80043f8 <TIM_OC3_SetConfig+0xfc>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d003      	beq.n	8004366 <TIM_OC3_SetConfig+0x6a>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a26      	ldr	r2, [pc, #152]	; (80043fc <TIM_OC3_SetConfig+0x100>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d10d      	bne.n	8004382 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800436c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	021b      	lsls	r3, r3, #8
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	4313      	orrs	r3, r2
 8004378:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004380:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a1c      	ldr	r2, [pc, #112]	; (80043f8 <TIM_OC3_SetConfig+0xfc>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d00f      	beq.n	80043aa <TIM_OC3_SetConfig+0xae>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a1b      	ldr	r2, [pc, #108]	; (80043fc <TIM_OC3_SetConfig+0x100>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d00b      	beq.n	80043aa <TIM_OC3_SetConfig+0xae>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a1a      	ldr	r2, [pc, #104]	; (8004400 <TIM_OC3_SetConfig+0x104>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d007      	beq.n	80043aa <TIM_OC3_SetConfig+0xae>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a19      	ldr	r2, [pc, #100]	; (8004404 <TIM_OC3_SetConfig+0x108>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d003      	beq.n	80043aa <TIM_OC3_SetConfig+0xae>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a18      	ldr	r2, [pc, #96]	; (8004408 <TIM_OC3_SetConfig+0x10c>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d113      	bne.n	80043d2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	621a      	str	r2, [r3, #32]
}
 80043ec:	bf00      	nop
 80043ee:	371c      	adds	r7, #28
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	40012c00 	.word	0x40012c00
 80043fc:	40013400 	.word	0x40013400
 8004400:	40014000 	.word	0x40014000
 8004404:	40014400 	.word	0x40014400
 8004408:	40014800 	.word	0x40014800

0800440c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800443a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800443e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	021b      	lsls	r3, r3, #8
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	4313      	orrs	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800445a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	031b      	lsls	r3, r3, #12
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	4313      	orrs	r3, r2
 8004466:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a28      	ldr	r2, [pc, #160]	; (800450c <TIM_OC4_SetConfig+0x100>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d003      	beq.n	8004478 <TIM_OC4_SetConfig+0x6c>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a27      	ldr	r2, [pc, #156]	; (8004510 <TIM_OC4_SetConfig+0x104>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d10d      	bne.n	8004494 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800447e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	031b      	lsls	r3, r3, #12
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	4313      	orrs	r3, r2
 800448a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004492:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a1d      	ldr	r2, [pc, #116]	; (800450c <TIM_OC4_SetConfig+0x100>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d00f      	beq.n	80044bc <TIM_OC4_SetConfig+0xb0>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a1c      	ldr	r2, [pc, #112]	; (8004510 <TIM_OC4_SetConfig+0x104>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d00b      	beq.n	80044bc <TIM_OC4_SetConfig+0xb0>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a1b      	ldr	r2, [pc, #108]	; (8004514 <TIM_OC4_SetConfig+0x108>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d007      	beq.n	80044bc <TIM_OC4_SetConfig+0xb0>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a1a      	ldr	r2, [pc, #104]	; (8004518 <TIM_OC4_SetConfig+0x10c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d003      	beq.n	80044bc <TIM_OC4_SetConfig+0xb0>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a19      	ldr	r2, [pc, #100]	; (800451c <TIM_OC4_SetConfig+0x110>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d113      	bne.n	80044e4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044c2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044ca:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	019b      	lsls	r3, r3, #6
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	019b      	lsls	r3, r3, #6
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	621a      	str	r2, [r3, #32]
}
 80044fe:	bf00      	nop
 8004500:	371c      	adds	r7, #28
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	40012c00 	.word	0x40012c00
 8004510:	40013400 	.word	0x40013400
 8004514:	40014000 	.word	0x40014000
 8004518:	40014400 	.word	0x40014400
 800451c:	40014800 	.word	0x40014800

08004520 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004520:	b480      	push	{r7}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800454e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	4313      	orrs	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004564:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	041b      	lsls	r3, r3, #16
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	4313      	orrs	r3, r2
 8004570:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a17      	ldr	r2, [pc, #92]	; (80045d4 <TIM_OC5_SetConfig+0xb4>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d00f      	beq.n	800459a <TIM_OC5_SetConfig+0x7a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a16      	ldr	r2, [pc, #88]	; (80045d8 <TIM_OC5_SetConfig+0xb8>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d00b      	beq.n	800459a <TIM_OC5_SetConfig+0x7a>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a15      	ldr	r2, [pc, #84]	; (80045dc <TIM_OC5_SetConfig+0xbc>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d007      	beq.n	800459a <TIM_OC5_SetConfig+0x7a>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a14      	ldr	r2, [pc, #80]	; (80045e0 <TIM_OC5_SetConfig+0xc0>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d003      	beq.n	800459a <TIM_OC5_SetConfig+0x7a>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a13      	ldr	r2, [pc, #76]	; (80045e4 <TIM_OC5_SetConfig+0xc4>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d109      	bne.n	80045ae <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	021b      	lsls	r3, r3, #8
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	621a      	str	r2, [r3, #32]
}
 80045c8:	bf00      	nop
 80045ca:	371c      	adds	r7, #28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	40012c00 	.word	0x40012c00
 80045d8:	40013400 	.word	0x40013400
 80045dc:	40014000 	.word	0x40014000
 80045e0:	40014400 	.word	0x40014400
 80045e4:	40014800 	.word	0x40014800

080045e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800460e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800461a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	021b      	lsls	r3, r3, #8
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	4313      	orrs	r3, r2
 8004626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800462e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	051b      	lsls	r3, r3, #20
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	4313      	orrs	r3, r2
 800463a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a18      	ldr	r2, [pc, #96]	; (80046a0 <TIM_OC6_SetConfig+0xb8>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d00f      	beq.n	8004664 <TIM_OC6_SetConfig+0x7c>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a17      	ldr	r2, [pc, #92]	; (80046a4 <TIM_OC6_SetConfig+0xbc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d00b      	beq.n	8004664 <TIM_OC6_SetConfig+0x7c>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a16      	ldr	r2, [pc, #88]	; (80046a8 <TIM_OC6_SetConfig+0xc0>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d007      	beq.n	8004664 <TIM_OC6_SetConfig+0x7c>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a15      	ldr	r2, [pc, #84]	; (80046ac <TIM_OC6_SetConfig+0xc4>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d003      	beq.n	8004664 <TIM_OC6_SetConfig+0x7c>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a14      	ldr	r2, [pc, #80]	; (80046b0 <TIM_OC6_SetConfig+0xc8>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d109      	bne.n	8004678 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800466a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	029b      	lsls	r3, r3, #10
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	4313      	orrs	r3, r2
 8004676:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	621a      	str	r2, [r3, #32]
}
 8004692:	bf00      	nop
 8004694:	371c      	adds	r7, #28
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	40012c00 	.word	0x40012c00
 80046a4:	40013400 	.word	0x40013400
 80046a8:	40014000 	.word	0x40014000
 80046ac:	40014400 	.word	0x40014400
 80046b0:	40014800 	.word	0x40014800

080046b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b087      	sub	sp, #28
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f003 031f 	and.w	r3, r3, #31
 80046c6:	2201      	movs	r2, #1
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a1a      	ldr	r2, [r3, #32]
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	43db      	mvns	r3, r3
 80046d6:	401a      	ands	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a1a      	ldr	r2, [r3, #32]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f003 031f 	and.w	r3, r3, #31
 80046e6:	6879      	ldr	r1, [r7, #4]
 80046e8:	fa01 f303 	lsl.w	r3, r1, r3
 80046ec:	431a      	orrs	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	621a      	str	r2, [r3, #32]
}
 80046f2:	bf00      	nop
 80046f4:	371c      	adds	r7, #28
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
	...

08004700 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004710:	2b01      	cmp	r3, #1
 8004712:	d101      	bne.n	8004718 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004714:	2302      	movs	r3, #2
 8004716:	e065      	b.n	80047e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a2c      	ldr	r2, [pc, #176]	; (80047f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d004      	beq.n	800474c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a2b      	ldr	r2, [pc, #172]	; (80047f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d108      	bne.n	800475e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004752:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	4313      	orrs	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004768:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	4313      	orrs	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a1b      	ldr	r2, [pc, #108]	; (80047f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d018      	beq.n	80047b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800478e:	d013      	beq.n	80047b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a18      	ldr	r2, [pc, #96]	; (80047f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d00e      	beq.n	80047b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a17      	ldr	r2, [pc, #92]	; (80047fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d009      	beq.n	80047b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a12      	ldr	r2, [pc, #72]	; (80047f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d004      	beq.n	80047b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a13      	ldr	r2, [pc, #76]	; (8004800 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d10c      	bne.n	80047d2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	40012c00 	.word	0x40012c00
 80047f4:	40013400 	.word	0x40013400
 80047f8:	40000400 	.word	0x40000400
 80047fc:	40000800 	.word	0x40000800
 8004800:	40014000 	.word	0x40014000

08004804 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004818:	2b01      	cmp	r3, #1
 800481a:	d101      	bne.n	8004820 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800481c:	2302      	movs	r3, #2
 800481e:	e087      	b.n	8004930 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	4313      	orrs	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	4313      	orrs	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	4313      	orrs	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4313      	orrs	r3, r2
 800485e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	4313      	orrs	r3, r2
 800486c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	4313      	orrs	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	041b      	lsls	r3, r3, #16
 8004896:	4313      	orrs	r3, r2
 8004898:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a27      	ldr	r2, [pc, #156]	; (800493c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d004      	beq.n	80048ae <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a25      	ldr	r2, [pc, #148]	; (8004940 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d106      	bne.n	80048bc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a1e      	ldr	r2, [pc, #120]	; (800493c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d004      	beq.n	80048d0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a1d      	ldr	r2, [pc, #116]	; (8004940 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d126      	bne.n	800491e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048da:	051b      	lsls	r3, r3, #20
 80048dc:	4313      	orrs	r3, r2
 80048de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	4313      	orrs	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a0e      	ldr	r2, [pc, #56]	; (800493c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d004      	beq.n	8004910 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a0d      	ldr	r2, [pc, #52]	; (8004940 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d106      	bne.n	800491e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3714      	adds	r7, #20
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	40012c00 	.word	0x40012c00
 8004940:	40013400 	.word	0x40013400

08004944 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e042      	b.n	8004a68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d106      	bne.n	80049fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7fd f923 	bl	8001c40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2224      	movs	r2, #36	; 0x24
 80049fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0201 	bic.w	r2, r2, #1
 8004a10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 fb5c 	bl	80050d0 <UART_SetConfig>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d101      	bne.n	8004a22 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e022      	b.n	8004a68 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d002      	beq.n	8004a30 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 fdee 	bl	800560c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689a      	ldr	r2, [r3, #8]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0201 	orr.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 fe75 	bl	8005750 <UART_CheckIdleState>
 8004a66:	4603      	mov	r3, r0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3708      	adds	r7, #8
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08a      	sub	sp, #40	; 0x28
 8004a74:	af02      	add	r7, sp, #8
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	603b      	str	r3, [r7, #0]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a86:	2b20      	cmp	r3, #32
 8004a88:	f040 8083 	bne.w	8004b92 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <HAL_UART_Transmit+0x28>
 8004a92:	88fb      	ldrh	r3, [r7, #6]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e07b      	b.n	8004b94 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d101      	bne.n	8004aaa <HAL_UART_Transmit+0x3a>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	e074      	b.n	8004b94 <HAL_UART_Transmit+0x124>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2221      	movs	r2, #33	; 0x21
 8004abe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ac2:	f7fd f995 	bl	8001df0 <HAL_GetTick>
 8004ac6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	88fa      	ldrh	r2, [r7, #6]
 8004acc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	88fa      	ldrh	r2, [r7, #6]
 8004ad4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae0:	d108      	bne.n	8004af4 <HAL_UART_Transmit+0x84>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d104      	bne.n	8004af4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004aea:	2300      	movs	r3, #0
 8004aec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	61bb      	str	r3, [r7, #24]
 8004af2:	e003      	b.n	8004afc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004af8:	2300      	movs	r3, #0
 8004afa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004b04:	e02c      	b.n	8004b60 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	2180      	movs	r1, #128	; 0x80
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f000 fe68 	bl	80057e6 <UART_WaitOnFlagUntilTimeout>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e039      	b.n	8004b94 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10b      	bne.n	8004b3e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b34:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	3302      	adds	r3, #2
 8004b3a:	61bb      	str	r3, [r7, #24]
 8004b3c:	e007      	b.n	8004b4e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	781a      	ldrb	r2, [r3, #0]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	3b01      	subs	r3, #1
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1cc      	bne.n	8004b06 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	2200      	movs	r2, #0
 8004b74:	2140      	movs	r1, #64	; 0x40
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f000 fe35 	bl	80057e6 <UART_WaitOnFlagUntilTimeout>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e006      	b.n	8004b94 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	e000      	b.n	8004b94 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004b92:	2302      	movs	r3, #2
  }
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3720      	adds	r7, #32
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb0:	2b20      	cmp	r3, #32
 8004bb2:	d131      	bne.n	8004c18 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d002      	beq.n	8004bc0 <HAL_UART_Receive_IT+0x24>
 8004bba:	88fb      	ldrh	r3, [r7, #6]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e02a      	b.n	8004c1a <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d101      	bne.n	8004bd2 <HAL_UART_Receive_IT+0x36>
 8004bce:	2302      	movs	r3, #2
 8004bd0:	e023      	b.n	8004c1a <HAL_UART_Receive_IT+0x7e>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a0f      	ldr	r2, [pc, #60]	; (8004c24 <HAL_UART_Receive_IT+0x88>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d00e      	beq.n	8004c08 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d007      	beq.n	8004c08 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004c06:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c08:	88fb      	ldrh	r3, [r7, #6]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	68b9      	ldr	r1, [r7, #8]
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f000 fe6a 	bl	80058e8 <UART_Start_Receive_IT>
 8004c14:	4603      	mov	r3, r0
 8004c16:	e000      	b.n	8004c1a <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004c18:	2302      	movs	r3, #2
  }
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	40008000 	.word	0x40008000

08004c28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b088      	sub	sp, #32
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004c48:	69fa      	ldr	r2, [r7, #28]
 8004c4a:	f640 030f 	movw	r3, #2063	; 0x80f
 8004c4e:	4013      	ands	r3, r2
 8004c50:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d118      	bne.n	8004c8a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	f003 0320 	and.w	r3, r3, #32
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d013      	beq.n	8004c8a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	f003 0320 	and.w	r3, r3, #32
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d104      	bne.n	8004c76 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d009      	beq.n	8004c8a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 81fb 	beq.w	8005076 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	4798      	blx	r3
      }
      return;
 8004c88:	e1f5      	b.n	8005076 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 80ef 	beq.w	8004e70 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	4b73      	ldr	r3, [pc, #460]	; (8004e64 <HAL_UART_IRQHandler+0x23c>)
 8004c96:	4013      	ands	r3, r2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d105      	bne.n	8004ca8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	4b72      	ldr	r3, [pc, #456]	; (8004e68 <HAL_UART_IRQHandler+0x240>)
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 80e4 	beq.w	8004e70 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d010      	beq.n	8004cd4 <HAL_UART_IRQHandler+0xac>
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00b      	beq.n	8004cd4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cca:	f043 0201 	orr.w	r2, r3, #1
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d010      	beq.n	8004d00 <HAL_UART_IRQHandler+0xd8>
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00b      	beq.n	8004d00 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2202      	movs	r2, #2
 8004cee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cf6:	f043 0204 	orr.w	r2, r3, #4
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	f003 0304 	and.w	r3, r3, #4
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d010      	beq.n	8004d2c <HAL_UART_IRQHandler+0x104>
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00b      	beq.n	8004d2c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2204      	movs	r2, #4
 8004d1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d22:	f043 0202 	orr.w	r2, r3, #2
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	f003 0308 	and.w	r3, r3, #8
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d015      	beq.n	8004d62 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	f003 0320 	and.w	r3, r3, #32
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d104      	bne.n	8004d4a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	4b48      	ldr	r3, [pc, #288]	; (8004e64 <HAL_UART_IRQHandler+0x23c>)
 8004d44:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00b      	beq.n	8004d62 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2208      	movs	r2, #8
 8004d50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d58:	f043 0208 	orr.w	r2, r3, #8
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d011      	beq.n	8004d90 <HAL_UART_IRQHandler+0x168>
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00c      	beq.n	8004d90 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d86:	f043 0220 	orr.w	r2, r3, #32
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 816f 	beq.w	800507a <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	f003 0320 	and.w	r3, r3, #32
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d011      	beq.n	8004dca <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	f003 0320 	and.w	r3, r3, #32
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d104      	bne.n	8004dba <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d007      	beq.n	8004dca <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dd0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ddc:	2b40      	cmp	r3, #64	; 0x40
 8004dde:	d004      	beq.n	8004dea <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d031      	beq.n	8004e4e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 fe3a 	bl	8005a64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfa:	2b40      	cmp	r3, #64	; 0x40
 8004dfc:	d123      	bne.n	8004e46 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689a      	ldr	r2, [r3, #8]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e0c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d013      	beq.n	8004e3e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e1a:	4a14      	ldr	r2, [pc, #80]	; (8004e6c <HAL_UART_IRQHandler+0x244>)
 8004e1c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7fd f97a 	bl	800211c <HAL_DMA_Abort_IT>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d017      	beq.n	8004e5e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004e38:	4610      	mov	r0, r2
 8004e3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e3c:	e00f      	b.n	8004e5e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f930 	bl	80050a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e44:	e00b      	b.n	8004e5e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f92c 	bl	80050a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e4c:	e007      	b.n	8004e5e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f928 	bl	80050a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004e5c:	e10d      	b.n	800507a <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e5e:	bf00      	nop
    return;
 8004e60:	e10b      	b.n	800507a <HAL_UART_IRQHandler+0x452>
 8004e62:	bf00      	nop
 8004e64:	10000001 	.word	0x10000001
 8004e68:	04000120 	.word	0x04000120
 8004e6c:	08005ac9 	.word	0x08005ac9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	f040 80ab 	bne.w	8004fd0 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	f003 0310 	and.w	r3, r3, #16
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 80a5 	beq.w	8004fd0 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	f003 0310 	and.w	r3, r3, #16
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 809f 	beq.w	8004fd0 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2210      	movs	r2, #16
 8004e98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea4:	2b40      	cmp	r3, #64	; 0x40
 8004ea6:	d155      	bne.n	8004f54 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8004eb2:	893b      	ldrh	r3, [r7, #8]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 80e2 	beq.w	800507e <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004ec0:	893a      	ldrh	r2, [r7, #8]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	f080 80db 	bcs.w	800507e <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	893a      	ldrh	r2, [r7, #8]
 8004ecc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0320 	and.w	r3, r3, #32
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d12b      	bne.n	8004f38 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004eee:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 0201 	bic.w	r2, r2, #1
 8004efe:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689a      	ldr	r2, [r3, #8]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f0e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2220      	movs	r2, #32
 8004f14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0210 	bic.w	r2, r2, #16
 8004f2c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fd f899 	bl	800206a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f8b3 	bl	80050b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f52:	e094      	b.n	800507e <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f000 8087 	beq.w	8005082 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8004f74:	897b      	ldrh	r3, [r7, #10]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 8083 	beq.w	8005082 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f8a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6812      	ldr	r2, [r2, #0]
 8004f96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f9a:	f023 0301 	bic.w	r3, r3, #1
 8004f9e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 0210 	bic.w	r2, r2, #16
 8004fc2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004fc4:	897b      	ldrh	r3, [r7, #10]
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f875 	bl	80050b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004fce:	e058      	b.n	8005082 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00d      	beq.n	8004ff6 <HAL_UART_IRQHandler+0x3ce>
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d008      	beq.n	8004ff6 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004fec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f001 f876 	bl	80060e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ff4:	e048      	b.n	8005088 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d012      	beq.n	8005026 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005006:	2b00      	cmp	r3, #0
 8005008:	d104      	bne.n	8005014 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d008      	beq.n	8005026 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005018:	2b00      	cmp	r3, #0
 800501a:	d034      	beq.n	8005086 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	4798      	blx	r3
    }
    return;
 8005024:	e02f      	b.n	8005086 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502c:	2b00      	cmp	r3, #0
 800502e:	d008      	beq.n	8005042 <HAL_UART_IRQHandler+0x41a>
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005036:	2b00      	cmp	r3, #0
 8005038:	d003      	beq.n	8005042 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 fd5a 	bl	8005af4 <UART_EndTransmit_IT>
    return;
 8005040:	e022      	b.n	8005088 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d008      	beq.n	800505e <HAL_UART_IRQHandler+0x436>
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f001 f856 	bl	8006108 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800505c:	e014      	b.n	8005088 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00f      	beq.n	8005088 <HAL_UART_IRQHandler+0x460>
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	2b00      	cmp	r3, #0
 800506c:	da0c      	bge.n	8005088 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f001 f840 	bl	80060f4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005074:	e008      	b.n	8005088 <HAL_UART_IRQHandler+0x460>
      return;
 8005076:	bf00      	nop
 8005078:	e006      	b.n	8005088 <HAL_UART_IRQHandler+0x460>
    return;
 800507a:	bf00      	nop
 800507c:	e004      	b.n	8005088 <HAL_UART_IRQHandler+0x460>
      return;
 800507e:	bf00      	nop
 8005080:	e002      	b.n	8005088 <HAL_UART_IRQHandler+0x460>
      return;
 8005082:	bf00      	nop
 8005084:	e000      	b.n	8005088 <HAL_UART_IRQHandler+0x460>
    return;
 8005086:	bf00      	nop
  }
}
 8005088:	3720      	adds	r7, #32
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop

08005090 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	460b      	mov	r3, r1
 80050c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050d0:	b5b0      	push	{r4, r5, r7, lr}
 80050d2:	b088      	sub	sp, #32
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050d8:	2300      	movs	r3, #0
 80050da:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689a      	ldr	r2, [r3, #8]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	431a      	orrs	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	431a      	orrs	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	69db      	ldr	r3, [r3, #28]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	4baf      	ldr	r3, [pc, #700]	; (80053b8 <UART_SetConfig+0x2e8>)
 80050fc:	4013      	ands	r3, r2
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	6812      	ldr	r2, [r2, #0]
 8005102:	69f9      	ldr	r1, [r7, #28]
 8005104:	430b      	orrs	r3, r1
 8005106:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68da      	ldr	r2, [r3, #12]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4aa4      	ldr	r2, [pc, #656]	; (80053bc <UART_SetConfig+0x2ec>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d004      	beq.n	8005138 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	69fa      	ldr	r2, [r7, #28]
 8005134:	4313      	orrs	r3, r2
 8005136:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005142:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6812      	ldr	r2, [r2, #0]
 800514a:	69f9      	ldr	r1, [r7, #28]
 800514c:	430b      	orrs	r3, r1
 800514e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005156:	f023 010f 	bic.w	r1, r3, #15
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a95      	ldr	r2, [pc, #596]	; (80053c0 <UART_SetConfig+0x2f0>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d120      	bne.n	80051b2 <UART_SetConfig+0xe2>
 8005170:	4b94      	ldr	r3, [pc, #592]	; (80053c4 <UART_SetConfig+0x2f4>)
 8005172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005176:	f003 0303 	and.w	r3, r3, #3
 800517a:	2b03      	cmp	r3, #3
 800517c:	d816      	bhi.n	80051ac <UART_SetConfig+0xdc>
 800517e:	a201      	add	r2, pc, #4	; (adr r2, 8005184 <UART_SetConfig+0xb4>)
 8005180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005184:	08005195 	.word	0x08005195
 8005188:	080051a1 	.word	0x080051a1
 800518c:	0800519b 	.word	0x0800519b
 8005190:	080051a7 	.word	0x080051a7
 8005194:	2301      	movs	r3, #1
 8005196:	76fb      	strb	r3, [r7, #27]
 8005198:	e0bc      	b.n	8005314 <UART_SetConfig+0x244>
 800519a:	2302      	movs	r3, #2
 800519c:	76fb      	strb	r3, [r7, #27]
 800519e:	e0b9      	b.n	8005314 <UART_SetConfig+0x244>
 80051a0:	2304      	movs	r3, #4
 80051a2:	76fb      	strb	r3, [r7, #27]
 80051a4:	e0b6      	b.n	8005314 <UART_SetConfig+0x244>
 80051a6:	2308      	movs	r3, #8
 80051a8:	76fb      	strb	r3, [r7, #27]
 80051aa:	e0b3      	b.n	8005314 <UART_SetConfig+0x244>
 80051ac:	2310      	movs	r3, #16
 80051ae:	76fb      	strb	r3, [r7, #27]
 80051b0:	e0b0      	b.n	8005314 <UART_SetConfig+0x244>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a84      	ldr	r2, [pc, #528]	; (80053c8 <UART_SetConfig+0x2f8>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d132      	bne.n	8005222 <UART_SetConfig+0x152>
 80051bc:	4b81      	ldr	r3, [pc, #516]	; (80053c4 <UART_SetConfig+0x2f4>)
 80051be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c2:	f003 030c 	and.w	r3, r3, #12
 80051c6:	2b0c      	cmp	r3, #12
 80051c8:	d828      	bhi.n	800521c <UART_SetConfig+0x14c>
 80051ca:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <UART_SetConfig+0x100>)
 80051cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d0:	08005205 	.word	0x08005205
 80051d4:	0800521d 	.word	0x0800521d
 80051d8:	0800521d 	.word	0x0800521d
 80051dc:	0800521d 	.word	0x0800521d
 80051e0:	08005211 	.word	0x08005211
 80051e4:	0800521d 	.word	0x0800521d
 80051e8:	0800521d 	.word	0x0800521d
 80051ec:	0800521d 	.word	0x0800521d
 80051f0:	0800520b 	.word	0x0800520b
 80051f4:	0800521d 	.word	0x0800521d
 80051f8:	0800521d 	.word	0x0800521d
 80051fc:	0800521d 	.word	0x0800521d
 8005200:	08005217 	.word	0x08005217
 8005204:	2300      	movs	r3, #0
 8005206:	76fb      	strb	r3, [r7, #27]
 8005208:	e084      	b.n	8005314 <UART_SetConfig+0x244>
 800520a:	2302      	movs	r3, #2
 800520c:	76fb      	strb	r3, [r7, #27]
 800520e:	e081      	b.n	8005314 <UART_SetConfig+0x244>
 8005210:	2304      	movs	r3, #4
 8005212:	76fb      	strb	r3, [r7, #27]
 8005214:	e07e      	b.n	8005314 <UART_SetConfig+0x244>
 8005216:	2308      	movs	r3, #8
 8005218:	76fb      	strb	r3, [r7, #27]
 800521a:	e07b      	b.n	8005314 <UART_SetConfig+0x244>
 800521c:	2310      	movs	r3, #16
 800521e:	76fb      	strb	r3, [r7, #27]
 8005220:	e078      	b.n	8005314 <UART_SetConfig+0x244>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a69      	ldr	r2, [pc, #420]	; (80053cc <UART_SetConfig+0x2fc>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d120      	bne.n	800526e <UART_SetConfig+0x19e>
 800522c:	4b65      	ldr	r3, [pc, #404]	; (80053c4 <UART_SetConfig+0x2f4>)
 800522e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005232:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005236:	2b30      	cmp	r3, #48	; 0x30
 8005238:	d013      	beq.n	8005262 <UART_SetConfig+0x192>
 800523a:	2b30      	cmp	r3, #48	; 0x30
 800523c:	d814      	bhi.n	8005268 <UART_SetConfig+0x198>
 800523e:	2b20      	cmp	r3, #32
 8005240:	d009      	beq.n	8005256 <UART_SetConfig+0x186>
 8005242:	2b20      	cmp	r3, #32
 8005244:	d810      	bhi.n	8005268 <UART_SetConfig+0x198>
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <UART_SetConfig+0x180>
 800524a:	2b10      	cmp	r3, #16
 800524c:	d006      	beq.n	800525c <UART_SetConfig+0x18c>
 800524e:	e00b      	b.n	8005268 <UART_SetConfig+0x198>
 8005250:	2300      	movs	r3, #0
 8005252:	76fb      	strb	r3, [r7, #27]
 8005254:	e05e      	b.n	8005314 <UART_SetConfig+0x244>
 8005256:	2302      	movs	r3, #2
 8005258:	76fb      	strb	r3, [r7, #27]
 800525a:	e05b      	b.n	8005314 <UART_SetConfig+0x244>
 800525c:	2304      	movs	r3, #4
 800525e:	76fb      	strb	r3, [r7, #27]
 8005260:	e058      	b.n	8005314 <UART_SetConfig+0x244>
 8005262:	2308      	movs	r3, #8
 8005264:	76fb      	strb	r3, [r7, #27]
 8005266:	e055      	b.n	8005314 <UART_SetConfig+0x244>
 8005268:	2310      	movs	r3, #16
 800526a:	76fb      	strb	r3, [r7, #27]
 800526c:	e052      	b.n	8005314 <UART_SetConfig+0x244>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a57      	ldr	r2, [pc, #348]	; (80053d0 <UART_SetConfig+0x300>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d120      	bne.n	80052ba <UART_SetConfig+0x1ea>
 8005278:	4b52      	ldr	r3, [pc, #328]	; (80053c4 <UART_SetConfig+0x2f4>)
 800527a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005282:	2bc0      	cmp	r3, #192	; 0xc0
 8005284:	d013      	beq.n	80052ae <UART_SetConfig+0x1de>
 8005286:	2bc0      	cmp	r3, #192	; 0xc0
 8005288:	d814      	bhi.n	80052b4 <UART_SetConfig+0x1e4>
 800528a:	2b80      	cmp	r3, #128	; 0x80
 800528c:	d009      	beq.n	80052a2 <UART_SetConfig+0x1d2>
 800528e:	2b80      	cmp	r3, #128	; 0x80
 8005290:	d810      	bhi.n	80052b4 <UART_SetConfig+0x1e4>
 8005292:	2b00      	cmp	r3, #0
 8005294:	d002      	beq.n	800529c <UART_SetConfig+0x1cc>
 8005296:	2b40      	cmp	r3, #64	; 0x40
 8005298:	d006      	beq.n	80052a8 <UART_SetConfig+0x1d8>
 800529a:	e00b      	b.n	80052b4 <UART_SetConfig+0x1e4>
 800529c:	2300      	movs	r3, #0
 800529e:	76fb      	strb	r3, [r7, #27]
 80052a0:	e038      	b.n	8005314 <UART_SetConfig+0x244>
 80052a2:	2302      	movs	r3, #2
 80052a4:	76fb      	strb	r3, [r7, #27]
 80052a6:	e035      	b.n	8005314 <UART_SetConfig+0x244>
 80052a8:	2304      	movs	r3, #4
 80052aa:	76fb      	strb	r3, [r7, #27]
 80052ac:	e032      	b.n	8005314 <UART_SetConfig+0x244>
 80052ae:	2308      	movs	r3, #8
 80052b0:	76fb      	strb	r3, [r7, #27]
 80052b2:	e02f      	b.n	8005314 <UART_SetConfig+0x244>
 80052b4:	2310      	movs	r3, #16
 80052b6:	76fb      	strb	r3, [r7, #27]
 80052b8:	e02c      	b.n	8005314 <UART_SetConfig+0x244>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a3f      	ldr	r2, [pc, #252]	; (80053bc <UART_SetConfig+0x2ec>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d125      	bne.n	8005310 <UART_SetConfig+0x240>
 80052c4:	4b3f      	ldr	r3, [pc, #252]	; (80053c4 <UART_SetConfig+0x2f4>)
 80052c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80052ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052d2:	d017      	beq.n	8005304 <UART_SetConfig+0x234>
 80052d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052d8:	d817      	bhi.n	800530a <UART_SetConfig+0x23a>
 80052da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052de:	d00b      	beq.n	80052f8 <UART_SetConfig+0x228>
 80052e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052e4:	d811      	bhi.n	800530a <UART_SetConfig+0x23a>
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <UART_SetConfig+0x222>
 80052ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ee:	d006      	beq.n	80052fe <UART_SetConfig+0x22e>
 80052f0:	e00b      	b.n	800530a <UART_SetConfig+0x23a>
 80052f2:	2300      	movs	r3, #0
 80052f4:	76fb      	strb	r3, [r7, #27]
 80052f6:	e00d      	b.n	8005314 <UART_SetConfig+0x244>
 80052f8:	2302      	movs	r3, #2
 80052fa:	76fb      	strb	r3, [r7, #27]
 80052fc:	e00a      	b.n	8005314 <UART_SetConfig+0x244>
 80052fe:	2304      	movs	r3, #4
 8005300:	76fb      	strb	r3, [r7, #27]
 8005302:	e007      	b.n	8005314 <UART_SetConfig+0x244>
 8005304:	2308      	movs	r3, #8
 8005306:	76fb      	strb	r3, [r7, #27]
 8005308:	e004      	b.n	8005314 <UART_SetConfig+0x244>
 800530a:	2310      	movs	r3, #16
 800530c:	76fb      	strb	r3, [r7, #27]
 800530e:	e001      	b.n	8005314 <UART_SetConfig+0x244>
 8005310:	2310      	movs	r3, #16
 8005312:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a28      	ldr	r2, [pc, #160]	; (80053bc <UART_SetConfig+0x2ec>)
 800531a:	4293      	cmp	r3, r2
 800531c:	f040 809e 	bne.w	800545c <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005320:	7efb      	ldrb	r3, [r7, #27]
 8005322:	2b08      	cmp	r3, #8
 8005324:	d823      	bhi.n	800536e <UART_SetConfig+0x29e>
 8005326:	a201      	add	r2, pc, #4	; (adr r2, 800532c <UART_SetConfig+0x25c>)
 8005328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800532c:	08005351 	.word	0x08005351
 8005330:	0800536f 	.word	0x0800536f
 8005334:	08005359 	.word	0x08005359
 8005338:	0800536f 	.word	0x0800536f
 800533c:	0800535f 	.word	0x0800535f
 8005340:	0800536f 	.word	0x0800536f
 8005344:	0800536f 	.word	0x0800536f
 8005348:	0800536f 	.word	0x0800536f
 800534c:	08005367 	.word	0x08005367
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005350:	f7fd fe5c 	bl	800300c <HAL_RCC_GetPCLK1Freq>
 8005354:	6178      	str	r0, [r7, #20]
        break;
 8005356:	e00f      	b.n	8005378 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005358:	4b1e      	ldr	r3, [pc, #120]	; (80053d4 <UART_SetConfig+0x304>)
 800535a:	617b      	str	r3, [r7, #20]
        break;
 800535c:	e00c      	b.n	8005378 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800535e:	f7fd fde7 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8005362:	6178      	str	r0, [r7, #20]
        break;
 8005364:	e008      	b.n	8005378 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800536a:	617b      	str	r3, [r7, #20]
        break;
 800536c:	e004      	b.n	8005378 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 800536e:	2300      	movs	r3, #0
 8005370:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	76bb      	strb	r3, [r7, #26]
        break;
 8005376:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 812e 	beq.w	80055dc <UART_SetConfig+0x50c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	4a14      	ldr	r2, [pc, #80]	; (80053d8 <UART_SetConfig+0x308>)
 8005386:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800538a:	461a      	mov	r2, r3
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005392:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	4613      	mov	r3, r2
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	4413      	add	r3, r2
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d305      	bcc.n	80053b0 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d915      	bls.n	80053dc <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	76bb      	strb	r3, [r7, #26]
 80053b4:	e112      	b.n	80055dc <UART_SetConfig+0x50c>
 80053b6:	bf00      	nop
 80053b8:	cfff69f3 	.word	0xcfff69f3
 80053bc:	40008000 	.word	0x40008000
 80053c0:	40013800 	.word	0x40013800
 80053c4:	40021000 	.word	0x40021000
 80053c8:	40004400 	.word	0x40004400
 80053cc:	40004800 	.word	0x40004800
 80053d0:	40004c00 	.word	0x40004c00
 80053d4:	00f42400 	.word	0x00f42400
 80053d8:	08008f2c 	.word	0x08008f2c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	4618      	mov	r0, r3
 80053e0:	f04f 0100 	mov.w	r1, #0
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	4a86      	ldr	r2, [pc, #536]	; (8005604 <UART_SetConfig+0x534>)
 80053ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	f04f 0300 	mov.w	r3, #0
 80053f4:	f7fb fc00 	bl	8000bf8 <__aeabi_uldivmod>
 80053f8:	4602      	mov	r2, r0
 80053fa:	460b      	mov	r3, r1
 80053fc:	4610      	mov	r0, r2
 80053fe:	4619      	mov	r1, r3
 8005400:	f04f 0200 	mov.w	r2, #0
 8005404:	f04f 0300 	mov.w	r3, #0
 8005408:	020b      	lsls	r3, r1, #8
 800540a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800540e:	0202      	lsls	r2, r0, #8
 8005410:	6879      	ldr	r1, [r7, #4]
 8005412:	6849      	ldr	r1, [r1, #4]
 8005414:	0849      	lsrs	r1, r1, #1
 8005416:	4608      	mov	r0, r1
 8005418:	f04f 0100 	mov.w	r1, #0
 800541c:	1814      	adds	r4, r2, r0
 800541e:	eb43 0501 	adc.w	r5, r3, r1
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	461a      	mov	r2, r3
 8005428:	f04f 0300 	mov.w	r3, #0
 800542c:	4620      	mov	r0, r4
 800542e:	4629      	mov	r1, r5
 8005430:	f7fb fbe2 	bl	8000bf8 <__aeabi_uldivmod>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4613      	mov	r3, r2
 800543a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005442:	d308      	bcc.n	8005456 <UART_SetConfig+0x386>
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800544a:	d204      	bcs.n	8005456 <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	60da      	str	r2, [r3, #12]
 8005454:	e0c2      	b.n	80055dc <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	76bb      	strb	r3, [r7, #26]
 800545a:	e0bf      	b.n	80055dc <UART_SetConfig+0x50c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	69db      	ldr	r3, [r3, #28]
 8005460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005464:	d165      	bne.n	8005532 <UART_SetConfig+0x462>
  {
    switch (clocksource)
 8005466:	7efb      	ldrb	r3, [r7, #27]
 8005468:	2b08      	cmp	r3, #8
 800546a:	d828      	bhi.n	80054be <UART_SetConfig+0x3ee>
 800546c:	a201      	add	r2, pc, #4	; (adr r2, 8005474 <UART_SetConfig+0x3a4>)
 800546e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005472:	bf00      	nop
 8005474:	08005499 	.word	0x08005499
 8005478:	080054a1 	.word	0x080054a1
 800547c:	080054a9 	.word	0x080054a9
 8005480:	080054bf 	.word	0x080054bf
 8005484:	080054af 	.word	0x080054af
 8005488:	080054bf 	.word	0x080054bf
 800548c:	080054bf 	.word	0x080054bf
 8005490:	080054bf 	.word	0x080054bf
 8005494:	080054b7 	.word	0x080054b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005498:	f7fd fdb8 	bl	800300c <HAL_RCC_GetPCLK1Freq>
 800549c:	6178      	str	r0, [r7, #20]
        break;
 800549e:	e013      	b.n	80054c8 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054a0:	f7fd fdca 	bl	8003038 <HAL_RCC_GetPCLK2Freq>
 80054a4:	6178      	str	r0, [r7, #20]
        break;
 80054a6:	e00f      	b.n	80054c8 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054a8:	4b57      	ldr	r3, [pc, #348]	; (8005608 <UART_SetConfig+0x538>)
 80054aa:	617b      	str	r3, [r7, #20]
        break;
 80054ac:	e00c      	b.n	80054c8 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ae:	f7fd fd3f 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 80054b2:	6178      	str	r0, [r7, #20]
        break;
 80054b4:	e008      	b.n	80054c8 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054ba:	617b      	str	r3, [r7, #20]
        break;
 80054bc:	e004      	b.n	80054c8 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 80054be:	2300      	movs	r3, #0
 80054c0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	76bb      	strb	r3, [r7, #26]
        break;
 80054c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 8086 	beq.w	80055dc <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d4:	4a4b      	ldr	r2, [pc, #300]	; (8005604 <UART_SetConfig+0x534>)
 80054d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054da:	461a      	mov	r2, r3
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	fbb3 f3f2 	udiv	r3, r3, r2
 80054e2:	005a      	lsls	r2, r3, #1
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	085b      	lsrs	r3, r3, #1
 80054ea:	441a      	add	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	2b0f      	cmp	r3, #15
 80054fc:	d916      	bls.n	800552c <UART_SetConfig+0x45c>
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005504:	d212      	bcs.n	800552c <UART_SetConfig+0x45c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	b29b      	uxth	r3, r3
 800550a:	f023 030f 	bic.w	r3, r3, #15
 800550e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	085b      	lsrs	r3, r3, #1
 8005514:	b29b      	uxth	r3, r3
 8005516:	f003 0307 	and.w	r3, r3, #7
 800551a:	b29a      	uxth	r2, r3
 800551c:	89fb      	ldrh	r3, [r7, #14]
 800551e:	4313      	orrs	r3, r2
 8005520:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	89fa      	ldrh	r2, [r7, #14]
 8005528:	60da      	str	r2, [r3, #12]
 800552a:	e057      	b.n	80055dc <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	76bb      	strb	r3, [r7, #26]
 8005530:	e054      	b.n	80055dc <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005532:	7efb      	ldrb	r3, [r7, #27]
 8005534:	2b08      	cmp	r3, #8
 8005536:	d828      	bhi.n	800558a <UART_SetConfig+0x4ba>
 8005538:	a201      	add	r2, pc, #4	; (adr r2, 8005540 <UART_SetConfig+0x470>)
 800553a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553e:	bf00      	nop
 8005540:	08005565 	.word	0x08005565
 8005544:	0800556d 	.word	0x0800556d
 8005548:	08005575 	.word	0x08005575
 800554c:	0800558b 	.word	0x0800558b
 8005550:	0800557b 	.word	0x0800557b
 8005554:	0800558b 	.word	0x0800558b
 8005558:	0800558b 	.word	0x0800558b
 800555c:	0800558b 	.word	0x0800558b
 8005560:	08005583 	.word	0x08005583
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005564:	f7fd fd52 	bl	800300c <HAL_RCC_GetPCLK1Freq>
 8005568:	6178      	str	r0, [r7, #20]
        break;
 800556a:	e013      	b.n	8005594 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800556c:	f7fd fd64 	bl	8003038 <HAL_RCC_GetPCLK2Freq>
 8005570:	6178      	str	r0, [r7, #20]
        break;
 8005572:	e00f      	b.n	8005594 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005574:	4b24      	ldr	r3, [pc, #144]	; (8005608 <UART_SetConfig+0x538>)
 8005576:	617b      	str	r3, [r7, #20]
        break;
 8005578:	e00c      	b.n	8005594 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800557a:	f7fd fcd9 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 800557e:	6178      	str	r0, [r7, #20]
        break;
 8005580:	e008      	b.n	8005594 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005586:	617b      	str	r3, [r7, #20]
        break;
 8005588:	e004      	b.n	8005594 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800558a:	2300      	movs	r3, #0
 800558c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	76bb      	strb	r3, [r7, #26]
        break;
 8005592:	bf00      	nop
    }

    if (pclk != 0U)
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d020      	beq.n	80055dc <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559e:	4a19      	ldr	r2, [pc, #100]	; (8005604 <UART_SetConfig+0x534>)
 80055a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055a4:	461a      	mov	r2, r3
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	085b      	lsrs	r3, r3, #1
 80055b2:	441a      	add	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055bc:	b29b      	uxth	r3, r3
 80055be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	2b0f      	cmp	r3, #15
 80055c4:	d908      	bls.n	80055d8 <UART_SetConfig+0x508>
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055cc:	d204      	bcs.n	80055d8 <UART_SetConfig+0x508>
      {
        huart->Instance->BRR = usartdiv;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	60da      	str	r2, [r3, #12]
 80055d6:	e001      	b.n	80055dc <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80055f8:	7ebb      	ldrb	r3, [r7, #26]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3720      	adds	r7, #32
 80055fe:	46bd      	mov	sp, r7
 8005600:	bdb0      	pop	{r4, r5, r7, pc}
 8005602:	bf00      	nop
 8005604:	08008f2c 	.word	0x08008f2c
 8005608:	00f42400 	.word	0x00f42400

0800560c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00a      	beq.n	8005636 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00a      	beq.n	8005658 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	430a      	orrs	r2, r1
 8005656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00a      	beq.n	800567a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567e:	f003 0308 	and.w	r3, r3, #8
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00a      	beq.n	800569c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a0:	f003 0310 	and.w	r3, r3, #16
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00a      	beq.n	80056be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c2:	f003 0320 	and.w	r3, r3, #32
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00a      	beq.n	80056e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	430a      	orrs	r2, r1
 80056de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d01a      	beq.n	8005722 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005706:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800570a:	d10a      	bne.n	8005722 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	430a      	orrs	r2, r1
 8005720:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00a      	beq.n	8005744 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	430a      	orrs	r2, r1
 8005742:	605a      	str	r2, [r3, #4]
  }
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af02      	add	r7, sp, #8
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005760:	f7fc fb46 	bl	8001df0 <HAL_GetTick>
 8005764:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0308 	and.w	r3, r3, #8
 8005770:	2b08      	cmp	r3, #8
 8005772:	d10e      	bne.n	8005792 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005774:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f82f 	bl	80057e6 <UART_WaitOnFlagUntilTimeout>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e025      	b.n	80057de <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b04      	cmp	r3, #4
 800579e:	d10e      	bne.n	80057be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057a4:	9300      	str	r3, [sp, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f819 	bl	80057e6 <UART_WaitOnFlagUntilTimeout>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e00f      	b.n	80057de <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2220      	movs	r2, #32
 80057c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2220      	movs	r2, #32
 80057ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b084      	sub	sp, #16
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	60f8      	str	r0, [r7, #12]
 80057ee:	60b9      	str	r1, [r7, #8]
 80057f0:	603b      	str	r3, [r7, #0]
 80057f2:	4613      	mov	r3, r2
 80057f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057f6:	e062      	b.n	80058be <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fe:	d05e      	beq.n	80058be <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005800:	f7fc faf6 	bl	8001df0 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	69ba      	ldr	r2, [r7, #24]
 800580c:	429a      	cmp	r2, r3
 800580e:	d302      	bcc.n	8005816 <UART_WaitOnFlagUntilTimeout+0x30>
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d11d      	bne.n	8005852 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005824:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689a      	ldr	r2, [r3, #8]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 0201 	bic.w	r2, r2, #1
 8005834:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2220      	movs	r2, #32
 800583a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2220      	movs	r2, #32
 8005842:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e045      	b.n	80058de <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	2b00      	cmp	r3, #0
 800585e:	d02e      	beq.n	80058be <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800586a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800586e:	d126      	bne.n	80058be <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005878:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005888:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	689a      	ldr	r2, [r3, #8]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f022 0201 	bic.w	r2, r2, #1
 8005898:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2220      	movs	r2, #32
 800589e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2220      	movs	r2, #32
 80058a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2220      	movs	r2, #32
 80058ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e00f      	b.n	80058de <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	69da      	ldr	r2, [r3, #28]
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	4013      	ands	r3, r2
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	bf0c      	ite	eq
 80058ce:	2301      	moveq	r3, #1
 80058d0:	2300      	movne	r3, #0
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	461a      	mov	r2, r3
 80058d6:	79fb      	ldrb	r3, [r7, #7]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d08d      	beq.n	80057f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
	...

080058e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	4613      	mov	r3, r2
 80058f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	88fa      	ldrh	r2, [r7, #6]
 8005900:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	88fa      	ldrh	r2, [r7, #6]
 8005908:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800591a:	d10e      	bne.n	800593a <UART_Start_Receive_IT+0x52>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d105      	bne.n	8005930 <UART_Start_Receive_IT+0x48>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f240 12ff 	movw	r2, #511	; 0x1ff
 800592a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800592e:	e02d      	b.n	800598c <UART_Start_Receive_IT+0xa4>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	22ff      	movs	r2, #255	; 0xff
 8005934:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005938:	e028      	b.n	800598c <UART_Start_Receive_IT+0xa4>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10d      	bne.n	800595e <UART_Start_Receive_IT+0x76>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d104      	bne.n	8005954 <UART_Start_Receive_IT+0x6c>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	22ff      	movs	r2, #255	; 0xff
 800594e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005952:	e01b      	b.n	800598c <UART_Start_Receive_IT+0xa4>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	227f      	movs	r2, #127	; 0x7f
 8005958:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800595c:	e016      	b.n	800598c <UART_Start_Receive_IT+0xa4>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005966:	d10d      	bne.n	8005984 <UART_Start_Receive_IT+0x9c>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d104      	bne.n	800597a <UART_Start_Receive_IT+0x92>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	227f      	movs	r2, #127	; 0x7f
 8005974:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005978:	e008      	b.n	800598c <UART_Start_Receive_IT+0xa4>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	223f      	movs	r2, #63	; 0x3f
 800597e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005982:	e003      	b.n	800598c <UART_Start_Receive_IT+0xa4>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2222      	movs	r2, #34	; 0x22
 8005998:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689a      	ldr	r2, [r3, #8]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f042 0201 	orr.w	r2, r2, #1
 80059aa:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059b4:	d12a      	bne.n	8005a0c <UART_Start_Receive_IT+0x124>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80059bc:	88fa      	ldrh	r2, [r7, #6]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d324      	bcc.n	8005a0c <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ca:	d107      	bne.n	80059dc <UART_Start_Receive_IT+0xf4>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d103      	bne.n	80059dc <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4a1f      	ldr	r2, [pc, #124]	; (8005a54 <UART_Start_Receive_IT+0x16c>)
 80059d8:	671a      	str	r2, [r3, #112]	; 0x70
 80059da:	e002      	b.n	80059e2 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4a1e      	ldr	r2, [pc, #120]	; (8005a58 <UART_Start_Receive_IT+0x170>)
 80059e0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059f8:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	689a      	ldr	r2, [r3, #8]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005a08:	609a      	str	r2, [r3, #8]
 8005a0a:	e01b      	b.n	8005a44 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a14:	d107      	bne.n	8005a26 <UART_Start_Receive_IT+0x13e>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d103      	bne.n	8005a26 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	4a0e      	ldr	r2, [pc, #56]	; (8005a5c <UART_Start_Receive_IT+0x174>)
 8005a22:	671a      	str	r2, [r3, #112]	; 0x70
 8005a24:	e002      	b.n	8005a2c <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	4a0d      	ldr	r2, [pc, #52]	; (8005a60 <UART_Start_Receive_IT+0x178>)
 8005a2a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005a42:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	08005edd 	.word	0x08005edd
 8005a58:	08005cd9 	.word	0x08005cd9
 8005a5c:	08005c01 	.word	0x08005c01
 8005a60:	08005b29 	.word	0x08005b29

08005a64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a7a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	6812      	ldr	r2, [r2, #0]
 8005a86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a8a:	f023 0301 	bic.w	r3, r3, #1
 8005a8e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d107      	bne.n	8005aa8 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f022 0210 	bic.w	r2, r2, #16
 8005aa6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f7ff fadc 	bl	80050a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005aec:	bf00      	nop
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b0a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7ff fab8 	bl	8005090 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b20:	bf00      	nop
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005b36:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3e:	2b22      	cmp	r3, #34	; 0x22
 8005b40:	d152      	bne.n	8005be8 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b48:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005b4a:	89bb      	ldrh	r3, [r7, #12]
 8005b4c:	b2d9      	uxtb	r1, r3
 8005b4e:	89fb      	ldrh	r3, [r7, #14]
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b56:	400a      	ands	r2, r1
 8005b58:	b2d2      	uxtb	r2, r2
 8005b5a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b60:	1c5a      	adds	r2, r3, #1
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d139      	bne.n	8005bf8 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b92:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689a      	ldr	r2, [r3, #8]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 0201 	bic.w	r2, r2, #1
 8005ba2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d10f      	bne.n	8005bda <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f022 0210 	bic.w	r2, r2, #16
 8005bc8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f7ff fa70 	bl	80050b8 <HAL_UARTEx_RxEventCallback>
 8005bd8:	e002      	b.n	8005be0 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7fb fad6 	bl	800118c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005be6:	e007      	b.n	8005bf8 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	699a      	ldr	r2, [r3, #24]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0208 	orr.w	r2, r2, #8
 8005bf6:	619a      	str	r2, [r3, #24]
}
 8005bf8:	bf00      	nop
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005c0e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c16:	2b22      	cmp	r3, #34	; 0x22
 8005c18:	d152      	bne.n	8005cc0 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c20:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c26:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005c28:	89ba      	ldrh	r2, [r7, #12]
 8005c2a:	89fb      	ldrh	r3, [r7, #14]
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c38:	1c9a      	adds	r2, r3, #2
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	3b01      	subs	r3, #1
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d139      	bne.n	8005cd0 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005c6a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689a      	ldr	r2, [r3, #8]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 0201 	bic.w	r2, r2, #1
 8005c7a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d10f      	bne.n	8005cb2 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 0210 	bic.w	r2, r2, #16
 8005ca0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ca8:	4619      	mov	r1, r3
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7ff fa04 	bl	80050b8 <HAL_UARTEx_RxEventCallback>
 8005cb0:	e002      	b.n	8005cb8 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7fb fa6a 	bl	800118c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005cbe:	e007      	b.n	8005cd0 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	699a      	ldr	r2, [r3, #24]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f042 0208 	orr.w	r2, r2, #8
 8005cce:	619a      	str	r2, [r3, #24]
}
 8005cd0:	bf00      	nop
 8005cd2:	3710      	adds	r7, #16
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b088      	sub	sp, #32
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005ce6:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d06:	2b22      	cmp	r3, #34	; 0x22
 8005d08:	f040 80da 	bne.w	8005ec0 <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005d12:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005d14:	e0aa      	b.n	8005e6c <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1c:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005d1e:	89bb      	ldrh	r3, [r7, #12]
 8005d20:	b2d9      	uxtb	r1, r3
 8005d22:	8b7b      	ldrh	r3, [r7, #26]
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d2a:	400a      	ands	r2, r1
 8005d2c:	b2d2      	uxtb	r2, r2
 8005d2e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	3b01      	subs	r3, #1
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	f003 0307 	and.w	r3, r3, #7
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d04d      	beq.n	8005dfa <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	f003 0301 	and.w	r3, r3, #1
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d010      	beq.n	8005d8a <UART_RxISR_8BIT_FIFOEN+0xb2>
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00b      	beq.n	8005d8a <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2201      	movs	r2, #1
 8005d78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d80:	f043 0201 	orr.w	r2, r3, #1
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	f003 0302 	and.w	r3, r3, #2
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d010      	beq.n	8005db6 <UART_RxISR_8BIT_FIFOEN+0xde>
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00b      	beq.n	8005db6 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2202      	movs	r2, #2
 8005da4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dac:	f043 0204 	orr.w	r2, r3, #4
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	f003 0304 	and.w	r3, r3, #4
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d010      	beq.n	8005de2 <UART_RxISR_8BIT_FIFOEN+0x10a>
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00b      	beq.n	8005de2 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2204      	movs	r2, #4
 8005dd0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dd8:	f043 0202 	orr.w	r2, r3, #2
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d006      	beq.n	8005dfa <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f7ff f959 	bl	80050a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d132      	bne.n	8005e6c <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e14:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	6812      	ldr	r2, [r2, #0]
 8005e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e24:	f023 0301 	bic.w	r3, r3, #1
 8005e28:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2220      	movs	r2, #32
 8005e2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d10f      	bne.n	8005e60 <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f022 0210 	bic.w	r2, r2, #16
 8005e4e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005e56:	4619      	mov	r1, r3
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f7ff f92d 	bl	80050b8 <HAL_UARTEx_RxEventCallback>
 8005e5e:	e002      	b.n	8005e66 <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7fb f993 	bl	800118c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005e6c:	89fb      	ldrh	r3, [r7, #14]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d005      	beq.n	8005e7e <UART_RxISR_8BIT_FIFOEN+0x1a6>
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	f003 0320 	and.w	r3, r3, #32
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f47f af4c 	bne.w	8005d16 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e84:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005e86:	897b      	ldrh	r3, [r7, #10]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d021      	beq.n	8005ed0 <UART_RxISR_8BIT_FIFOEN+0x1f8>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005e92:	897a      	ldrh	r2, [r7, #10]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d21b      	bcs.n	8005ed0 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689a      	ldr	r2, [r3, #8]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005ea6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a0b      	ldr	r2, [pc, #44]	; (8005ed8 <UART_RxISR_8BIT_FIFOEN+0x200>)
 8005eac:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f042 0220 	orr.w	r2, r2, #32
 8005ebc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ebe:	e007      	b.n	8005ed0 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	699a      	ldr	r2, [r3, #24]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f042 0208 	orr.w	r2, r2, #8
 8005ece:	619a      	str	r2, [r3, #24]
}
 8005ed0:	bf00      	nop
 8005ed2:	3720      	adds	r7, #32
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	08005b29 	.word	0x08005b29

08005edc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b08a      	sub	sp, #40	; 0x28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005eea:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	69db      	ldr	r3, [r3, #28]
 8005ef2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f0a:	2b22      	cmp	r3, #34	; 0x22
 8005f0c:	f040 80da 	bne.w	80060c4 <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005f16:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005f18:	e0aa      	b.n	8006070 <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f20:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f26:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 8005f28:	8aba      	ldrh	r2, [r7, #20]
 8005f2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f38:	1c9a      	adds	r2, r3, #2
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	3b01      	subs	r3, #1
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	69db      	ldr	r3, [r3, #28]
 8005f56:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5a:	f003 0307 	and.w	r3, r3, #7
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d04d      	beq.n	8005ffe <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d010      	beq.n	8005f8e <UART_RxISR_16BIT_FIFOEN+0xb2>
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00b      	beq.n	8005f8e <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f84:	f043 0201 	orr.w	r2, r3, #1
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f90:	f003 0302 	and.w	r3, r3, #2
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d010      	beq.n	8005fba <UART_RxISR_16BIT_FIFOEN+0xde>
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00b      	beq.n	8005fba <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fb0:	f043 0204 	orr.w	r2, r3, #4
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	f003 0304 	and.w	r3, r3, #4
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d010      	beq.n	8005fe6 <UART_RxISR_16BIT_FIFOEN+0x10a>
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	f003 0301 	and.w	r3, r3, #1
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00b      	beq.n	8005fe6 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2204      	movs	r2, #4
 8005fd4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fdc:	f043 0202 	orr.w	r2, r3, #2
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d006      	beq.n	8005ffe <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f7ff f857 	bl	80050a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006004:	b29b      	uxth	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d132      	bne.n	8006070 <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006018:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	6812      	ldr	r2, [r2, #0]
 8006024:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006028:	f023 0301 	bic.w	r3, r3, #1
 800602c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2220      	movs	r2, #32
 8006032:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006040:	2b01      	cmp	r3, #1
 8006042:	d10f      	bne.n	8006064 <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f022 0210 	bic.w	r2, r2, #16
 8006052:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800605a:	4619      	mov	r1, r3
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f7ff f82b 	bl	80050b8 <HAL_UARTEx_RxEventCallback>
 8006062:	e002      	b.n	800606a <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7fb f891 	bl	800118c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006070:	8afb      	ldrh	r3, [r7, #22]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d005      	beq.n	8006082 <UART_RxISR_16BIT_FIFOEN+0x1a6>
 8006076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006078:	f003 0320 	and.w	r3, r3, #32
 800607c:	2b00      	cmp	r3, #0
 800607e:	f47f af4c 	bne.w	8005f1a <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006088:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800608a:	89fb      	ldrh	r3, [r7, #14]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d021      	beq.n	80060d4 <UART_RxISR_16BIT_FIFOEN+0x1f8>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006096:	89fa      	ldrh	r2, [r7, #14]
 8006098:	429a      	cmp	r2, r3
 800609a:	d21b      	bcs.n	80060d4 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	689a      	ldr	r2, [r3, #8]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80060aa:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a0b      	ldr	r2, [pc, #44]	; (80060dc <UART_RxISR_16BIT_FIFOEN+0x200>)
 80060b0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f042 0220 	orr.w	r2, r2, #32
 80060c0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80060c2:	e007      	b.n	80060d4 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	699a      	ldr	r2, [r3, #24]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f042 0208 	orr.w	r2, r2, #8
 80060d2:	619a      	str	r2, [r3, #24]
}
 80060d4:	bf00      	nop
 80060d6:	3728      	adds	r7, #40	; 0x28
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	08005c01 	.word	0x08005c01

080060e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800612a:	2b01      	cmp	r3, #1
 800612c:	d101      	bne.n	8006132 <HAL_UARTEx_DisableFifoMode+0x16>
 800612e:	2302      	movs	r3, #2
 8006130:	e027      	b.n	8006182 <HAL_UARTEx_DisableFifoMode+0x66>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2224      	movs	r2, #36	; 0x24
 800613e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f022 0201 	bic.w	r2, r2, #1
 8006158:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006160:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2220      	movs	r2, #32
 8006174:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3714      	adds	r7, #20
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr

0800618e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b084      	sub	sp, #16
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
 8006196:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d101      	bne.n	80061a6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80061a2:	2302      	movs	r3, #2
 80061a4:	e02d      	b.n	8006202 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2224      	movs	r2, #36	; 0x24
 80061b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f022 0201 	bic.w	r2, r2, #1
 80061cc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	683a      	ldr	r2, [r7, #0]
 80061de:	430a      	orrs	r2, r1
 80061e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f850 	bl	8006288 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2220      	movs	r2, #32
 80061f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b084      	sub	sp, #16
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
 8006212:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800621a:	2b01      	cmp	r3, #1
 800621c:	d101      	bne.n	8006222 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800621e:	2302      	movs	r3, #2
 8006220:	e02d      	b.n	800627e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2224      	movs	r2, #36	; 0x24
 800622e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f022 0201 	bic.w	r2, r2, #1
 8006248:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	683a      	ldr	r2, [r7, #0]
 800625a:	430a      	orrs	r2, r1
 800625c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f812 	bl	8006288 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2220      	movs	r2, #32
 8006270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
	...

08006288 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006294:	2b00      	cmp	r3, #0
 8006296:	d108      	bne.n	80062aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80062a8:	e031      	b.n	800630e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80062aa:	2308      	movs	r3, #8
 80062ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80062ae:	2308      	movs	r3, #8
 80062b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	0e5b      	lsrs	r3, r3, #25
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	f003 0307 	and.w	r3, r3, #7
 80062c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	0f5b      	lsrs	r3, r3, #29
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	f003 0307 	and.w	r3, r3, #7
 80062d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062d2:	7bbb      	ldrb	r3, [r7, #14]
 80062d4:	7b3a      	ldrb	r2, [r7, #12]
 80062d6:	4911      	ldr	r1, [pc, #68]	; (800631c <UARTEx_SetNbDataToProcess+0x94>)
 80062d8:	5c8a      	ldrb	r2, [r1, r2]
 80062da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80062de:	7b3a      	ldrb	r2, [r7, #12]
 80062e0:	490f      	ldr	r1, [pc, #60]	; (8006320 <UARTEx_SetNbDataToProcess+0x98>)
 80062e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
 80062f2:	7b7a      	ldrb	r2, [r7, #13]
 80062f4:	4909      	ldr	r1, [pc, #36]	; (800631c <UARTEx_SetNbDataToProcess+0x94>)
 80062f6:	5c8a      	ldrb	r2, [r1, r2]
 80062f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80062fc:	7b7a      	ldrb	r2, [r7, #13]
 80062fe:	4908      	ldr	r1, [pc, #32]	; (8006320 <UARTEx_SetNbDataToProcess+0x98>)
 8006300:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006302:	fb93 f3f2 	sdiv	r3, r3, r2
 8006306:	b29a      	uxth	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800630e:	bf00      	nop
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	08008f44 	.word	0x08008f44
 8006320:	08008f4c 	.word	0x08008f4c

08006324 <__errno>:
 8006324:	4b01      	ldr	r3, [pc, #4]	; (800632c <__errno+0x8>)
 8006326:	6818      	ldr	r0, [r3, #0]
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	20000018 	.word	0x20000018

08006330 <__libc_init_array>:
 8006330:	b570      	push	{r4, r5, r6, lr}
 8006332:	4d0d      	ldr	r5, [pc, #52]	; (8006368 <__libc_init_array+0x38>)
 8006334:	4c0d      	ldr	r4, [pc, #52]	; (800636c <__libc_init_array+0x3c>)
 8006336:	1b64      	subs	r4, r4, r5
 8006338:	10a4      	asrs	r4, r4, #2
 800633a:	2600      	movs	r6, #0
 800633c:	42a6      	cmp	r6, r4
 800633e:	d109      	bne.n	8006354 <__libc_init_array+0x24>
 8006340:	4d0b      	ldr	r5, [pc, #44]	; (8006370 <__libc_init_array+0x40>)
 8006342:	4c0c      	ldr	r4, [pc, #48]	; (8006374 <__libc_init_array+0x44>)
 8006344:	f002 fd7e 	bl	8008e44 <_init>
 8006348:	1b64      	subs	r4, r4, r5
 800634a:	10a4      	asrs	r4, r4, #2
 800634c:	2600      	movs	r6, #0
 800634e:	42a6      	cmp	r6, r4
 8006350:	d105      	bne.n	800635e <__libc_init_array+0x2e>
 8006352:	bd70      	pop	{r4, r5, r6, pc}
 8006354:	f855 3b04 	ldr.w	r3, [r5], #4
 8006358:	4798      	blx	r3
 800635a:	3601      	adds	r6, #1
 800635c:	e7ee      	b.n	800633c <__libc_init_array+0xc>
 800635e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006362:	4798      	blx	r3
 8006364:	3601      	adds	r6, #1
 8006366:	e7f2      	b.n	800634e <__libc_init_array+0x1e>
 8006368:	0800933c 	.word	0x0800933c
 800636c:	0800933c 	.word	0x0800933c
 8006370:	0800933c 	.word	0x0800933c
 8006374:	08009340 	.word	0x08009340

08006378 <memset>:
 8006378:	4402      	add	r2, r0
 800637a:	4603      	mov	r3, r0
 800637c:	4293      	cmp	r3, r2
 800637e:	d100      	bne.n	8006382 <memset+0xa>
 8006380:	4770      	bx	lr
 8006382:	f803 1b01 	strb.w	r1, [r3], #1
 8006386:	e7f9      	b.n	800637c <memset+0x4>

08006388 <__cvt>:
 8006388:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800638c:	ec55 4b10 	vmov	r4, r5, d0
 8006390:	2d00      	cmp	r5, #0
 8006392:	460e      	mov	r6, r1
 8006394:	4619      	mov	r1, r3
 8006396:	462b      	mov	r3, r5
 8006398:	bfbb      	ittet	lt
 800639a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800639e:	461d      	movlt	r5, r3
 80063a0:	2300      	movge	r3, #0
 80063a2:	232d      	movlt	r3, #45	; 0x2d
 80063a4:	700b      	strb	r3, [r1, #0]
 80063a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80063ac:	4691      	mov	r9, r2
 80063ae:	f023 0820 	bic.w	r8, r3, #32
 80063b2:	bfbc      	itt	lt
 80063b4:	4622      	movlt	r2, r4
 80063b6:	4614      	movlt	r4, r2
 80063b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80063bc:	d005      	beq.n	80063ca <__cvt+0x42>
 80063be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80063c2:	d100      	bne.n	80063c6 <__cvt+0x3e>
 80063c4:	3601      	adds	r6, #1
 80063c6:	2102      	movs	r1, #2
 80063c8:	e000      	b.n	80063cc <__cvt+0x44>
 80063ca:	2103      	movs	r1, #3
 80063cc:	ab03      	add	r3, sp, #12
 80063ce:	9301      	str	r3, [sp, #4]
 80063d0:	ab02      	add	r3, sp, #8
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	ec45 4b10 	vmov	d0, r4, r5
 80063d8:	4653      	mov	r3, sl
 80063da:	4632      	mov	r2, r6
 80063dc:	f000 fe18 	bl	8007010 <_dtoa_r>
 80063e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80063e4:	4607      	mov	r7, r0
 80063e6:	d102      	bne.n	80063ee <__cvt+0x66>
 80063e8:	f019 0f01 	tst.w	r9, #1
 80063ec:	d022      	beq.n	8006434 <__cvt+0xac>
 80063ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80063f2:	eb07 0906 	add.w	r9, r7, r6
 80063f6:	d110      	bne.n	800641a <__cvt+0x92>
 80063f8:	783b      	ldrb	r3, [r7, #0]
 80063fa:	2b30      	cmp	r3, #48	; 0x30
 80063fc:	d10a      	bne.n	8006414 <__cvt+0x8c>
 80063fe:	2200      	movs	r2, #0
 8006400:	2300      	movs	r3, #0
 8006402:	4620      	mov	r0, r4
 8006404:	4629      	mov	r1, r5
 8006406:	f7fa fb87 	bl	8000b18 <__aeabi_dcmpeq>
 800640a:	b918      	cbnz	r0, 8006414 <__cvt+0x8c>
 800640c:	f1c6 0601 	rsb	r6, r6, #1
 8006410:	f8ca 6000 	str.w	r6, [sl]
 8006414:	f8da 3000 	ldr.w	r3, [sl]
 8006418:	4499      	add	r9, r3
 800641a:	2200      	movs	r2, #0
 800641c:	2300      	movs	r3, #0
 800641e:	4620      	mov	r0, r4
 8006420:	4629      	mov	r1, r5
 8006422:	f7fa fb79 	bl	8000b18 <__aeabi_dcmpeq>
 8006426:	b108      	cbz	r0, 800642c <__cvt+0xa4>
 8006428:	f8cd 900c 	str.w	r9, [sp, #12]
 800642c:	2230      	movs	r2, #48	; 0x30
 800642e:	9b03      	ldr	r3, [sp, #12]
 8006430:	454b      	cmp	r3, r9
 8006432:	d307      	bcc.n	8006444 <__cvt+0xbc>
 8006434:	9b03      	ldr	r3, [sp, #12]
 8006436:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006438:	1bdb      	subs	r3, r3, r7
 800643a:	4638      	mov	r0, r7
 800643c:	6013      	str	r3, [r2, #0]
 800643e:	b004      	add	sp, #16
 8006440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006444:	1c59      	adds	r1, r3, #1
 8006446:	9103      	str	r1, [sp, #12]
 8006448:	701a      	strb	r2, [r3, #0]
 800644a:	e7f0      	b.n	800642e <__cvt+0xa6>

0800644c <__exponent>:
 800644c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800644e:	4603      	mov	r3, r0
 8006450:	2900      	cmp	r1, #0
 8006452:	bfb8      	it	lt
 8006454:	4249      	neglt	r1, r1
 8006456:	f803 2b02 	strb.w	r2, [r3], #2
 800645a:	bfb4      	ite	lt
 800645c:	222d      	movlt	r2, #45	; 0x2d
 800645e:	222b      	movge	r2, #43	; 0x2b
 8006460:	2909      	cmp	r1, #9
 8006462:	7042      	strb	r2, [r0, #1]
 8006464:	dd2a      	ble.n	80064bc <__exponent+0x70>
 8006466:	f10d 0407 	add.w	r4, sp, #7
 800646a:	46a4      	mov	ip, r4
 800646c:	270a      	movs	r7, #10
 800646e:	46a6      	mov	lr, r4
 8006470:	460a      	mov	r2, r1
 8006472:	fb91 f6f7 	sdiv	r6, r1, r7
 8006476:	fb07 1516 	mls	r5, r7, r6, r1
 800647a:	3530      	adds	r5, #48	; 0x30
 800647c:	2a63      	cmp	r2, #99	; 0x63
 800647e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006482:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006486:	4631      	mov	r1, r6
 8006488:	dcf1      	bgt.n	800646e <__exponent+0x22>
 800648a:	3130      	adds	r1, #48	; 0x30
 800648c:	f1ae 0502 	sub.w	r5, lr, #2
 8006490:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006494:	1c44      	adds	r4, r0, #1
 8006496:	4629      	mov	r1, r5
 8006498:	4561      	cmp	r1, ip
 800649a:	d30a      	bcc.n	80064b2 <__exponent+0x66>
 800649c:	f10d 0209 	add.w	r2, sp, #9
 80064a0:	eba2 020e 	sub.w	r2, r2, lr
 80064a4:	4565      	cmp	r5, ip
 80064a6:	bf88      	it	hi
 80064a8:	2200      	movhi	r2, #0
 80064aa:	4413      	add	r3, r2
 80064ac:	1a18      	subs	r0, r3, r0
 80064ae:	b003      	add	sp, #12
 80064b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064b6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80064ba:	e7ed      	b.n	8006498 <__exponent+0x4c>
 80064bc:	2330      	movs	r3, #48	; 0x30
 80064be:	3130      	adds	r1, #48	; 0x30
 80064c0:	7083      	strb	r3, [r0, #2]
 80064c2:	70c1      	strb	r1, [r0, #3]
 80064c4:	1d03      	adds	r3, r0, #4
 80064c6:	e7f1      	b.n	80064ac <__exponent+0x60>

080064c8 <_printf_float>:
 80064c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064cc:	ed2d 8b02 	vpush	{d8}
 80064d0:	b08d      	sub	sp, #52	; 0x34
 80064d2:	460c      	mov	r4, r1
 80064d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80064d8:	4616      	mov	r6, r2
 80064da:	461f      	mov	r7, r3
 80064dc:	4605      	mov	r5, r0
 80064de:	f001 fd3b 	bl	8007f58 <_localeconv_r>
 80064e2:	f8d0 a000 	ldr.w	sl, [r0]
 80064e6:	4650      	mov	r0, sl
 80064e8:	f7f9 fe9a 	bl	8000220 <strlen>
 80064ec:	2300      	movs	r3, #0
 80064ee:	930a      	str	r3, [sp, #40]	; 0x28
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	9305      	str	r3, [sp, #20]
 80064f4:	f8d8 3000 	ldr.w	r3, [r8]
 80064f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80064fc:	3307      	adds	r3, #7
 80064fe:	f023 0307 	bic.w	r3, r3, #7
 8006502:	f103 0208 	add.w	r2, r3, #8
 8006506:	f8c8 2000 	str.w	r2, [r8]
 800650a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006512:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006516:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800651a:	9307      	str	r3, [sp, #28]
 800651c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006520:	ee08 0a10 	vmov	s16, r0
 8006524:	4b9f      	ldr	r3, [pc, #636]	; (80067a4 <_printf_float+0x2dc>)
 8006526:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800652a:	f04f 32ff 	mov.w	r2, #4294967295
 800652e:	f7fa fb25 	bl	8000b7c <__aeabi_dcmpun>
 8006532:	bb88      	cbnz	r0, 8006598 <_printf_float+0xd0>
 8006534:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006538:	4b9a      	ldr	r3, [pc, #616]	; (80067a4 <_printf_float+0x2dc>)
 800653a:	f04f 32ff 	mov.w	r2, #4294967295
 800653e:	f7fa faff 	bl	8000b40 <__aeabi_dcmple>
 8006542:	bb48      	cbnz	r0, 8006598 <_printf_float+0xd0>
 8006544:	2200      	movs	r2, #0
 8006546:	2300      	movs	r3, #0
 8006548:	4640      	mov	r0, r8
 800654a:	4649      	mov	r1, r9
 800654c:	f7fa faee 	bl	8000b2c <__aeabi_dcmplt>
 8006550:	b110      	cbz	r0, 8006558 <_printf_float+0x90>
 8006552:	232d      	movs	r3, #45	; 0x2d
 8006554:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006558:	4b93      	ldr	r3, [pc, #588]	; (80067a8 <_printf_float+0x2e0>)
 800655a:	4894      	ldr	r0, [pc, #592]	; (80067ac <_printf_float+0x2e4>)
 800655c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006560:	bf94      	ite	ls
 8006562:	4698      	movls	r8, r3
 8006564:	4680      	movhi	r8, r0
 8006566:	2303      	movs	r3, #3
 8006568:	6123      	str	r3, [r4, #16]
 800656a:	9b05      	ldr	r3, [sp, #20]
 800656c:	f023 0204 	bic.w	r2, r3, #4
 8006570:	6022      	str	r2, [r4, #0]
 8006572:	f04f 0900 	mov.w	r9, #0
 8006576:	9700      	str	r7, [sp, #0]
 8006578:	4633      	mov	r3, r6
 800657a:	aa0b      	add	r2, sp, #44	; 0x2c
 800657c:	4621      	mov	r1, r4
 800657e:	4628      	mov	r0, r5
 8006580:	f000 f9d8 	bl	8006934 <_printf_common>
 8006584:	3001      	adds	r0, #1
 8006586:	f040 8090 	bne.w	80066aa <_printf_float+0x1e2>
 800658a:	f04f 30ff 	mov.w	r0, #4294967295
 800658e:	b00d      	add	sp, #52	; 0x34
 8006590:	ecbd 8b02 	vpop	{d8}
 8006594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006598:	4642      	mov	r2, r8
 800659a:	464b      	mov	r3, r9
 800659c:	4640      	mov	r0, r8
 800659e:	4649      	mov	r1, r9
 80065a0:	f7fa faec 	bl	8000b7c <__aeabi_dcmpun>
 80065a4:	b140      	cbz	r0, 80065b8 <_printf_float+0xf0>
 80065a6:	464b      	mov	r3, r9
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	bfbc      	itt	lt
 80065ac:	232d      	movlt	r3, #45	; 0x2d
 80065ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80065b2:	487f      	ldr	r0, [pc, #508]	; (80067b0 <_printf_float+0x2e8>)
 80065b4:	4b7f      	ldr	r3, [pc, #508]	; (80067b4 <_printf_float+0x2ec>)
 80065b6:	e7d1      	b.n	800655c <_printf_float+0x94>
 80065b8:	6863      	ldr	r3, [r4, #4]
 80065ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80065be:	9206      	str	r2, [sp, #24]
 80065c0:	1c5a      	adds	r2, r3, #1
 80065c2:	d13f      	bne.n	8006644 <_printf_float+0x17c>
 80065c4:	2306      	movs	r3, #6
 80065c6:	6063      	str	r3, [r4, #4]
 80065c8:	9b05      	ldr	r3, [sp, #20]
 80065ca:	6861      	ldr	r1, [r4, #4]
 80065cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80065d0:	2300      	movs	r3, #0
 80065d2:	9303      	str	r3, [sp, #12]
 80065d4:	ab0a      	add	r3, sp, #40	; 0x28
 80065d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80065da:	ab09      	add	r3, sp, #36	; 0x24
 80065dc:	ec49 8b10 	vmov	d0, r8, r9
 80065e0:	9300      	str	r3, [sp, #0]
 80065e2:	6022      	str	r2, [r4, #0]
 80065e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80065e8:	4628      	mov	r0, r5
 80065ea:	f7ff fecd 	bl	8006388 <__cvt>
 80065ee:	9b06      	ldr	r3, [sp, #24]
 80065f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065f2:	2b47      	cmp	r3, #71	; 0x47
 80065f4:	4680      	mov	r8, r0
 80065f6:	d108      	bne.n	800660a <_printf_float+0x142>
 80065f8:	1cc8      	adds	r0, r1, #3
 80065fa:	db02      	blt.n	8006602 <_printf_float+0x13a>
 80065fc:	6863      	ldr	r3, [r4, #4]
 80065fe:	4299      	cmp	r1, r3
 8006600:	dd41      	ble.n	8006686 <_printf_float+0x1be>
 8006602:	f1ab 0b02 	sub.w	fp, fp, #2
 8006606:	fa5f fb8b 	uxtb.w	fp, fp
 800660a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800660e:	d820      	bhi.n	8006652 <_printf_float+0x18a>
 8006610:	3901      	subs	r1, #1
 8006612:	465a      	mov	r2, fp
 8006614:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006618:	9109      	str	r1, [sp, #36]	; 0x24
 800661a:	f7ff ff17 	bl	800644c <__exponent>
 800661e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006620:	1813      	adds	r3, r2, r0
 8006622:	2a01      	cmp	r2, #1
 8006624:	4681      	mov	r9, r0
 8006626:	6123      	str	r3, [r4, #16]
 8006628:	dc02      	bgt.n	8006630 <_printf_float+0x168>
 800662a:	6822      	ldr	r2, [r4, #0]
 800662c:	07d2      	lsls	r2, r2, #31
 800662e:	d501      	bpl.n	8006634 <_printf_float+0x16c>
 8006630:	3301      	adds	r3, #1
 8006632:	6123      	str	r3, [r4, #16]
 8006634:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006638:	2b00      	cmp	r3, #0
 800663a:	d09c      	beq.n	8006576 <_printf_float+0xae>
 800663c:	232d      	movs	r3, #45	; 0x2d
 800663e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006642:	e798      	b.n	8006576 <_printf_float+0xae>
 8006644:	9a06      	ldr	r2, [sp, #24]
 8006646:	2a47      	cmp	r2, #71	; 0x47
 8006648:	d1be      	bne.n	80065c8 <_printf_float+0x100>
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1bc      	bne.n	80065c8 <_printf_float+0x100>
 800664e:	2301      	movs	r3, #1
 8006650:	e7b9      	b.n	80065c6 <_printf_float+0xfe>
 8006652:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006656:	d118      	bne.n	800668a <_printf_float+0x1c2>
 8006658:	2900      	cmp	r1, #0
 800665a:	6863      	ldr	r3, [r4, #4]
 800665c:	dd0b      	ble.n	8006676 <_printf_float+0x1ae>
 800665e:	6121      	str	r1, [r4, #16]
 8006660:	b913      	cbnz	r3, 8006668 <_printf_float+0x1a0>
 8006662:	6822      	ldr	r2, [r4, #0]
 8006664:	07d0      	lsls	r0, r2, #31
 8006666:	d502      	bpl.n	800666e <_printf_float+0x1a6>
 8006668:	3301      	adds	r3, #1
 800666a:	440b      	add	r3, r1
 800666c:	6123      	str	r3, [r4, #16]
 800666e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006670:	f04f 0900 	mov.w	r9, #0
 8006674:	e7de      	b.n	8006634 <_printf_float+0x16c>
 8006676:	b913      	cbnz	r3, 800667e <_printf_float+0x1b6>
 8006678:	6822      	ldr	r2, [r4, #0]
 800667a:	07d2      	lsls	r2, r2, #31
 800667c:	d501      	bpl.n	8006682 <_printf_float+0x1ba>
 800667e:	3302      	adds	r3, #2
 8006680:	e7f4      	b.n	800666c <_printf_float+0x1a4>
 8006682:	2301      	movs	r3, #1
 8006684:	e7f2      	b.n	800666c <_printf_float+0x1a4>
 8006686:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800668a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800668c:	4299      	cmp	r1, r3
 800668e:	db05      	blt.n	800669c <_printf_float+0x1d4>
 8006690:	6823      	ldr	r3, [r4, #0]
 8006692:	6121      	str	r1, [r4, #16]
 8006694:	07d8      	lsls	r0, r3, #31
 8006696:	d5ea      	bpl.n	800666e <_printf_float+0x1a6>
 8006698:	1c4b      	adds	r3, r1, #1
 800669a:	e7e7      	b.n	800666c <_printf_float+0x1a4>
 800669c:	2900      	cmp	r1, #0
 800669e:	bfd4      	ite	le
 80066a0:	f1c1 0202 	rsble	r2, r1, #2
 80066a4:	2201      	movgt	r2, #1
 80066a6:	4413      	add	r3, r2
 80066a8:	e7e0      	b.n	800666c <_printf_float+0x1a4>
 80066aa:	6823      	ldr	r3, [r4, #0]
 80066ac:	055a      	lsls	r2, r3, #21
 80066ae:	d407      	bmi.n	80066c0 <_printf_float+0x1f8>
 80066b0:	6923      	ldr	r3, [r4, #16]
 80066b2:	4642      	mov	r2, r8
 80066b4:	4631      	mov	r1, r6
 80066b6:	4628      	mov	r0, r5
 80066b8:	47b8      	blx	r7
 80066ba:	3001      	adds	r0, #1
 80066bc:	d12c      	bne.n	8006718 <_printf_float+0x250>
 80066be:	e764      	b.n	800658a <_printf_float+0xc2>
 80066c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80066c4:	f240 80e0 	bls.w	8006888 <_printf_float+0x3c0>
 80066c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066cc:	2200      	movs	r2, #0
 80066ce:	2300      	movs	r3, #0
 80066d0:	f7fa fa22 	bl	8000b18 <__aeabi_dcmpeq>
 80066d4:	2800      	cmp	r0, #0
 80066d6:	d034      	beq.n	8006742 <_printf_float+0x27a>
 80066d8:	4a37      	ldr	r2, [pc, #220]	; (80067b8 <_printf_float+0x2f0>)
 80066da:	2301      	movs	r3, #1
 80066dc:	4631      	mov	r1, r6
 80066de:	4628      	mov	r0, r5
 80066e0:	47b8      	blx	r7
 80066e2:	3001      	adds	r0, #1
 80066e4:	f43f af51 	beq.w	800658a <_printf_float+0xc2>
 80066e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066ec:	429a      	cmp	r2, r3
 80066ee:	db02      	blt.n	80066f6 <_printf_float+0x22e>
 80066f0:	6823      	ldr	r3, [r4, #0]
 80066f2:	07d8      	lsls	r0, r3, #31
 80066f4:	d510      	bpl.n	8006718 <_printf_float+0x250>
 80066f6:	ee18 3a10 	vmov	r3, s16
 80066fa:	4652      	mov	r2, sl
 80066fc:	4631      	mov	r1, r6
 80066fe:	4628      	mov	r0, r5
 8006700:	47b8      	blx	r7
 8006702:	3001      	adds	r0, #1
 8006704:	f43f af41 	beq.w	800658a <_printf_float+0xc2>
 8006708:	f04f 0800 	mov.w	r8, #0
 800670c:	f104 091a 	add.w	r9, r4, #26
 8006710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006712:	3b01      	subs	r3, #1
 8006714:	4543      	cmp	r3, r8
 8006716:	dc09      	bgt.n	800672c <_printf_float+0x264>
 8006718:	6823      	ldr	r3, [r4, #0]
 800671a:	079b      	lsls	r3, r3, #30
 800671c:	f100 8105 	bmi.w	800692a <_printf_float+0x462>
 8006720:	68e0      	ldr	r0, [r4, #12]
 8006722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006724:	4298      	cmp	r0, r3
 8006726:	bfb8      	it	lt
 8006728:	4618      	movlt	r0, r3
 800672a:	e730      	b.n	800658e <_printf_float+0xc6>
 800672c:	2301      	movs	r3, #1
 800672e:	464a      	mov	r2, r9
 8006730:	4631      	mov	r1, r6
 8006732:	4628      	mov	r0, r5
 8006734:	47b8      	blx	r7
 8006736:	3001      	adds	r0, #1
 8006738:	f43f af27 	beq.w	800658a <_printf_float+0xc2>
 800673c:	f108 0801 	add.w	r8, r8, #1
 8006740:	e7e6      	b.n	8006710 <_printf_float+0x248>
 8006742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006744:	2b00      	cmp	r3, #0
 8006746:	dc39      	bgt.n	80067bc <_printf_float+0x2f4>
 8006748:	4a1b      	ldr	r2, [pc, #108]	; (80067b8 <_printf_float+0x2f0>)
 800674a:	2301      	movs	r3, #1
 800674c:	4631      	mov	r1, r6
 800674e:	4628      	mov	r0, r5
 8006750:	47b8      	blx	r7
 8006752:	3001      	adds	r0, #1
 8006754:	f43f af19 	beq.w	800658a <_printf_float+0xc2>
 8006758:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800675c:	4313      	orrs	r3, r2
 800675e:	d102      	bne.n	8006766 <_printf_float+0x29e>
 8006760:	6823      	ldr	r3, [r4, #0]
 8006762:	07d9      	lsls	r1, r3, #31
 8006764:	d5d8      	bpl.n	8006718 <_printf_float+0x250>
 8006766:	ee18 3a10 	vmov	r3, s16
 800676a:	4652      	mov	r2, sl
 800676c:	4631      	mov	r1, r6
 800676e:	4628      	mov	r0, r5
 8006770:	47b8      	blx	r7
 8006772:	3001      	adds	r0, #1
 8006774:	f43f af09 	beq.w	800658a <_printf_float+0xc2>
 8006778:	f04f 0900 	mov.w	r9, #0
 800677c:	f104 0a1a 	add.w	sl, r4, #26
 8006780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006782:	425b      	negs	r3, r3
 8006784:	454b      	cmp	r3, r9
 8006786:	dc01      	bgt.n	800678c <_printf_float+0x2c4>
 8006788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800678a:	e792      	b.n	80066b2 <_printf_float+0x1ea>
 800678c:	2301      	movs	r3, #1
 800678e:	4652      	mov	r2, sl
 8006790:	4631      	mov	r1, r6
 8006792:	4628      	mov	r0, r5
 8006794:	47b8      	blx	r7
 8006796:	3001      	adds	r0, #1
 8006798:	f43f aef7 	beq.w	800658a <_printf_float+0xc2>
 800679c:	f109 0901 	add.w	r9, r9, #1
 80067a0:	e7ee      	b.n	8006780 <_printf_float+0x2b8>
 80067a2:	bf00      	nop
 80067a4:	7fefffff 	.word	0x7fefffff
 80067a8:	08008f58 	.word	0x08008f58
 80067ac:	08008f5c 	.word	0x08008f5c
 80067b0:	08008f64 	.word	0x08008f64
 80067b4:	08008f60 	.word	0x08008f60
 80067b8:	08008f68 	.word	0x08008f68
 80067bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067c0:	429a      	cmp	r2, r3
 80067c2:	bfa8      	it	ge
 80067c4:	461a      	movge	r2, r3
 80067c6:	2a00      	cmp	r2, #0
 80067c8:	4691      	mov	r9, r2
 80067ca:	dc37      	bgt.n	800683c <_printf_float+0x374>
 80067cc:	f04f 0b00 	mov.w	fp, #0
 80067d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067d4:	f104 021a 	add.w	r2, r4, #26
 80067d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067da:	9305      	str	r3, [sp, #20]
 80067dc:	eba3 0309 	sub.w	r3, r3, r9
 80067e0:	455b      	cmp	r3, fp
 80067e2:	dc33      	bgt.n	800684c <_printf_float+0x384>
 80067e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067e8:	429a      	cmp	r2, r3
 80067ea:	db3b      	blt.n	8006864 <_printf_float+0x39c>
 80067ec:	6823      	ldr	r3, [r4, #0]
 80067ee:	07da      	lsls	r2, r3, #31
 80067f0:	d438      	bmi.n	8006864 <_printf_float+0x39c>
 80067f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067f4:	9b05      	ldr	r3, [sp, #20]
 80067f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	eba2 0901 	sub.w	r9, r2, r1
 80067fe:	4599      	cmp	r9, r3
 8006800:	bfa8      	it	ge
 8006802:	4699      	movge	r9, r3
 8006804:	f1b9 0f00 	cmp.w	r9, #0
 8006808:	dc35      	bgt.n	8006876 <_printf_float+0x3ae>
 800680a:	f04f 0800 	mov.w	r8, #0
 800680e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006812:	f104 0a1a 	add.w	sl, r4, #26
 8006816:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800681a:	1a9b      	subs	r3, r3, r2
 800681c:	eba3 0309 	sub.w	r3, r3, r9
 8006820:	4543      	cmp	r3, r8
 8006822:	f77f af79 	ble.w	8006718 <_printf_float+0x250>
 8006826:	2301      	movs	r3, #1
 8006828:	4652      	mov	r2, sl
 800682a:	4631      	mov	r1, r6
 800682c:	4628      	mov	r0, r5
 800682e:	47b8      	blx	r7
 8006830:	3001      	adds	r0, #1
 8006832:	f43f aeaa 	beq.w	800658a <_printf_float+0xc2>
 8006836:	f108 0801 	add.w	r8, r8, #1
 800683a:	e7ec      	b.n	8006816 <_printf_float+0x34e>
 800683c:	4613      	mov	r3, r2
 800683e:	4631      	mov	r1, r6
 8006840:	4642      	mov	r2, r8
 8006842:	4628      	mov	r0, r5
 8006844:	47b8      	blx	r7
 8006846:	3001      	adds	r0, #1
 8006848:	d1c0      	bne.n	80067cc <_printf_float+0x304>
 800684a:	e69e      	b.n	800658a <_printf_float+0xc2>
 800684c:	2301      	movs	r3, #1
 800684e:	4631      	mov	r1, r6
 8006850:	4628      	mov	r0, r5
 8006852:	9205      	str	r2, [sp, #20]
 8006854:	47b8      	blx	r7
 8006856:	3001      	adds	r0, #1
 8006858:	f43f ae97 	beq.w	800658a <_printf_float+0xc2>
 800685c:	9a05      	ldr	r2, [sp, #20]
 800685e:	f10b 0b01 	add.w	fp, fp, #1
 8006862:	e7b9      	b.n	80067d8 <_printf_float+0x310>
 8006864:	ee18 3a10 	vmov	r3, s16
 8006868:	4652      	mov	r2, sl
 800686a:	4631      	mov	r1, r6
 800686c:	4628      	mov	r0, r5
 800686e:	47b8      	blx	r7
 8006870:	3001      	adds	r0, #1
 8006872:	d1be      	bne.n	80067f2 <_printf_float+0x32a>
 8006874:	e689      	b.n	800658a <_printf_float+0xc2>
 8006876:	9a05      	ldr	r2, [sp, #20]
 8006878:	464b      	mov	r3, r9
 800687a:	4442      	add	r2, r8
 800687c:	4631      	mov	r1, r6
 800687e:	4628      	mov	r0, r5
 8006880:	47b8      	blx	r7
 8006882:	3001      	adds	r0, #1
 8006884:	d1c1      	bne.n	800680a <_printf_float+0x342>
 8006886:	e680      	b.n	800658a <_printf_float+0xc2>
 8006888:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800688a:	2a01      	cmp	r2, #1
 800688c:	dc01      	bgt.n	8006892 <_printf_float+0x3ca>
 800688e:	07db      	lsls	r3, r3, #31
 8006890:	d538      	bpl.n	8006904 <_printf_float+0x43c>
 8006892:	2301      	movs	r3, #1
 8006894:	4642      	mov	r2, r8
 8006896:	4631      	mov	r1, r6
 8006898:	4628      	mov	r0, r5
 800689a:	47b8      	blx	r7
 800689c:	3001      	adds	r0, #1
 800689e:	f43f ae74 	beq.w	800658a <_printf_float+0xc2>
 80068a2:	ee18 3a10 	vmov	r3, s16
 80068a6:	4652      	mov	r2, sl
 80068a8:	4631      	mov	r1, r6
 80068aa:	4628      	mov	r0, r5
 80068ac:	47b8      	blx	r7
 80068ae:	3001      	adds	r0, #1
 80068b0:	f43f ae6b 	beq.w	800658a <_printf_float+0xc2>
 80068b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068b8:	2200      	movs	r2, #0
 80068ba:	2300      	movs	r3, #0
 80068bc:	f7fa f92c 	bl	8000b18 <__aeabi_dcmpeq>
 80068c0:	b9d8      	cbnz	r0, 80068fa <_printf_float+0x432>
 80068c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068c4:	f108 0201 	add.w	r2, r8, #1
 80068c8:	3b01      	subs	r3, #1
 80068ca:	4631      	mov	r1, r6
 80068cc:	4628      	mov	r0, r5
 80068ce:	47b8      	blx	r7
 80068d0:	3001      	adds	r0, #1
 80068d2:	d10e      	bne.n	80068f2 <_printf_float+0x42a>
 80068d4:	e659      	b.n	800658a <_printf_float+0xc2>
 80068d6:	2301      	movs	r3, #1
 80068d8:	4652      	mov	r2, sl
 80068da:	4631      	mov	r1, r6
 80068dc:	4628      	mov	r0, r5
 80068de:	47b8      	blx	r7
 80068e0:	3001      	adds	r0, #1
 80068e2:	f43f ae52 	beq.w	800658a <_printf_float+0xc2>
 80068e6:	f108 0801 	add.w	r8, r8, #1
 80068ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068ec:	3b01      	subs	r3, #1
 80068ee:	4543      	cmp	r3, r8
 80068f0:	dcf1      	bgt.n	80068d6 <_printf_float+0x40e>
 80068f2:	464b      	mov	r3, r9
 80068f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80068f8:	e6dc      	b.n	80066b4 <_printf_float+0x1ec>
 80068fa:	f04f 0800 	mov.w	r8, #0
 80068fe:	f104 0a1a 	add.w	sl, r4, #26
 8006902:	e7f2      	b.n	80068ea <_printf_float+0x422>
 8006904:	2301      	movs	r3, #1
 8006906:	4642      	mov	r2, r8
 8006908:	e7df      	b.n	80068ca <_printf_float+0x402>
 800690a:	2301      	movs	r3, #1
 800690c:	464a      	mov	r2, r9
 800690e:	4631      	mov	r1, r6
 8006910:	4628      	mov	r0, r5
 8006912:	47b8      	blx	r7
 8006914:	3001      	adds	r0, #1
 8006916:	f43f ae38 	beq.w	800658a <_printf_float+0xc2>
 800691a:	f108 0801 	add.w	r8, r8, #1
 800691e:	68e3      	ldr	r3, [r4, #12]
 8006920:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006922:	1a5b      	subs	r3, r3, r1
 8006924:	4543      	cmp	r3, r8
 8006926:	dcf0      	bgt.n	800690a <_printf_float+0x442>
 8006928:	e6fa      	b.n	8006720 <_printf_float+0x258>
 800692a:	f04f 0800 	mov.w	r8, #0
 800692e:	f104 0919 	add.w	r9, r4, #25
 8006932:	e7f4      	b.n	800691e <_printf_float+0x456>

08006934 <_printf_common>:
 8006934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006938:	4616      	mov	r6, r2
 800693a:	4699      	mov	r9, r3
 800693c:	688a      	ldr	r2, [r1, #8]
 800693e:	690b      	ldr	r3, [r1, #16]
 8006940:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006944:	4293      	cmp	r3, r2
 8006946:	bfb8      	it	lt
 8006948:	4613      	movlt	r3, r2
 800694a:	6033      	str	r3, [r6, #0]
 800694c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006950:	4607      	mov	r7, r0
 8006952:	460c      	mov	r4, r1
 8006954:	b10a      	cbz	r2, 800695a <_printf_common+0x26>
 8006956:	3301      	adds	r3, #1
 8006958:	6033      	str	r3, [r6, #0]
 800695a:	6823      	ldr	r3, [r4, #0]
 800695c:	0699      	lsls	r1, r3, #26
 800695e:	bf42      	ittt	mi
 8006960:	6833      	ldrmi	r3, [r6, #0]
 8006962:	3302      	addmi	r3, #2
 8006964:	6033      	strmi	r3, [r6, #0]
 8006966:	6825      	ldr	r5, [r4, #0]
 8006968:	f015 0506 	ands.w	r5, r5, #6
 800696c:	d106      	bne.n	800697c <_printf_common+0x48>
 800696e:	f104 0a19 	add.w	sl, r4, #25
 8006972:	68e3      	ldr	r3, [r4, #12]
 8006974:	6832      	ldr	r2, [r6, #0]
 8006976:	1a9b      	subs	r3, r3, r2
 8006978:	42ab      	cmp	r3, r5
 800697a:	dc26      	bgt.n	80069ca <_printf_common+0x96>
 800697c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006980:	1e13      	subs	r3, r2, #0
 8006982:	6822      	ldr	r2, [r4, #0]
 8006984:	bf18      	it	ne
 8006986:	2301      	movne	r3, #1
 8006988:	0692      	lsls	r2, r2, #26
 800698a:	d42b      	bmi.n	80069e4 <_printf_common+0xb0>
 800698c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006990:	4649      	mov	r1, r9
 8006992:	4638      	mov	r0, r7
 8006994:	47c0      	blx	r8
 8006996:	3001      	adds	r0, #1
 8006998:	d01e      	beq.n	80069d8 <_printf_common+0xa4>
 800699a:	6823      	ldr	r3, [r4, #0]
 800699c:	68e5      	ldr	r5, [r4, #12]
 800699e:	6832      	ldr	r2, [r6, #0]
 80069a0:	f003 0306 	and.w	r3, r3, #6
 80069a4:	2b04      	cmp	r3, #4
 80069a6:	bf08      	it	eq
 80069a8:	1aad      	subeq	r5, r5, r2
 80069aa:	68a3      	ldr	r3, [r4, #8]
 80069ac:	6922      	ldr	r2, [r4, #16]
 80069ae:	bf0c      	ite	eq
 80069b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069b4:	2500      	movne	r5, #0
 80069b6:	4293      	cmp	r3, r2
 80069b8:	bfc4      	itt	gt
 80069ba:	1a9b      	subgt	r3, r3, r2
 80069bc:	18ed      	addgt	r5, r5, r3
 80069be:	2600      	movs	r6, #0
 80069c0:	341a      	adds	r4, #26
 80069c2:	42b5      	cmp	r5, r6
 80069c4:	d11a      	bne.n	80069fc <_printf_common+0xc8>
 80069c6:	2000      	movs	r0, #0
 80069c8:	e008      	b.n	80069dc <_printf_common+0xa8>
 80069ca:	2301      	movs	r3, #1
 80069cc:	4652      	mov	r2, sl
 80069ce:	4649      	mov	r1, r9
 80069d0:	4638      	mov	r0, r7
 80069d2:	47c0      	blx	r8
 80069d4:	3001      	adds	r0, #1
 80069d6:	d103      	bne.n	80069e0 <_printf_common+0xac>
 80069d8:	f04f 30ff 	mov.w	r0, #4294967295
 80069dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069e0:	3501      	adds	r5, #1
 80069e2:	e7c6      	b.n	8006972 <_printf_common+0x3e>
 80069e4:	18e1      	adds	r1, r4, r3
 80069e6:	1c5a      	adds	r2, r3, #1
 80069e8:	2030      	movs	r0, #48	; 0x30
 80069ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069ee:	4422      	add	r2, r4
 80069f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069f8:	3302      	adds	r3, #2
 80069fa:	e7c7      	b.n	800698c <_printf_common+0x58>
 80069fc:	2301      	movs	r3, #1
 80069fe:	4622      	mov	r2, r4
 8006a00:	4649      	mov	r1, r9
 8006a02:	4638      	mov	r0, r7
 8006a04:	47c0      	blx	r8
 8006a06:	3001      	adds	r0, #1
 8006a08:	d0e6      	beq.n	80069d8 <_printf_common+0xa4>
 8006a0a:	3601      	adds	r6, #1
 8006a0c:	e7d9      	b.n	80069c2 <_printf_common+0x8e>
	...

08006a10 <_printf_i>:
 8006a10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a14:	460c      	mov	r4, r1
 8006a16:	4691      	mov	r9, r2
 8006a18:	7e27      	ldrb	r7, [r4, #24]
 8006a1a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006a1c:	2f78      	cmp	r7, #120	; 0x78
 8006a1e:	4680      	mov	r8, r0
 8006a20:	469a      	mov	sl, r3
 8006a22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a26:	d807      	bhi.n	8006a38 <_printf_i+0x28>
 8006a28:	2f62      	cmp	r7, #98	; 0x62
 8006a2a:	d80a      	bhi.n	8006a42 <_printf_i+0x32>
 8006a2c:	2f00      	cmp	r7, #0
 8006a2e:	f000 80d8 	beq.w	8006be2 <_printf_i+0x1d2>
 8006a32:	2f58      	cmp	r7, #88	; 0x58
 8006a34:	f000 80a3 	beq.w	8006b7e <_printf_i+0x16e>
 8006a38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006a3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a40:	e03a      	b.n	8006ab8 <_printf_i+0xa8>
 8006a42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a46:	2b15      	cmp	r3, #21
 8006a48:	d8f6      	bhi.n	8006a38 <_printf_i+0x28>
 8006a4a:	a001      	add	r0, pc, #4	; (adr r0, 8006a50 <_printf_i+0x40>)
 8006a4c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006a50:	08006aa9 	.word	0x08006aa9
 8006a54:	08006abd 	.word	0x08006abd
 8006a58:	08006a39 	.word	0x08006a39
 8006a5c:	08006a39 	.word	0x08006a39
 8006a60:	08006a39 	.word	0x08006a39
 8006a64:	08006a39 	.word	0x08006a39
 8006a68:	08006abd 	.word	0x08006abd
 8006a6c:	08006a39 	.word	0x08006a39
 8006a70:	08006a39 	.word	0x08006a39
 8006a74:	08006a39 	.word	0x08006a39
 8006a78:	08006a39 	.word	0x08006a39
 8006a7c:	08006bc9 	.word	0x08006bc9
 8006a80:	08006aed 	.word	0x08006aed
 8006a84:	08006bab 	.word	0x08006bab
 8006a88:	08006a39 	.word	0x08006a39
 8006a8c:	08006a39 	.word	0x08006a39
 8006a90:	08006beb 	.word	0x08006beb
 8006a94:	08006a39 	.word	0x08006a39
 8006a98:	08006aed 	.word	0x08006aed
 8006a9c:	08006a39 	.word	0x08006a39
 8006aa0:	08006a39 	.word	0x08006a39
 8006aa4:	08006bb3 	.word	0x08006bb3
 8006aa8:	680b      	ldr	r3, [r1, #0]
 8006aaa:	1d1a      	adds	r2, r3, #4
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	600a      	str	r2, [r1, #0]
 8006ab0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ab4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e0a3      	b.n	8006c04 <_printf_i+0x1f4>
 8006abc:	6825      	ldr	r5, [r4, #0]
 8006abe:	6808      	ldr	r0, [r1, #0]
 8006ac0:	062e      	lsls	r6, r5, #24
 8006ac2:	f100 0304 	add.w	r3, r0, #4
 8006ac6:	d50a      	bpl.n	8006ade <_printf_i+0xce>
 8006ac8:	6805      	ldr	r5, [r0, #0]
 8006aca:	600b      	str	r3, [r1, #0]
 8006acc:	2d00      	cmp	r5, #0
 8006ace:	da03      	bge.n	8006ad8 <_printf_i+0xc8>
 8006ad0:	232d      	movs	r3, #45	; 0x2d
 8006ad2:	426d      	negs	r5, r5
 8006ad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ad8:	485e      	ldr	r0, [pc, #376]	; (8006c54 <_printf_i+0x244>)
 8006ada:	230a      	movs	r3, #10
 8006adc:	e019      	b.n	8006b12 <_printf_i+0x102>
 8006ade:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006ae2:	6805      	ldr	r5, [r0, #0]
 8006ae4:	600b      	str	r3, [r1, #0]
 8006ae6:	bf18      	it	ne
 8006ae8:	b22d      	sxthne	r5, r5
 8006aea:	e7ef      	b.n	8006acc <_printf_i+0xbc>
 8006aec:	680b      	ldr	r3, [r1, #0]
 8006aee:	6825      	ldr	r5, [r4, #0]
 8006af0:	1d18      	adds	r0, r3, #4
 8006af2:	6008      	str	r0, [r1, #0]
 8006af4:	0628      	lsls	r0, r5, #24
 8006af6:	d501      	bpl.n	8006afc <_printf_i+0xec>
 8006af8:	681d      	ldr	r5, [r3, #0]
 8006afa:	e002      	b.n	8006b02 <_printf_i+0xf2>
 8006afc:	0669      	lsls	r1, r5, #25
 8006afe:	d5fb      	bpl.n	8006af8 <_printf_i+0xe8>
 8006b00:	881d      	ldrh	r5, [r3, #0]
 8006b02:	4854      	ldr	r0, [pc, #336]	; (8006c54 <_printf_i+0x244>)
 8006b04:	2f6f      	cmp	r7, #111	; 0x6f
 8006b06:	bf0c      	ite	eq
 8006b08:	2308      	moveq	r3, #8
 8006b0a:	230a      	movne	r3, #10
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b12:	6866      	ldr	r6, [r4, #4]
 8006b14:	60a6      	str	r6, [r4, #8]
 8006b16:	2e00      	cmp	r6, #0
 8006b18:	bfa2      	ittt	ge
 8006b1a:	6821      	ldrge	r1, [r4, #0]
 8006b1c:	f021 0104 	bicge.w	r1, r1, #4
 8006b20:	6021      	strge	r1, [r4, #0]
 8006b22:	b90d      	cbnz	r5, 8006b28 <_printf_i+0x118>
 8006b24:	2e00      	cmp	r6, #0
 8006b26:	d04d      	beq.n	8006bc4 <_printf_i+0x1b4>
 8006b28:	4616      	mov	r6, r2
 8006b2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b2e:	fb03 5711 	mls	r7, r3, r1, r5
 8006b32:	5dc7      	ldrb	r7, [r0, r7]
 8006b34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b38:	462f      	mov	r7, r5
 8006b3a:	42bb      	cmp	r3, r7
 8006b3c:	460d      	mov	r5, r1
 8006b3e:	d9f4      	bls.n	8006b2a <_printf_i+0x11a>
 8006b40:	2b08      	cmp	r3, #8
 8006b42:	d10b      	bne.n	8006b5c <_printf_i+0x14c>
 8006b44:	6823      	ldr	r3, [r4, #0]
 8006b46:	07df      	lsls	r7, r3, #31
 8006b48:	d508      	bpl.n	8006b5c <_printf_i+0x14c>
 8006b4a:	6923      	ldr	r3, [r4, #16]
 8006b4c:	6861      	ldr	r1, [r4, #4]
 8006b4e:	4299      	cmp	r1, r3
 8006b50:	bfde      	ittt	le
 8006b52:	2330      	movle	r3, #48	; 0x30
 8006b54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b58:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b5c:	1b92      	subs	r2, r2, r6
 8006b5e:	6122      	str	r2, [r4, #16]
 8006b60:	f8cd a000 	str.w	sl, [sp]
 8006b64:	464b      	mov	r3, r9
 8006b66:	aa03      	add	r2, sp, #12
 8006b68:	4621      	mov	r1, r4
 8006b6a:	4640      	mov	r0, r8
 8006b6c:	f7ff fee2 	bl	8006934 <_printf_common>
 8006b70:	3001      	adds	r0, #1
 8006b72:	d14c      	bne.n	8006c0e <_printf_i+0x1fe>
 8006b74:	f04f 30ff 	mov.w	r0, #4294967295
 8006b78:	b004      	add	sp, #16
 8006b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b7e:	4835      	ldr	r0, [pc, #212]	; (8006c54 <_printf_i+0x244>)
 8006b80:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006b84:	6823      	ldr	r3, [r4, #0]
 8006b86:	680e      	ldr	r6, [r1, #0]
 8006b88:	061f      	lsls	r7, r3, #24
 8006b8a:	f856 5b04 	ldr.w	r5, [r6], #4
 8006b8e:	600e      	str	r6, [r1, #0]
 8006b90:	d514      	bpl.n	8006bbc <_printf_i+0x1ac>
 8006b92:	07d9      	lsls	r1, r3, #31
 8006b94:	bf44      	itt	mi
 8006b96:	f043 0320 	orrmi.w	r3, r3, #32
 8006b9a:	6023      	strmi	r3, [r4, #0]
 8006b9c:	b91d      	cbnz	r5, 8006ba6 <_printf_i+0x196>
 8006b9e:	6823      	ldr	r3, [r4, #0]
 8006ba0:	f023 0320 	bic.w	r3, r3, #32
 8006ba4:	6023      	str	r3, [r4, #0]
 8006ba6:	2310      	movs	r3, #16
 8006ba8:	e7b0      	b.n	8006b0c <_printf_i+0xfc>
 8006baa:	6823      	ldr	r3, [r4, #0]
 8006bac:	f043 0320 	orr.w	r3, r3, #32
 8006bb0:	6023      	str	r3, [r4, #0]
 8006bb2:	2378      	movs	r3, #120	; 0x78
 8006bb4:	4828      	ldr	r0, [pc, #160]	; (8006c58 <_printf_i+0x248>)
 8006bb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006bba:	e7e3      	b.n	8006b84 <_printf_i+0x174>
 8006bbc:	065e      	lsls	r6, r3, #25
 8006bbe:	bf48      	it	mi
 8006bc0:	b2ad      	uxthmi	r5, r5
 8006bc2:	e7e6      	b.n	8006b92 <_printf_i+0x182>
 8006bc4:	4616      	mov	r6, r2
 8006bc6:	e7bb      	b.n	8006b40 <_printf_i+0x130>
 8006bc8:	680b      	ldr	r3, [r1, #0]
 8006bca:	6826      	ldr	r6, [r4, #0]
 8006bcc:	6960      	ldr	r0, [r4, #20]
 8006bce:	1d1d      	adds	r5, r3, #4
 8006bd0:	600d      	str	r5, [r1, #0]
 8006bd2:	0635      	lsls	r5, r6, #24
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	d501      	bpl.n	8006bdc <_printf_i+0x1cc>
 8006bd8:	6018      	str	r0, [r3, #0]
 8006bda:	e002      	b.n	8006be2 <_printf_i+0x1d2>
 8006bdc:	0671      	lsls	r1, r6, #25
 8006bde:	d5fb      	bpl.n	8006bd8 <_printf_i+0x1c8>
 8006be0:	8018      	strh	r0, [r3, #0]
 8006be2:	2300      	movs	r3, #0
 8006be4:	6123      	str	r3, [r4, #16]
 8006be6:	4616      	mov	r6, r2
 8006be8:	e7ba      	b.n	8006b60 <_printf_i+0x150>
 8006bea:	680b      	ldr	r3, [r1, #0]
 8006bec:	1d1a      	adds	r2, r3, #4
 8006bee:	600a      	str	r2, [r1, #0]
 8006bf0:	681e      	ldr	r6, [r3, #0]
 8006bf2:	6862      	ldr	r2, [r4, #4]
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	4630      	mov	r0, r6
 8006bf8:	f7f9 fb1a 	bl	8000230 <memchr>
 8006bfc:	b108      	cbz	r0, 8006c02 <_printf_i+0x1f2>
 8006bfe:	1b80      	subs	r0, r0, r6
 8006c00:	6060      	str	r0, [r4, #4]
 8006c02:	6863      	ldr	r3, [r4, #4]
 8006c04:	6123      	str	r3, [r4, #16]
 8006c06:	2300      	movs	r3, #0
 8006c08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c0c:	e7a8      	b.n	8006b60 <_printf_i+0x150>
 8006c0e:	6923      	ldr	r3, [r4, #16]
 8006c10:	4632      	mov	r2, r6
 8006c12:	4649      	mov	r1, r9
 8006c14:	4640      	mov	r0, r8
 8006c16:	47d0      	blx	sl
 8006c18:	3001      	adds	r0, #1
 8006c1a:	d0ab      	beq.n	8006b74 <_printf_i+0x164>
 8006c1c:	6823      	ldr	r3, [r4, #0]
 8006c1e:	079b      	lsls	r3, r3, #30
 8006c20:	d413      	bmi.n	8006c4a <_printf_i+0x23a>
 8006c22:	68e0      	ldr	r0, [r4, #12]
 8006c24:	9b03      	ldr	r3, [sp, #12]
 8006c26:	4298      	cmp	r0, r3
 8006c28:	bfb8      	it	lt
 8006c2a:	4618      	movlt	r0, r3
 8006c2c:	e7a4      	b.n	8006b78 <_printf_i+0x168>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	4632      	mov	r2, r6
 8006c32:	4649      	mov	r1, r9
 8006c34:	4640      	mov	r0, r8
 8006c36:	47d0      	blx	sl
 8006c38:	3001      	adds	r0, #1
 8006c3a:	d09b      	beq.n	8006b74 <_printf_i+0x164>
 8006c3c:	3501      	adds	r5, #1
 8006c3e:	68e3      	ldr	r3, [r4, #12]
 8006c40:	9903      	ldr	r1, [sp, #12]
 8006c42:	1a5b      	subs	r3, r3, r1
 8006c44:	42ab      	cmp	r3, r5
 8006c46:	dcf2      	bgt.n	8006c2e <_printf_i+0x21e>
 8006c48:	e7eb      	b.n	8006c22 <_printf_i+0x212>
 8006c4a:	2500      	movs	r5, #0
 8006c4c:	f104 0619 	add.w	r6, r4, #25
 8006c50:	e7f5      	b.n	8006c3e <_printf_i+0x22e>
 8006c52:	bf00      	nop
 8006c54:	08008f6a 	.word	0x08008f6a
 8006c58:	08008f7b 	.word	0x08008f7b

08006c5c <iprintf>:
 8006c5c:	b40f      	push	{r0, r1, r2, r3}
 8006c5e:	4b0a      	ldr	r3, [pc, #40]	; (8006c88 <iprintf+0x2c>)
 8006c60:	b513      	push	{r0, r1, r4, lr}
 8006c62:	681c      	ldr	r4, [r3, #0]
 8006c64:	b124      	cbz	r4, 8006c70 <iprintf+0x14>
 8006c66:	69a3      	ldr	r3, [r4, #24]
 8006c68:	b913      	cbnz	r3, 8006c70 <iprintf+0x14>
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	f001 f8d6 	bl	8007e1c <__sinit>
 8006c70:	ab05      	add	r3, sp, #20
 8006c72:	9a04      	ldr	r2, [sp, #16]
 8006c74:	68a1      	ldr	r1, [r4, #8]
 8006c76:	9301      	str	r3, [sp, #4]
 8006c78:	4620      	mov	r0, r4
 8006c7a:	f001 fe51 	bl	8008920 <_vfiprintf_r>
 8006c7e:	b002      	add	sp, #8
 8006c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c84:	b004      	add	sp, #16
 8006c86:	4770      	bx	lr
 8006c88:	20000018 	.word	0x20000018

08006c8c <_puts_r>:
 8006c8c:	b570      	push	{r4, r5, r6, lr}
 8006c8e:	460e      	mov	r6, r1
 8006c90:	4605      	mov	r5, r0
 8006c92:	b118      	cbz	r0, 8006c9c <_puts_r+0x10>
 8006c94:	6983      	ldr	r3, [r0, #24]
 8006c96:	b90b      	cbnz	r3, 8006c9c <_puts_r+0x10>
 8006c98:	f001 f8c0 	bl	8007e1c <__sinit>
 8006c9c:	69ab      	ldr	r3, [r5, #24]
 8006c9e:	68ac      	ldr	r4, [r5, #8]
 8006ca0:	b913      	cbnz	r3, 8006ca8 <_puts_r+0x1c>
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	f001 f8ba 	bl	8007e1c <__sinit>
 8006ca8:	4b2c      	ldr	r3, [pc, #176]	; (8006d5c <_puts_r+0xd0>)
 8006caa:	429c      	cmp	r4, r3
 8006cac:	d120      	bne.n	8006cf0 <_puts_r+0x64>
 8006cae:	686c      	ldr	r4, [r5, #4]
 8006cb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cb2:	07db      	lsls	r3, r3, #31
 8006cb4:	d405      	bmi.n	8006cc2 <_puts_r+0x36>
 8006cb6:	89a3      	ldrh	r3, [r4, #12]
 8006cb8:	0598      	lsls	r0, r3, #22
 8006cba:	d402      	bmi.n	8006cc2 <_puts_r+0x36>
 8006cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cbe:	f001 f950 	bl	8007f62 <__retarget_lock_acquire_recursive>
 8006cc2:	89a3      	ldrh	r3, [r4, #12]
 8006cc4:	0719      	lsls	r1, r3, #28
 8006cc6:	d51d      	bpl.n	8006d04 <_puts_r+0x78>
 8006cc8:	6923      	ldr	r3, [r4, #16]
 8006cca:	b1db      	cbz	r3, 8006d04 <_puts_r+0x78>
 8006ccc:	3e01      	subs	r6, #1
 8006cce:	68a3      	ldr	r3, [r4, #8]
 8006cd0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	60a3      	str	r3, [r4, #8]
 8006cd8:	bb39      	cbnz	r1, 8006d2a <_puts_r+0x9e>
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	da38      	bge.n	8006d50 <_puts_r+0xc4>
 8006cde:	4622      	mov	r2, r4
 8006ce0:	210a      	movs	r1, #10
 8006ce2:	4628      	mov	r0, r5
 8006ce4:	f000 f848 	bl	8006d78 <__swbuf_r>
 8006ce8:	3001      	adds	r0, #1
 8006cea:	d011      	beq.n	8006d10 <_puts_r+0x84>
 8006cec:	250a      	movs	r5, #10
 8006cee:	e011      	b.n	8006d14 <_puts_r+0x88>
 8006cf0:	4b1b      	ldr	r3, [pc, #108]	; (8006d60 <_puts_r+0xd4>)
 8006cf2:	429c      	cmp	r4, r3
 8006cf4:	d101      	bne.n	8006cfa <_puts_r+0x6e>
 8006cf6:	68ac      	ldr	r4, [r5, #8]
 8006cf8:	e7da      	b.n	8006cb0 <_puts_r+0x24>
 8006cfa:	4b1a      	ldr	r3, [pc, #104]	; (8006d64 <_puts_r+0xd8>)
 8006cfc:	429c      	cmp	r4, r3
 8006cfe:	bf08      	it	eq
 8006d00:	68ec      	ldreq	r4, [r5, #12]
 8006d02:	e7d5      	b.n	8006cb0 <_puts_r+0x24>
 8006d04:	4621      	mov	r1, r4
 8006d06:	4628      	mov	r0, r5
 8006d08:	f000 f888 	bl	8006e1c <__swsetup_r>
 8006d0c:	2800      	cmp	r0, #0
 8006d0e:	d0dd      	beq.n	8006ccc <_puts_r+0x40>
 8006d10:	f04f 35ff 	mov.w	r5, #4294967295
 8006d14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d16:	07da      	lsls	r2, r3, #31
 8006d18:	d405      	bmi.n	8006d26 <_puts_r+0x9a>
 8006d1a:	89a3      	ldrh	r3, [r4, #12]
 8006d1c:	059b      	lsls	r3, r3, #22
 8006d1e:	d402      	bmi.n	8006d26 <_puts_r+0x9a>
 8006d20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d22:	f001 f91f 	bl	8007f64 <__retarget_lock_release_recursive>
 8006d26:	4628      	mov	r0, r5
 8006d28:	bd70      	pop	{r4, r5, r6, pc}
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	da04      	bge.n	8006d38 <_puts_r+0xac>
 8006d2e:	69a2      	ldr	r2, [r4, #24]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	dc06      	bgt.n	8006d42 <_puts_r+0xb6>
 8006d34:	290a      	cmp	r1, #10
 8006d36:	d004      	beq.n	8006d42 <_puts_r+0xb6>
 8006d38:	6823      	ldr	r3, [r4, #0]
 8006d3a:	1c5a      	adds	r2, r3, #1
 8006d3c:	6022      	str	r2, [r4, #0]
 8006d3e:	7019      	strb	r1, [r3, #0]
 8006d40:	e7c5      	b.n	8006cce <_puts_r+0x42>
 8006d42:	4622      	mov	r2, r4
 8006d44:	4628      	mov	r0, r5
 8006d46:	f000 f817 	bl	8006d78 <__swbuf_r>
 8006d4a:	3001      	adds	r0, #1
 8006d4c:	d1bf      	bne.n	8006cce <_puts_r+0x42>
 8006d4e:	e7df      	b.n	8006d10 <_puts_r+0x84>
 8006d50:	6823      	ldr	r3, [r4, #0]
 8006d52:	250a      	movs	r5, #10
 8006d54:	1c5a      	adds	r2, r3, #1
 8006d56:	6022      	str	r2, [r4, #0]
 8006d58:	701d      	strb	r5, [r3, #0]
 8006d5a:	e7db      	b.n	8006d14 <_puts_r+0x88>
 8006d5c:	08009040 	.word	0x08009040
 8006d60:	08009060 	.word	0x08009060
 8006d64:	08009020 	.word	0x08009020

08006d68 <puts>:
 8006d68:	4b02      	ldr	r3, [pc, #8]	; (8006d74 <puts+0xc>)
 8006d6a:	4601      	mov	r1, r0
 8006d6c:	6818      	ldr	r0, [r3, #0]
 8006d6e:	f7ff bf8d 	b.w	8006c8c <_puts_r>
 8006d72:	bf00      	nop
 8006d74:	20000018 	.word	0x20000018

08006d78 <__swbuf_r>:
 8006d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d7a:	460e      	mov	r6, r1
 8006d7c:	4614      	mov	r4, r2
 8006d7e:	4605      	mov	r5, r0
 8006d80:	b118      	cbz	r0, 8006d8a <__swbuf_r+0x12>
 8006d82:	6983      	ldr	r3, [r0, #24]
 8006d84:	b90b      	cbnz	r3, 8006d8a <__swbuf_r+0x12>
 8006d86:	f001 f849 	bl	8007e1c <__sinit>
 8006d8a:	4b21      	ldr	r3, [pc, #132]	; (8006e10 <__swbuf_r+0x98>)
 8006d8c:	429c      	cmp	r4, r3
 8006d8e:	d12b      	bne.n	8006de8 <__swbuf_r+0x70>
 8006d90:	686c      	ldr	r4, [r5, #4]
 8006d92:	69a3      	ldr	r3, [r4, #24]
 8006d94:	60a3      	str	r3, [r4, #8]
 8006d96:	89a3      	ldrh	r3, [r4, #12]
 8006d98:	071a      	lsls	r2, r3, #28
 8006d9a:	d52f      	bpl.n	8006dfc <__swbuf_r+0x84>
 8006d9c:	6923      	ldr	r3, [r4, #16]
 8006d9e:	b36b      	cbz	r3, 8006dfc <__swbuf_r+0x84>
 8006da0:	6923      	ldr	r3, [r4, #16]
 8006da2:	6820      	ldr	r0, [r4, #0]
 8006da4:	1ac0      	subs	r0, r0, r3
 8006da6:	6963      	ldr	r3, [r4, #20]
 8006da8:	b2f6      	uxtb	r6, r6
 8006daa:	4283      	cmp	r3, r0
 8006dac:	4637      	mov	r7, r6
 8006dae:	dc04      	bgt.n	8006dba <__swbuf_r+0x42>
 8006db0:	4621      	mov	r1, r4
 8006db2:	4628      	mov	r0, r5
 8006db4:	f000 ff9e 	bl	8007cf4 <_fflush_r>
 8006db8:	bb30      	cbnz	r0, 8006e08 <__swbuf_r+0x90>
 8006dba:	68a3      	ldr	r3, [r4, #8]
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	60a3      	str	r3, [r4, #8]
 8006dc0:	6823      	ldr	r3, [r4, #0]
 8006dc2:	1c5a      	adds	r2, r3, #1
 8006dc4:	6022      	str	r2, [r4, #0]
 8006dc6:	701e      	strb	r6, [r3, #0]
 8006dc8:	6963      	ldr	r3, [r4, #20]
 8006dca:	3001      	adds	r0, #1
 8006dcc:	4283      	cmp	r3, r0
 8006dce:	d004      	beq.n	8006dda <__swbuf_r+0x62>
 8006dd0:	89a3      	ldrh	r3, [r4, #12]
 8006dd2:	07db      	lsls	r3, r3, #31
 8006dd4:	d506      	bpl.n	8006de4 <__swbuf_r+0x6c>
 8006dd6:	2e0a      	cmp	r6, #10
 8006dd8:	d104      	bne.n	8006de4 <__swbuf_r+0x6c>
 8006dda:	4621      	mov	r1, r4
 8006ddc:	4628      	mov	r0, r5
 8006dde:	f000 ff89 	bl	8007cf4 <_fflush_r>
 8006de2:	b988      	cbnz	r0, 8006e08 <__swbuf_r+0x90>
 8006de4:	4638      	mov	r0, r7
 8006de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006de8:	4b0a      	ldr	r3, [pc, #40]	; (8006e14 <__swbuf_r+0x9c>)
 8006dea:	429c      	cmp	r4, r3
 8006dec:	d101      	bne.n	8006df2 <__swbuf_r+0x7a>
 8006dee:	68ac      	ldr	r4, [r5, #8]
 8006df0:	e7cf      	b.n	8006d92 <__swbuf_r+0x1a>
 8006df2:	4b09      	ldr	r3, [pc, #36]	; (8006e18 <__swbuf_r+0xa0>)
 8006df4:	429c      	cmp	r4, r3
 8006df6:	bf08      	it	eq
 8006df8:	68ec      	ldreq	r4, [r5, #12]
 8006dfa:	e7ca      	b.n	8006d92 <__swbuf_r+0x1a>
 8006dfc:	4621      	mov	r1, r4
 8006dfe:	4628      	mov	r0, r5
 8006e00:	f000 f80c 	bl	8006e1c <__swsetup_r>
 8006e04:	2800      	cmp	r0, #0
 8006e06:	d0cb      	beq.n	8006da0 <__swbuf_r+0x28>
 8006e08:	f04f 37ff 	mov.w	r7, #4294967295
 8006e0c:	e7ea      	b.n	8006de4 <__swbuf_r+0x6c>
 8006e0e:	bf00      	nop
 8006e10:	08009040 	.word	0x08009040
 8006e14:	08009060 	.word	0x08009060
 8006e18:	08009020 	.word	0x08009020

08006e1c <__swsetup_r>:
 8006e1c:	4b32      	ldr	r3, [pc, #200]	; (8006ee8 <__swsetup_r+0xcc>)
 8006e1e:	b570      	push	{r4, r5, r6, lr}
 8006e20:	681d      	ldr	r5, [r3, #0]
 8006e22:	4606      	mov	r6, r0
 8006e24:	460c      	mov	r4, r1
 8006e26:	b125      	cbz	r5, 8006e32 <__swsetup_r+0x16>
 8006e28:	69ab      	ldr	r3, [r5, #24]
 8006e2a:	b913      	cbnz	r3, 8006e32 <__swsetup_r+0x16>
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	f000 fff5 	bl	8007e1c <__sinit>
 8006e32:	4b2e      	ldr	r3, [pc, #184]	; (8006eec <__swsetup_r+0xd0>)
 8006e34:	429c      	cmp	r4, r3
 8006e36:	d10f      	bne.n	8006e58 <__swsetup_r+0x3c>
 8006e38:	686c      	ldr	r4, [r5, #4]
 8006e3a:	89a3      	ldrh	r3, [r4, #12]
 8006e3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e40:	0719      	lsls	r1, r3, #28
 8006e42:	d42c      	bmi.n	8006e9e <__swsetup_r+0x82>
 8006e44:	06dd      	lsls	r5, r3, #27
 8006e46:	d411      	bmi.n	8006e6c <__swsetup_r+0x50>
 8006e48:	2309      	movs	r3, #9
 8006e4a:	6033      	str	r3, [r6, #0]
 8006e4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006e50:	81a3      	strh	r3, [r4, #12]
 8006e52:	f04f 30ff 	mov.w	r0, #4294967295
 8006e56:	e03e      	b.n	8006ed6 <__swsetup_r+0xba>
 8006e58:	4b25      	ldr	r3, [pc, #148]	; (8006ef0 <__swsetup_r+0xd4>)
 8006e5a:	429c      	cmp	r4, r3
 8006e5c:	d101      	bne.n	8006e62 <__swsetup_r+0x46>
 8006e5e:	68ac      	ldr	r4, [r5, #8]
 8006e60:	e7eb      	b.n	8006e3a <__swsetup_r+0x1e>
 8006e62:	4b24      	ldr	r3, [pc, #144]	; (8006ef4 <__swsetup_r+0xd8>)
 8006e64:	429c      	cmp	r4, r3
 8006e66:	bf08      	it	eq
 8006e68:	68ec      	ldreq	r4, [r5, #12]
 8006e6a:	e7e6      	b.n	8006e3a <__swsetup_r+0x1e>
 8006e6c:	0758      	lsls	r0, r3, #29
 8006e6e:	d512      	bpl.n	8006e96 <__swsetup_r+0x7a>
 8006e70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e72:	b141      	cbz	r1, 8006e86 <__swsetup_r+0x6a>
 8006e74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e78:	4299      	cmp	r1, r3
 8006e7a:	d002      	beq.n	8006e82 <__swsetup_r+0x66>
 8006e7c:	4630      	mov	r0, r6
 8006e7e:	f001 fc7b 	bl	8008778 <_free_r>
 8006e82:	2300      	movs	r3, #0
 8006e84:	6363      	str	r3, [r4, #52]	; 0x34
 8006e86:	89a3      	ldrh	r3, [r4, #12]
 8006e88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e8c:	81a3      	strh	r3, [r4, #12]
 8006e8e:	2300      	movs	r3, #0
 8006e90:	6063      	str	r3, [r4, #4]
 8006e92:	6923      	ldr	r3, [r4, #16]
 8006e94:	6023      	str	r3, [r4, #0]
 8006e96:	89a3      	ldrh	r3, [r4, #12]
 8006e98:	f043 0308 	orr.w	r3, r3, #8
 8006e9c:	81a3      	strh	r3, [r4, #12]
 8006e9e:	6923      	ldr	r3, [r4, #16]
 8006ea0:	b94b      	cbnz	r3, 8006eb6 <__swsetup_r+0x9a>
 8006ea2:	89a3      	ldrh	r3, [r4, #12]
 8006ea4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eac:	d003      	beq.n	8006eb6 <__swsetup_r+0x9a>
 8006eae:	4621      	mov	r1, r4
 8006eb0:	4630      	mov	r0, r6
 8006eb2:	f001 f87d 	bl	8007fb0 <__smakebuf_r>
 8006eb6:	89a0      	ldrh	r0, [r4, #12]
 8006eb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ebc:	f010 0301 	ands.w	r3, r0, #1
 8006ec0:	d00a      	beq.n	8006ed8 <__swsetup_r+0xbc>
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	60a3      	str	r3, [r4, #8]
 8006ec6:	6963      	ldr	r3, [r4, #20]
 8006ec8:	425b      	negs	r3, r3
 8006eca:	61a3      	str	r3, [r4, #24]
 8006ecc:	6923      	ldr	r3, [r4, #16]
 8006ece:	b943      	cbnz	r3, 8006ee2 <__swsetup_r+0xc6>
 8006ed0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ed4:	d1ba      	bne.n	8006e4c <__swsetup_r+0x30>
 8006ed6:	bd70      	pop	{r4, r5, r6, pc}
 8006ed8:	0781      	lsls	r1, r0, #30
 8006eda:	bf58      	it	pl
 8006edc:	6963      	ldrpl	r3, [r4, #20]
 8006ede:	60a3      	str	r3, [r4, #8]
 8006ee0:	e7f4      	b.n	8006ecc <__swsetup_r+0xb0>
 8006ee2:	2000      	movs	r0, #0
 8006ee4:	e7f7      	b.n	8006ed6 <__swsetup_r+0xba>
 8006ee6:	bf00      	nop
 8006ee8:	20000018 	.word	0x20000018
 8006eec:	08009040 	.word	0x08009040
 8006ef0:	08009060 	.word	0x08009060
 8006ef4:	08009020 	.word	0x08009020

08006ef8 <quorem>:
 8006ef8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006efc:	6903      	ldr	r3, [r0, #16]
 8006efe:	690c      	ldr	r4, [r1, #16]
 8006f00:	42a3      	cmp	r3, r4
 8006f02:	4607      	mov	r7, r0
 8006f04:	f2c0 8081 	blt.w	800700a <quorem+0x112>
 8006f08:	3c01      	subs	r4, #1
 8006f0a:	f101 0814 	add.w	r8, r1, #20
 8006f0e:	f100 0514 	add.w	r5, r0, #20
 8006f12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f16:	9301      	str	r3, [sp, #4]
 8006f18:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f20:	3301      	adds	r3, #1
 8006f22:	429a      	cmp	r2, r3
 8006f24:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006f28:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f2c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f30:	d331      	bcc.n	8006f96 <quorem+0x9e>
 8006f32:	f04f 0e00 	mov.w	lr, #0
 8006f36:	4640      	mov	r0, r8
 8006f38:	46ac      	mov	ip, r5
 8006f3a:	46f2      	mov	sl, lr
 8006f3c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f40:	b293      	uxth	r3, r2
 8006f42:	fb06 e303 	mla	r3, r6, r3, lr
 8006f46:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	ebaa 0303 	sub.w	r3, sl, r3
 8006f50:	0c12      	lsrs	r2, r2, #16
 8006f52:	f8dc a000 	ldr.w	sl, [ip]
 8006f56:	fb06 e202 	mla	r2, r6, r2, lr
 8006f5a:	fa13 f38a 	uxtah	r3, r3, sl
 8006f5e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f62:	fa1f fa82 	uxth.w	sl, r2
 8006f66:	f8dc 2000 	ldr.w	r2, [ip]
 8006f6a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006f6e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f78:	4581      	cmp	r9, r0
 8006f7a:	f84c 3b04 	str.w	r3, [ip], #4
 8006f7e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f82:	d2db      	bcs.n	8006f3c <quorem+0x44>
 8006f84:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f88:	b92b      	cbnz	r3, 8006f96 <quorem+0x9e>
 8006f8a:	9b01      	ldr	r3, [sp, #4]
 8006f8c:	3b04      	subs	r3, #4
 8006f8e:	429d      	cmp	r5, r3
 8006f90:	461a      	mov	r2, r3
 8006f92:	d32e      	bcc.n	8006ff2 <quorem+0xfa>
 8006f94:	613c      	str	r4, [r7, #16]
 8006f96:	4638      	mov	r0, r7
 8006f98:	f001 fade 	bl	8008558 <__mcmp>
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	db24      	blt.n	8006fea <quorem+0xf2>
 8006fa0:	3601      	adds	r6, #1
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	f04f 0c00 	mov.w	ip, #0
 8006fa8:	f858 2b04 	ldr.w	r2, [r8], #4
 8006fac:	f8d0 e000 	ldr.w	lr, [r0]
 8006fb0:	b293      	uxth	r3, r2
 8006fb2:	ebac 0303 	sub.w	r3, ip, r3
 8006fb6:	0c12      	lsrs	r2, r2, #16
 8006fb8:	fa13 f38e 	uxtah	r3, r3, lr
 8006fbc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006fc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fca:	45c1      	cmp	r9, r8
 8006fcc:	f840 3b04 	str.w	r3, [r0], #4
 8006fd0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006fd4:	d2e8      	bcs.n	8006fa8 <quorem+0xb0>
 8006fd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fde:	b922      	cbnz	r2, 8006fea <quorem+0xf2>
 8006fe0:	3b04      	subs	r3, #4
 8006fe2:	429d      	cmp	r5, r3
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	d30a      	bcc.n	8006ffe <quorem+0x106>
 8006fe8:	613c      	str	r4, [r7, #16]
 8006fea:	4630      	mov	r0, r6
 8006fec:	b003      	add	sp, #12
 8006fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ff2:	6812      	ldr	r2, [r2, #0]
 8006ff4:	3b04      	subs	r3, #4
 8006ff6:	2a00      	cmp	r2, #0
 8006ff8:	d1cc      	bne.n	8006f94 <quorem+0x9c>
 8006ffa:	3c01      	subs	r4, #1
 8006ffc:	e7c7      	b.n	8006f8e <quorem+0x96>
 8006ffe:	6812      	ldr	r2, [r2, #0]
 8007000:	3b04      	subs	r3, #4
 8007002:	2a00      	cmp	r2, #0
 8007004:	d1f0      	bne.n	8006fe8 <quorem+0xf0>
 8007006:	3c01      	subs	r4, #1
 8007008:	e7eb      	b.n	8006fe2 <quorem+0xea>
 800700a:	2000      	movs	r0, #0
 800700c:	e7ee      	b.n	8006fec <quorem+0xf4>
	...

08007010 <_dtoa_r>:
 8007010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007014:	ed2d 8b02 	vpush	{d8}
 8007018:	ec57 6b10 	vmov	r6, r7, d0
 800701c:	b095      	sub	sp, #84	; 0x54
 800701e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007020:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007024:	9105      	str	r1, [sp, #20]
 8007026:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800702a:	4604      	mov	r4, r0
 800702c:	9209      	str	r2, [sp, #36]	; 0x24
 800702e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007030:	b975      	cbnz	r5, 8007050 <_dtoa_r+0x40>
 8007032:	2010      	movs	r0, #16
 8007034:	f000 fffc 	bl	8008030 <malloc>
 8007038:	4602      	mov	r2, r0
 800703a:	6260      	str	r0, [r4, #36]	; 0x24
 800703c:	b920      	cbnz	r0, 8007048 <_dtoa_r+0x38>
 800703e:	4bb2      	ldr	r3, [pc, #712]	; (8007308 <_dtoa_r+0x2f8>)
 8007040:	21ea      	movs	r1, #234	; 0xea
 8007042:	48b2      	ldr	r0, [pc, #712]	; (800730c <_dtoa_r+0x2fc>)
 8007044:	f001 fe02 	bl	8008c4c <__assert_func>
 8007048:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800704c:	6005      	str	r5, [r0, #0]
 800704e:	60c5      	str	r5, [r0, #12]
 8007050:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007052:	6819      	ldr	r1, [r3, #0]
 8007054:	b151      	cbz	r1, 800706c <_dtoa_r+0x5c>
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	604a      	str	r2, [r1, #4]
 800705a:	2301      	movs	r3, #1
 800705c:	4093      	lsls	r3, r2
 800705e:	608b      	str	r3, [r1, #8]
 8007060:	4620      	mov	r0, r4
 8007062:	f001 f83b 	bl	80080dc <_Bfree>
 8007066:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007068:	2200      	movs	r2, #0
 800706a:	601a      	str	r2, [r3, #0]
 800706c:	1e3b      	subs	r3, r7, #0
 800706e:	bfb9      	ittee	lt
 8007070:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007074:	9303      	strlt	r3, [sp, #12]
 8007076:	2300      	movge	r3, #0
 8007078:	f8c8 3000 	strge.w	r3, [r8]
 800707c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007080:	4ba3      	ldr	r3, [pc, #652]	; (8007310 <_dtoa_r+0x300>)
 8007082:	bfbc      	itt	lt
 8007084:	2201      	movlt	r2, #1
 8007086:	f8c8 2000 	strlt.w	r2, [r8]
 800708a:	ea33 0309 	bics.w	r3, r3, r9
 800708e:	d11b      	bne.n	80070c8 <_dtoa_r+0xb8>
 8007090:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007092:	f242 730f 	movw	r3, #9999	; 0x270f
 8007096:	6013      	str	r3, [r2, #0]
 8007098:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800709c:	4333      	orrs	r3, r6
 800709e:	f000 857a 	beq.w	8007b96 <_dtoa_r+0xb86>
 80070a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070a4:	b963      	cbnz	r3, 80070c0 <_dtoa_r+0xb0>
 80070a6:	4b9b      	ldr	r3, [pc, #620]	; (8007314 <_dtoa_r+0x304>)
 80070a8:	e024      	b.n	80070f4 <_dtoa_r+0xe4>
 80070aa:	4b9b      	ldr	r3, [pc, #620]	; (8007318 <_dtoa_r+0x308>)
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	3308      	adds	r3, #8
 80070b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80070b2:	6013      	str	r3, [r2, #0]
 80070b4:	9800      	ldr	r0, [sp, #0]
 80070b6:	b015      	add	sp, #84	; 0x54
 80070b8:	ecbd 8b02 	vpop	{d8}
 80070bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070c0:	4b94      	ldr	r3, [pc, #592]	; (8007314 <_dtoa_r+0x304>)
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	3303      	adds	r3, #3
 80070c6:	e7f3      	b.n	80070b0 <_dtoa_r+0xa0>
 80070c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80070cc:	2200      	movs	r2, #0
 80070ce:	ec51 0b17 	vmov	r0, r1, d7
 80070d2:	2300      	movs	r3, #0
 80070d4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80070d8:	f7f9 fd1e 	bl	8000b18 <__aeabi_dcmpeq>
 80070dc:	4680      	mov	r8, r0
 80070de:	b158      	cbz	r0, 80070f8 <_dtoa_r+0xe8>
 80070e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80070e2:	2301      	movs	r3, #1
 80070e4:	6013      	str	r3, [r2, #0]
 80070e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f000 8551 	beq.w	8007b90 <_dtoa_r+0xb80>
 80070ee:	488b      	ldr	r0, [pc, #556]	; (800731c <_dtoa_r+0x30c>)
 80070f0:	6018      	str	r0, [r3, #0]
 80070f2:	1e43      	subs	r3, r0, #1
 80070f4:	9300      	str	r3, [sp, #0]
 80070f6:	e7dd      	b.n	80070b4 <_dtoa_r+0xa4>
 80070f8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80070fc:	aa12      	add	r2, sp, #72	; 0x48
 80070fe:	a913      	add	r1, sp, #76	; 0x4c
 8007100:	4620      	mov	r0, r4
 8007102:	f001 facd 	bl	80086a0 <__d2b>
 8007106:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800710a:	4683      	mov	fp, r0
 800710c:	2d00      	cmp	r5, #0
 800710e:	d07c      	beq.n	800720a <_dtoa_r+0x1fa>
 8007110:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007112:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007116:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800711a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800711e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007122:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007126:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800712a:	4b7d      	ldr	r3, [pc, #500]	; (8007320 <_dtoa_r+0x310>)
 800712c:	2200      	movs	r2, #0
 800712e:	4630      	mov	r0, r6
 8007130:	4639      	mov	r1, r7
 8007132:	f7f9 f8d1 	bl	80002d8 <__aeabi_dsub>
 8007136:	a36e      	add	r3, pc, #440	; (adr r3, 80072f0 <_dtoa_r+0x2e0>)
 8007138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713c:	f7f9 fa84 	bl	8000648 <__aeabi_dmul>
 8007140:	a36d      	add	r3, pc, #436	; (adr r3, 80072f8 <_dtoa_r+0x2e8>)
 8007142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007146:	f7f9 f8c9 	bl	80002dc <__adddf3>
 800714a:	4606      	mov	r6, r0
 800714c:	4628      	mov	r0, r5
 800714e:	460f      	mov	r7, r1
 8007150:	f7f9 fa10 	bl	8000574 <__aeabi_i2d>
 8007154:	a36a      	add	r3, pc, #424	; (adr r3, 8007300 <_dtoa_r+0x2f0>)
 8007156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715a:	f7f9 fa75 	bl	8000648 <__aeabi_dmul>
 800715e:	4602      	mov	r2, r0
 8007160:	460b      	mov	r3, r1
 8007162:	4630      	mov	r0, r6
 8007164:	4639      	mov	r1, r7
 8007166:	f7f9 f8b9 	bl	80002dc <__adddf3>
 800716a:	4606      	mov	r6, r0
 800716c:	460f      	mov	r7, r1
 800716e:	f7f9 fd1b 	bl	8000ba8 <__aeabi_d2iz>
 8007172:	2200      	movs	r2, #0
 8007174:	4682      	mov	sl, r0
 8007176:	2300      	movs	r3, #0
 8007178:	4630      	mov	r0, r6
 800717a:	4639      	mov	r1, r7
 800717c:	f7f9 fcd6 	bl	8000b2c <__aeabi_dcmplt>
 8007180:	b148      	cbz	r0, 8007196 <_dtoa_r+0x186>
 8007182:	4650      	mov	r0, sl
 8007184:	f7f9 f9f6 	bl	8000574 <__aeabi_i2d>
 8007188:	4632      	mov	r2, r6
 800718a:	463b      	mov	r3, r7
 800718c:	f7f9 fcc4 	bl	8000b18 <__aeabi_dcmpeq>
 8007190:	b908      	cbnz	r0, 8007196 <_dtoa_r+0x186>
 8007192:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007196:	f1ba 0f16 	cmp.w	sl, #22
 800719a:	d854      	bhi.n	8007246 <_dtoa_r+0x236>
 800719c:	4b61      	ldr	r3, [pc, #388]	; (8007324 <_dtoa_r+0x314>)
 800719e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80071a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80071aa:	f7f9 fcbf 	bl	8000b2c <__aeabi_dcmplt>
 80071ae:	2800      	cmp	r0, #0
 80071b0:	d04b      	beq.n	800724a <_dtoa_r+0x23a>
 80071b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80071b6:	2300      	movs	r3, #0
 80071b8:	930e      	str	r3, [sp, #56]	; 0x38
 80071ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071bc:	1b5d      	subs	r5, r3, r5
 80071be:	1e6b      	subs	r3, r5, #1
 80071c0:	9304      	str	r3, [sp, #16]
 80071c2:	bf43      	ittte	mi
 80071c4:	2300      	movmi	r3, #0
 80071c6:	f1c5 0801 	rsbmi	r8, r5, #1
 80071ca:	9304      	strmi	r3, [sp, #16]
 80071cc:	f04f 0800 	movpl.w	r8, #0
 80071d0:	f1ba 0f00 	cmp.w	sl, #0
 80071d4:	db3b      	blt.n	800724e <_dtoa_r+0x23e>
 80071d6:	9b04      	ldr	r3, [sp, #16]
 80071d8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80071dc:	4453      	add	r3, sl
 80071de:	9304      	str	r3, [sp, #16]
 80071e0:	2300      	movs	r3, #0
 80071e2:	9306      	str	r3, [sp, #24]
 80071e4:	9b05      	ldr	r3, [sp, #20]
 80071e6:	2b09      	cmp	r3, #9
 80071e8:	d869      	bhi.n	80072be <_dtoa_r+0x2ae>
 80071ea:	2b05      	cmp	r3, #5
 80071ec:	bfc4      	itt	gt
 80071ee:	3b04      	subgt	r3, #4
 80071f0:	9305      	strgt	r3, [sp, #20]
 80071f2:	9b05      	ldr	r3, [sp, #20]
 80071f4:	f1a3 0302 	sub.w	r3, r3, #2
 80071f8:	bfcc      	ite	gt
 80071fa:	2500      	movgt	r5, #0
 80071fc:	2501      	movle	r5, #1
 80071fe:	2b03      	cmp	r3, #3
 8007200:	d869      	bhi.n	80072d6 <_dtoa_r+0x2c6>
 8007202:	e8df f003 	tbb	[pc, r3]
 8007206:	4e2c      	.short	0x4e2c
 8007208:	5a4c      	.short	0x5a4c
 800720a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800720e:	441d      	add	r5, r3
 8007210:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007214:	2b20      	cmp	r3, #32
 8007216:	bfc1      	itttt	gt
 8007218:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800721c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007220:	fa09 f303 	lslgt.w	r3, r9, r3
 8007224:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007228:	bfda      	itte	le
 800722a:	f1c3 0320 	rsble	r3, r3, #32
 800722e:	fa06 f003 	lslle.w	r0, r6, r3
 8007232:	4318      	orrgt	r0, r3
 8007234:	f7f9 f98e 	bl	8000554 <__aeabi_ui2d>
 8007238:	2301      	movs	r3, #1
 800723a:	4606      	mov	r6, r0
 800723c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007240:	3d01      	subs	r5, #1
 8007242:	9310      	str	r3, [sp, #64]	; 0x40
 8007244:	e771      	b.n	800712a <_dtoa_r+0x11a>
 8007246:	2301      	movs	r3, #1
 8007248:	e7b6      	b.n	80071b8 <_dtoa_r+0x1a8>
 800724a:	900e      	str	r0, [sp, #56]	; 0x38
 800724c:	e7b5      	b.n	80071ba <_dtoa_r+0x1aa>
 800724e:	f1ca 0300 	rsb	r3, sl, #0
 8007252:	9306      	str	r3, [sp, #24]
 8007254:	2300      	movs	r3, #0
 8007256:	eba8 080a 	sub.w	r8, r8, sl
 800725a:	930d      	str	r3, [sp, #52]	; 0x34
 800725c:	e7c2      	b.n	80071e4 <_dtoa_r+0x1d4>
 800725e:	2300      	movs	r3, #0
 8007260:	9308      	str	r3, [sp, #32]
 8007262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007264:	2b00      	cmp	r3, #0
 8007266:	dc39      	bgt.n	80072dc <_dtoa_r+0x2cc>
 8007268:	f04f 0901 	mov.w	r9, #1
 800726c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007270:	464b      	mov	r3, r9
 8007272:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007276:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007278:	2200      	movs	r2, #0
 800727a:	6042      	str	r2, [r0, #4]
 800727c:	2204      	movs	r2, #4
 800727e:	f102 0614 	add.w	r6, r2, #20
 8007282:	429e      	cmp	r6, r3
 8007284:	6841      	ldr	r1, [r0, #4]
 8007286:	d92f      	bls.n	80072e8 <_dtoa_r+0x2d8>
 8007288:	4620      	mov	r0, r4
 800728a:	f000 fee7 	bl	800805c <_Balloc>
 800728e:	9000      	str	r0, [sp, #0]
 8007290:	2800      	cmp	r0, #0
 8007292:	d14b      	bne.n	800732c <_dtoa_r+0x31c>
 8007294:	4b24      	ldr	r3, [pc, #144]	; (8007328 <_dtoa_r+0x318>)
 8007296:	4602      	mov	r2, r0
 8007298:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800729c:	e6d1      	b.n	8007042 <_dtoa_r+0x32>
 800729e:	2301      	movs	r3, #1
 80072a0:	e7de      	b.n	8007260 <_dtoa_r+0x250>
 80072a2:	2300      	movs	r3, #0
 80072a4:	9308      	str	r3, [sp, #32]
 80072a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072a8:	eb0a 0903 	add.w	r9, sl, r3
 80072ac:	f109 0301 	add.w	r3, r9, #1
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	9301      	str	r3, [sp, #4]
 80072b4:	bfb8      	it	lt
 80072b6:	2301      	movlt	r3, #1
 80072b8:	e7dd      	b.n	8007276 <_dtoa_r+0x266>
 80072ba:	2301      	movs	r3, #1
 80072bc:	e7f2      	b.n	80072a4 <_dtoa_r+0x294>
 80072be:	2501      	movs	r5, #1
 80072c0:	2300      	movs	r3, #0
 80072c2:	9305      	str	r3, [sp, #20]
 80072c4:	9508      	str	r5, [sp, #32]
 80072c6:	f04f 39ff 	mov.w	r9, #4294967295
 80072ca:	2200      	movs	r2, #0
 80072cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80072d0:	2312      	movs	r3, #18
 80072d2:	9209      	str	r2, [sp, #36]	; 0x24
 80072d4:	e7cf      	b.n	8007276 <_dtoa_r+0x266>
 80072d6:	2301      	movs	r3, #1
 80072d8:	9308      	str	r3, [sp, #32]
 80072da:	e7f4      	b.n	80072c6 <_dtoa_r+0x2b6>
 80072dc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80072e0:	f8cd 9004 	str.w	r9, [sp, #4]
 80072e4:	464b      	mov	r3, r9
 80072e6:	e7c6      	b.n	8007276 <_dtoa_r+0x266>
 80072e8:	3101      	adds	r1, #1
 80072ea:	6041      	str	r1, [r0, #4]
 80072ec:	0052      	lsls	r2, r2, #1
 80072ee:	e7c6      	b.n	800727e <_dtoa_r+0x26e>
 80072f0:	636f4361 	.word	0x636f4361
 80072f4:	3fd287a7 	.word	0x3fd287a7
 80072f8:	8b60c8b3 	.word	0x8b60c8b3
 80072fc:	3fc68a28 	.word	0x3fc68a28
 8007300:	509f79fb 	.word	0x509f79fb
 8007304:	3fd34413 	.word	0x3fd34413
 8007308:	08008f99 	.word	0x08008f99
 800730c:	08008fb0 	.word	0x08008fb0
 8007310:	7ff00000 	.word	0x7ff00000
 8007314:	08008f95 	.word	0x08008f95
 8007318:	08008f8c 	.word	0x08008f8c
 800731c:	08008f69 	.word	0x08008f69
 8007320:	3ff80000 	.word	0x3ff80000
 8007324:	08009108 	.word	0x08009108
 8007328:	0800900f 	.word	0x0800900f
 800732c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800732e:	9a00      	ldr	r2, [sp, #0]
 8007330:	601a      	str	r2, [r3, #0]
 8007332:	9b01      	ldr	r3, [sp, #4]
 8007334:	2b0e      	cmp	r3, #14
 8007336:	f200 80ad 	bhi.w	8007494 <_dtoa_r+0x484>
 800733a:	2d00      	cmp	r5, #0
 800733c:	f000 80aa 	beq.w	8007494 <_dtoa_r+0x484>
 8007340:	f1ba 0f00 	cmp.w	sl, #0
 8007344:	dd36      	ble.n	80073b4 <_dtoa_r+0x3a4>
 8007346:	4ac3      	ldr	r2, [pc, #780]	; (8007654 <_dtoa_r+0x644>)
 8007348:	f00a 030f 	and.w	r3, sl, #15
 800734c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007350:	ed93 7b00 	vldr	d7, [r3]
 8007354:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007358:	ea4f 172a 	mov.w	r7, sl, asr #4
 800735c:	eeb0 8a47 	vmov.f32	s16, s14
 8007360:	eef0 8a67 	vmov.f32	s17, s15
 8007364:	d016      	beq.n	8007394 <_dtoa_r+0x384>
 8007366:	4bbc      	ldr	r3, [pc, #752]	; (8007658 <_dtoa_r+0x648>)
 8007368:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800736c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007370:	f7f9 fa94 	bl	800089c <__aeabi_ddiv>
 8007374:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007378:	f007 070f 	and.w	r7, r7, #15
 800737c:	2503      	movs	r5, #3
 800737e:	4eb6      	ldr	r6, [pc, #728]	; (8007658 <_dtoa_r+0x648>)
 8007380:	b957      	cbnz	r7, 8007398 <_dtoa_r+0x388>
 8007382:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007386:	ec53 2b18 	vmov	r2, r3, d8
 800738a:	f7f9 fa87 	bl	800089c <__aeabi_ddiv>
 800738e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007392:	e029      	b.n	80073e8 <_dtoa_r+0x3d8>
 8007394:	2502      	movs	r5, #2
 8007396:	e7f2      	b.n	800737e <_dtoa_r+0x36e>
 8007398:	07f9      	lsls	r1, r7, #31
 800739a:	d508      	bpl.n	80073ae <_dtoa_r+0x39e>
 800739c:	ec51 0b18 	vmov	r0, r1, d8
 80073a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80073a4:	f7f9 f950 	bl	8000648 <__aeabi_dmul>
 80073a8:	ec41 0b18 	vmov	d8, r0, r1
 80073ac:	3501      	adds	r5, #1
 80073ae:	107f      	asrs	r7, r7, #1
 80073b0:	3608      	adds	r6, #8
 80073b2:	e7e5      	b.n	8007380 <_dtoa_r+0x370>
 80073b4:	f000 80a6 	beq.w	8007504 <_dtoa_r+0x4f4>
 80073b8:	f1ca 0600 	rsb	r6, sl, #0
 80073bc:	4ba5      	ldr	r3, [pc, #660]	; (8007654 <_dtoa_r+0x644>)
 80073be:	4fa6      	ldr	r7, [pc, #664]	; (8007658 <_dtoa_r+0x648>)
 80073c0:	f006 020f 	and.w	r2, r6, #15
 80073c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80073d0:	f7f9 f93a 	bl	8000648 <__aeabi_dmul>
 80073d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073d8:	1136      	asrs	r6, r6, #4
 80073da:	2300      	movs	r3, #0
 80073dc:	2502      	movs	r5, #2
 80073de:	2e00      	cmp	r6, #0
 80073e0:	f040 8085 	bne.w	80074ee <_dtoa_r+0x4de>
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d1d2      	bne.n	800738e <_dtoa_r+0x37e>
 80073e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f000 808c 	beq.w	8007508 <_dtoa_r+0x4f8>
 80073f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80073f4:	4b99      	ldr	r3, [pc, #612]	; (800765c <_dtoa_r+0x64c>)
 80073f6:	2200      	movs	r2, #0
 80073f8:	4630      	mov	r0, r6
 80073fa:	4639      	mov	r1, r7
 80073fc:	f7f9 fb96 	bl	8000b2c <__aeabi_dcmplt>
 8007400:	2800      	cmp	r0, #0
 8007402:	f000 8081 	beq.w	8007508 <_dtoa_r+0x4f8>
 8007406:	9b01      	ldr	r3, [sp, #4]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d07d      	beq.n	8007508 <_dtoa_r+0x4f8>
 800740c:	f1b9 0f00 	cmp.w	r9, #0
 8007410:	dd3c      	ble.n	800748c <_dtoa_r+0x47c>
 8007412:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007416:	9307      	str	r3, [sp, #28]
 8007418:	2200      	movs	r2, #0
 800741a:	4b91      	ldr	r3, [pc, #580]	; (8007660 <_dtoa_r+0x650>)
 800741c:	4630      	mov	r0, r6
 800741e:	4639      	mov	r1, r7
 8007420:	f7f9 f912 	bl	8000648 <__aeabi_dmul>
 8007424:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007428:	3501      	adds	r5, #1
 800742a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800742e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007432:	4628      	mov	r0, r5
 8007434:	f7f9 f89e 	bl	8000574 <__aeabi_i2d>
 8007438:	4632      	mov	r2, r6
 800743a:	463b      	mov	r3, r7
 800743c:	f7f9 f904 	bl	8000648 <__aeabi_dmul>
 8007440:	4b88      	ldr	r3, [pc, #544]	; (8007664 <_dtoa_r+0x654>)
 8007442:	2200      	movs	r2, #0
 8007444:	f7f8 ff4a 	bl	80002dc <__adddf3>
 8007448:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800744c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007450:	9303      	str	r3, [sp, #12]
 8007452:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007454:	2b00      	cmp	r3, #0
 8007456:	d15c      	bne.n	8007512 <_dtoa_r+0x502>
 8007458:	4b83      	ldr	r3, [pc, #524]	; (8007668 <_dtoa_r+0x658>)
 800745a:	2200      	movs	r2, #0
 800745c:	4630      	mov	r0, r6
 800745e:	4639      	mov	r1, r7
 8007460:	f7f8 ff3a 	bl	80002d8 <__aeabi_dsub>
 8007464:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007468:	4606      	mov	r6, r0
 800746a:	460f      	mov	r7, r1
 800746c:	f7f9 fb7c 	bl	8000b68 <__aeabi_dcmpgt>
 8007470:	2800      	cmp	r0, #0
 8007472:	f040 8296 	bne.w	80079a2 <_dtoa_r+0x992>
 8007476:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800747a:	4630      	mov	r0, r6
 800747c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007480:	4639      	mov	r1, r7
 8007482:	f7f9 fb53 	bl	8000b2c <__aeabi_dcmplt>
 8007486:	2800      	cmp	r0, #0
 8007488:	f040 8288 	bne.w	800799c <_dtoa_r+0x98c>
 800748c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007490:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007494:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007496:	2b00      	cmp	r3, #0
 8007498:	f2c0 8158 	blt.w	800774c <_dtoa_r+0x73c>
 800749c:	f1ba 0f0e 	cmp.w	sl, #14
 80074a0:	f300 8154 	bgt.w	800774c <_dtoa_r+0x73c>
 80074a4:	4b6b      	ldr	r3, [pc, #428]	; (8007654 <_dtoa_r+0x644>)
 80074a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80074aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80074ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f280 80e3 	bge.w	800767c <_dtoa_r+0x66c>
 80074b6:	9b01      	ldr	r3, [sp, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f300 80df 	bgt.w	800767c <_dtoa_r+0x66c>
 80074be:	f040 826d 	bne.w	800799c <_dtoa_r+0x98c>
 80074c2:	4b69      	ldr	r3, [pc, #420]	; (8007668 <_dtoa_r+0x658>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	4640      	mov	r0, r8
 80074c8:	4649      	mov	r1, r9
 80074ca:	f7f9 f8bd 	bl	8000648 <__aeabi_dmul>
 80074ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074d2:	f7f9 fb3f 	bl	8000b54 <__aeabi_dcmpge>
 80074d6:	9e01      	ldr	r6, [sp, #4]
 80074d8:	4637      	mov	r7, r6
 80074da:	2800      	cmp	r0, #0
 80074dc:	f040 8243 	bne.w	8007966 <_dtoa_r+0x956>
 80074e0:	9d00      	ldr	r5, [sp, #0]
 80074e2:	2331      	movs	r3, #49	; 0x31
 80074e4:	f805 3b01 	strb.w	r3, [r5], #1
 80074e8:	f10a 0a01 	add.w	sl, sl, #1
 80074ec:	e23f      	b.n	800796e <_dtoa_r+0x95e>
 80074ee:	07f2      	lsls	r2, r6, #31
 80074f0:	d505      	bpl.n	80074fe <_dtoa_r+0x4ee>
 80074f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074f6:	f7f9 f8a7 	bl	8000648 <__aeabi_dmul>
 80074fa:	3501      	adds	r5, #1
 80074fc:	2301      	movs	r3, #1
 80074fe:	1076      	asrs	r6, r6, #1
 8007500:	3708      	adds	r7, #8
 8007502:	e76c      	b.n	80073de <_dtoa_r+0x3ce>
 8007504:	2502      	movs	r5, #2
 8007506:	e76f      	b.n	80073e8 <_dtoa_r+0x3d8>
 8007508:	9b01      	ldr	r3, [sp, #4]
 800750a:	f8cd a01c 	str.w	sl, [sp, #28]
 800750e:	930c      	str	r3, [sp, #48]	; 0x30
 8007510:	e78d      	b.n	800742e <_dtoa_r+0x41e>
 8007512:	9900      	ldr	r1, [sp, #0]
 8007514:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007516:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007518:	4b4e      	ldr	r3, [pc, #312]	; (8007654 <_dtoa_r+0x644>)
 800751a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800751e:	4401      	add	r1, r0
 8007520:	9102      	str	r1, [sp, #8]
 8007522:	9908      	ldr	r1, [sp, #32]
 8007524:	eeb0 8a47 	vmov.f32	s16, s14
 8007528:	eef0 8a67 	vmov.f32	s17, s15
 800752c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007530:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007534:	2900      	cmp	r1, #0
 8007536:	d045      	beq.n	80075c4 <_dtoa_r+0x5b4>
 8007538:	494c      	ldr	r1, [pc, #304]	; (800766c <_dtoa_r+0x65c>)
 800753a:	2000      	movs	r0, #0
 800753c:	f7f9 f9ae 	bl	800089c <__aeabi_ddiv>
 8007540:	ec53 2b18 	vmov	r2, r3, d8
 8007544:	f7f8 fec8 	bl	80002d8 <__aeabi_dsub>
 8007548:	9d00      	ldr	r5, [sp, #0]
 800754a:	ec41 0b18 	vmov	d8, r0, r1
 800754e:	4639      	mov	r1, r7
 8007550:	4630      	mov	r0, r6
 8007552:	f7f9 fb29 	bl	8000ba8 <__aeabi_d2iz>
 8007556:	900c      	str	r0, [sp, #48]	; 0x30
 8007558:	f7f9 f80c 	bl	8000574 <__aeabi_i2d>
 800755c:	4602      	mov	r2, r0
 800755e:	460b      	mov	r3, r1
 8007560:	4630      	mov	r0, r6
 8007562:	4639      	mov	r1, r7
 8007564:	f7f8 feb8 	bl	80002d8 <__aeabi_dsub>
 8007568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800756a:	3330      	adds	r3, #48	; 0x30
 800756c:	f805 3b01 	strb.w	r3, [r5], #1
 8007570:	ec53 2b18 	vmov	r2, r3, d8
 8007574:	4606      	mov	r6, r0
 8007576:	460f      	mov	r7, r1
 8007578:	f7f9 fad8 	bl	8000b2c <__aeabi_dcmplt>
 800757c:	2800      	cmp	r0, #0
 800757e:	d165      	bne.n	800764c <_dtoa_r+0x63c>
 8007580:	4632      	mov	r2, r6
 8007582:	463b      	mov	r3, r7
 8007584:	4935      	ldr	r1, [pc, #212]	; (800765c <_dtoa_r+0x64c>)
 8007586:	2000      	movs	r0, #0
 8007588:	f7f8 fea6 	bl	80002d8 <__aeabi_dsub>
 800758c:	ec53 2b18 	vmov	r2, r3, d8
 8007590:	f7f9 facc 	bl	8000b2c <__aeabi_dcmplt>
 8007594:	2800      	cmp	r0, #0
 8007596:	f040 80b9 	bne.w	800770c <_dtoa_r+0x6fc>
 800759a:	9b02      	ldr	r3, [sp, #8]
 800759c:	429d      	cmp	r5, r3
 800759e:	f43f af75 	beq.w	800748c <_dtoa_r+0x47c>
 80075a2:	4b2f      	ldr	r3, [pc, #188]	; (8007660 <_dtoa_r+0x650>)
 80075a4:	ec51 0b18 	vmov	r0, r1, d8
 80075a8:	2200      	movs	r2, #0
 80075aa:	f7f9 f84d 	bl	8000648 <__aeabi_dmul>
 80075ae:	4b2c      	ldr	r3, [pc, #176]	; (8007660 <_dtoa_r+0x650>)
 80075b0:	ec41 0b18 	vmov	d8, r0, r1
 80075b4:	2200      	movs	r2, #0
 80075b6:	4630      	mov	r0, r6
 80075b8:	4639      	mov	r1, r7
 80075ba:	f7f9 f845 	bl	8000648 <__aeabi_dmul>
 80075be:	4606      	mov	r6, r0
 80075c0:	460f      	mov	r7, r1
 80075c2:	e7c4      	b.n	800754e <_dtoa_r+0x53e>
 80075c4:	ec51 0b17 	vmov	r0, r1, d7
 80075c8:	f7f9 f83e 	bl	8000648 <__aeabi_dmul>
 80075cc:	9b02      	ldr	r3, [sp, #8]
 80075ce:	9d00      	ldr	r5, [sp, #0]
 80075d0:	930c      	str	r3, [sp, #48]	; 0x30
 80075d2:	ec41 0b18 	vmov	d8, r0, r1
 80075d6:	4639      	mov	r1, r7
 80075d8:	4630      	mov	r0, r6
 80075da:	f7f9 fae5 	bl	8000ba8 <__aeabi_d2iz>
 80075de:	9011      	str	r0, [sp, #68]	; 0x44
 80075e0:	f7f8 ffc8 	bl	8000574 <__aeabi_i2d>
 80075e4:	4602      	mov	r2, r0
 80075e6:	460b      	mov	r3, r1
 80075e8:	4630      	mov	r0, r6
 80075ea:	4639      	mov	r1, r7
 80075ec:	f7f8 fe74 	bl	80002d8 <__aeabi_dsub>
 80075f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075f2:	3330      	adds	r3, #48	; 0x30
 80075f4:	f805 3b01 	strb.w	r3, [r5], #1
 80075f8:	9b02      	ldr	r3, [sp, #8]
 80075fa:	429d      	cmp	r5, r3
 80075fc:	4606      	mov	r6, r0
 80075fe:	460f      	mov	r7, r1
 8007600:	f04f 0200 	mov.w	r2, #0
 8007604:	d134      	bne.n	8007670 <_dtoa_r+0x660>
 8007606:	4b19      	ldr	r3, [pc, #100]	; (800766c <_dtoa_r+0x65c>)
 8007608:	ec51 0b18 	vmov	r0, r1, d8
 800760c:	f7f8 fe66 	bl	80002dc <__adddf3>
 8007610:	4602      	mov	r2, r0
 8007612:	460b      	mov	r3, r1
 8007614:	4630      	mov	r0, r6
 8007616:	4639      	mov	r1, r7
 8007618:	f7f9 faa6 	bl	8000b68 <__aeabi_dcmpgt>
 800761c:	2800      	cmp	r0, #0
 800761e:	d175      	bne.n	800770c <_dtoa_r+0x6fc>
 8007620:	ec53 2b18 	vmov	r2, r3, d8
 8007624:	4911      	ldr	r1, [pc, #68]	; (800766c <_dtoa_r+0x65c>)
 8007626:	2000      	movs	r0, #0
 8007628:	f7f8 fe56 	bl	80002d8 <__aeabi_dsub>
 800762c:	4602      	mov	r2, r0
 800762e:	460b      	mov	r3, r1
 8007630:	4630      	mov	r0, r6
 8007632:	4639      	mov	r1, r7
 8007634:	f7f9 fa7a 	bl	8000b2c <__aeabi_dcmplt>
 8007638:	2800      	cmp	r0, #0
 800763a:	f43f af27 	beq.w	800748c <_dtoa_r+0x47c>
 800763e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007640:	1e6b      	subs	r3, r5, #1
 8007642:	930c      	str	r3, [sp, #48]	; 0x30
 8007644:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007648:	2b30      	cmp	r3, #48	; 0x30
 800764a:	d0f8      	beq.n	800763e <_dtoa_r+0x62e>
 800764c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007650:	e04a      	b.n	80076e8 <_dtoa_r+0x6d8>
 8007652:	bf00      	nop
 8007654:	08009108 	.word	0x08009108
 8007658:	080090e0 	.word	0x080090e0
 800765c:	3ff00000 	.word	0x3ff00000
 8007660:	40240000 	.word	0x40240000
 8007664:	401c0000 	.word	0x401c0000
 8007668:	40140000 	.word	0x40140000
 800766c:	3fe00000 	.word	0x3fe00000
 8007670:	4baf      	ldr	r3, [pc, #700]	; (8007930 <_dtoa_r+0x920>)
 8007672:	f7f8 ffe9 	bl	8000648 <__aeabi_dmul>
 8007676:	4606      	mov	r6, r0
 8007678:	460f      	mov	r7, r1
 800767a:	e7ac      	b.n	80075d6 <_dtoa_r+0x5c6>
 800767c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007680:	9d00      	ldr	r5, [sp, #0]
 8007682:	4642      	mov	r2, r8
 8007684:	464b      	mov	r3, r9
 8007686:	4630      	mov	r0, r6
 8007688:	4639      	mov	r1, r7
 800768a:	f7f9 f907 	bl	800089c <__aeabi_ddiv>
 800768e:	f7f9 fa8b 	bl	8000ba8 <__aeabi_d2iz>
 8007692:	9002      	str	r0, [sp, #8]
 8007694:	f7f8 ff6e 	bl	8000574 <__aeabi_i2d>
 8007698:	4642      	mov	r2, r8
 800769a:	464b      	mov	r3, r9
 800769c:	f7f8 ffd4 	bl	8000648 <__aeabi_dmul>
 80076a0:	4602      	mov	r2, r0
 80076a2:	460b      	mov	r3, r1
 80076a4:	4630      	mov	r0, r6
 80076a6:	4639      	mov	r1, r7
 80076a8:	f7f8 fe16 	bl	80002d8 <__aeabi_dsub>
 80076ac:	9e02      	ldr	r6, [sp, #8]
 80076ae:	9f01      	ldr	r7, [sp, #4]
 80076b0:	3630      	adds	r6, #48	; 0x30
 80076b2:	f805 6b01 	strb.w	r6, [r5], #1
 80076b6:	9e00      	ldr	r6, [sp, #0]
 80076b8:	1bae      	subs	r6, r5, r6
 80076ba:	42b7      	cmp	r7, r6
 80076bc:	4602      	mov	r2, r0
 80076be:	460b      	mov	r3, r1
 80076c0:	d137      	bne.n	8007732 <_dtoa_r+0x722>
 80076c2:	f7f8 fe0b 	bl	80002dc <__adddf3>
 80076c6:	4642      	mov	r2, r8
 80076c8:	464b      	mov	r3, r9
 80076ca:	4606      	mov	r6, r0
 80076cc:	460f      	mov	r7, r1
 80076ce:	f7f9 fa4b 	bl	8000b68 <__aeabi_dcmpgt>
 80076d2:	b9c8      	cbnz	r0, 8007708 <_dtoa_r+0x6f8>
 80076d4:	4642      	mov	r2, r8
 80076d6:	464b      	mov	r3, r9
 80076d8:	4630      	mov	r0, r6
 80076da:	4639      	mov	r1, r7
 80076dc:	f7f9 fa1c 	bl	8000b18 <__aeabi_dcmpeq>
 80076e0:	b110      	cbz	r0, 80076e8 <_dtoa_r+0x6d8>
 80076e2:	9b02      	ldr	r3, [sp, #8]
 80076e4:	07d9      	lsls	r1, r3, #31
 80076e6:	d40f      	bmi.n	8007708 <_dtoa_r+0x6f8>
 80076e8:	4620      	mov	r0, r4
 80076ea:	4659      	mov	r1, fp
 80076ec:	f000 fcf6 	bl	80080dc <_Bfree>
 80076f0:	2300      	movs	r3, #0
 80076f2:	702b      	strb	r3, [r5, #0]
 80076f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076f6:	f10a 0001 	add.w	r0, sl, #1
 80076fa:	6018      	str	r0, [r3, #0]
 80076fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f43f acd8 	beq.w	80070b4 <_dtoa_r+0xa4>
 8007704:	601d      	str	r5, [r3, #0]
 8007706:	e4d5      	b.n	80070b4 <_dtoa_r+0xa4>
 8007708:	f8cd a01c 	str.w	sl, [sp, #28]
 800770c:	462b      	mov	r3, r5
 800770e:	461d      	mov	r5, r3
 8007710:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007714:	2a39      	cmp	r2, #57	; 0x39
 8007716:	d108      	bne.n	800772a <_dtoa_r+0x71a>
 8007718:	9a00      	ldr	r2, [sp, #0]
 800771a:	429a      	cmp	r2, r3
 800771c:	d1f7      	bne.n	800770e <_dtoa_r+0x6fe>
 800771e:	9a07      	ldr	r2, [sp, #28]
 8007720:	9900      	ldr	r1, [sp, #0]
 8007722:	3201      	adds	r2, #1
 8007724:	9207      	str	r2, [sp, #28]
 8007726:	2230      	movs	r2, #48	; 0x30
 8007728:	700a      	strb	r2, [r1, #0]
 800772a:	781a      	ldrb	r2, [r3, #0]
 800772c:	3201      	adds	r2, #1
 800772e:	701a      	strb	r2, [r3, #0]
 8007730:	e78c      	b.n	800764c <_dtoa_r+0x63c>
 8007732:	4b7f      	ldr	r3, [pc, #508]	; (8007930 <_dtoa_r+0x920>)
 8007734:	2200      	movs	r2, #0
 8007736:	f7f8 ff87 	bl	8000648 <__aeabi_dmul>
 800773a:	2200      	movs	r2, #0
 800773c:	2300      	movs	r3, #0
 800773e:	4606      	mov	r6, r0
 8007740:	460f      	mov	r7, r1
 8007742:	f7f9 f9e9 	bl	8000b18 <__aeabi_dcmpeq>
 8007746:	2800      	cmp	r0, #0
 8007748:	d09b      	beq.n	8007682 <_dtoa_r+0x672>
 800774a:	e7cd      	b.n	80076e8 <_dtoa_r+0x6d8>
 800774c:	9a08      	ldr	r2, [sp, #32]
 800774e:	2a00      	cmp	r2, #0
 8007750:	f000 80c4 	beq.w	80078dc <_dtoa_r+0x8cc>
 8007754:	9a05      	ldr	r2, [sp, #20]
 8007756:	2a01      	cmp	r2, #1
 8007758:	f300 80a8 	bgt.w	80078ac <_dtoa_r+0x89c>
 800775c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800775e:	2a00      	cmp	r2, #0
 8007760:	f000 80a0 	beq.w	80078a4 <_dtoa_r+0x894>
 8007764:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007768:	9e06      	ldr	r6, [sp, #24]
 800776a:	4645      	mov	r5, r8
 800776c:	9a04      	ldr	r2, [sp, #16]
 800776e:	2101      	movs	r1, #1
 8007770:	441a      	add	r2, r3
 8007772:	4620      	mov	r0, r4
 8007774:	4498      	add	r8, r3
 8007776:	9204      	str	r2, [sp, #16]
 8007778:	f000 fd6c 	bl	8008254 <__i2b>
 800777c:	4607      	mov	r7, r0
 800777e:	2d00      	cmp	r5, #0
 8007780:	dd0b      	ble.n	800779a <_dtoa_r+0x78a>
 8007782:	9b04      	ldr	r3, [sp, #16]
 8007784:	2b00      	cmp	r3, #0
 8007786:	dd08      	ble.n	800779a <_dtoa_r+0x78a>
 8007788:	42ab      	cmp	r3, r5
 800778a:	9a04      	ldr	r2, [sp, #16]
 800778c:	bfa8      	it	ge
 800778e:	462b      	movge	r3, r5
 8007790:	eba8 0803 	sub.w	r8, r8, r3
 8007794:	1aed      	subs	r5, r5, r3
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	9304      	str	r3, [sp, #16]
 800779a:	9b06      	ldr	r3, [sp, #24]
 800779c:	b1fb      	cbz	r3, 80077de <_dtoa_r+0x7ce>
 800779e:	9b08      	ldr	r3, [sp, #32]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f000 809f 	beq.w	80078e4 <_dtoa_r+0x8d4>
 80077a6:	2e00      	cmp	r6, #0
 80077a8:	dd11      	ble.n	80077ce <_dtoa_r+0x7be>
 80077aa:	4639      	mov	r1, r7
 80077ac:	4632      	mov	r2, r6
 80077ae:	4620      	mov	r0, r4
 80077b0:	f000 fe0c 	bl	80083cc <__pow5mult>
 80077b4:	465a      	mov	r2, fp
 80077b6:	4601      	mov	r1, r0
 80077b8:	4607      	mov	r7, r0
 80077ba:	4620      	mov	r0, r4
 80077bc:	f000 fd60 	bl	8008280 <__multiply>
 80077c0:	4659      	mov	r1, fp
 80077c2:	9007      	str	r0, [sp, #28]
 80077c4:	4620      	mov	r0, r4
 80077c6:	f000 fc89 	bl	80080dc <_Bfree>
 80077ca:	9b07      	ldr	r3, [sp, #28]
 80077cc:	469b      	mov	fp, r3
 80077ce:	9b06      	ldr	r3, [sp, #24]
 80077d0:	1b9a      	subs	r2, r3, r6
 80077d2:	d004      	beq.n	80077de <_dtoa_r+0x7ce>
 80077d4:	4659      	mov	r1, fp
 80077d6:	4620      	mov	r0, r4
 80077d8:	f000 fdf8 	bl	80083cc <__pow5mult>
 80077dc:	4683      	mov	fp, r0
 80077de:	2101      	movs	r1, #1
 80077e0:	4620      	mov	r0, r4
 80077e2:	f000 fd37 	bl	8008254 <__i2b>
 80077e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	4606      	mov	r6, r0
 80077ec:	dd7c      	ble.n	80078e8 <_dtoa_r+0x8d8>
 80077ee:	461a      	mov	r2, r3
 80077f0:	4601      	mov	r1, r0
 80077f2:	4620      	mov	r0, r4
 80077f4:	f000 fdea 	bl	80083cc <__pow5mult>
 80077f8:	9b05      	ldr	r3, [sp, #20]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	4606      	mov	r6, r0
 80077fe:	dd76      	ble.n	80078ee <_dtoa_r+0x8de>
 8007800:	2300      	movs	r3, #0
 8007802:	9306      	str	r3, [sp, #24]
 8007804:	6933      	ldr	r3, [r6, #16]
 8007806:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800780a:	6918      	ldr	r0, [r3, #16]
 800780c:	f000 fcd2 	bl	80081b4 <__hi0bits>
 8007810:	f1c0 0020 	rsb	r0, r0, #32
 8007814:	9b04      	ldr	r3, [sp, #16]
 8007816:	4418      	add	r0, r3
 8007818:	f010 001f 	ands.w	r0, r0, #31
 800781c:	f000 8086 	beq.w	800792c <_dtoa_r+0x91c>
 8007820:	f1c0 0320 	rsb	r3, r0, #32
 8007824:	2b04      	cmp	r3, #4
 8007826:	dd7f      	ble.n	8007928 <_dtoa_r+0x918>
 8007828:	f1c0 001c 	rsb	r0, r0, #28
 800782c:	9b04      	ldr	r3, [sp, #16]
 800782e:	4403      	add	r3, r0
 8007830:	4480      	add	r8, r0
 8007832:	4405      	add	r5, r0
 8007834:	9304      	str	r3, [sp, #16]
 8007836:	f1b8 0f00 	cmp.w	r8, #0
 800783a:	dd05      	ble.n	8007848 <_dtoa_r+0x838>
 800783c:	4659      	mov	r1, fp
 800783e:	4642      	mov	r2, r8
 8007840:	4620      	mov	r0, r4
 8007842:	f000 fe1d 	bl	8008480 <__lshift>
 8007846:	4683      	mov	fp, r0
 8007848:	9b04      	ldr	r3, [sp, #16]
 800784a:	2b00      	cmp	r3, #0
 800784c:	dd05      	ble.n	800785a <_dtoa_r+0x84a>
 800784e:	4631      	mov	r1, r6
 8007850:	461a      	mov	r2, r3
 8007852:	4620      	mov	r0, r4
 8007854:	f000 fe14 	bl	8008480 <__lshift>
 8007858:	4606      	mov	r6, r0
 800785a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800785c:	2b00      	cmp	r3, #0
 800785e:	d069      	beq.n	8007934 <_dtoa_r+0x924>
 8007860:	4631      	mov	r1, r6
 8007862:	4658      	mov	r0, fp
 8007864:	f000 fe78 	bl	8008558 <__mcmp>
 8007868:	2800      	cmp	r0, #0
 800786a:	da63      	bge.n	8007934 <_dtoa_r+0x924>
 800786c:	2300      	movs	r3, #0
 800786e:	4659      	mov	r1, fp
 8007870:	220a      	movs	r2, #10
 8007872:	4620      	mov	r0, r4
 8007874:	f000 fc54 	bl	8008120 <__multadd>
 8007878:	9b08      	ldr	r3, [sp, #32]
 800787a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800787e:	4683      	mov	fp, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	f000 818f 	beq.w	8007ba4 <_dtoa_r+0xb94>
 8007886:	4639      	mov	r1, r7
 8007888:	2300      	movs	r3, #0
 800788a:	220a      	movs	r2, #10
 800788c:	4620      	mov	r0, r4
 800788e:	f000 fc47 	bl	8008120 <__multadd>
 8007892:	f1b9 0f00 	cmp.w	r9, #0
 8007896:	4607      	mov	r7, r0
 8007898:	f300 808e 	bgt.w	80079b8 <_dtoa_r+0x9a8>
 800789c:	9b05      	ldr	r3, [sp, #20]
 800789e:	2b02      	cmp	r3, #2
 80078a0:	dc50      	bgt.n	8007944 <_dtoa_r+0x934>
 80078a2:	e089      	b.n	80079b8 <_dtoa_r+0x9a8>
 80078a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80078aa:	e75d      	b.n	8007768 <_dtoa_r+0x758>
 80078ac:	9b01      	ldr	r3, [sp, #4]
 80078ae:	1e5e      	subs	r6, r3, #1
 80078b0:	9b06      	ldr	r3, [sp, #24]
 80078b2:	42b3      	cmp	r3, r6
 80078b4:	bfbf      	itttt	lt
 80078b6:	9b06      	ldrlt	r3, [sp, #24]
 80078b8:	9606      	strlt	r6, [sp, #24]
 80078ba:	1af2      	sublt	r2, r6, r3
 80078bc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80078be:	bfb6      	itet	lt
 80078c0:	189b      	addlt	r3, r3, r2
 80078c2:	1b9e      	subge	r6, r3, r6
 80078c4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80078c6:	9b01      	ldr	r3, [sp, #4]
 80078c8:	bfb8      	it	lt
 80078ca:	2600      	movlt	r6, #0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	bfb5      	itete	lt
 80078d0:	eba8 0503 	sublt.w	r5, r8, r3
 80078d4:	9b01      	ldrge	r3, [sp, #4]
 80078d6:	2300      	movlt	r3, #0
 80078d8:	4645      	movge	r5, r8
 80078da:	e747      	b.n	800776c <_dtoa_r+0x75c>
 80078dc:	9e06      	ldr	r6, [sp, #24]
 80078de:	9f08      	ldr	r7, [sp, #32]
 80078e0:	4645      	mov	r5, r8
 80078e2:	e74c      	b.n	800777e <_dtoa_r+0x76e>
 80078e4:	9a06      	ldr	r2, [sp, #24]
 80078e6:	e775      	b.n	80077d4 <_dtoa_r+0x7c4>
 80078e8:	9b05      	ldr	r3, [sp, #20]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	dc18      	bgt.n	8007920 <_dtoa_r+0x910>
 80078ee:	9b02      	ldr	r3, [sp, #8]
 80078f0:	b9b3      	cbnz	r3, 8007920 <_dtoa_r+0x910>
 80078f2:	9b03      	ldr	r3, [sp, #12]
 80078f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078f8:	b9a3      	cbnz	r3, 8007924 <_dtoa_r+0x914>
 80078fa:	9b03      	ldr	r3, [sp, #12]
 80078fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007900:	0d1b      	lsrs	r3, r3, #20
 8007902:	051b      	lsls	r3, r3, #20
 8007904:	b12b      	cbz	r3, 8007912 <_dtoa_r+0x902>
 8007906:	9b04      	ldr	r3, [sp, #16]
 8007908:	3301      	adds	r3, #1
 800790a:	9304      	str	r3, [sp, #16]
 800790c:	f108 0801 	add.w	r8, r8, #1
 8007910:	2301      	movs	r3, #1
 8007912:	9306      	str	r3, [sp, #24]
 8007914:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007916:	2b00      	cmp	r3, #0
 8007918:	f47f af74 	bne.w	8007804 <_dtoa_r+0x7f4>
 800791c:	2001      	movs	r0, #1
 800791e:	e779      	b.n	8007814 <_dtoa_r+0x804>
 8007920:	2300      	movs	r3, #0
 8007922:	e7f6      	b.n	8007912 <_dtoa_r+0x902>
 8007924:	9b02      	ldr	r3, [sp, #8]
 8007926:	e7f4      	b.n	8007912 <_dtoa_r+0x902>
 8007928:	d085      	beq.n	8007836 <_dtoa_r+0x826>
 800792a:	4618      	mov	r0, r3
 800792c:	301c      	adds	r0, #28
 800792e:	e77d      	b.n	800782c <_dtoa_r+0x81c>
 8007930:	40240000 	.word	0x40240000
 8007934:	9b01      	ldr	r3, [sp, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	dc38      	bgt.n	80079ac <_dtoa_r+0x99c>
 800793a:	9b05      	ldr	r3, [sp, #20]
 800793c:	2b02      	cmp	r3, #2
 800793e:	dd35      	ble.n	80079ac <_dtoa_r+0x99c>
 8007940:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007944:	f1b9 0f00 	cmp.w	r9, #0
 8007948:	d10d      	bne.n	8007966 <_dtoa_r+0x956>
 800794a:	4631      	mov	r1, r6
 800794c:	464b      	mov	r3, r9
 800794e:	2205      	movs	r2, #5
 8007950:	4620      	mov	r0, r4
 8007952:	f000 fbe5 	bl	8008120 <__multadd>
 8007956:	4601      	mov	r1, r0
 8007958:	4606      	mov	r6, r0
 800795a:	4658      	mov	r0, fp
 800795c:	f000 fdfc 	bl	8008558 <__mcmp>
 8007960:	2800      	cmp	r0, #0
 8007962:	f73f adbd 	bgt.w	80074e0 <_dtoa_r+0x4d0>
 8007966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007968:	9d00      	ldr	r5, [sp, #0]
 800796a:	ea6f 0a03 	mvn.w	sl, r3
 800796e:	f04f 0800 	mov.w	r8, #0
 8007972:	4631      	mov	r1, r6
 8007974:	4620      	mov	r0, r4
 8007976:	f000 fbb1 	bl	80080dc <_Bfree>
 800797a:	2f00      	cmp	r7, #0
 800797c:	f43f aeb4 	beq.w	80076e8 <_dtoa_r+0x6d8>
 8007980:	f1b8 0f00 	cmp.w	r8, #0
 8007984:	d005      	beq.n	8007992 <_dtoa_r+0x982>
 8007986:	45b8      	cmp	r8, r7
 8007988:	d003      	beq.n	8007992 <_dtoa_r+0x982>
 800798a:	4641      	mov	r1, r8
 800798c:	4620      	mov	r0, r4
 800798e:	f000 fba5 	bl	80080dc <_Bfree>
 8007992:	4639      	mov	r1, r7
 8007994:	4620      	mov	r0, r4
 8007996:	f000 fba1 	bl	80080dc <_Bfree>
 800799a:	e6a5      	b.n	80076e8 <_dtoa_r+0x6d8>
 800799c:	2600      	movs	r6, #0
 800799e:	4637      	mov	r7, r6
 80079a0:	e7e1      	b.n	8007966 <_dtoa_r+0x956>
 80079a2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80079a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80079a8:	4637      	mov	r7, r6
 80079aa:	e599      	b.n	80074e0 <_dtoa_r+0x4d0>
 80079ac:	9b08      	ldr	r3, [sp, #32]
 80079ae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f000 80fd 	beq.w	8007bb2 <_dtoa_r+0xba2>
 80079b8:	2d00      	cmp	r5, #0
 80079ba:	dd05      	ble.n	80079c8 <_dtoa_r+0x9b8>
 80079bc:	4639      	mov	r1, r7
 80079be:	462a      	mov	r2, r5
 80079c0:	4620      	mov	r0, r4
 80079c2:	f000 fd5d 	bl	8008480 <__lshift>
 80079c6:	4607      	mov	r7, r0
 80079c8:	9b06      	ldr	r3, [sp, #24]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d05c      	beq.n	8007a88 <_dtoa_r+0xa78>
 80079ce:	6879      	ldr	r1, [r7, #4]
 80079d0:	4620      	mov	r0, r4
 80079d2:	f000 fb43 	bl	800805c <_Balloc>
 80079d6:	4605      	mov	r5, r0
 80079d8:	b928      	cbnz	r0, 80079e6 <_dtoa_r+0x9d6>
 80079da:	4b80      	ldr	r3, [pc, #512]	; (8007bdc <_dtoa_r+0xbcc>)
 80079dc:	4602      	mov	r2, r0
 80079de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80079e2:	f7ff bb2e 	b.w	8007042 <_dtoa_r+0x32>
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	3202      	adds	r2, #2
 80079ea:	0092      	lsls	r2, r2, #2
 80079ec:	f107 010c 	add.w	r1, r7, #12
 80079f0:	300c      	adds	r0, #12
 80079f2:	f000 fb25 	bl	8008040 <memcpy>
 80079f6:	2201      	movs	r2, #1
 80079f8:	4629      	mov	r1, r5
 80079fa:	4620      	mov	r0, r4
 80079fc:	f000 fd40 	bl	8008480 <__lshift>
 8007a00:	9b00      	ldr	r3, [sp, #0]
 8007a02:	3301      	adds	r3, #1
 8007a04:	9301      	str	r3, [sp, #4]
 8007a06:	9b00      	ldr	r3, [sp, #0]
 8007a08:	444b      	add	r3, r9
 8007a0a:	9307      	str	r3, [sp, #28]
 8007a0c:	9b02      	ldr	r3, [sp, #8]
 8007a0e:	f003 0301 	and.w	r3, r3, #1
 8007a12:	46b8      	mov	r8, r7
 8007a14:	9306      	str	r3, [sp, #24]
 8007a16:	4607      	mov	r7, r0
 8007a18:	9b01      	ldr	r3, [sp, #4]
 8007a1a:	4631      	mov	r1, r6
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	4658      	mov	r0, fp
 8007a20:	9302      	str	r3, [sp, #8]
 8007a22:	f7ff fa69 	bl	8006ef8 <quorem>
 8007a26:	4603      	mov	r3, r0
 8007a28:	3330      	adds	r3, #48	; 0x30
 8007a2a:	9004      	str	r0, [sp, #16]
 8007a2c:	4641      	mov	r1, r8
 8007a2e:	4658      	mov	r0, fp
 8007a30:	9308      	str	r3, [sp, #32]
 8007a32:	f000 fd91 	bl	8008558 <__mcmp>
 8007a36:	463a      	mov	r2, r7
 8007a38:	4681      	mov	r9, r0
 8007a3a:	4631      	mov	r1, r6
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	f000 fda7 	bl	8008590 <__mdiff>
 8007a42:	68c2      	ldr	r2, [r0, #12]
 8007a44:	9b08      	ldr	r3, [sp, #32]
 8007a46:	4605      	mov	r5, r0
 8007a48:	bb02      	cbnz	r2, 8007a8c <_dtoa_r+0xa7c>
 8007a4a:	4601      	mov	r1, r0
 8007a4c:	4658      	mov	r0, fp
 8007a4e:	f000 fd83 	bl	8008558 <__mcmp>
 8007a52:	9b08      	ldr	r3, [sp, #32]
 8007a54:	4602      	mov	r2, r0
 8007a56:	4629      	mov	r1, r5
 8007a58:	4620      	mov	r0, r4
 8007a5a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007a5e:	f000 fb3d 	bl	80080dc <_Bfree>
 8007a62:	9b05      	ldr	r3, [sp, #20]
 8007a64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a66:	9d01      	ldr	r5, [sp, #4]
 8007a68:	ea43 0102 	orr.w	r1, r3, r2
 8007a6c:	9b06      	ldr	r3, [sp, #24]
 8007a6e:	430b      	orrs	r3, r1
 8007a70:	9b08      	ldr	r3, [sp, #32]
 8007a72:	d10d      	bne.n	8007a90 <_dtoa_r+0xa80>
 8007a74:	2b39      	cmp	r3, #57	; 0x39
 8007a76:	d029      	beq.n	8007acc <_dtoa_r+0xabc>
 8007a78:	f1b9 0f00 	cmp.w	r9, #0
 8007a7c:	dd01      	ble.n	8007a82 <_dtoa_r+0xa72>
 8007a7e:	9b04      	ldr	r3, [sp, #16]
 8007a80:	3331      	adds	r3, #49	; 0x31
 8007a82:	9a02      	ldr	r2, [sp, #8]
 8007a84:	7013      	strb	r3, [r2, #0]
 8007a86:	e774      	b.n	8007972 <_dtoa_r+0x962>
 8007a88:	4638      	mov	r0, r7
 8007a8a:	e7b9      	b.n	8007a00 <_dtoa_r+0x9f0>
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	e7e2      	b.n	8007a56 <_dtoa_r+0xa46>
 8007a90:	f1b9 0f00 	cmp.w	r9, #0
 8007a94:	db06      	blt.n	8007aa4 <_dtoa_r+0xa94>
 8007a96:	9905      	ldr	r1, [sp, #20]
 8007a98:	ea41 0909 	orr.w	r9, r1, r9
 8007a9c:	9906      	ldr	r1, [sp, #24]
 8007a9e:	ea59 0101 	orrs.w	r1, r9, r1
 8007aa2:	d120      	bne.n	8007ae6 <_dtoa_r+0xad6>
 8007aa4:	2a00      	cmp	r2, #0
 8007aa6:	ddec      	ble.n	8007a82 <_dtoa_r+0xa72>
 8007aa8:	4659      	mov	r1, fp
 8007aaa:	2201      	movs	r2, #1
 8007aac:	4620      	mov	r0, r4
 8007aae:	9301      	str	r3, [sp, #4]
 8007ab0:	f000 fce6 	bl	8008480 <__lshift>
 8007ab4:	4631      	mov	r1, r6
 8007ab6:	4683      	mov	fp, r0
 8007ab8:	f000 fd4e 	bl	8008558 <__mcmp>
 8007abc:	2800      	cmp	r0, #0
 8007abe:	9b01      	ldr	r3, [sp, #4]
 8007ac0:	dc02      	bgt.n	8007ac8 <_dtoa_r+0xab8>
 8007ac2:	d1de      	bne.n	8007a82 <_dtoa_r+0xa72>
 8007ac4:	07da      	lsls	r2, r3, #31
 8007ac6:	d5dc      	bpl.n	8007a82 <_dtoa_r+0xa72>
 8007ac8:	2b39      	cmp	r3, #57	; 0x39
 8007aca:	d1d8      	bne.n	8007a7e <_dtoa_r+0xa6e>
 8007acc:	9a02      	ldr	r2, [sp, #8]
 8007ace:	2339      	movs	r3, #57	; 0x39
 8007ad0:	7013      	strb	r3, [r2, #0]
 8007ad2:	462b      	mov	r3, r5
 8007ad4:	461d      	mov	r5, r3
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007adc:	2a39      	cmp	r2, #57	; 0x39
 8007ade:	d050      	beq.n	8007b82 <_dtoa_r+0xb72>
 8007ae0:	3201      	adds	r2, #1
 8007ae2:	701a      	strb	r2, [r3, #0]
 8007ae4:	e745      	b.n	8007972 <_dtoa_r+0x962>
 8007ae6:	2a00      	cmp	r2, #0
 8007ae8:	dd03      	ble.n	8007af2 <_dtoa_r+0xae2>
 8007aea:	2b39      	cmp	r3, #57	; 0x39
 8007aec:	d0ee      	beq.n	8007acc <_dtoa_r+0xabc>
 8007aee:	3301      	adds	r3, #1
 8007af0:	e7c7      	b.n	8007a82 <_dtoa_r+0xa72>
 8007af2:	9a01      	ldr	r2, [sp, #4]
 8007af4:	9907      	ldr	r1, [sp, #28]
 8007af6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007afa:	428a      	cmp	r2, r1
 8007afc:	d02a      	beq.n	8007b54 <_dtoa_r+0xb44>
 8007afe:	4659      	mov	r1, fp
 8007b00:	2300      	movs	r3, #0
 8007b02:	220a      	movs	r2, #10
 8007b04:	4620      	mov	r0, r4
 8007b06:	f000 fb0b 	bl	8008120 <__multadd>
 8007b0a:	45b8      	cmp	r8, r7
 8007b0c:	4683      	mov	fp, r0
 8007b0e:	f04f 0300 	mov.w	r3, #0
 8007b12:	f04f 020a 	mov.w	r2, #10
 8007b16:	4641      	mov	r1, r8
 8007b18:	4620      	mov	r0, r4
 8007b1a:	d107      	bne.n	8007b2c <_dtoa_r+0xb1c>
 8007b1c:	f000 fb00 	bl	8008120 <__multadd>
 8007b20:	4680      	mov	r8, r0
 8007b22:	4607      	mov	r7, r0
 8007b24:	9b01      	ldr	r3, [sp, #4]
 8007b26:	3301      	adds	r3, #1
 8007b28:	9301      	str	r3, [sp, #4]
 8007b2a:	e775      	b.n	8007a18 <_dtoa_r+0xa08>
 8007b2c:	f000 faf8 	bl	8008120 <__multadd>
 8007b30:	4639      	mov	r1, r7
 8007b32:	4680      	mov	r8, r0
 8007b34:	2300      	movs	r3, #0
 8007b36:	220a      	movs	r2, #10
 8007b38:	4620      	mov	r0, r4
 8007b3a:	f000 faf1 	bl	8008120 <__multadd>
 8007b3e:	4607      	mov	r7, r0
 8007b40:	e7f0      	b.n	8007b24 <_dtoa_r+0xb14>
 8007b42:	f1b9 0f00 	cmp.w	r9, #0
 8007b46:	9a00      	ldr	r2, [sp, #0]
 8007b48:	bfcc      	ite	gt
 8007b4a:	464d      	movgt	r5, r9
 8007b4c:	2501      	movle	r5, #1
 8007b4e:	4415      	add	r5, r2
 8007b50:	f04f 0800 	mov.w	r8, #0
 8007b54:	4659      	mov	r1, fp
 8007b56:	2201      	movs	r2, #1
 8007b58:	4620      	mov	r0, r4
 8007b5a:	9301      	str	r3, [sp, #4]
 8007b5c:	f000 fc90 	bl	8008480 <__lshift>
 8007b60:	4631      	mov	r1, r6
 8007b62:	4683      	mov	fp, r0
 8007b64:	f000 fcf8 	bl	8008558 <__mcmp>
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	dcb2      	bgt.n	8007ad2 <_dtoa_r+0xac2>
 8007b6c:	d102      	bne.n	8007b74 <_dtoa_r+0xb64>
 8007b6e:	9b01      	ldr	r3, [sp, #4]
 8007b70:	07db      	lsls	r3, r3, #31
 8007b72:	d4ae      	bmi.n	8007ad2 <_dtoa_r+0xac2>
 8007b74:	462b      	mov	r3, r5
 8007b76:	461d      	mov	r5, r3
 8007b78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b7c:	2a30      	cmp	r2, #48	; 0x30
 8007b7e:	d0fa      	beq.n	8007b76 <_dtoa_r+0xb66>
 8007b80:	e6f7      	b.n	8007972 <_dtoa_r+0x962>
 8007b82:	9a00      	ldr	r2, [sp, #0]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d1a5      	bne.n	8007ad4 <_dtoa_r+0xac4>
 8007b88:	f10a 0a01 	add.w	sl, sl, #1
 8007b8c:	2331      	movs	r3, #49	; 0x31
 8007b8e:	e779      	b.n	8007a84 <_dtoa_r+0xa74>
 8007b90:	4b13      	ldr	r3, [pc, #76]	; (8007be0 <_dtoa_r+0xbd0>)
 8007b92:	f7ff baaf 	b.w	80070f4 <_dtoa_r+0xe4>
 8007b96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f47f aa86 	bne.w	80070aa <_dtoa_r+0x9a>
 8007b9e:	4b11      	ldr	r3, [pc, #68]	; (8007be4 <_dtoa_r+0xbd4>)
 8007ba0:	f7ff baa8 	b.w	80070f4 <_dtoa_r+0xe4>
 8007ba4:	f1b9 0f00 	cmp.w	r9, #0
 8007ba8:	dc03      	bgt.n	8007bb2 <_dtoa_r+0xba2>
 8007baa:	9b05      	ldr	r3, [sp, #20]
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	f73f aec9 	bgt.w	8007944 <_dtoa_r+0x934>
 8007bb2:	9d00      	ldr	r5, [sp, #0]
 8007bb4:	4631      	mov	r1, r6
 8007bb6:	4658      	mov	r0, fp
 8007bb8:	f7ff f99e 	bl	8006ef8 <quorem>
 8007bbc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007bc0:	f805 3b01 	strb.w	r3, [r5], #1
 8007bc4:	9a00      	ldr	r2, [sp, #0]
 8007bc6:	1aaa      	subs	r2, r5, r2
 8007bc8:	4591      	cmp	r9, r2
 8007bca:	ddba      	ble.n	8007b42 <_dtoa_r+0xb32>
 8007bcc:	4659      	mov	r1, fp
 8007bce:	2300      	movs	r3, #0
 8007bd0:	220a      	movs	r2, #10
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f000 faa4 	bl	8008120 <__multadd>
 8007bd8:	4683      	mov	fp, r0
 8007bda:	e7eb      	b.n	8007bb4 <_dtoa_r+0xba4>
 8007bdc:	0800900f 	.word	0x0800900f
 8007be0:	08008f68 	.word	0x08008f68
 8007be4:	08008f8c 	.word	0x08008f8c

08007be8 <__sflush_r>:
 8007be8:	898a      	ldrh	r2, [r1, #12]
 8007bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bee:	4605      	mov	r5, r0
 8007bf0:	0710      	lsls	r0, r2, #28
 8007bf2:	460c      	mov	r4, r1
 8007bf4:	d458      	bmi.n	8007ca8 <__sflush_r+0xc0>
 8007bf6:	684b      	ldr	r3, [r1, #4]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	dc05      	bgt.n	8007c08 <__sflush_r+0x20>
 8007bfc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	dc02      	bgt.n	8007c08 <__sflush_r+0x20>
 8007c02:	2000      	movs	r0, #0
 8007c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c0a:	2e00      	cmp	r6, #0
 8007c0c:	d0f9      	beq.n	8007c02 <__sflush_r+0x1a>
 8007c0e:	2300      	movs	r3, #0
 8007c10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c14:	682f      	ldr	r7, [r5, #0]
 8007c16:	602b      	str	r3, [r5, #0]
 8007c18:	d032      	beq.n	8007c80 <__sflush_r+0x98>
 8007c1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c1c:	89a3      	ldrh	r3, [r4, #12]
 8007c1e:	075a      	lsls	r2, r3, #29
 8007c20:	d505      	bpl.n	8007c2e <__sflush_r+0x46>
 8007c22:	6863      	ldr	r3, [r4, #4]
 8007c24:	1ac0      	subs	r0, r0, r3
 8007c26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c28:	b10b      	cbz	r3, 8007c2e <__sflush_r+0x46>
 8007c2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c2c:	1ac0      	subs	r0, r0, r3
 8007c2e:	2300      	movs	r3, #0
 8007c30:	4602      	mov	r2, r0
 8007c32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c34:	6a21      	ldr	r1, [r4, #32]
 8007c36:	4628      	mov	r0, r5
 8007c38:	47b0      	blx	r6
 8007c3a:	1c43      	adds	r3, r0, #1
 8007c3c:	89a3      	ldrh	r3, [r4, #12]
 8007c3e:	d106      	bne.n	8007c4e <__sflush_r+0x66>
 8007c40:	6829      	ldr	r1, [r5, #0]
 8007c42:	291d      	cmp	r1, #29
 8007c44:	d82c      	bhi.n	8007ca0 <__sflush_r+0xb8>
 8007c46:	4a2a      	ldr	r2, [pc, #168]	; (8007cf0 <__sflush_r+0x108>)
 8007c48:	40ca      	lsrs	r2, r1
 8007c4a:	07d6      	lsls	r6, r2, #31
 8007c4c:	d528      	bpl.n	8007ca0 <__sflush_r+0xb8>
 8007c4e:	2200      	movs	r2, #0
 8007c50:	6062      	str	r2, [r4, #4]
 8007c52:	04d9      	lsls	r1, r3, #19
 8007c54:	6922      	ldr	r2, [r4, #16]
 8007c56:	6022      	str	r2, [r4, #0]
 8007c58:	d504      	bpl.n	8007c64 <__sflush_r+0x7c>
 8007c5a:	1c42      	adds	r2, r0, #1
 8007c5c:	d101      	bne.n	8007c62 <__sflush_r+0x7a>
 8007c5e:	682b      	ldr	r3, [r5, #0]
 8007c60:	b903      	cbnz	r3, 8007c64 <__sflush_r+0x7c>
 8007c62:	6560      	str	r0, [r4, #84]	; 0x54
 8007c64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c66:	602f      	str	r7, [r5, #0]
 8007c68:	2900      	cmp	r1, #0
 8007c6a:	d0ca      	beq.n	8007c02 <__sflush_r+0x1a>
 8007c6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c70:	4299      	cmp	r1, r3
 8007c72:	d002      	beq.n	8007c7a <__sflush_r+0x92>
 8007c74:	4628      	mov	r0, r5
 8007c76:	f000 fd7f 	bl	8008778 <_free_r>
 8007c7a:	2000      	movs	r0, #0
 8007c7c:	6360      	str	r0, [r4, #52]	; 0x34
 8007c7e:	e7c1      	b.n	8007c04 <__sflush_r+0x1c>
 8007c80:	6a21      	ldr	r1, [r4, #32]
 8007c82:	2301      	movs	r3, #1
 8007c84:	4628      	mov	r0, r5
 8007c86:	47b0      	blx	r6
 8007c88:	1c41      	adds	r1, r0, #1
 8007c8a:	d1c7      	bne.n	8007c1c <__sflush_r+0x34>
 8007c8c:	682b      	ldr	r3, [r5, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d0c4      	beq.n	8007c1c <__sflush_r+0x34>
 8007c92:	2b1d      	cmp	r3, #29
 8007c94:	d001      	beq.n	8007c9a <__sflush_r+0xb2>
 8007c96:	2b16      	cmp	r3, #22
 8007c98:	d101      	bne.n	8007c9e <__sflush_r+0xb6>
 8007c9a:	602f      	str	r7, [r5, #0]
 8007c9c:	e7b1      	b.n	8007c02 <__sflush_r+0x1a>
 8007c9e:	89a3      	ldrh	r3, [r4, #12]
 8007ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ca4:	81a3      	strh	r3, [r4, #12]
 8007ca6:	e7ad      	b.n	8007c04 <__sflush_r+0x1c>
 8007ca8:	690f      	ldr	r7, [r1, #16]
 8007caa:	2f00      	cmp	r7, #0
 8007cac:	d0a9      	beq.n	8007c02 <__sflush_r+0x1a>
 8007cae:	0793      	lsls	r3, r2, #30
 8007cb0:	680e      	ldr	r6, [r1, #0]
 8007cb2:	bf08      	it	eq
 8007cb4:	694b      	ldreq	r3, [r1, #20]
 8007cb6:	600f      	str	r7, [r1, #0]
 8007cb8:	bf18      	it	ne
 8007cba:	2300      	movne	r3, #0
 8007cbc:	eba6 0807 	sub.w	r8, r6, r7
 8007cc0:	608b      	str	r3, [r1, #8]
 8007cc2:	f1b8 0f00 	cmp.w	r8, #0
 8007cc6:	dd9c      	ble.n	8007c02 <__sflush_r+0x1a>
 8007cc8:	6a21      	ldr	r1, [r4, #32]
 8007cca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ccc:	4643      	mov	r3, r8
 8007cce:	463a      	mov	r2, r7
 8007cd0:	4628      	mov	r0, r5
 8007cd2:	47b0      	blx	r6
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	dc06      	bgt.n	8007ce6 <__sflush_r+0xfe>
 8007cd8:	89a3      	ldrh	r3, [r4, #12]
 8007cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cde:	81a3      	strh	r3, [r4, #12]
 8007ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce4:	e78e      	b.n	8007c04 <__sflush_r+0x1c>
 8007ce6:	4407      	add	r7, r0
 8007ce8:	eba8 0800 	sub.w	r8, r8, r0
 8007cec:	e7e9      	b.n	8007cc2 <__sflush_r+0xda>
 8007cee:	bf00      	nop
 8007cf0:	20400001 	.word	0x20400001

08007cf4 <_fflush_r>:
 8007cf4:	b538      	push	{r3, r4, r5, lr}
 8007cf6:	690b      	ldr	r3, [r1, #16]
 8007cf8:	4605      	mov	r5, r0
 8007cfa:	460c      	mov	r4, r1
 8007cfc:	b913      	cbnz	r3, 8007d04 <_fflush_r+0x10>
 8007cfe:	2500      	movs	r5, #0
 8007d00:	4628      	mov	r0, r5
 8007d02:	bd38      	pop	{r3, r4, r5, pc}
 8007d04:	b118      	cbz	r0, 8007d0e <_fflush_r+0x1a>
 8007d06:	6983      	ldr	r3, [r0, #24]
 8007d08:	b90b      	cbnz	r3, 8007d0e <_fflush_r+0x1a>
 8007d0a:	f000 f887 	bl	8007e1c <__sinit>
 8007d0e:	4b14      	ldr	r3, [pc, #80]	; (8007d60 <_fflush_r+0x6c>)
 8007d10:	429c      	cmp	r4, r3
 8007d12:	d11b      	bne.n	8007d4c <_fflush_r+0x58>
 8007d14:	686c      	ldr	r4, [r5, #4]
 8007d16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d0ef      	beq.n	8007cfe <_fflush_r+0xa>
 8007d1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d20:	07d0      	lsls	r0, r2, #31
 8007d22:	d404      	bmi.n	8007d2e <_fflush_r+0x3a>
 8007d24:	0599      	lsls	r1, r3, #22
 8007d26:	d402      	bmi.n	8007d2e <_fflush_r+0x3a>
 8007d28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d2a:	f000 f91a 	bl	8007f62 <__retarget_lock_acquire_recursive>
 8007d2e:	4628      	mov	r0, r5
 8007d30:	4621      	mov	r1, r4
 8007d32:	f7ff ff59 	bl	8007be8 <__sflush_r>
 8007d36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d38:	07da      	lsls	r2, r3, #31
 8007d3a:	4605      	mov	r5, r0
 8007d3c:	d4e0      	bmi.n	8007d00 <_fflush_r+0xc>
 8007d3e:	89a3      	ldrh	r3, [r4, #12]
 8007d40:	059b      	lsls	r3, r3, #22
 8007d42:	d4dd      	bmi.n	8007d00 <_fflush_r+0xc>
 8007d44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d46:	f000 f90d 	bl	8007f64 <__retarget_lock_release_recursive>
 8007d4a:	e7d9      	b.n	8007d00 <_fflush_r+0xc>
 8007d4c:	4b05      	ldr	r3, [pc, #20]	; (8007d64 <_fflush_r+0x70>)
 8007d4e:	429c      	cmp	r4, r3
 8007d50:	d101      	bne.n	8007d56 <_fflush_r+0x62>
 8007d52:	68ac      	ldr	r4, [r5, #8]
 8007d54:	e7df      	b.n	8007d16 <_fflush_r+0x22>
 8007d56:	4b04      	ldr	r3, [pc, #16]	; (8007d68 <_fflush_r+0x74>)
 8007d58:	429c      	cmp	r4, r3
 8007d5a:	bf08      	it	eq
 8007d5c:	68ec      	ldreq	r4, [r5, #12]
 8007d5e:	e7da      	b.n	8007d16 <_fflush_r+0x22>
 8007d60:	08009040 	.word	0x08009040
 8007d64:	08009060 	.word	0x08009060
 8007d68:	08009020 	.word	0x08009020

08007d6c <std>:
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	b510      	push	{r4, lr}
 8007d70:	4604      	mov	r4, r0
 8007d72:	e9c0 3300 	strd	r3, r3, [r0]
 8007d76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d7a:	6083      	str	r3, [r0, #8]
 8007d7c:	8181      	strh	r1, [r0, #12]
 8007d7e:	6643      	str	r3, [r0, #100]	; 0x64
 8007d80:	81c2      	strh	r2, [r0, #14]
 8007d82:	6183      	str	r3, [r0, #24]
 8007d84:	4619      	mov	r1, r3
 8007d86:	2208      	movs	r2, #8
 8007d88:	305c      	adds	r0, #92	; 0x5c
 8007d8a:	f7fe faf5 	bl	8006378 <memset>
 8007d8e:	4b05      	ldr	r3, [pc, #20]	; (8007da4 <std+0x38>)
 8007d90:	6263      	str	r3, [r4, #36]	; 0x24
 8007d92:	4b05      	ldr	r3, [pc, #20]	; (8007da8 <std+0x3c>)
 8007d94:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d96:	4b05      	ldr	r3, [pc, #20]	; (8007dac <std+0x40>)
 8007d98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d9a:	4b05      	ldr	r3, [pc, #20]	; (8007db0 <std+0x44>)
 8007d9c:	6224      	str	r4, [r4, #32]
 8007d9e:	6323      	str	r3, [r4, #48]	; 0x30
 8007da0:	bd10      	pop	{r4, pc}
 8007da2:	bf00      	nop
 8007da4:	08008ba1 	.word	0x08008ba1
 8007da8:	08008bc3 	.word	0x08008bc3
 8007dac:	08008bfb 	.word	0x08008bfb
 8007db0:	08008c1f 	.word	0x08008c1f

08007db4 <_cleanup_r>:
 8007db4:	4901      	ldr	r1, [pc, #4]	; (8007dbc <_cleanup_r+0x8>)
 8007db6:	f000 b8af 	b.w	8007f18 <_fwalk_reent>
 8007dba:	bf00      	nop
 8007dbc:	08007cf5 	.word	0x08007cf5

08007dc0 <__sfmoreglue>:
 8007dc0:	b570      	push	{r4, r5, r6, lr}
 8007dc2:	1e4a      	subs	r2, r1, #1
 8007dc4:	2568      	movs	r5, #104	; 0x68
 8007dc6:	4355      	muls	r5, r2
 8007dc8:	460e      	mov	r6, r1
 8007dca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007dce:	f000 fd23 	bl	8008818 <_malloc_r>
 8007dd2:	4604      	mov	r4, r0
 8007dd4:	b140      	cbz	r0, 8007de8 <__sfmoreglue+0x28>
 8007dd6:	2100      	movs	r1, #0
 8007dd8:	e9c0 1600 	strd	r1, r6, [r0]
 8007ddc:	300c      	adds	r0, #12
 8007dde:	60a0      	str	r0, [r4, #8]
 8007de0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007de4:	f7fe fac8 	bl	8006378 <memset>
 8007de8:	4620      	mov	r0, r4
 8007dea:	bd70      	pop	{r4, r5, r6, pc}

08007dec <__sfp_lock_acquire>:
 8007dec:	4801      	ldr	r0, [pc, #4]	; (8007df4 <__sfp_lock_acquire+0x8>)
 8007dee:	f000 b8b8 	b.w	8007f62 <__retarget_lock_acquire_recursive>
 8007df2:	bf00      	nop
 8007df4:	200006c0 	.word	0x200006c0

08007df8 <__sfp_lock_release>:
 8007df8:	4801      	ldr	r0, [pc, #4]	; (8007e00 <__sfp_lock_release+0x8>)
 8007dfa:	f000 b8b3 	b.w	8007f64 <__retarget_lock_release_recursive>
 8007dfe:	bf00      	nop
 8007e00:	200006c0 	.word	0x200006c0

08007e04 <__sinit_lock_acquire>:
 8007e04:	4801      	ldr	r0, [pc, #4]	; (8007e0c <__sinit_lock_acquire+0x8>)
 8007e06:	f000 b8ac 	b.w	8007f62 <__retarget_lock_acquire_recursive>
 8007e0a:	bf00      	nop
 8007e0c:	200006bb 	.word	0x200006bb

08007e10 <__sinit_lock_release>:
 8007e10:	4801      	ldr	r0, [pc, #4]	; (8007e18 <__sinit_lock_release+0x8>)
 8007e12:	f000 b8a7 	b.w	8007f64 <__retarget_lock_release_recursive>
 8007e16:	bf00      	nop
 8007e18:	200006bb 	.word	0x200006bb

08007e1c <__sinit>:
 8007e1c:	b510      	push	{r4, lr}
 8007e1e:	4604      	mov	r4, r0
 8007e20:	f7ff fff0 	bl	8007e04 <__sinit_lock_acquire>
 8007e24:	69a3      	ldr	r3, [r4, #24]
 8007e26:	b11b      	cbz	r3, 8007e30 <__sinit+0x14>
 8007e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e2c:	f7ff bff0 	b.w	8007e10 <__sinit_lock_release>
 8007e30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e34:	6523      	str	r3, [r4, #80]	; 0x50
 8007e36:	4b13      	ldr	r3, [pc, #76]	; (8007e84 <__sinit+0x68>)
 8007e38:	4a13      	ldr	r2, [pc, #76]	; (8007e88 <__sinit+0x6c>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e3e:	42a3      	cmp	r3, r4
 8007e40:	bf04      	itt	eq
 8007e42:	2301      	moveq	r3, #1
 8007e44:	61a3      	streq	r3, [r4, #24]
 8007e46:	4620      	mov	r0, r4
 8007e48:	f000 f820 	bl	8007e8c <__sfp>
 8007e4c:	6060      	str	r0, [r4, #4]
 8007e4e:	4620      	mov	r0, r4
 8007e50:	f000 f81c 	bl	8007e8c <__sfp>
 8007e54:	60a0      	str	r0, [r4, #8]
 8007e56:	4620      	mov	r0, r4
 8007e58:	f000 f818 	bl	8007e8c <__sfp>
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	60e0      	str	r0, [r4, #12]
 8007e60:	2104      	movs	r1, #4
 8007e62:	6860      	ldr	r0, [r4, #4]
 8007e64:	f7ff ff82 	bl	8007d6c <std>
 8007e68:	68a0      	ldr	r0, [r4, #8]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	2109      	movs	r1, #9
 8007e6e:	f7ff ff7d 	bl	8007d6c <std>
 8007e72:	68e0      	ldr	r0, [r4, #12]
 8007e74:	2202      	movs	r2, #2
 8007e76:	2112      	movs	r1, #18
 8007e78:	f7ff ff78 	bl	8007d6c <std>
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	61a3      	str	r3, [r4, #24]
 8007e80:	e7d2      	b.n	8007e28 <__sinit+0xc>
 8007e82:	bf00      	nop
 8007e84:	08008f54 	.word	0x08008f54
 8007e88:	08007db5 	.word	0x08007db5

08007e8c <__sfp>:
 8007e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8e:	4607      	mov	r7, r0
 8007e90:	f7ff ffac 	bl	8007dec <__sfp_lock_acquire>
 8007e94:	4b1e      	ldr	r3, [pc, #120]	; (8007f10 <__sfp+0x84>)
 8007e96:	681e      	ldr	r6, [r3, #0]
 8007e98:	69b3      	ldr	r3, [r6, #24]
 8007e9a:	b913      	cbnz	r3, 8007ea2 <__sfp+0x16>
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	f7ff ffbd 	bl	8007e1c <__sinit>
 8007ea2:	3648      	adds	r6, #72	; 0x48
 8007ea4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	d503      	bpl.n	8007eb4 <__sfp+0x28>
 8007eac:	6833      	ldr	r3, [r6, #0]
 8007eae:	b30b      	cbz	r3, 8007ef4 <__sfp+0x68>
 8007eb0:	6836      	ldr	r6, [r6, #0]
 8007eb2:	e7f7      	b.n	8007ea4 <__sfp+0x18>
 8007eb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007eb8:	b9d5      	cbnz	r5, 8007ef0 <__sfp+0x64>
 8007eba:	4b16      	ldr	r3, [pc, #88]	; (8007f14 <__sfp+0x88>)
 8007ebc:	60e3      	str	r3, [r4, #12]
 8007ebe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ec2:	6665      	str	r5, [r4, #100]	; 0x64
 8007ec4:	f000 f84c 	bl	8007f60 <__retarget_lock_init_recursive>
 8007ec8:	f7ff ff96 	bl	8007df8 <__sfp_lock_release>
 8007ecc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007ed0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ed4:	6025      	str	r5, [r4, #0]
 8007ed6:	61a5      	str	r5, [r4, #24]
 8007ed8:	2208      	movs	r2, #8
 8007eda:	4629      	mov	r1, r5
 8007edc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007ee0:	f7fe fa4a 	bl	8006378 <memset>
 8007ee4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ee8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007eec:	4620      	mov	r0, r4
 8007eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ef0:	3468      	adds	r4, #104	; 0x68
 8007ef2:	e7d9      	b.n	8007ea8 <__sfp+0x1c>
 8007ef4:	2104      	movs	r1, #4
 8007ef6:	4638      	mov	r0, r7
 8007ef8:	f7ff ff62 	bl	8007dc0 <__sfmoreglue>
 8007efc:	4604      	mov	r4, r0
 8007efe:	6030      	str	r0, [r6, #0]
 8007f00:	2800      	cmp	r0, #0
 8007f02:	d1d5      	bne.n	8007eb0 <__sfp+0x24>
 8007f04:	f7ff ff78 	bl	8007df8 <__sfp_lock_release>
 8007f08:	230c      	movs	r3, #12
 8007f0a:	603b      	str	r3, [r7, #0]
 8007f0c:	e7ee      	b.n	8007eec <__sfp+0x60>
 8007f0e:	bf00      	nop
 8007f10:	08008f54 	.word	0x08008f54
 8007f14:	ffff0001 	.word	0xffff0001

08007f18 <_fwalk_reent>:
 8007f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f1c:	4606      	mov	r6, r0
 8007f1e:	4688      	mov	r8, r1
 8007f20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f24:	2700      	movs	r7, #0
 8007f26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f2a:	f1b9 0901 	subs.w	r9, r9, #1
 8007f2e:	d505      	bpl.n	8007f3c <_fwalk_reent+0x24>
 8007f30:	6824      	ldr	r4, [r4, #0]
 8007f32:	2c00      	cmp	r4, #0
 8007f34:	d1f7      	bne.n	8007f26 <_fwalk_reent+0xe>
 8007f36:	4638      	mov	r0, r7
 8007f38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f3c:	89ab      	ldrh	r3, [r5, #12]
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d907      	bls.n	8007f52 <_fwalk_reent+0x3a>
 8007f42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f46:	3301      	adds	r3, #1
 8007f48:	d003      	beq.n	8007f52 <_fwalk_reent+0x3a>
 8007f4a:	4629      	mov	r1, r5
 8007f4c:	4630      	mov	r0, r6
 8007f4e:	47c0      	blx	r8
 8007f50:	4307      	orrs	r7, r0
 8007f52:	3568      	adds	r5, #104	; 0x68
 8007f54:	e7e9      	b.n	8007f2a <_fwalk_reent+0x12>
	...

08007f58 <_localeconv_r>:
 8007f58:	4800      	ldr	r0, [pc, #0]	; (8007f5c <_localeconv_r+0x4>)
 8007f5a:	4770      	bx	lr
 8007f5c:	2000016c 	.word	0x2000016c

08007f60 <__retarget_lock_init_recursive>:
 8007f60:	4770      	bx	lr

08007f62 <__retarget_lock_acquire_recursive>:
 8007f62:	4770      	bx	lr

08007f64 <__retarget_lock_release_recursive>:
 8007f64:	4770      	bx	lr

08007f66 <__swhatbuf_r>:
 8007f66:	b570      	push	{r4, r5, r6, lr}
 8007f68:	460e      	mov	r6, r1
 8007f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f6e:	2900      	cmp	r1, #0
 8007f70:	b096      	sub	sp, #88	; 0x58
 8007f72:	4614      	mov	r4, r2
 8007f74:	461d      	mov	r5, r3
 8007f76:	da07      	bge.n	8007f88 <__swhatbuf_r+0x22>
 8007f78:	2300      	movs	r3, #0
 8007f7a:	602b      	str	r3, [r5, #0]
 8007f7c:	89b3      	ldrh	r3, [r6, #12]
 8007f7e:	061a      	lsls	r2, r3, #24
 8007f80:	d410      	bmi.n	8007fa4 <__swhatbuf_r+0x3e>
 8007f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f86:	e00e      	b.n	8007fa6 <__swhatbuf_r+0x40>
 8007f88:	466a      	mov	r2, sp
 8007f8a:	f000 fe9f 	bl	8008ccc <_fstat_r>
 8007f8e:	2800      	cmp	r0, #0
 8007f90:	dbf2      	blt.n	8007f78 <__swhatbuf_r+0x12>
 8007f92:	9a01      	ldr	r2, [sp, #4]
 8007f94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f9c:	425a      	negs	r2, r3
 8007f9e:	415a      	adcs	r2, r3
 8007fa0:	602a      	str	r2, [r5, #0]
 8007fa2:	e7ee      	b.n	8007f82 <__swhatbuf_r+0x1c>
 8007fa4:	2340      	movs	r3, #64	; 0x40
 8007fa6:	2000      	movs	r0, #0
 8007fa8:	6023      	str	r3, [r4, #0]
 8007faa:	b016      	add	sp, #88	; 0x58
 8007fac:	bd70      	pop	{r4, r5, r6, pc}
	...

08007fb0 <__smakebuf_r>:
 8007fb0:	898b      	ldrh	r3, [r1, #12]
 8007fb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007fb4:	079d      	lsls	r5, r3, #30
 8007fb6:	4606      	mov	r6, r0
 8007fb8:	460c      	mov	r4, r1
 8007fba:	d507      	bpl.n	8007fcc <__smakebuf_r+0x1c>
 8007fbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007fc0:	6023      	str	r3, [r4, #0]
 8007fc2:	6123      	str	r3, [r4, #16]
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	6163      	str	r3, [r4, #20]
 8007fc8:	b002      	add	sp, #8
 8007fca:	bd70      	pop	{r4, r5, r6, pc}
 8007fcc:	ab01      	add	r3, sp, #4
 8007fce:	466a      	mov	r2, sp
 8007fd0:	f7ff ffc9 	bl	8007f66 <__swhatbuf_r>
 8007fd4:	9900      	ldr	r1, [sp, #0]
 8007fd6:	4605      	mov	r5, r0
 8007fd8:	4630      	mov	r0, r6
 8007fda:	f000 fc1d 	bl	8008818 <_malloc_r>
 8007fde:	b948      	cbnz	r0, 8007ff4 <__smakebuf_r+0x44>
 8007fe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fe4:	059a      	lsls	r2, r3, #22
 8007fe6:	d4ef      	bmi.n	8007fc8 <__smakebuf_r+0x18>
 8007fe8:	f023 0303 	bic.w	r3, r3, #3
 8007fec:	f043 0302 	orr.w	r3, r3, #2
 8007ff0:	81a3      	strh	r3, [r4, #12]
 8007ff2:	e7e3      	b.n	8007fbc <__smakebuf_r+0xc>
 8007ff4:	4b0d      	ldr	r3, [pc, #52]	; (800802c <__smakebuf_r+0x7c>)
 8007ff6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007ff8:	89a3      	ldrh	r3, [r4, #12]
 8007ffa:	6020      	str	r0, [r4, #0]
 8007ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008000:	81a3      	strh	r3, [r4, #12]
 8008002:	9b00      	ldr	r3, [sp, #0]
 8008004:	6163      	str	r3, [r4, #20]
 8008006:	9b01      	ldr	r3, [sp, #4]
 8008008:	6120      	str	r0, [r4, #16]
 800800a:	b15b      	cbz	r3, 8008024 <__smakebuf_r+0x74>
 800800c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008010:	4630      	mov	r0, r6
 8008012:	f000 fe6d 	bl	8008cf0 <_isatty_r>
 8008016:	b128      	cbz	r0, 8008024 <__smakebuf_r+0x74>
 8008018:	89a3      	ldrh	r3, [r4, #12]
 800801a:	f023 0303 	bic.w	r3, r3, #3
 800801e:	f043 0301 	orr.w	r3, r3, #1
 8008022:	81a3      	strh	r3, [r4, #12]
 8008024:	89a0      	ldrh	r0, [r4, #12]
 8008026:	4305      	orrs	r5, r0
 8008028:	81a5      	strh	r5, [r4, #12]
 800802a:	e7cd      	b.n	8007fc8 <__smakebuf_r+0x18>
 800802c:	08007db5 	.word	0x08007db5

08008030 <malloc>:
 8008030:	4b02      	ldr	r3, [pc, #8]	; (800803c <malloc+0xc>)
 8008032:	4601      	mov	r1, r0
 8008034:	6818      	ldr	r0, [r3, #0]
 8008036:	f000 bbef 	b.w	8008818 <_malloc_r>
 800803a:	bf00      	nop
 800803c:	20000018 	.word	0x20000018

08008040 <memcpy>:
 8008040:	440a      	add	r2, r1
 8008042:	4291      	cmp	r1, r2
 8008044:	f100 33ff 	add.w	r3, r0, #4294967295
 8008048:	d100      	bne.n	800804c <memcpy+0xc>
 800804a:	4770      	bx	lr
 800804c:	b510      	push	{r4, lr}
 800804e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008052:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008056:	4291      	cmp	r1, r2
 8008058:	d1f9      	bne.n	800804e <memcpy+0xe>
 800805a:	bd10      	pop	{r4, pc}

0800805c <_Balloc>:
 800805c:	b570      	push	{r4, r5, r6, lr}
 800805e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008060:	4604      	mov	r4, r0
 8008062:	460d      	mov	r5, r1
 8008064:	b976      	cbnz	r6, 8008084 <_Balloc+0x28>
 8008066:	2010      	movs	r0, #16
 8008068:	f7ff ffe2 	bl	8008030 <malloc>
 800806c:	4602      	mov	r2, r0
 800806e:	6260      	str	r0, [r4, #36]	; 0x24
 8008070:	b920      	cbnz	r0, 800807c <_Balloc+0x20>
 8008072:	4b18      	ldr	r3, [pc, #96]	; (80080d4 <_Balloc+0x78>)
 8008074:	4818      	ldr	r0, [pc, #96]	; (80080d8 <_Balloc+0x7c>)
 8008076:	2166      	movs	r1, #102	; 0x66
 8008078:	f000 fde8 	bl	8008c4c <__assert_func>
 800807c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008080:	6006      	str	r6, [r0, #0]
 8008082:	60c6      	str	r6, [r0, #12]
 8008084:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008086:	68f3      	ldr	r3, [r6, #12]
 8008088:	b183      	cbz	r3, 80080ac <_Balloc+0x50>
 800808a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008092:	b9b8      	cbnz	r0, 80080c4 <_Balloc+0x68>
 8008094:	2101      	movs	r1, #1
 8008096:	fa01 f605 	lsl.w	r6, r1, r5
 800809a:	1d72      	adds	r2, r6, #5
 800809c:	0092      	lsls	r2, r2, #2
 800809e:	4620      	mov	r0, r4
 80080a0:	f000 fb5a 	bl	8008758 <_calloc_r>
 80080a4:	b160      	cbz	r0, 80080c0 <_Balloc+0x64>
 80080a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80080aa:	e00e      	b.n	80080ca <_Balloc+0x6e>
 80080ac:	2221      	movs	r2, #33	; 0x21
 80080ae:	2104      	movs	r1, #4
 80080b0:	4620      	mov	r0, r4
 80080b2:	f000 fb51 	bl	8008758 <_calloc_r>
 80080b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080b8:	60f0      	str	r0, [r6, #12]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d1e4      	bne.n	800808a <_Balloc+0x2e>
 80080c0:	2000      	movs	r0, #0
 80080c2:	bd70      	pop	{r4, r5, r6, pc}
 80080c4:	6802      	ldr	r2, [r0, #0]
 80080c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80080ca:	2300      	movs	r3, #0
 80080cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80080d0:	e7f7      	b.n	80080c2 <_Balloc+0x66>
 80080d2:	bf00      	nop
 80080d4:	08008f99 	.word	0x08008f99
 80080d8:	08009080 	.word	0x08009080

080080dc <_Bfree>:
 80080dc:	b570      	push	{r4, r5, r6, lr}
 80080de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80080e0:	4605      	mov	r5, r0
 80080e2:	460c      	mov	r4, r1
 80080e4:	b976      	cbnz	r6, 8008104 <_Bfree+0x28>
 80080e6:	2010      	movs	r0, #16
 80080e8:	f7ff ffa2 	bl	8008030 <malloc>
 80080ec:	4602      	mov	r2, r0
 80080ee:	6268      	str	r0, [r5, #36]	; 0x24
 80080f0:	b920      	cbnz	r0, 80080fc <_Bfree+0x20>
 80080f2:	4b09      	ldr	r3, [pc, #36]	; (8008118 <_Bfree+0x3c>)
 80080f4:	4809      	ldr	r0, [pc, #36]	; (800811c <_Bfree+0x40>)
 80080f6:	218a      	movs	r1, #138	; 0x8a
 80080f8:	f000 fda8 	bl	8008c4c <__assert_func>
 80080fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008100:	6006      	str	r6, [r0, #0]
 8008102:	60c6      	str	r6, [r0, #12]
 8008104:	b13c      	cbz	r4, 8008116 <_Bfree+0x3a>
 8008106:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008108:	6862      	ldr	r2, [r4, #4]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008110:	6021      	str	r1, [r4, #0]
 8008112:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008116:	bd70      	pop	{r4, r5, r6, pc}
 8008118:	08008f99 	.word	0x08008f99
 800811c:	08009080 	.word	0x08009080

08008120 <__multadd>:
 8008120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008124:	690e      	ldr	r6, [r1, #16]
 8008126:	4607      	mov	r7, r0
 8008128:	4698      	mov	r8, r3
 800812a:	460c      	mov	r4, r1
 800812c:	f101 0014 	add.w	r0, r1, #20
 8008130:	2300      	movs	r3, #0
 8008132:	6805      	ldr	r5, [r0, #0]
 8008134:	b2a9      	uxth	r1, r5
 8008136:	fb02 8101 	mla	r1, r2, r1, r8
 800813a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800813e:	0c2d      	lsrs	r5, r5, #16
 8008140:	fb02 c505 	mla	r5, r2, r5, ip
 8008144:	b289      	uxth	r1, r1
 8008146:	3301      	adds	r3, #1
 8008148:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800814c:	429e      	cmp	r6, r3
 800814e:	f840 1b04 	str.w	r1, [r0], #4
 8008152:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008156:	dcec      	bgt.n	8008132 <__multadd+0x12>
 8008158:	f1b8 0f00 	cmp.w	r8, #0
 800815c:	d022      	beq.n	80081a4 <__multadd+0x84>
 800815e:	68a3      	ldr	r3, [r4, #8]
 8008160:	42b3      	cmp	r3, r6
 8008162:	dc19      	bgt.n	8008198 <__multadd+0x78>
 8008164:	6861      	ldr	r1, [r4, #4]
 8008166:	4638      	mov	r0, r7
 8008168:	3101      	adds	r1, #1
 800816a:	f7ff ff77 	bl	800805c <_Balloc>
 800816e:	4605      	mov	r5, r0
 8008170:	b928      	cbnz	r0, 800817e <__multadd+0x5e>
 8008172:	4602      	mov	r2, r0
 8008174:	4b0d      	ldr	r3, [pc, #52]	; (80081ac <__multadd+0x8c>)
 8008176:	480e      	ldr	r0, [pc, #56]	; (80081b0 <__multadd+0x90>)
 8008178:	21b5      	movs	r1, #181	; 0xb5
 800817a:	f000 fd67 	bl	8008c4c <__assert_func>
 800817e:	6922      	ldr	r2, [r4, #16]
 8008180:	3202      	adds	r2, #2
 8008182:	f104 010c 	add.w	r1, r4, #12
 8008186:	0092      	lsls	r2, r2, #2
 8008188:	300c      	adds	r0, #12
 800818a:	f7ff ff59 	bl	8008040 <memcpy>
 800818e:	4621      	mov	r1, r4
 8008190:	4638      	mov	r0, r7
 8008192:	f7ff ffa3 	bl	80080dc <_Bfree>
 8008196:	462c      	mov	r4, r5
 8008198:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800819c:	3601      	adds	r6, #1
 800819e:	f8c3 8014 	str.w	r8, [r3, #20]
 80081a2:	6126      	str	r6, [r4, #16]
 80081a4:	4620      	mov	r0, r4
 80081a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081aa:	bf00      	nop
 80081ac:	0800900f 	.word	0x0800900f
 80081b0:	08009080 	.word	0x08009080

080081b4 <__hi0bits>:
 80081b4:	0c03      	lsrs	r3, r0, #16
 80081b6:	041b      	lsls	r3, r3, #16
 80081b8:	b9d3      	cbnz	r3, 80081f0 <__hi0bits+0x3c>
 80081ba:	0400      	lsls	r0, r0, #16
 80081bc:	2310      	movs	r3, #16
 80081be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80081c2:	bf04      	itt	eq
 80081c4:	0200      	lsleq	r0, r0, #8
 80081c6:	3308      	addeq	r3, #8
 80081c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80081cc:	bf04      	itt	eq
 80081ce:	0100      	lsleq	r0, r0, #4
 80081d0:	3304      	addeq	r3, #4
 80081d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80081d6:	bf04      	itt	eq
 80081d8:	0080      	lsleq	r0, r0, #2
 80081da:	3302      	addeq	r3, #2
 80081dc:	2800      	cmp	r0, #0
 80081de:	db05      	blt.n	80081ec <__hi0bits+0x38>
 80081e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80081e4:	f103 0301 	add.w	r3, r3, #1
 80081e8:	bf08      	it	eq
 80081ea:	2320      	moveq	r3, #32
 80081ec:	4618      	mov	r0, r3
 80081ee:	4770      	bx	lr
 80081f0:	2300      	movs	r3, #0
 80081f2:	e7e4      	b.n	80081be <__hi0bits+0xa>

080081f4 <__lo0bits>:
 80081f4:	6803      	ldr	r3, [r0, #0]
 80081f6:	f013 0207 	ands.w	r2, r3, #7
 80081fa:	4601      	mov	r1, r0
 80081fc:	d00b      	beq.n	8008216 <__lo0bits+0x22>
 80081fe:	07da      	lsls	r2, r3, #31
 8008200:	d424      	bmi.n	800824c <__lo0bits+0x58>
 8008202:	0798      	lsls	r0, r3, #30
 8008204:	bf49      	itett	mi
 8008206:	085b      	lsrmi	r3, r3, #1
 8008208:	089b      	lsrpl	r3, r3, #2
 800820a:	2001      	movmi	r0, #1
 800820c:	600b      	strmi	r3, [r1, #0]
 800820e:	bf5c      	itt	pl
 8008210:	600b      	strpl	r3, [r1, #0]
 8008212:	2002      	movpl	r0, #2
 8008214:	4770      	bx	lr
 8008216:	b298      	uxth	r0, r3
 8008218:	b9b0      	cbnz	r0, 8008248 <__lo0bits+0x54>
 800821a:	0c1b      	lsrs	r3, r3, #16
 800821c:	2010      	movs	r0, #16
 800821e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008222:	bf04      	itt	eq
 8008224:	0a1b      	lsreq	r3, r3, #8
 8008226:	3008      	addeq	r0, #8
 8008228:	071a      	lsls	r2, r3, #28
 800822a:	bf04      	itt	eq
 800822c:	091b      	lsreq	r3, r3, #4
 800822e:	3004      	addeq	r0, #4
 8008230:	079a      	lsls	r2, r3, #30
 8008232:	bf04      	itt	eq
 8008234:	089b      	lsreq	r3, r3, #2
 8008236:	3002      	addeq	r0, #2
 8008238:	07da      	lsls	r2, r3, #31
 800823a:	d403      	bmi.n	8008244 <__lo0bits+0x50>
 800823c:	085b      	lsrs	r3, r3, #1
 800823e:	f100 0001 	add.w	r0, r0, #1
 8008242:	d005      	beq.n	8008250 <__lo0bits+0x5c>
 8008244:	600b      	str	r3, [r1, #0]
 8008246:	4770      	bx	lr
 8008248:	4610      	mov	r0, r2
 800824a:	e7e8      	b.n	800821e <__lo0bits+0x2a>
 800824c:	2000      	movs	r0, #0
 800824e:	4770      	bx	lr
 8008250:	2020      	movs	r0, #32
 8008252:	4770      	bx	lr

08008254 <__i2b>:
 8008254:	b510      	push	{r4, lr}
 8008256:	460c      	mov	r4, r1
 8008258:	2101      	movs	r1, #1
 800825a:	f7ff feff 	bl	800805c <_Balloc>
 800825e:	4602      	mov	r2, r0
 8008260:	b928      	cbnz	r0, 800826e <__i2b+0x1a>
 8008262:	4b05      	ldr	r3, [pc, #20]	; (8008278 <__i2b+0x24>)
 8008264:	4805      	ldr	r0, [pc, #20]	; (800827c <__i2b+0x28>)
 8008266:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800826a:	f000 fcef 	bl	8008c4c <__assert_func>
 800826e:	2301      	movs	r3, #1
 8008270:	6144      	str	r4, [r0, #20]
 8008272:	6103      	str	r3, [r0, #16]
 8008274:	bd10      	pop	{r4, pc}
 8008276:	bf00      	nop
 8008278:	0800900f 	.word	0x0800900f
 800827c:	08009080 	.word	0x08009080

08008280 <__multiply>:
 8008280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008284:	4614      	mov	r4, r2
 8008286:	690a      	ldr	r2, [r1, #16]
 8008288:	6923      	ldr	r3, [r4, #16]
 800828a:	429a      	cmp	r2, r3
 800828c:	bfb8      	it	lt
 800828e:	460b      	movlt	r3, r1
 8008290:	460d      	mov	r5, r1
 8008292:	bfbc      	itt	lt
 8008294:	4625      	movlt	r5, r4
 8008296:	461c      	movlt	r4, r3
 8008298:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800829c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80082a0:	68ab      	ldr	r3, [r5, #8]
 80082a2:	6869      	ldr	r1, [r5, #4]
 80082a4:	eb0a 0709 	add.w	r7, sl, r9
 80082a8:	42bb      	cmp	r3, r7
 80082aa:	b085      	sub	sp, #20
 80082ac:	bfb8      	it	lt
 80082ae:	3101      	addlt	r1, #1
 80082b0:	f7ff fed4 	bl	800805c <_Balloc>
 80082b4:	b930      	cbnz	r0, 80082c4 <__multiply+0x44>
 80082b6:	4602      	mov	r2, r0
 80082b8:	4b42      	ldr	r3, [pc, #264]	; (80083c4 <__multiply+0x144>)
 80082ba:	4843      	ldr	r0, [pc, #268]	; (80083c8 <__multiply+0x148>)
 80082bc:	f240 115d 	movw	r1, #349	; 0x15d
 80082c0:	f000 fcc4 	bl	8008c4c <__assert_func>
 80082c4:	f100 0614 	add.w	r6, r0, #20
 80082c8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80082cc:	4633      	mov	r3, r6
 80082ce:	2200      	movs	r2, #0
 80082d0:	4543      	cmp	r3, r8
 80082d2:	d31e      	bcc.n	8008312 <__multiply+0x92>
 80082d4:	f105 0c14 	add.w	ip, r5, #20
 80082d8:	f104 0314 	add.w	r3, r4, #20
 80082dc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80082e0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80082e4:	9202      	str	r2, [sp, #8]
 80082e6:	ebac 0205 	sub.w	r2, ip, r5
 80082ea:	3a15      	subs	r2, #21
 80082ec:	f022 0203 	bic.w	r2, r2, #3
 80082f0:	3204      	adds	r2, #4
 80082f2:	f105 0115 	add.w	r1, r5, #21
 80082f6:	458c      	cmp	ip, r1
 80082f8:	bf38      	it	cc
 80082fa:	2204      	movcc	r2, #4
 80082fc:	9201      	str	r2, [sp, #4]
 80082fe:	9a02      	ldr	r2, [sp, #8]
 8008300:	9303      	str	r3, [sp, #12]
 8008302:	429a      	cmp	r2, r3
 8008304:	d808      	bhi.n	8008318 <__multiply+0x98>
 8008306:	2f00      	cmp	r7, #0
 8008308:	dc55      	bgt.n	80083b6 <__multiply+0x136>
 800830a:	6107      	str	r7, [r0, #16]
 800830c:	b005      	add	sp, #20
 800830e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008312:	f843 2b04 	str.w	r2, [r3], #4
 8008316:	e7db      	b.n	80082d0 <__multiply+0x50>
 8008318:	f8b3 a000 	ldrh.w	sl, [r3]
 800831c:	f1ba 0f00 	cmp.w	sl, #0
 8008320:	d020      	beq.n	8008364 <__multiply+0xe4>
 8008322:	f105 0e14 	add.w	lr, r5, #20
 8008326:	46b1      	mov	r9, r6
 8008328:	2200      	movs	r2, #0
 800832a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800832e:	f8d9 b000 	ldr.w	fp, [r9]
 8008332:	b2a1      	uxth	r1, r4
 8008334:	fa1f fb8b 	uxth.w	fp, fp
 8008338:	fb0a b101 	mla	r1, sl, r1, fp
 800833c:	4411      	add	r1, r2
 800833e:	f8d9 2000 	ldr.w	r2, [r9]
 8008342:	0c24      	lsrs	r4, r4, #16
 8008344:	0c12      	lsrs	r2, r2, #16
 8008346:	fb0a 2404 	mla	r4, sl, r4, r2
 800834a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800834e:	b289      	uxth	r1, r1
 8008350:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008354:	45f4      	cmp	ip, lr
 8008356:	f849 1b04 	str.w	r1, [r9], #4
 800835a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800835e:	d8e4      	bhi.n	800832a <__multiply+0xaa>
 8008360:	9901      	ldr	r1, [sp, #4]
 8008362:	5072      	str	r2, [r6, r1]
 8008364:	9a03      	ldr	r2, [sp, #12]
 8008366:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800836a:	3304      	adds	r3, #4
 800836c:	f1b9 0f00 	cmp.w	r9, #0
 8008370:	d01f      	beq.n	80083b2 <__multiply+0x132>
 8008372:	6834      	ldr	r4, [r6, #0]
 8008374:	f105 0114 	add.w	r1, r5, #20
 8008378:	46b6      	mov	lr, r6
 800837a:	f04f 0a00 	mov.w	sl, #0
 800837e:	880a      	ldrh	r2, [r1, #0]
 8008380:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008384:	fb09 b202 	mla	r2, r9, r2, fp
 8008388:	4492      	add	sl, r2
 800838a:	b2a4      	uxth	r4, r4
 800838c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008390:	f84e 4b04 	str.w	r4, [lr], #4
 8008394:	f851 4b04 	ldr.w	r4, [r1], #4
 8008398:	f8be 2000 	ldrh.w	r2, [lr]
 800839c:	0c24      	lsrs	r4, r4, #16
 800839e:	fb09 2404 	mla	r4, r9, r4, r2
 80083a2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80083a6:	458c      	cmp	ip, r1
 80083a8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80083ac:	d8e7      	bhi.n	800837e <__multiply+0xfe>
 80083ae:	9a01      	ldr	r2, [sp, #4]
 80083b0:	50b4      	str	r4, [r6, r2]
 80083b2:	3604      	adds	r6, #4
 80083b4:	e7a3      	b.n	80082fe <__multiply+0x7e>
 80083b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1a5      	bne.n	800830a <__multiply+0x8a>
 80083be:	3f01      	subs	r7, #1
 80083c0:	e7a1      	b.n	8008306 <__multiply+0x86>
 80083c2:	bf00      	nop
 80083c4:	0800900f 	.word	0x0800900f
 80083c8:	08009080 	.word	0x08009080

080083cc <__pow5mult>:
 80083cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083d0:	4615      	mov	r5, r2
 80083d2:	f012 0203 	ands.w	r2, r2, #3
 80083d6:	4606      	mov	r6, r0
 80083d8:	460f      	mov	r7, r1
 80083da:	d007      	beq.n	80083ec <__pow5mult+0x20>
 80083dc:	4c25      	ldr	r4, [pc, #148]	; (8008474 <__pow5mult+0xa8>)
 80083de:	3a01      	subs	r2, #1
 80083e0:	2300      	movs	r3, #0
 80083e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083e6:	f7ff fe9b 	bl	8008120 <__multadd>
 80083ea:	4607      	mov	r7, r0
 80083ec:	10ad      	asrs	r5, r5, #2
 80083ee:	d03d      	beq.n	800846c <__pow5mult+0xa0>
 80083f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80083f2:	b97c      	cbnz	r4, 8008414 <__pow5mult+0x48>
 80083f4:	2010      	movs	r0, #16
 80083f6:	f7ff fe1b 	bl	8008030 <malloc>
 80083fa:	4602      	mov	r2, r0
 80083fc:	6270      	str	r0, [r6, #36]	; 0x24
 80083fe:	b928      	cbnz	r0, 800840c <__pow5mult+0x40>
 8008400:	4b1d      	ldr	r3, [pc, #116]	; (8008478 <__pow5mult+0xac>)
 8008402:	481e      	ldr	r0, [pc, #120]	; (800847c <__pow5mult+0xb0>)
 8008404:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008408:	f000 fc20 	bl	8008c4c <__assert_func>
 800840c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008410:	6004      	str	r4, [r0, #0]
 8008412:	60c4      	str	r4, [r0, #12]
 8008414:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008418:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800841c:	b94c      	cbnz	r4, 8008432 <__pow5mult+0x66>
 800841e:	f240 2171 	movw	r1, #625	; 0x271
 8008422:	4630      	mov	r0, r6
 8008424:	f7ff ff16 	bl	8008254 <__i2b>
 8008428:	2300      	movs	r3, #0
 800842a:	f8c8 0008 	str.w	r0, [r8, #8]
 800842e:	4604      	mov	r4, r0
 8008430:	6003      	str	r3, [r0, #0]
 8008432:	f04f 0900 	mov.w	r9, #0
 8008436:	07eb      	lsls	r3, r5, #31
 8008438:	d50a      	bpl.n	8008450 <__pow5mult+0x84>
 800843a:	4639      	mov	r1, r7
 800843c:	4622      	mov	r2, r4
 800843e:	4630      	mov	r0, r6
 8008440:	f7ff ff1e 	bl	8008280 <__multiply>
 8008444:	4639      	mov	r1, r7
 8008446:	4680      	mov	r8, r0
 8008448:	4630      	mov	r0, r6
 800844a:	f7ff fe47 	bl	80080dc <_Bfree>
 800844e:	4647      	mov	r7, r8
 8008450:	106d      	asrs	r5, r5, #1
 8008452:	d00b      	beq.n	800846c <__pow5mult+0xa0>
 8008454:	6820      	ldr	r0, [r4, #0]
 8008456:	b938      	cbnz	r0, 8008468 <__pow5mult+0x9c>
 8008458:	4622      	mov	r2, r4
 800845a:	4621      	mov	r1, r4
 800845c:	4630      	mov	r0, r6
 800845e:	f7ff ff0f 	bl	8008280 <__multiply>
 8008462:	6020      	str	r0, [r4, #0]
 8008464:	f8c0 9000 	str.w	r9, [r0]
 8008468:	4604      	mov	r4, r0
 800846a:	e7e4      	b.n	8008436 <__pow5mult+0x6a>
 800846c:	4638      	mov	r0, r7
 800846e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008472:	bf00      	nop
 8008474:	080091d0 	.word	0x080091d0
 8008478:	08008f99 	.word	0x08008f99
 800847c:	08009080 	.word	0x08009080

08008480 <__lshift>:
 8008480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008484:	460c      	mov	r4, r1
 8008486:	6849      	ldr	r1, [r1, #4]
 8008488:	6923      	ldr	r3, [r4, #16]
 800848a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800848e:	68a3      	ldr	r3, [r4, #8]
 8008490:	4607      	mov	r7, r0
 8008492:	4691      	mov	r9, r2
 8008494:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008498:	f108 0601 	add.w	r6, r8, #1
 800849c:	42b3      	cmp	r3, r6
 800849e:	db0b      	blt.n	80084b8 <__lshift+0x38>
 80084a0:	4638      	mov	r0, r7
 80084a2:	f7ff fddb 	bl	800805c <_Balloc>
 80084a6:	4605      	mov	r5, r0
 80084a8:	b948      	cbnz	r0, 80084be <__lshift+0x3e>
 80084aa:	4602      	mov	r2, r0
 80084ac:	4b28      	ldr	r3, [pc, #160]	; (8008550 <__lshift+0xd0>)
 80084ae:	4829      	ldr	r0, [pc, #164]	; (8008554 <__lshift+0xd4>)
 80084b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80084b4:	f000 fbca 	bl	8008c4c <__assert_func>
 80084b8:	3101      	adds	r1, #1
 80084ba:	005b      	lsls	r3, r3, #1
 80084bc:	e7ee      	b.n	800849c <__lshift+0x1c>
 80084be:	2300      	movs	r3, #0
 80084c0:	f100 0114 	add.w	r1, r0, #20
 80084c4:	f100 0210 	add.w	r2, r0, #16
 80084c8:	4618      	mov	r0, r3
 80084ca:	4553      	cmp	r3, sl
 80084cc:	db33      	blt.n	8008536 <__lshift+0xb6>
 80084ce:	6920      	ldr	r0, [r4, #16]
 80084d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084d4:	f104 0314 	add.w	r3, r4, #20
 80084d8:	f019 091f 	ands.w	r9, r9, #31
 80084dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80084e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80084e4:	d02b      	beq.n	800853e <__lshift+0xbe>
 80084e6:	f1c9 0e20 	rsb	lr, r9, #32
 80084ea:	468a      	mov	sl, r1
 80084ec:	2200      	movs	r2, #0
 80084ee:	6818      	ldr	r0, [r3, #0]
 80084f0:	fa00 f009 	lsl.w	r0, r0, r9
 80084f4:	4302      	orrs	r2, r0
 80084f6:	f84a 2b04 	str.w	r2, [sl], #4
 80084fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80084fe:	459c      	cmp	ip, r3
 8008500:	fa22 f20e 	lsr.w	r2, r2, lr
 8008504:	d8f3      	bhi.n	80084ee <__lshift+0x6e>
 8008506:	ebac 0304 	sub.w	r3, ip, r4
 800850a:	3b15      	subs	r3, #21
 800850c:	f023 0303 	bic.w	r3, r3, #3
 8008510:	3304      	adds	r3, #4
 8008512:	f104 0015 	add.w	r0, r4, #21
 8008516:	4584      	cmp	ip, r0
 8008518:	bf38      	it	cc
 800851a:	2304      	movcc	r3, #4
 800851c:	50ca      	str	r2, [r1, r3]
 800851e:	b10a      	cbz	r2, 8008524 <__lshift+0xa4>
 8008520:	f108 0602 	add.w	r6, r8, #2
 8008524:	3e01      	subs	r6, #1
 8008526:	4638      	mov	r0, r7
 8008528:	612e      	str	r6, [r5, #16]
 800852a:	4621      	mov	r1, r4
 800852c:	f7ff fdd6 	bl	80080dc <_Bfree>
 8008530:	4628      	mov	r0, r5
 8008532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008536:	f842 0f04 	str.w	r0, [r2, #4]!
 800853a:	3301      	adds	r3, #1
 800853c:	e7c5      	b.n	80084ca <__lshift+0x4a>
 800853e:	3904      	subs	r1, #4
 8008540:	f853 2b04 	ldr.w	r2, [r3], #4
 8008544:	f841 2f04 	str.w	r2, [r1, #4]!
 8008548:	459c      	cmp	ip, r3
 800854a:	d8f9      	bhi.n	8008540 <__lshift+0xc0>
 800854c:	e7ea      	b.n	8008524 <__lshift+0xa4>
 800854e:	bf00      	nop
 8008550:	0800900f 	.word	0x0800900f
 8008554:	08009080 	.word	0x08009080

08008558 <__mcmp>:
 8008558:	b530      	push	{r4, r5, lr}
 800855a:	6902      	ldr	r2, [r0, #16]
 800855c:	690c      	ldr	r4, [r1, #16]
 800855e:	1b12      	subs	r2, r2, r4
 8008560:	d10e      	bne.n	8008580 <__mcmp+0x28>
 8008562:	f100 0314 	add.w	r3, r0, #20
 8008566:	3114      	adds	r1, #20
 8008568:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800856c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008570:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008574:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008578:	42a5      	cmp	r5, r4
 800857a:	d003      	beq.n	8008584 <__mcmp+0x2c>
 800857c:	d305      	bcc.n	800858a <__mcmp+0x32>
 800857e:	2201      	movs	r2, #1
 8008580:	4610      	mov	r0, r2
 8008582:	bd30      	pop	{r4, r5, pc}
 8008584:	4283      	cmp	r3, r0
 8008586:	d3f3      	bcc.n	8008570 <__mcmp+0x18>
 8008588:	e7fa      	b.n	8008580 <__mcmp+0x28>
 800858a:	f04f 32ff 	mov.w	r2, #4294967295
 800858e:	e7f7      	b.n	8008580 <__mcmp+0x28>

08008590 <__mdiff>:
 8008590:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008594:	460c      	mov	r4, r1
 8008596:	4606      	mov	r6, r0
 8008598:	4611      	mov	r1, r2
 800859a:	4620      	mov	r0, r4
 800859c:	4617      	mov	r7, r2
 800859e:	f7ff ffdb 	bl	8008558 <__mcmp>
 80085a2:	1e05      	subs	r5, r0, #0
 80085a4:	d110      	bne.n	80085c8 <__mdiff+0x38>
 80085a6:	4629      	mov	r1, r5
 80085a8:	4630      	mov	r0, r6
 80085aa:	f7ff fd57 	bl	800805c <_Balloc>
 80085ae:	b930      	cbnz	r0, 80085be <__mdiff+0x2e>
 80085b0:	4b39      	ldr	r3, [pc, #228]	; (8008698 <__mdiff+0x108>)
 80085b2:	4602      	mov	r2, r0
 80085b4:	f240 2132 	movw	r1, #562	; 0x232
 80085b8:	4838      	ldr	r0, [pc, #224]	; (800869c <__mdiff+0x10c>)
 80085ba:	f000 fb47 	bl	8008c4c <__assert_func>
 80085be:	2301      	movs	r3, #1
 80085c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80085c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c8:	bfa4      	itt	ge
 80085ca:	463b      	movge	r3, r7
 80085cc:	4627      	movge	r7, r4
 80085ce:	4630      	mov	r0, r6
 80085d0:	6879      	ldr	r1, [r7, #4]
 80085d2:	bfa6      	itte	ge
 80085d4:	461c      	movge	r4, r3
 80085d6:	2500      	movge	r5, #0
 80085d8:	2501      	movlt	r5, #1
 80085da:	f7ff fd3f 	bl	800805c <_Balloc>
 80085de:	b920      	cbnz	r0, 80085ea <__mdiff+0x5a>
 80085e0:	4b2d      	ldr	r3, [pc, #180]	; (8008698 <__mdiff+0x108>)
 80085e2:	4602      	mov	r2, r0
 80085e4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80085e8:	e7e6      	b.n	80085b8 <__mdiff+0x28>
 80085ea:	693e      	ldr	r6, [r7, #16]
 80085ec:	60c5      	str	r5, [r0, #12]
 80085ee:	6925      	ldr	r5, [r4, #16]
 80085f0:	f107 0114 	add.w	r1, r7, #20
 80085f4:	f104 0914 	add.w	r9, r4, #20
 80085f8:	f100 0e14 	add.w	lr, r0, #20
 80085fc:	f107 0210 	add.w	r2, r7, #16
 8008600:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008604:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008608:	46f2      	mov	sl, lr
 800860a:	2700      	movs	r7, #0
 800860c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008610:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008614:	fa1f f883 	uxth.w	r8, r3
 8008618:	fa17 f78b 	uxtah	r7, r7, fp
 800861c:	0c1b      	lsrs	r3, r3, #16
 800861e:	eba7 0808 	sub.w	r8, r7, r8
 8008622:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008626:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800862a:	fa1f f888 	uxth.w	r8, r8
 800862e:	141f      	asrs	r7, r3, #16
 8008630:	454d      	cmp	r5, r9
 8008632:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008636:	f84a 3b04 	str.w	r3, [sl], #4
 800863a:	d8e7      	bhi.n	800860c <__mdiff+0x7c>
 800863c:	1b2b      	subs	r3, r5, r4
 800863e:	3b15      	subs	r3, #21
 8008640:	f023 0303 	bic.w	r3, r3, #3
 8008644:	3304      	adds	r3, #4
 8008646:	3415      	adds	r4, #21
 8008648:	42a5      	cmp	r5, r4
 800864a:	bf38      	it	cc
 800864c:	2304      	movcc	r3, #4
 800864e:	4419      	add	r1, r3
 8008650:	4473      	add	r3, lr
 8008652:	469e      	mov	lr, r3
 8008654:	460d      	mov	r5, r1
 8008656:	4565      	cmp	r5, ip
 8008658:	d30e      	bcc.n	8008678 <__mdiff+0xe8>
 800865a:	f10c 0203 	add.w	r2, ip, #3
 800865e:	1a52      	subs	r2, r2, r1
 8008660:	f022 0203 	bic.w	r2, r2, #3
 8008664:	3903      	subs	r1, #3
 8008666:	458c      	cmp	ip, r1
 8008668:	bf38      	it	cc
 800866a:	2200      	movcc	r2, #0
 800866c:	441a      	add	r2, r3
 800866e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008672:	b17b      	cbz	r3, 8008694 <__mdiff+0x104>
 8008674:	6106      	str	r6, [r0, #16]
 8008676:	e7a5      	b.n	80085c4 <__mdiff+0x34>
 8008678:	f855 8b04 	ldr.w	r8, [r5], #4
 800867c:	fa17 f488 	uxtah	r4, r7, r8
 8008680:	1422      	asrs	r2, r4, #16
 8008682:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008686:	b2a4      	uxth	r4, r4
 8008688:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800868c:	f84e 4b04 	str.w	r4, [lr], #4
 8008690:	1417      	asrs	r7, r2, #16
 8008692:	e7e0      	b.n	8008656 <__mdiff+0xc6>
 8008694:	3e01      	subs	r6, #1
 8008696:	e7ea      	b.n	800866e <__mdiff+0xde>
 8008698:	0800900f 	.word	0x0800900f
 800869c:	08009080 	.word	0x08009080

080086a0 <__d2b>:
 80086a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086a4:	4689      	mov	r9, r1
 80086a6:	2101      	movs	r1, #1
 80086a8:	ec57 6b10 	vmov	r6, r7, d0
 80086ac:	4690      	mov	r8, r2
 80086ae:	f7ff fcd5 	bl	800805c <_Balloc>
 80086b2:	4604      	mov	r4, r0
 80086b4:	b930      	cbnz	r0, 80086c4 <__d2b+0x24>
 80086b6:	4602      	mov	r2, r0
 80086b8:	4b25      	ldr	r3, [pc, #148]	; (8008750 <__d2b+0xb0>)
 80086ba:	4826      	ldr	r0, [pc, #152]	; (8008754 <__d2b+0xb4>)
 80086bc:	f240 310a 	movw	r1, #778	; 0x30a
 80086c0:	f000 fac4 	bl	8008c4c <__assert_func>
 80086c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80086c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80086cc:	bb35      	cbnz	r5, 800871c <__d2b+0x7c>
 80086ce:	2e00      	cmp	r6, #0
 80086d0:	9301      	str	r3, [sp, #4]
 80086d2:	d028      	beq.n	8008726 <__d2b+0x86>
 80086d4:	4668      	mov	r0, sp
 80086d6:	9600      	str	r6, [sp, #0]
 80086d8:	f7ff fd8c 	bl	80081f4 <__lo0bits>
 80086dc:	9900      	ldr	r1, [sp, #0]
 80086de:	b300      	cbz	r0, 8008722 <__d2b+0x82>
 80086e0:	9a01      	ldr	r2, [sp, #4]
 80086e2:	f1c0 0320 	rsb	r3, r0, #32
 80086e6:	fa02 f303 	lsl.w	r3, r2, r3
 80086ea:	430b      	orrs	r3, r1
 80086ec:	40c2      	lsrs	r2, r0
 80086ee:	6163      	str	r3, [r4, #20]
 80086f0:	9201      	str	r2, [sp, #4]
 80086f2:	9b01      	ldr	r3, [sp, #4]
 80086f4:	61a3      	str	r3, [r4, #24]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	bf14      	ite	ne
 80086fa:	2202      	movne	r2, #2
 80086fc:	2201      	moveq	r2, #1
 80086fe:	6122      	str	r2, [r4, #16]
 8008700:	b1d5      	cbz	r5, 8008738 <__d2b+0x98>
 8008702:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008706:	4405      	add	r5, r0
 8008708:	f8c9 5000 	str.w	r5, [r9]
 800870c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008710:	f8c8 0000 	str.w	r0, [r8]
 8008714:	4620      	mov	r0, r4
 8008716:	b003      	add	sp, #12
 8008718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800871c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008720:	e7d5      	b.n	80086ce <__d2b+0x2e>
 8008722:	6161      	str	r1, [r4, #20]
 8008724:	e7e5      	b.n	80086f2 <__d2b+0x52>
 8008726:	a801      	add	r0, sp, #4
 8008728:	f7ff fd64 	bl	80081f4 <__lo0bits>
 800872c:	9b01      	ldr	r3, [sp, #4]
 800872e:	6163      	str	r3, [r4, #20]
 8008730:	2201      	movs	r2, #1
 8008732:	6122      	str	r2, [r4, #16]
 8008734:	3020      	adds	r0, #32
 8008736:	e7e3      	b.n	8008700 <__d2b+0x60>
 8008738:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800873c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008740:	f8c9 0000 	str.w	r0, [r9]
 8008744:	6918      	ldr	r0, [r3, #16]
 8008746:	f7ff fd35 	bl	80081b4 <__hi0bits>
 800874a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800874e:	e7df      	b.n	8008710 <__d2b+0x70>
 8008750:	0800900f 	.word	0x0800900f
 8008754:	08009080 	.word	0x08009080

08008758 <_calloc_r>:
 8008758:	b513      	push	{r0, r1, r4, lr}
 800875a:	434a      	muls	r2, r1
 800875c:	4611      	mov	r1, r2
 800875e:	9201      	str	r2, [sp, #4]
 8008760:	f000 f85a 	bl	8008818 <_malloc_r>
 8008764:	4604      	mov	r4, r0
 8008766:	b118      	cbz	r0, 8008770 <_calloc_r+0x18>
 8008768:	9a01      	ldr	r2, [sp, #4]
 800876a:	2100      	movs	r1, #0
 800876c:	f7fd fe04 	bl	8006378 <memset>
 8008770:	4620      	mov	r0, r4
 8008772:	b002      	add	sp, #8
 8008774:	bd10      	pop	{r4, pc}
	...

08008778 <_free_r>:
 8008778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800877a:	2900      	cmp	r1, #0
 800877c:	d048      	beq.n	8008810 <_free_r+0x98>
 800877e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008782:	9001      	str	r0, [sp, #4]
 8008784:	2b00      	cmp	r3, #0
 8008786:	f1a1 0404 	sub.w	r4, r1, #4
 800878a:	bfb8      	it	lt
 800878c:	18e4      	addlt	r4, r4, r3
 800878e:	f000 fae3 	bl	8008d58 <__malloc_lock>
 8008792:	4a20      	ldr	r2, [pc, #128]	; (8008814 <_free_r+0x9c>)
 8008794:	9801      	ldr	r0, [sp, #4]
 8008796:	6813      	ldr	r3, [r2, #0]
 8008798:	4615      	mov	r5, r2
 800879a:	b933      	cbnz	r3, 80087aa <_free_r+0x32>
 800879c:	6063      	str	r3, [r4, #4]
 800879e:	6014      	str	r4, [r2, #0]
 80087a0:	b003      	add	sp, #12
 80087a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087a6:	f000 badd 	b.w	8008d64 <__malloc_unlock>
 80087aa:	42a3      	cmp	r3, r4
 80087ac:	d90b      	bls.n	80087c6 <_free_r+0x4e>
 80087ae:	6821      	ldr	r1, [r4, #0]
 80087b0:	1862      	adds	r2, r4, r1
 80087b2:	4293      	cmp	r3, r2
 80087b4:	bf04      	itt	eq
 80087b6:	681a      	ldreq	r2, [r3, #0]
 80087b8:	685b      	ldreq	r3, [r3, #4]
 80087ba:	6063      	str	r3, [r4, #4]
 80087bc:	bf04      	itt	eq
 80087be:	1852      	addeq	r2, r2, r1
 80087c0:	6022      	streq	r2, [r4, #0]
 80087c2:	602c      	str	r4, [r5, #0]
 80087c4:	e7ec      	b.n	80087a0 <_free_r+0x28>
 80087c6:	461a      	mov	r2, r3
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	b10b      	cbz	r3, 80087d0 <_free_r+0x58>
 80087cc:	42a3      	cmp	r3, r4
 80087ce:	d9fa      	bls.n	80087c6 <_free_r+0x4e>
 80087d0:	6811      	ldr	r1, [r2, #0]
 80087d2:	1855      	adds	r5, r2, r1
 80087d4:	42a5      	cmp	r5, r4
 80087d6:	d10b      	bne.n	80087f0 <_free_r+0x78>
 80087d8:	6824      	ldr	r4, [r4, #0]
 80087da:	4421      	add	r1, r4
 80087dc:	1854      	adds	r4, r2, r1
 80087de:	42a3      	cmp	r3, r4
 80087e0:	6011      	str	r1, [r2, #0]
 80087e2:	d1dd      	bne.n	80087a0 <_free_r+0x28>
 80087e4:	681c      	ldr	r4, [r3, #0]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	6053      	str	r3, [r2, #4]
 80087ea:	4421      	add	r1, r4
 80087ec:	6011      	str	r1, [r2, #0]
 80087ee:	e7d7      	b.n	80087a0 <_free_r+0x28>
 80087f0:	d902      	bls.n	80087f8 <_free_r+0x80>
 80087f2:	230c      	movs	r3, #12
 80087f4:	6003      	str	r3, [r0, #0]
 80087f6:	e7d3      	b.n	80087a0 <_free_r+0x28>
 80087f8:	6825      	ldr	r5, [r4, #0]
 80087fa:	1961      	adds	r1, r4, r5
 80087fc:	428b      	cmp	r3, r1
 80087fe:	bf04      	itt	eq
 8008800:	6819      	ldreq	r1, [r3, #0]
 8008802:	685b      	ldreq	r3, [r3, #4]
 8008804:	6063      	str	r3, [r4, #4]
 8008806:	bf04      	itt	eq
 8008808:	1949      	addeq	r1, r1, r5
 800880a:	6021      	streq	r1, [r4, #0]
 800880c:	6054      	str	r4, [r2, #4]
 800880e:	e7c7      	b.n	80087a0 <_free_r+0x28>
 8008810:	b003      	add	sp, #12
 8008812:	bd30      	pop	{r4, r5, pc}
 8008814:	20000538 	.word	0x20000538

08008818 <_malloc_r>:
 8008818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800881a:	1ccd      	adds	r5, r1, #3
 800881c:	f025 0503 	bic.w	r5, r5, #3
 8008820:	3508      	adds	r5, #8
 8008822:	2d0c      	cmp	r5, #12
 8008824:	bf38      	it	cc
 8008826:	250c      	movcc	r5, #12
 8008828:	2d00      	cmp	r5, #0
 800882a:	4606      	mov	r6, r0
 800882c:	db01      	blt.n	8008832 <_malloc_r+0x1a>
 800882e:	42a9      	cmp	r1, r5
 8008830:	d903      	bls.n	800883a <_malloc_r+0x22>
 8008832:	230c      	movs	r3, #12
 8008834:	6033      	str	r3, [r6, #0]
 8008836:	2000      	movs	r0, #0
 8008838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800883a:	f000 fa8d 	bl	8008d58 <__malloc_lock>
 800883e:	4921      	ldr	r1, [pc, #132]	; (80088c4 <_malloc_r+0xac>)
 8008840:	680a      	ldr	r2, [r1, #0]
 8008842:	4614      	mov	r4, r2
 8008844:	b99c      	cbnz	r4, 800886e <_malloc_r+0x56>
 8008846:	4f20      	ldr	r7, [pc, #128]	; (80088c8 <_malloc_r+0xb0>)
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	b923      	cbnz	r3, 8008856 <_malloc_r+0x3e>
 800884c:	4621      	mov	r1, r4
 800884e:	4630      	mov	r0, r6
 8008850:	f000 f996 	bl	8008b80 <_sbrk_r>
 8008854:	6038      	str	r0, [r7, #0]
 8008856:	4629      	mov	r1, r5
 8008858:	4630      	mov	r0, r6
 800885a:	f000 f991 	bl	8008b80 <_sbrk_r>
 800885e:	1c43      	adds	r3, r0, #1
 8008860:	d123      	bne.n	80088aa <_malloc_r+0x92>
 8008862:	230c      	movs	r3, #12
 8008864:	6033      	str	r3, [r6, #0]
 8008866:	4630      	mov	r0, r6
 8008868:	f000 fa7c 	bl	8008d64 <__malloc_unlock>
 800886c:	e7e3      	b.n	8008836 <_malloc_r+0x1e>
 800886e:	6823      	ldr	r3, [r4, #0]
 8008870:	1b5b      	subs	r3, r3, r5
 8008872:	d417      	bmi.n	80088a4 <_malloc_r+0x8c>
 8008874:	2b0b      	cmp	r3, #11
 8008876:	d903      	bls.n	8008880 <_malloc_r+0x68>
 8008878:	6023      	str	r3, [r4, #0]
 800887a:	441c      	add	r4, r3
 800887c:	6025      	str	r5, [r4, #0]
 800887e:	e004      	b.n	800888a <_malloc_r+0x72>
 8008880:	6863      	ldr	r3, [r4, #4]
 8008882:	42a2      	cmp	r2, r4
 8008884:	bf0c      	ite	eq
 8008886:	600b      	streq	r3, [r1, #0]
 8008888:	6053      	strne	r3, [r2, #4]
 800888a:	4630      	mov	r0, r6
 800888c:	f000 fa6a 	bl	8008d64 <__malloc_unlock>
 8008890:	f104 000b 	add.w	r0, r4, #11
 8008894:	1d23      	adds	r3, r4, #4
 8008896:	f020 0007 	bic.w	r0, r0, #7
 800889a:	1ac2      	subs	r2, r0, r3
 800889c:	d0cc      	beq.n	8008838 <_malloc_r+0x20>
 800889e:	1a1b      	subs	r3, r3, r0
 80088a0:	50a3      	str	r3, [r4, r2]
 80088a2:	e7c9      	b.n	8008838 <_malloc_r+0x20>
 80088a4:	4622      	mov	r2, r4
 80088a6:	6864      	ldr	r4, [r4, #4]
 80088a8:	e7cc      	b.n	8008844 <_malloc_r+0x2c>
 80088aa:	1cc4      	adds	r4, r0, #3
 80088ac:	f024 0403 	bic.w	r4, r4, #3
 80088b0:	42a0      	cmp	r0, r4
 80088b2:	d0e3      	beq.n	800887c <_malloc_r+0x64>
 80088b4:	1a21      	subs	r1, r4, r0
 80088b6:	4630      	mov	r0, r6
 80088b8:	f000 f962 	bl	8008b80 <_sbrk_r>
 80088bc:	3001      	adds	r0, #1
 80088be:	d1dd      	bne.n	800887c <_malloc_r+0x64>
 80088c0:	e7cf      	b.n	8008862 <_malloc_r+0x4a>
 80088c2:	bf00      	nop
 80088c4:	20000538 	.word	0x20000538
 80088c8:	2000053c 	.word	0x2000053c

080088cc <__sfputc_r>:
 80088cc:	6893      	ldr	r3, [r2, #8]
 80088ce:	3b01      	subs	r3, #1
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	b410      	push	{r4}
 80088d4:	6093      	str	r3, [r2, #8]
 80088d6:	da08      	bge.n	80088ea <__sfputc_r+0x1e>
 80088d8:	6994      	ldr	r4, [r2, #24]
 80088da:	42a3      	cmp	r3, r4
 80088dc:	db01      	blt.n	80088e2 <__sfputc_r+0x16>
 80088de:	290a      	cmp	r1, #10
 80088e0:	d103      	bne.n	80088ea <__sfputc_r+0x1e>
 80088e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088e6:	f7fe ba47 	b.w	8006d78 <__swbuf_r>
 80088ea:	6813      	ldr	r3, [r2, #0]
 80088ec:	1c58      	adds	r0, r3, #1
 80088ee:	6010      	str	r0, [r2, #0]
 80088f0:	7019      	strb	r1, [r3, #0]
 80088f2:	4608      	mov	r0, r1
 80088f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088f8:	4770      	bx	lr

080088fa <__sfputs_r>:
 80088fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088fc:	4606      	mov	r6, r0
 80088fe:	460f      	mov	r7, r1
 8008900:	4614      	mov	r4, r2
 8008902:	18d5      	adds	r5, r2, r3
 8008904:	42ac      	cmp	r4, r5
 8008906:	d101      	bne.n	800890c <__sfputs_r+0x12>
 8008908:	2000      	movs	r0, #0
 800890a:	e007      	b.n	800891c <__sfputs_r+0x22>
 800890c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008910:	463a      	mov	r2, r7
 8008912:	4630      	mov	r0, r6
 8008914:	f7ff ffda 	bl	80088cc <__sfputc_r>
 8008918:	1c43      	adds	r3, r0, #1
 800891a:	d1f3      	bne.n	8008904 <__sfputs_r+0xa>
 800891c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008920 <_vfiprintf_r>:
 8008920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008924:	460d      	mov	r5, r1
 8008926:	b09d      	sub	sp, #116	; 0x74
 8008928:	4614      	mov	r4, r2
 800892a:	4698      	mov	r8, r3
 800892c:	4606      	mov	r6, r0
 800892e:	b118      	cbz	r0, 8008938 <_vfiprintf_r+0x18>
 8008930:	6983      	ldr	r3, [r0, #24]
 8008932:	b90b      	cbnz	r3, 8008938 <_vfiprintf_r+0x18>
 8008934:	f7ff fa72 	bl	8007e1c <__sinit>
 8008938:	4b89      	ldr	r3, [pc, #548]	; (8008b60 <_vfiprintf_r+0x240>)
 800893a:	429d      	cmp	r5, r3
 800893c:	d11b      	bne.n	8008976 <_vfiprintf_r+0x56>
 800893e:	6875      	ldr	r5, [r6, #4]
 8008940:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008942:	07d9      	lsls	r1, r3, #31
 8008944:	d405      	bmi.n	8008952 <_vfiprintf_r+0x32>
 8008946:	89ab      	ldrh	r3, [r5, #12]
 8008948:	059a      	lsls	r2, r3, #22
 800894a:	d402      	bmi.n	8008952 <_vfiprintf_r+0x32>
 800894c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800894e:	f7ff fb08 	bl	8007f62 <__retarget_lock_acquire_recursive>
 8008952:	89ab      	ldrh	r3, [r5, #12]
 8008954:	071b      	lsls	r3, r3, #28
 8008956:	d501      	bpl.n	800895c <_vfiprintf_r+0x3c>
 8008958:	692b      	ldr	r3, [r5, #16]
 800895a:	b9eb      	cbnz	r3, 8008998 <_vfiprintf_r+0x78>
 800895c:	4629      	mov	r1, r5
 800895e:	4630      	mov	r0, r6
 8008960:	f7fe fa5c 	bl	8006e1c <__swsetup_r>
 8008964:	b1c0      	cbz	r0, 8008998 <_vfiprintf_r+0x78>
 8008966:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008968:	07dc      	lsls	r4, r3, #31
 800896a:	d50e      	bpl.n	800898a <_vfiprintf_r+0x6a>
 800896c:	f04f 30ff 	mov.w	r0, #4294967295
 8008970:	b01d      	add	sp, #116	; 0x74
 8008972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008976:	4b7b      	ldr	r3, [pc, #492]	; (8008b64 <_vfiprintf_r+0x244>)
 8008978:	429d      	cmp	r5, r3
 800897a:	d101      	bne.n	8008980 <_vfiprintf_r+0x60>
 800897c:	68b5      	ldr	r5, [r6, #8]
 800897e:	e7df      	b.n	8008940 <_vfiprintf_r+0x20>
 8008980:	4b79      	ldr	r3, [pc, #484]	; (8008b68 <_vfiprintf_r+0x248>)
 8008982:	429d      	cmp	r5, r3
 8008984:	bf08      	it	eq
 8008986:	68f5      	ldreq	r5, [r6, #12]
 8008988:	e7da      	b.n	8008940 <_vfiprintf_r+0x20>
 800898a:	89ab      	ldrh	r3, [r5, #12]
 800898c:	0598      	lsls	r0, r3, #22
 800898e:	d4ed      	bmi.n	800896c <_vfiprintf_r+0x4c>
 8008990:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008992:	f7ff fae7 	bl	8007f64 <__retarget_lock_release_recursive>
 8008996:	e7e9      	b.n	800896c <_vfiprintf_r+0x4c>
 8008998:	2300      	movs	r3, #0
 800899a:	9309      	str	r3, [sp, #36]	; 0x24
 800899c:	2320      	movs	r3, #32
 800899e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80089a6:	2330      	movs	r3, #48	; 0x30
 80089a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008b6c <_vfiprintf_r+0x24c>
 80089ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089b0:	f04f 0901 	mov.w	r9, #1
 80089b4:	4623      	mov	r3, r4
 80089b6:	469a      	mov	sl, r3
 80089b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089bc:	b10a      	cbz	r2, 80089c2 <_vfiprintf_r+0xa2>
 80089be:	2a25      	cmp	r2, #37	; 0x25
 80089c0:	d1f9      	bne.n	80089b6 <_vfiprintf_r+0x96>
 80089c2:	ebba 0b04 	subs.w	fp, sl, r4
 80089c6:	d00b      	beq.n	80089e0 <_vfiprintf_r+0xc0>
 80089c8:	465b      	mov	r3, fp
 80089ca:	4622      	mov	r2, r4
 80089cc:	4629      	mov	r1, r5
 80089ce:	4630      	mov	r0, r6
 80089d0:	f7ff ff93 	bl	80088fa <__sfputs_r>
 80089d4:	3001      	adds	r0, #1
 80089d6:	f000 80aa 	beq.w	8008b2e <_vfiprintf_r+0x20e>
 80089da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089dc:	445a      	add	r2, fp
 80089de:	9209      	str	r2, [sp, #36]	; 0x24
 80089e0:	f89a 3000 	ldrb.w	r3, [sl]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	f000 80a2 	beq.w	8008b2e <_vfiprintf_r+0x20e>
 80089ea:	2300      	movs	r3, #0
 80089ec:	f04f 32ff 	mov.w	r2, #4294967295
 80089f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089f4:	f10a 0a01 	add.w	sl, sl, #1
 80089f8:	9304      	str	r3, [sp, #16]
 80089fa:	9307      	str	r3, [sp, #28]
 80089fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a00:	931a      	str	r3, [sp, #104]	; 0x68
 8008a02:	4654      	mov	r4, sl
 8008a04:	2205      	movs	r2, #5
 8008a06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a0a:	4858      	ldr	r0, [pc, #352]	; (8008b6c <_vfiprintf_r+0x24c>)
 8008a0c:	f7f7 fc10 	bl	8000230 <memchr>
 8008a10:	9a04      	ldr	r2, [sp, #16]
 8008a12:	b9d8      	cbnz	r0, 8008a4c <_vfiprintf_r+0x12c>
 8008a14:	06d1      	lsls	r1, r2, #27
 8008a16:	bf44      	itt	mi
 8008a18:	2320      	movmi	r3, #32
 8008a1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a1e:	0713      	lsls	r3, r2, #28
 8008a20:	bf44      	itt	mi
 8008a22:	232b      	movmi	r3, #43	; 0x2b
 8008a24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a28:	f89a 3000 	ldrb.w	r3, [sl]
 8008a2c:	2b2a      	cmp	r3, #42	; 0x2a
 8008a2e:	d015      	beq.n	8008a5c <_vfiprintf_r+0x13c>
 8008a30:	9a07      	ldr	r2, [sp, #28]
 8008a32:	4654      	mov	r4, sl
 8008a34:	2000      	movs	r0, #0
 8008a36:	f04f 0c0a 	mov.w	ip, #10
 8008a3a:	4621      	mov	r1, r4
 8008a3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a40:	3b30      	subs	r3, #48	; 0x30
 8008a42:	2b09      	cmp	r3, #9
 8008a44:	d94e      	bls.n	8008ae4 <_vfiprintf_r+0x1c4>
 8008a46:	b1b0      	cbz	r0, 8008a76 <_vfiprintf_r+0x156>
 8008a48:	9207      	str	r2, [sp, #28]
 8008a4a:	e014      	b.n	8008a76 <_vfiprintf_r+0x156>
 8008a4c:	eba0 0308 	sub.w	r3, r0, r8
 8008a50:	fa09 f303 	lsl.w	r3, r9, r3
 8008a54:	4313      	orrs	r3, r2
 8008a56:	9304      	str	r3, [sp, #16]
 8008a58:	46a2      	mov	sl, r4
 8008a5a:	e7d2      	b.n	8008a02 <_vfiprintf_r+0xe2>
 8008a5c:	9b03      	ldr	r3, [sp, #12]
 8008a5e:	1d19      	adds	r1, r3, #4
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	9103      	str	r1, [sp, #12]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	bfbb      	ittet	lt
 8008a68:	425b      	neglt	r3, r3
 8008a6a:	f042 0202 	orrlt.w	r2, r2, #2
 8008a6e:	9307      	strge	r3, [sp, #28]
 8008a70:	9307      	strlt	r3, [sp, #28]
 8008a72:	bfb8      	it	lt
 8008a74:	9204      	strlt	r2, [sp, #16]
 8008a76:	7823      	ldrb	r3, [r4, #0]
 8008a78:	2b2e      	cmp	r3, #46	; 0x2e
 8008a7a:	d10c      	bne.n	8008a96 <_vfiprintf_r+0x176>
 8008a7c:	7863      	ldrb	r3, [r4, #1]
 8008a7e:	2b2a      	cmp	r3, #42	; 0x2a
 8008a80:	d135      	bne.n	8008aee <_vfiprintf_r+0x1ce>
 8008a82:	9b03      	ldr	r3, [sp, #12]
 8008a84:	1d1a      	adds	r2, r3, #4
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	9203      	str	r2, [sp, #12]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	bfb8      	it	lt
 8008a8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a92:	3402      	adds	r4, #2
 8008a94:	9305      	str	r3, [sp, #20]
 8008a96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008b7c <_vfiprintf_r+0x25c>
 8008a9a:	7821      	ldrb	r1, [r4, #0]
 8008a9c:	2203      	movs	r2, #3
 8008a9e:	4650      	mov	r0, sl
 8008aa0:	f7f7 fbc6 	bl	8000230 <memchr>
 8008aa4:	b140      	cbz	r0, 8008ab8 <_vfiprintf_r+0x198>
 8008aa6:	2340      	movs	r3, #64	; 0x40
 8008aa8:	eba0 000a 	sub.w	r0, r0, sl
 8008aac:	fa03 f000 	lsl.w	r0, r3, r0
 8008ab0:	9b04      	ldr	r3, [sp, #16]
 8008ab2:	4303      	orrs	r3, r0
 8008ab4:	3401      	adds	r4, #1
 8008ab6:	9304      	str	r3, [sp, #16]
 8008ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008abc:	482c      	ldr	r0, [pc, #176]	; (8008b70 <_vfiprintf_r+0x250>)
 8008abe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ac2:	2206      	movs	r2, #6
 8008ac4:	f7f7 fbb4 	bl	8000230 <memchr>
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	d03f      	beq.n	8008b4c <_vfiprintf_r+0x22c>
 8008acc:	4b29      	ldr	r3, [pc, #164]	; (8008b74 <_vfiprintf_r+0x254>)
 8008ace:	bb1b      	cbnz	r3, 8008b18 <_vfiprintf_r+0x1f8>
 8008ad0:	9b03      	ldr	r3, [sp, #12]
 8008ad2:	3307      	adds	r3, #7
 8008ad4:	f023 0307 	bic.w	r3, r3, #7
 8008ad8:	3308      	adds	r3, #8
 8008ada:	9303      	str	r3, [sp, #12]
 8008adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ade:	443b      	add	r3, r7
 8008ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ae2:	e767      	b.n	80089b4 <_vfiprintf_r+0x94>
 8008ae4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ae8:	460c      	mov	r4, r1
 8008aea:	2001      	movs	r0, #1
 8008aec:	e7a5      	b.n	8008a3a <_vfiprintf_r+0x11a>
 8008aee:	2300      	movs	r3, #0
 8008af0:	3401      	adds	r4, #1
 8008af2:	9305      	str	r3, [sp, #20]
 8008af4:	4619      	mov	r1, r3
 8008af6:	f04f 0c0a 	mov.w	ip, #10
 8008afa:	4620      	mov	r0, r4
 8008afc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b00:	3a30      	subs	r2, #48	; 0x30
 8008b02:	2a09      	cmp	r2, #9
 8008b04:	d903      	bls.n	8008b0e <_vfiprintf_r+0x1ee>
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d0c5      	beq.n	8008a96 <_vfiprintf_r+0x176>
 8008b0a:	9105      	str	r1, [sp, #20]
 8008b0c:	e7c3      	b.n	8008a96 <_vfiprintf_r+0x176>
 8008b0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b12:	4604      	mov	r4, r0
 8008b14:	2301      	movs	r3, #1
 8008b16:	e7f0      	b.n	8008afa <_vfiprintf_r+0x1da>
 8008b18:	ab03      	add	r3, sp, #12
 8008b1a:	9300      	str	r3, [sp, #0]
 8008b1c:	462a      	mov	r2, r5
 8008b1e:	4b16      	ldr	r3, [pc, #88]	; (8008b78 <_vfiprintf_r+0x258>)
 8008b20:	a904      	add	r1, sp, #16
 8008b22:	4630      	mov	r0, r6
 8008b24:	f7fd fcd0 	bl	80064c8 <_printf_float>
 8008b28:	4607      	mov	r7, r0
 8008b2a:	1c78      	adds	r0, r7, #1
 8008b2c:	d1d6      	bne.n	8008adc <_vfiprintf_r+0x1bc>
 8008b2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b30:	07d9      	lsls	r1, r3, #31
 8008b32:	d405      	bmi.n	8008b40 <_vfiprintf_r+0x220>
 8008b34:	89ab      	ldrh	r3, [r5, #12]
 8008b36:	059a      	lsls	r2, r3, #22
 8008b38:	d402      	bmi.n	8008b40 <_vfiprintf_r+0x220>
 8008b3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b3c:	f7ff fa12 	bl	8007f64 <__retarget_lock_release_recursive>
 8008b40:	89ab      	ldrh	r3, [r5, #12]
 8008b42:	065b      	lsls	r3, r3, #25
 8008b44:	f53f af12 	bmi.w	800896c <_vfiprintf_r+0x4c>
 8008b48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b4a:	e711      	b.n	8008970 <_vfiprintf_r+0x50>
 8008b4c:	ab03      	add	r3, sp, #12
 8008b4e:	9300      	str	r3, [sp, #0]
 8008b50:	462a      	mov	r2, r5
 8008b52:	4b09      	ldr	r3, [pc, #36]	; (8008b78 <_vfiprintf_r+0x258>)
 8008b54:	a904      	add	r1, sp, #16
 8008b56:	4630      	mov	r0, r6
 8008b58:	f7fd ff5a 	bl	8006a10 <_printf_i>
 8008b5c:	e7e4      	b.n	8008b28 <_vfiprintf_r+0x208>
 8008b5e:	bf00      	nop
 8008b60:	08009040 	.word	0x08009040
 8008b64:	08009060 	.word	0x08009060
 8008b68:	08009020 	.word	0x08009020
 8008b6c:	080091dc 	.word	0x080091dc
 8008b70:	080091e6 	.word	0x080091e6
 8008b74:	080064c9 	.word	0x080064c9
 8008b78:	080088fb 	.word	0x080088fb
 8008b7c:	080091e2 	.word	0x080091e2

08008b80 <_sbrk_r>:
 8008b80:	b538      	push	{r3, r4, r5, lr}
 8008b82:	4d06      	ldr	r5, [pc, #24]	; (8008b9c <_sbrk_r+0x1c>)
 8008b84:	2300      	movs	r3, #0
 8008b86:	4604      	mov	r4, r0
 8008b88:	4608      	mov	r0, r1
 8008b8a:	602b      	str	r3, [r5, #0]
 8008b8c:	f7f8 fdbe 	bl	800170c <_sbrk>
 8008b90:	1c43      	adds	r3, r0, #1
 8008b92:	d102      	bne.n	8008b9a <_sbrk_r+0x1a>
 8008b94:	682b      	ldr	r3, [r5, #0]
 8008b96:	b103      	cbz	r3, 8008b9a <_sbrk_r+0x1a>
 8008b98:	6023      	str	r3, [r4, #0]
 8008b9a:	bd38      	pop	{r3, r4, r5, pc}
 8008b9c:	200006c4 	.word	0x200006c4

08008ba0 <__sread>:
 8008ba0:	b510      	push	{r4, lr}
 8008ba2:	460c      	mov	r4, r1
 8008ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ba8:	f000 f8e2 	bl	8008d70 <_read_r>
 8008bac:	2800      	cmp	r0, #0
 8008bae:	bfab      	itete	ge
 8008bb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008bb2:	89a3      	ldrhlt	r3, [r4, #12]
 8008bb4:	181b      	addge	r3, r3, r0
 8008bb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008bba:	bfac      	ite	ge
 8008bbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8008bbe:	81a3      	strhlt	r3, [r4, #12]
 8008bc0:	bd10      	pop	{r4, pc}

08008bc2 <__swrite>:
 8008bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bc6:	461f      	mov	r7, r3
 8008bc8:	898b      	ldrh	r3, [r1, #12]
 8008bca:	05db      	lsls	r3, r3, #23
 8008bcc:	4605      	mov	r5, r0
 8008bce:	460c      	mov	r4, r1
 8008bd0:	4616      	mov	r6, r2
 8008bd2:	d505      	bpl.n	8008be0 <__swrite+0x1e>
 8008bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bd8:	2302      	movs	r3, #2
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f000 f898 	bl	8008d10 <_lseek_r>
 8008be0:	89a3      	ldrh	r3, [r4, #12]
 8008be2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008be6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bea:	81a3      	strh	r3, [r4, #12]
 8008bec:	4632      	mov	r2, r6
 8008bee:	463b      	mov	r3, r7
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bf6:	f000 b817 	b.w	8008c28 <_write_r>

08008bfa <__sseek>:
 8008bfa:	b510      	push	{r4, lr}
 8008bfc:	460c      	mov	r4, r1
 8008bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c02:	f000 f885 	bl	8008d10 <_lseek_r>
 8008c06:	1c43      	adds	r3, r0, #1
 8008c08:	89a3      	ldrh	r3, [r4, #12]
 8008c0a:	bf15      	itete	ne
 8008c0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c16:	81a3      	strheq	r3, [r4, #12]
 8008c18:	bf18      	it	ne
 8008c1a:	81a3      	strhne	r3, [r4, #12]
 8008c1c:	bd10      	pop	{r4, pc}

08008c1e <__sclose>:
 8008c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c22:	f000 b831 	b.w	8008c88 <_close_r>
	...

08008c28 <_write_r>:
 8008c28:	b538      	push	{r3, r4, r5, lr}
 8008c2a:	4d07      	ldr	r5, [pc, #28]	; (8008c48 <_write_r+0x20>)
 8008c2c:	4604      	mov	r4, r0
 8008c2e:	4608      	mov	r0, r1
 8008c30:	4611      	mov	r1, r2
 8008c32:	2200      	movs	r2, #0
 8008c34:	602a      	str	r2, [r5, #0]
 8008c36:	461a      	mov	r2, r3
 8008c38:	f7f8 fd17 	bl	800166a <_write>
 8008c3c:	1c43      	adds	r3, r0, #1
 8008c3e:	d102      	bne.n	8008c46 <_write_r+0x1e>
 8008c40:	682b      	ldr	r3, [r5, #0]
 8008c42:	b103      	cbz	r3, 8008c46 <_write_r+0x1e>
 8008c44:	6023      	str	r3, [r4, #0]
 8008c46:	bd38      	pop	{r3, r4, r5, pc}
 8008c48:	200006c4 	.word	0x200006c4

08008c4c <__assert_func>:
 8008c4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c4e:	4614      	mov	r4, r2
 8008c50:	461a      	mov	r2, r3
 8008c52:	4b09      	ldr	r3, [pc, #36]	; (8008c78 <__assert_func+0x2c>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4605      	mov	r5, r0
 8008c58:	68d8      	ldr	r0, [r3, #12]
 8008c5a:	b14c      	cbz	r4, 8008c70 <__assert_func+0x24>
 8008c5c:	4b07      	ldr	r3, [pc, #28]	; (8008c7c <__assert_func+0x30>)
 8008c5e:	9100      	str	r1, [sp, #0]
 8008c60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c64:	4906      	ldr	r1, [pc, #24]	; (8008c80 <__assert_func+0x34>)
 8008c66:	462b      	mov	r3, r5
 8008c68:	f000 f81e 	bl	8008ca8 <fiprintf>
 8008c6c:	f000 f89f 	bl	8008dae <abort>
 8008c70:	4b04      	ldr	r3, [pc, #16]	; (8008c84 <__assert_func+0x38>)
 8008c72:	461c      	mov	r4, r3
 8008c74:	e7f3      	b.n	8008c5e <__assert_func+0x12>
 8008c76:	bf00      	nop
 8008c78:	20000018 	.word	0x20000018
 8008c7c:	080091ed 	.word	0x080091ed
 8008c80:	080091fa 	.word	0x080091fa
 8008c84:	08009228 	.word	0x08009228

08008c88 <_close_r>:
 8008c88:	b538      	push	{r3, r4, r5, lr}
 8008c8a:	4d06      	ldr	r5, [pc, #24]	; (8008ca4 <_close_r+0x1c>)
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	4604      	mov	r4, r0
 8008c90:	4608      	mov	r0, r1
 8008c92:	602b      	str	r3, [r5, #0]
 8008c94:	f7f8 fd05 	bl	80016a2 <_close>
 8008c98:	1c43      	adds	r3, r0, #1
 8008c9a:	d102      	bne.n	8008ca2 <_close_r+0x1a>
 8008c9c:	682b      	ldr	r3, [r5, #0]
 8008c9e:	b103      	cbz	r3, 8008ca2 <_close_r+0x1a>
 8008ca0:	6023      	str	r3, [r4, #0]
 8008ca2:	bd38      	pop	{r3, r4, r5, pc}
 8008ca4:	200006c4 	.word	0x200006c4

08008ca8 <fiprintf>:
 8008ca8:	b40e      	push	{r1, r2, r3}
 8008caa:	b503      	push	{r0, r1, lr}
 8008cac:	4601      	mov	r1, r0
 8008cae:	ab03      	add	r3, sp, #12
 8008cb0:	4805      	ldr	r0, [pc, #20]	; (8008cc8 <fiprintf+0x20>)
 8008cb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cb6:	6800      	ldr	r0, [r0, #0]
 8008cb8:	9301      	str	r3, [sp, #4]
 8008cba:	f7ff fe31 	bl	8008920 <_vfiprintf_r>
 8008cbe:	b002      	add	sp, #8
 8008cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cc4:	b003      	add	sp, #12
 8008cc6:	4770      	bx	lr
 8008cc8:	20000018 	.word	0x20000018

08008ccc <_fstat_r>:
 8008ccc:	b538      	push	{r3, r4, r5, lr}
 8008cce:	4d07      	ldr	r5, [pc, #28]	; (8008cec <_fstat_r+0x20>)
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	4608      	mov	r0, r1
 8008cd6:	4611      	mov	r1, r2
 8008cd8:	602b      	str	r3, [r5, #0]
 8008cda:	f7f8 fcee 	bl	80016ba <_fstat>
 8008cde:	1c43      	adds	r3, r0, #1
 8008ce0:	d102      	bne.n	8008ce8 <_fstat_r+0x1c>
 8008ce2:	682b      	ldr	r3, [r5, #0]
 8008ce4:	b103      	cbz	r3, 8008ce8 <_fstat_r+0x1c>
 8008ce6:	6023      	str	r3, [r4, #0]
 8008ce8:	bd38      	pop	{r3, r4, r5, pc}
 8008cea:	bf00      	nop
 8008cec:	200006c4 	.word	0x200006c4

08008cf0 <_isatty_r>:
 8008cf0:	b538      	push	{r3, r4, r5, lr}
 8008cf2:	4d06      	ldr	r5, [pc, #24]	; (8008d0c <_isatty_r+0x1c>)
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	4604      	mov	r4, r0
 8008cf8:	4608      	mov	r0, r1
 8008cfa:	602b      	str	r3, [r5, #0]
 8008cfc:	f7f8 fced 	bl	80016da <_isatty>
 8008d00:	1c43      	adds	r3, r0, #1
 8008d02:	d102      	bne.n	8008d0a <_isatty_r+0x1a>
 8008d04:	682b      	ldr	r3, [r5, #0]
 8008d06:	b103      	cbz	r3, 8008d0a <_isatty_r+0x1a>
 8008d08:	6023      	str	r3, [r4, #0]
 8008d0a:	bd38      	pop	{r3, r4, r5, pc}
 8008d0c:	200006c4 	.word	0x200006c4

08008d10 <_lseek_r>:
 8008d10:	b538      	push	{r3, r4, r5, lr}
 8008d12:	4d07      	ldr	r5, [pc, #28]	; (8008d30 <_lseek_r+0x20>)
 8008d14:	4604      	mov	r4, r0
 8008d16:	4608      	mov	r0, r1
 8008d18:	4611      	mov	r1, r2
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	602a      	str	r2, [r5, #0]
 8008d1e:	461a      	mov	r2, r3
 8008d20:	f7f8 fce6 	bl	80016f0 <_lseek>
 8008d24:	1c43      	adds	r3, r0, #1
 8008d26:	d102      	bne.n	8008d2e <_lseek_r+0x1e>
 8008d28:	682b      	ldr	r3, [r5, #0]
 8008d2a:	b103      	cbz	r3, 8008d2e <_lseek_r+0x1e>
 8008d2c:	6023      	str	r3, [r4, #0]
 8008d2e:	bd38      	pop	{r3, r4, r5, pc}
 8008d30:	200006c4 	.word	0x200006c4

08008d34 <__ascii_mbtowc>:
 8008d34:	b082      	sub	sp, #8
 8008d36:	b901      	cbnz	r1, 8008d3a <__ascii_mbtowc+0x6>
 8008d38:	a901      	add	r1, sp, #4
 8008d3a:	b142      	cbz	r2, 8008d4e <__ascii_mbtowc+0x1a>
 8008d3c:	b14b      	cbz	r3, 8008d52 <__ascii_mbtowc+0x1e>
 8008d3e:	7813      	ldrb	r3, [r2, #0]
 8008d40:	600b      	str	r3, [r1, #0]
 8008d42:	7812      	ldrb	r2, [r2, #0]
 8008d44:	1e10      	subs	r0, r2, #0
 8008d46:	bf18      	it	ne
 8008d48:	2001      	movne	r0, #1
 8008d4a:	b002      	add	sp, #8
 8008d4c:	4770      	bx	lr
 8008d4e:	4610      	mov	r0, r2
 8008d50:	e7fb      	b.n	8008d4a <__ascii_mbtowc+0x16>
 8008d52:	f06f 0001 	mvn.w	r0, #1
 8008d56:	e7f8      	b.n	8008d4a <__ascii_mbtowc+0x16>

08008d58 <__malloc_lock>:
 8008d58:	4801      	ldr	r0, [pc, #4]	; (8008d60 <__malloc_lock+0x8>)
 8008d5a:	f7ff b902 	b.w	8007f62 <__retarget_lock_acquire_recursive>
 8008d5e:	bf00      	nop
 8008d60:	200006bc 	.word	0x200006bc

08008d64 <__malloc_unlock>:
 8008d64:	4801      	ldr	r0, [pc, #4]	; (8008d6c <__malloc_unlock+0x8>)
 8008d66:	f7ff b8fd 	b.w	8007f64 <__retarget_lock_release_recursive>
 8008d6a:	bf00      	nop
 8008d6c:	200006bc 	.word	0x200006bc

08008d70 <_read_r>:
 8008d70:	b538      	push	{r3, r4, r5, lr}
 8008d72:	4d07      	ldr	r5, [pc, #28]	; (8008d90 <_read_r+0x20>)
 8008d74:	4604      	mov	r4, r0
 8008d76:	4608      	mov	r0, r1
 8008d78:	4611      	mov	r1, r2
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	602a      	str	r2, [r5, #0]
 8008d7e:	461a      	mov	r2, r3
 8008d80:	f7f8 fc56 	bl	8001630 <_read>
 8008d84:	1c43      	adds	r3, r0, #1
 8008d86:	d102      	bne.n	8008d8e <_read_r+0x1e>
 8008d88:	682b      	ldr	r3, [r5, #0]
 8008d8a:	b103      	cbz	r3, 8008d8e <_read_r+0x1e>
 8008d8c:	6023      	str	r3, [r4, #0]
 8008d8e:	bd38      	pop	{r3, r4, r5, pc}
 8008d90:	200006c4 	.word	0x200006c4

08008d94 <__ascii_wctomb>:
 8008d94:	b149      	cbz	r1, 8008daa <__ascii_wctomb+0x16>
 8008d96:	2aff      	cmp	r2, #255	; 0xff
 8008d98:	bf85      	ittet	hi
 8008d9a:	238a      	movhi	r3, #138	; 0x8a
 8008d9c:	6003      	strhi	r3, [r0, #0]
 8008d9e:	700a      	strbls	r2, [r1, #0]
 8008da0:	f04f 30ff 	movhi.w	r0, #4294967295
 8008da4:	bf98      	it	ls
 8008da6:	2001      	movls	r0, #1
 8008da8:	4770      	bx	lr
 8008daa:	4608      	mov	r0, r1
 8008dac:	4770      	bx	lr

08008dae <abort>:
 8008dae:	b508      	push	{r3, lr}
 8008db0:	2006      	movs	r0, #6
 8008db2:	f000 f82b 	bl	8008e0c <raise>
 8008db6:	2001      	movs	r0, #1
 8008db8:	f7f8 fc30 	bl	800161c <_exit>

08008dbc <_raise_r>:
 8008dbc:	291f      	cmp	r1, #31
 8008dbe:	b538      	push	{r3, r4, r5, lr}
 8008dc0:	4604      	mov	r4, r0
 8008dc2:	460d      	mov	r5, r1
 8008dc4:	d904      	bls.n	8008dd0 <_raise_r+0x14>
 8008dc6:	2316      	movs	r3, #22
 8008dc8:	6003      	str	r3, [r0, #0]
 8008dca:	f04f 30ff 	mov.w	r0, #4294967295
 8008dce:	bd38      	pop	{r3, r4, r5, pc}
 8008dd0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008dd2:	b112      	cbz	r2, 8008dda <_raise_r+0x1e>
 8008dd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008dd8:	b94b      	cbnz	r3, 8008dee <_raise_r+0x32>
 8008dda:	4620      	mov	r0, r4
 8008ddc:	f000 f830 	bl	8008e40 <_getpid_r>
 8008de0:	462a      	mov	r2, r5
 8008de2:	4601      	mov	r1, r0
 8008de4:	4620      	mov	r0, r4
 8008de6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dea:	f000 b817 	b.w	8008e1c <_kill_r>
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d00a      	beq.n	8008e08 <_raise_r+0x4c>
 8008df2:	1c59      	adds	r1, r3, #1
 8008df4:	d103      	bne.n	8008dfe <_raise_r+0x42>
 8008df6:	2316      	movs	r3, #22
 8008df8:	6003      	str	r3, [r0, #0]
 8008dfa:	2001      	movs	r0, #1
 8008dfc:	e7e7      	b.n	8008dce <_raise_r+0x12>
 8008dfe:	2400      	movs	r4, #0
 8008e00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008e04:	4628      	mov	r0, r5
 8008e06:	4798      	blx	r3
 8008e08:	2000      	movs	r0, #0
 8008e0a:	e7e0      	b.n	8008dce <_raise_r+0x12>

08008e0c <raise>:
 8008e0c:	4b02      	ldr	r3, [pc, #8]	; (8008e18 <raise+0xc>)
 8008e0e:	4601      	mov	r1, r0
 8008e10:	6818      	ldr	r0, [r3, #0]
 8008e12:	f7ff bfd3 	b.w	8008dbc <_raise_r>
 8008e16:	bf00      	nop
 8008e18:	20000018 	.word	0x20000018

08008e1c <_kill_r>:
 8008e1c:	b538      	push	{r3, r4, r5, lr}
 8008e1e:	4d07      	ldr	r5, [pc, #28]	; (8008e3c <_kill_r+0x20>)
 8008e20:	2300      	movs	r3, #0
 8008e22:	4604      	mov	r4, r0
 8008e24:	4608      	mov	r0, r1
 8008e26:	4611      	mov	r1, r2
 8008e28:	602b      	str	r3, [r5, #0]
 8008e2a:	f7f8 fbe7 	bl	80015fc <_kill>
 8008e2e:	1c43      	adds	r3, r0, #1
 8008e30:	d102      	bne.n	8008e38 <_kill_r+0x1c>
 8008e32:	682b      	ldr	r3, [r5, #0]
 8008e34:	b103      	cbz	r3, 8008e38 <_kill_r+0x1c>
 8008e36:	6023      	str	r3, [r4, #0]
 8008e38:	bd38      	pop	{r3, r4, r5, pc}
 8008e3a:	bf00      	nop
 8008e3c:	200006c4 	.word	0x200006c4

08008e40 <_getpid_r>:
 8008e40:	f7f8 bbd4 	b.w	80015ec <_getpid>

08008e44 <_init>:
 8008e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e46:	bf00      	nop
 8008e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e4a:	bc08      	pop	{r3}
 8008e4c:	469e      	mov	lr, r3
 8008e4e:	4770      	bx	lr

08008e50 <_fini>:
 8008e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e52:	bf00      	nop
 8008e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e56:	bc08      	pop	{r3}
 8008e58:	469e      	mov	lr, r3
 8008e5a:	4770      	bx	lr
