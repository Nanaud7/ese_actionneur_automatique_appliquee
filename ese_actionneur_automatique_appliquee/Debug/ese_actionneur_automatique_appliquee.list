
ese_actionneur_automatique_appliquee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dcc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08004fac  08004fac  00014fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005114  08005114  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08005114  08005114  00015114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800511c  0800511c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800511c  0800511c  0001511c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005120  08005120  00015120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  2000007c  080051a0  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  080051a0  00020478  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f726  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002565  00000000  00000000  0002f7d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  00031d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a38  00000000  00000000  00032868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e805  00000000  00000000  000332a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cceb  00000000  00000000  00051aa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b7ad0  00000000  00000000  0005e790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00116260  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033a8  00000000  00000000  001162b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000007c 	.word	0x2000007c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004f94 	.word	0x08004f94

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000080 	.word	0x20000080
 800021c:	08004f94 	.word	0x08004f94

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <__io_putchar>:
static int shell_func_list_size = 0;
static shell_func_t shell_func_list[_SHELL_FUNC_LIST_MAX_SIZE];

static int dataReady = 0;

int __io_putchar(int ch) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005c0:	1d39      	adds	r1, r7, #4
 80005c2:	f04f 33ff 	mov.w	r3, #4294967295
 80005c6:	2201      	movs	r2, #1
 80005c8:	4803      	ldr	r0, [pc, #12]	; (80005d8 <__io_putchar+0x20>)
 80005ca:	f002 f88b 	bl	80026e4 <HAL_UART_Transmit>
	return ch;
 80005ce:	687b      	ldr	r3, [r7, #4]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	200003d4 	.word	0x200003d4

080005dc <uart_write>:
	HAL_UART_Receive(&UART_DEVICE, (uint8_t*)(&c), 1, 0xFFFFFFFF);

	return c;
}

int uart_write(char * s, uint16_t size) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	460b      	mov	r3, r1
 80005e6:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, 0xFFFF);
 80005e8:	887a      	ldrh	r2, [r7, #2]
 80005ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005ee:	6879      	ldr	r1, [r7, #4]
 80005f0:	4803      	ldr	r0, [pc, #12]	; (8000600 <uart_write+0x24>)
 80005f2:	f002 f877 	bl	80026e4 <HAL_UART_Transmit>
	return size;
 80005f6:	887b      	ldrh	r3, [r7, #2]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200003d4 	.word	0x200003d4

08000604 <sh_help>:

void uart_data_ready() {
	dataReady = 1;
}

int sh_help(int argc, char ** argv) {
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	e019      	b.n	8000648 <sh_help+0x44>
		printf("%c %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 8000614:	4911      	ldr	r1, [pc, #68]	; (800065c <sh_help+0x58>)
 8000616:	68fa      	ldr	r2, [r7, #12]
 8000618:	4613      	mov	r3, r2
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	4413      	add	r3, r2
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	440b      	add	r3, r1
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	4618      	mov	r0, r3
 8000626:	490d      	ldr	r1, [pc, #52]	; (800065c <sh_help+0x58>)
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	4613      	mov	r3, r2
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	4413      	add	r3, r2
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	440b      	add	r3, r1
 8000634:	3308      	adds	r3, #8
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	461a      	mov	r2, r3
 800063a:	4601      	mov	r1, r0
 800063c:	4808      	ldr	r0, [pc, #32]	; (8000660 <sh_help+0x5c>)
 800063e:	f003 fcdd 	bl	8003ffc <iprintf>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	3301      	adds	r3, #1
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <sh_help+0x60>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	68fa      	ldr	r2, [r7, #12]
 800064e:	429a      	cmp	r2, r3
 8000650:	dbe0      	blt.n	8000614 <sh_help+0x10>
	}

	return 0;
 8000652:	2300      	movs	r3, #0
}
 8000654:	4618      	mov	r0, r3
 8000656:	3710      	adds	r7, #16
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	200000c8 	.word	0x200000c8
 8000660:	08004fac 	.word	0x08004fac
 8000664:	200000c4 	.word	0x200000c4

08000668 <shell_init>:

void shell_init() {
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
	printf("\r\n\r\n===== Shell =====\r\n");
 800066e:	480f      	ldr	r0, [pc, #60]	; (80006ac <shell_init+0x44>)
 8000670:	f003 fd4a 	bl	8004108 <puts>
	HAL_UART_Receive_IT(&UART_DEVICE, (uint8_t*)&c, 1);
 8000674:	2201      	movs	r2, #1
 8000676:	490e      	ldr	r1, [pc, #56]	; (80006b0 <shell_init+0x48>)
 8000678:	480e      	ldr	r0, [pc, #56]	; (80006b4 <shell_init+0x4c>)
 800067a:	f002 f8c9 	bl	8002810 <HAL_UART_Receive_IT>
	//uart_write(prompt,sizeof(prompt));

	shell_add('h', sh_help, help);
 800067e:	4a0e      	ldr	r2, [pc, #56]	; (80006b8 <shell_init+0x50>)
 8000680:	490e      	ldr	r1, [pc, #56]	; (80006bc <shell_init+0x54>)
 8000682:	2068      	movs	r0, #104	; 0x68
 8000684:	f000 f81c 	bl	80006c0 <shell_add>

	for (int i = 0 ; i < 3 ; i++) {
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	e005      	b.n	800069a <shell_init+0x32>

		HAL_Delay(200);
 800068e:	20c8      	movs	r0, #200	; 0xc8
 8000690:	f000 fc74 	bl	8000f7c <HAL_Delay>
	for (int i = 0 ; i < 3 ; i++) {
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	3301      	adds	r3, #1
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2b02      	cmp	r3, #2
 800069e:	ddf6      	ble.n	800068e <shell_init+0x26>
	}
}
 80006a0:	bf00      	nop
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	08004fb4 	.word	0x08004fb4
 80006b0:	20000098 	.word	0x20000098
 80006b4:	200003d4 	.word	0x200003d4
 80006b8:	20000000 	.word	0x20000000
 80006bc:	08000605 	.word	0x08000605

080006c0 <shell_add>:

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
 80006cc:	73fb      	strb	r3, [r7, #15]
	if (shell_func_list_size < _SHELL_FUNC_LIST_MAX_SIZE) {
 80006ce:	4b19      	ldr	r3, [pc, #100]	; (8000734 <shell_add+0x74>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b3f      	cmp	r3, #63	; 0x3f
 80006d4:	dc26      	bgt.n	8000724 <shell_add+0x64>
		shell_func_list[shell_func_list_size].c = c;
 80006d6:	4b17      	ldr	r3, [pc, #92]	; (8000734 <shell_add+0x74>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	4917      	ldr	r1, [pc, #92]	; (8000738 <shell_add+0x78>)
 80006dc:	4613      	mov	r3, r2
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	4413      	add	r3, r2
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	440b      	add	r3, r1
 80006e6:	7bfa      	ldrb	r2, [r7, #15]
 80006e8:	701a      	strb	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 80006ea:	4b12      	ldr	r3, [pc, #72]	; (8000734 <shell_add+0x74>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	4912      	ldr	r1, [pc, #72]	; (8000738 <shell_add+0x78>)
 80006f0:	4613      	mov	r3, r2
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	4413      	add	r3, r2
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	440b      	add	r3, r1
 80006fa:	3304      	adds	r3, #4
 80006fc:	68ba      	ldr	r2, [r7, #8]
 80006fe:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <shell_add+0x74>)
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	490c      	ldr	r1, [pc, #48]	; (8000738 <shell_add+0x78>)
 8000706:	4613      	mov	r3, r2
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	4413      	add	r3, r2
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	440b      	add	r3, r1
 8000710:	3308      	adds	r3, #8
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 8000716:	4b07      	ldr	r3, [pc, #28]	; (8000734 <shell_add+0x74>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	3301      	adds	r3, #1
 800071c:	4a05      	ldr	r2, [pc, #20]	; (8000734 <shell_add+0x74>)
 800071e:	6013      	str	r3, [r2, #0]
		return 0;
 8000720:	2300      	movs	r3, #0
 8000722:	e001      	b.n	8000728 <shell_add+0x68>
	}

	return -1;
 8000724:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000728:	4618      	mov	r0, r3
 800072a:	3714      	adds	r7, #20
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	200000c4 	.word	0x200000c4
 8000738:	200000c8 	.word	0x200000c8

0800073c <shell_char_received>:

void shell_char_received() {
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0

	switch (c) {
 8000740:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <shell_char_received+0x94>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b08      	cmp	r3, #8
 8000746:	d01c      	beq.n	8000782 <shell_char_received+0x46>
 8000748:	2b0d      	cmp	r3, #13
 800074a:	d129      	bne.n	80007a0 <shell_char_received+0x64>

	case '\r':
		// Enter
		printf("\r\n");
 800074c:	4821      	ldr	r0, [pc, #132]	; (80007d4 <shell_char_received+0x98>)
 800074e:	f003 fcdb 	bl	8004108 <puts>
		buf[pos++] = 0;
 8000752:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <shell_char_received+0x9c>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	1c5a      	adds	r2, r3, #1
 8000758:	b2d1      	uxtb	r1, r2
 800075a:	4a1f      	ldr	r2, [pc, #124]	; (80007d8 <shell_char_received+0x9c>)
 800075c:	7011      	strb	r1, [r2, #0]
 800075e:	461a      	mov	r2, r3
 8000760:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <shell_char_received+0xa0>)
 8000762:	2100      	movs	r1, #0
 8000764:	5499      	strb	r1, [r3, r2]
		printf(":%s\r\n", buf);
 8000766:	491d      	ldr	r1, [pc, #116]	; (80007dc <shell_char_received+0xa0>)
 8000768:	481d      	ldr	r0, [pc, #116]	; (80007e0 <shell_char_received+0xa4>)
 800076a:	f003 fc47 	bl	8003ffc <iprintf>
		pos = 0;
 800076e:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <shell_char_received+0x9c>)
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]
		shell_exec(buf[0], buf);
 8000774:	4b19      	ldr	r3, [pc, #100]	; (80007dc <shell_char_received+0xa0>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	4918      	ldr	r1, [pc, #96]	; (80007dc <shell_char_received+0xa0>)
 800077a:	4618      	mov	r0, r3
 800077c:	f000 f834 	bl	80007e8 <shell_exec>
		break;
 8000780:	e023      	b.n	80007ca <shell_char_received+0x8e>

		// Delete
	case '\b':
		if (pos > 0) {
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <shell_char_received+0x9c>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d01e      	beq.n	80007c8 <shell_char_received+0x8c>
			pos--;
 800078a:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <shell_char_received+0x9c>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	3b01      	subs	r3, #1
 8000790:	b2da      	uxtb	r2, r3
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <shell_char_received+0x9c>)
 8000794:	701a      	strb	r2, [r3, #0]
			uart_write(backspace, 3);
 8000796:	2103      	movs	r1, #3
 8000798:	4812      	ldr	r0, [pc, #72]	; (80007e4 <shell_char_received+0xa8>)
 800079a:	f7ff ff1f 	bl	80005dc <uart_write>
		}
		break;
 800079e:	e013      	b.n	80007c8 <shell_char_received+0x8c>

	default:
		if (pos < BUFFER_SIZE) {
 80007a0:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <shell_char_received+0x9c>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b27      	cmp	r3, #39	; 0x27
 80007a6:	d810      	bhi.n	80007ca <shell_char_received+0x8e>
			uart_write(&c, 1);
 80007a8:	2101      	movs	r1, #1
 80007aa:	4809      	ldr	r0, [pc, #36]	; (80007d0 <shell_char_received+0x94>)
 80007ac:	f7ff ff16 	bl	80005dc <uart_write>
			buf[pos++] = c;
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <shell_char_received+0x9c>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	1c5a      	adds	r2, r3, #1
 80007b6:	b2d1      	uxtb	r1, r2
 80007b8:	4a07      	ldr	r2, [pc, #28]	; (80007d8 <shell_char_received+0x9c>)
 80007ba:	7011      	strb	r1, [r2, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <shell_char_received+0x94>)
 80007c0:	7819      	ldrb	r1, [r3, #0]
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <shell_char_received+0xa0>)
 80007c4:	5499      	strb	r1, [r3, r2]
		}
	}
}
 80007c6:	e000      	b.n	80007ca <shell_char_received+0x8e>
		break;
 80007c8:	bf00      	nop
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000098 	.word	0x20000098
 80007d4:	08004fcc 	.word	0x08004fcc
 80007d8:	20000099 	.word	0x20000099
 80007dc:	2000009c 	.word	0x2000009c
 80007e0:	08004fd0 	.word	0x08004fd0
 80007e4:	20000008 	.word	0x20000008

080007e8 <shell_exec>:

int shell_exec(char c, char * buf) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08e      	sub	sp, #56	; 0x38
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	6039      	str	r1, [r7, #0]
 80007f2:	71fb      	strb	r3, [r7, #7]

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < shell_func_list_size ; i++) {
 80007f4:	2300      	movs	r3, #0
 80007f6:	637b      	str	r3, [r7, #52]	; 0x34
 80007f8:	e040      	b.n	800087c <shell_exec+0x94>
		if (shell_func_list[i].c == c) {
 80007fa:	4928      	ldr	r1, [pc, #160]	; (800089c <shell_exec+0xb4>)
 80007fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007fe:	4613      	mov	r3, r2
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	4413      	add	r3, r2
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	440b      	add	r3, r1
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	79fa      	ldrb	r2, [r7, #7]
 800080c:	429a      	cmp	r2, r3
 800080e:	d132      	bne.n	8000876 <shell_exec+0x8e>
			argc = 1;
 8000810:	2301      	movs	r3, #1
 8000812:	633b      	str	r3, [r7, #48]	; 0x30
			argv[0] = buf;
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800081c:	e014      	b.n	8000848 <shell_exec+0x60>
				if(*p == ' ') {
 800081e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b20      	cmp	r3, #32
 8000824:	d10d      	bne.n	8000842 <shell_exec+0x5a>
					*p = '\0';
 8000826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 800082c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800082e:	1c5a      	adds	r2, r3, #1
 8000830:	633a      	str	r2, [r7, #48]	; 0x30
 8000832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000834:	3201      	adds	r2, #1
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800083c:	440b      	add	r3, r1
 800083e:	f843 2c2c 	str.w	r2, [r3, #-44]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8000842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000844:	3301      	adds	r3, #1
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d002      	beq.n	8000856 <shell_exec+0x6e>
 8000850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000852:	2b07      	cmp	r3, #7
 8000854:	dde3      	ble.n	800081e <shell_exec+0x36>
				}
			}

			return shell_func_list[i].func(argc, argv);
 8000856:	4911      	ldr	r1, [pc, #68]	; (800089c <shell_exec+0xb4>)
 8000858:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800085a:	4613      	mov	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	4413      	add	r3, r2
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	440b      	add	r3, r1
 8000864:	3304      	adds	r3, #4
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f107 020c 	add.w	r2, r7, #12
 800086c:	4611      	mov	r1, r2
 800086e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000870:	4798      	blx	r3
 8000872:	4603      	mov	r3, r0
 8000874:	e00e      	b.n	8000894 <shell_exec+0xac>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8000876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000878:	3301      	adds	r3, #1
 800087a:	637b      	str	r3, [r7, #52]	; 0x34
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <shell_exec+0xb8>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000882:	429a      	cmp	r2, r3
 8000884:	dbb9      	blt.n	80007fa <shell_exec+0x12>
		}
	}
	printf("%c: no such command\r\n", c);
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	4619      	mov	r1, r3
 800088a:	4806      	ldr	r0, [pc, #24]	; (80008a4 <shell_exec+0xbc>)
 800088c:	f003 fbb6 	bl	8003ffc <iprintf>
	return -1;
 8000890:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000894:	4618      	mov	r0, r3
 8000896:	3738      	adds	r7, #56	; 0x38
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	200000c8 	.word	0x200000c8
 80008a0:	200000c4 	.word	0x200000c4
 80008a4:	08004fd8 	.word	0x08004fd8

080008a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	; 0x28
 80008ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	4b2b      	ldr	r3, [pc, #172]	; (800096c <MX_GPIO_Init+0xc4>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	4a2a      	ldr	r2, [pc, #168]	; (800096c <MX_GPIO_Init+0xc4>)
 80008c4:	f043 0304 	orr.w	r3, r3, #4
 80008c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ca:	4b28      	ldr	r3, [pc, #160]	; (800096c <MX_GPIO_Init+0xc4>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	f003 0304 	and.w	r3, r3, #4
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008d6:	4b25      	ldr	r3, [pc, #148]	; (800096c <MX_GPIO_Init+0xc4>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	4a24      	ldr	r2, [pc, #144]	; (800096c <MX_GPIO_Init+0xc4>)
 80008dc:	f043 0320 	orr.w	r3, r3, #32
 80008e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e2:	4b22      	ldr	r3, [pc, #136]	; (800096c <MX_GPIO_Init+0xc4>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	f003 0320 	and.w	r3, r3, #32
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	4b1f      	ldr	r3, [pc, #124]	; (800096c <MX_GPIO_Init+0xc4>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	4a1e      	ldr	r2, [pc, #120]	; (800096c <MX_GPIO_Init+0xc4>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fa:	4b1c      	ldr	r3, [pc, #112]	; (800096c <MX_GPIO_Init+0xc4>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000906:	4b19      	ldr	r3, [pc, #100]	; (800096c <MX_GPIO_Init+0xc4>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	4a18      	ldr	r2, [pc, #96]	; (800096c <MX_GPIO_Init+0xc4>)
 800090c:	f043 0302 	orr.w	r3, r3, #2
 8000910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000912:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_GPIO_Init+0xc4>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	2120      	movs	r1, #32
 8000922:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000926:	f000 fe9d 	bl	8001664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800092a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800092e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000930:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_GPIO_Init+0xc8>)
 8000932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4619      	mov	r1, r3
 800093e:	480d      	ldr	r0, [pc, #52]	; (8000974 <MX_GPIO_Init+0xcc>)
 8000940:	f000 fd0e 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000944:	2320      	movs	r3, #32
 8000946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000948:	2301      	movs	r3, #1
 800094a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	4619      	mov	r1, r3
 800095a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095e:	f000 fcff 	bl	8001360 <HAL_GPIO_Init>

}
 8000962:	bf00      	nop
 8000964:	3728      	adds	r7, #40	; 0x28
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000
 8000970:	10110000 	.word	0x10110000
 8000974:	48000800 	.word	0x48000800

08000978 <fonction>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int fonction(int argc, char ** argv) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
	printf("Fonction bidon\r\n");
 8000982:	4810      	ldr	r0, [pc, #64]	; (80009c4 <fonction+0x4c>)
 8000984:	f003 fbc0 	bl	8004108 <puts>

	printf("argc = %d\r\n", argc);
 8000988:	6879      	ldr	r1, [r7, #4]
 800098a:	480f      	ldr	r0, [pc, #60]	; (80009c8 <fonction+0x50>)
 800098c:	f003 fb36 	bl	8003ffc <iprintf>

	for (int i = 0 ; i < argc ; i++) {
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	e00c      	b.n	80009b0 <fonction+0x38>
		printf("arg numero %d = %s\r\n", i, argv[i]);
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	683a      	ldr	r2, [r7, #0]
 800099c:	4413      	add	r3, r2
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	461a      	mov	r2, r3
 80009a2:	68f9      	ldr	r1, [r7, #12]
 80009a4:	4809      	ldr	r0, [pc, #36]	; (80009cc <fonction+0x54>)
 80009a6:	f003 fb29 	bl	8003ffc <iprintf>
	for (int i = 0 ; i < argc ; i++) {
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	3301      	adds	r3, #1
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fa      	ldr	r2, [r7, #12]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	dbee      	blt.n	8000996 <fonction+0x1e>
	}

	return 0;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	08004ff0 	.word	0x08004ff0
 80009c8:	08005000 	.word	0x08005000
 80009cc:	0800500c 	.word	0x0800500c

080009d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d4:	f000 fa61 	bl	8000e9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d8:	f000 f810 	bl	80009fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009dc:	f7ff ff64 	bl	80008a8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80009e0:	f000 f99e 	bl	8000d20 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  shell_init();
 80009e4:	f7ff fe40 	bl	8000668 <shell_init>
  shell_add('f', fonction, "Une fonction inutile");
 80009e8:	4a02      	ldr	r2, [pc, #8]	; (80009f4 <main+0x24>)
 80009ea:	4903      	ldr	r1, [pc, #12]	; (80009f8 <main+0x28>)
 80009ec:	2066      	movs	r0, #102	; 0x66
 80009ee:	f7ff fe67 	bl	80006c0 <shell_add>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <main+0x22>
 80009f4:	08005024 	.word	0x08005024
 80009f8:	08000979 	.word	0x08000979

080009fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b0a4      	sub	sp, #144	; 0x90
 8000a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a06:	2238      	movs	r2, #56	; 0x38
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f003 faee 	bl	8003fec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a10:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a20:	463b      	mov	r3, r7
 8000a22:	2244      	movs	r2, #68	; 0x44
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f003 fae0 	bl	8003fec <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f000 fe31 	bl	8001694 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a32:	2302      	movs	r3, #2
 8000a34:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a3a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a3c:	2340      	movs	r3, #64	; 0x40
 8000a3e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a40:	2302      	movs	r3, #2
 8000a42:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a44:	2302      	movs	r3, #2
 8000a46:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000a48:	2304      	movs	r3, #4
 8000a4a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000a4c:	2355      	movs	r3, #85	; 0x55
 8000a4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a52:	2302      	movs	r3, #2
 8000a54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a64:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 fec7 	bl	80017fc <HAL_RCC_OscConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000a74:	f000 f840 	bl	8000af8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a78:	230f      	movs	r3, #15
 8000a7a:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a8c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a90:	2104      	movs	r1, #4
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 f9ca 	bl	8001e2c <HAL_RCC_ClockConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a9e:	f000 f82b 	bl	8000af8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000aa2:	2320      	movs	r3, #32
 8000aa4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aaa:	463b      	mov	r3, r7
 8000aac:	4618      	mov	r0, r3
 8000aae:	f001 fbd9 	bl	8002264 <HAL_RCCEx_PeriphCLKConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ab8:	f000 f81e 	bl	8000af8 <Error_Handler>
  }
}
 8000abc:	bf00      	nop
 8000abe:	3790      	adds	r7, #144	; 0x90
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	if(huart->Instance == LPUART1){
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a06      	ldr	r2, [pc, #24]	; (8000aec <HAL_UART_RxCpltCallback+0x28>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d106      	bne.n	8000ae4 <HAL_UART_RxCpltCallback+0x20>
		shell_char_received();
 8000ad6:	f7ff fe31 	bl	800073c <shell_char_received>
		HAL_UART_Receive_IT(&hlpuart1, (uint8_t*)&c, 1);
 8000ada:	2201      	movs	r2, #1
 8000adc:	4904      	ldr	r1, [pc, #16]	; (8000af0 <HAL_UART_RxCpltCallback+0x2c>)
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <HAL_UART_RxCpltCallback+0x30>)
 8000ae0:	f001 fe96 	bl	8002810 <HAL_UART_Receive_IT>
	}
}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40008000 	.word	0x40008000
 8000af0:	20000098 	.word	0x20000098
 8000af4:	200003d4 	.word	0x200003d4

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
}
 8000afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <Error_Handler+0x8>
	...

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <HAL_MspInit+0x44>)
 8000b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b0e:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <HAL_MspInit+0x44>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6613      	str	r3, [r2, #96]	; 0x60
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <HAL_MspInit+0x44>)
 8000b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <HAL_MspInit+0x44>)
 8000b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b26:	4a08      	ldr	r2, [pc, #32]	; (8000b48 <HAL_MspInit+0x44>)
 8000b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_MspInit+0x44>)
 8000b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b3a:	f000 fe4f 	bl	80017dc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40021000 	.word	0x40021000

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <NMI_Handler+0x4>

08000b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <HardFault_Handler+0x4>

08000b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <MemManage_Handler+0x4>

08000b5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <BusFault_Handler+0x4>

08000b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <UsageFault_Handler+0x4>

08000b6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b98:	f000 f9d2 	bl	8000f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000ba4:	4802      	ldr	r0, [pc, #8]	; (8000bb0 <LPUART1_IRQHandler+0x10>)
 8000ba6:	f001 fe79 	bl	800289c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	200003d4 	.word	0x200003d4

08000bb4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	e00a      	b.n	8000bdc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bc6:	f3af 8000 	nop.w
 8000bca:	4601      	mov	r1, r0
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	60ba      	str	r2, [r7, #8]
 8000bd2:	b2ca      	uxtb	r2, r1
 8000bd4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	697a      	ldr	r2, [r7, #20]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	dbf0      	blt.n	8000bc6 <_read+0x12>
	}

return len;
 8000be4:	687b      	ldr	r3, [r7, #4]
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3718      	adds	r7, #24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b086      	sub	sp, #24
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	60f8      	str	r0, [r7, #12]
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
 8000bfe:	e009      	b.n	8000c14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	1c5a      	adds	r2, r3, #1
 8000c04:	60ba      	str	r2, [r7, #8]
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fcd5 	bl	80005b8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	3301      	adds	r3, #1
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	697a      	ldr	r2, [r7, #20]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	dbf1      	blt.n	8000c00 <_write+0x12>
	}
	return len;
 8000c1c:	687b      	ldr	r3, [r7, #4]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <_close>:

int _close(int file)
{
 8000c26:	b480      	push	{r7}
 8000c28:	b083      	sub	sp, #12
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
	return -1;
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
 8000c46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c4e:	605a      	str	r2, [r3, #4]
	return 0;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <_isatty>:

int _isatty(int file)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b083      	sub	sp, #12
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
	return 1;
 8000c66:	2301      	movs	r3, #1
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
	return 0;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3714      	adds	r7, #20
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c98:	4a14      	ldr	r2, [pc, #80]	; (8000cec <_sbrk+0x5c>)
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <_sbrk+0x60>)
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca4:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d102      	bne.n	8000cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <_sbrk+0x64>)
 8000cae:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <_sbrk+0x68>)
 8000cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d207      	bcs.n	8000cd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc0:	f003 f96a 	bl	8003f98 <__errno>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
 8000cce:	e009      	b.n	8000ce4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd0:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <_sbrk+0x64>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cd6:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <_sbrk+0x64>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	4a05      	ldr	r2, [pc, #20]	; (8000cf4 <_sbrk+0x64>)
 8000ce0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3718      	adds	r7, #24
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20008000 	.word	0x20008000
 8000cf0:	00000400 	.word	0x00000400
 8000cf4:	200003c8 	.word	0x200003c8
 8000cf8:	20000478 	.word	0x20000478

08000cfc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <SystemInit+0x20>)
 8000d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d06:	4a05      	ldr	r2, [pc, #20]	; (8000d1c <SystemInit+0x20>)
 8000d08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000d24:	4b21      	ldr	r3, [pc, #132]	; (8000dac <MX_LPUART1_UART_Init+0x8c>)
 8000d26:	4a22      	ldr	r2, [pc, #136]	; (8000db0 <MX_LPUART1_UART_Init+0x90>)
 8000d28:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000d2a:	4b20      	ldr	r3, [pc, #128]	; (8000dac <MX_LPUART1_UART_Init+0x8c>)
 8000d2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d30:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d32:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <MX_LPUART1_UART_Init+0x8c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000d38:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <MX_LPUART1_UART_Init+0x8c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000d3e:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <MX_LPUART1_UART_Init+0x8c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000d44:	4b19      	ldr	r3, [pc, #100]	; (8000dac <MX_LPUART1_UART_Init+0x8c>)
 8000d46:	220c      	movs	r2, #12
 8000d48:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4a:	4b18      	ldr	r3, [pc, #96]	; (8000dac <MX_LPUART1_UART_Init+0x8c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d50:	4b16      	ldr	r3, [pc, #88]	; (8000dac <MX_LPUART1_UART_Init+0x8c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <MX_LPUART1_UART_Init+0x8c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d5c:	4b13      	ldr	r3, [pc, #76]	; (8000dac <MX_LPUART1_UART_Init+0x8c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000d62:	4812      	ldr	r0, [pc, #72]	; (8000dac <MX_LPUART1_UART_Init+0x8c>)
 8000d64:	f001 fc6e 	bl	8002644 <HAL_UART_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d6e:	f7ff fec3 	bl	8000af8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d72:	2100      	movs	r1, #0
 8000d74:	480d      	ldr	r0, [pc, #52]	; (8000dac <MX_LPUART1_UART_Init+0x8c>)
 8000d76:	f003 f844 	bl	8003e02 <HAL_UARTEx_SetTxFifoThreshold>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000d80:	f7ff feba 	bl	8000af8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d84:	2100      	movs	r1, #0
 8000d86:	4809      	ldr	r0, [pc, #36]	; (8000dac <MX_LPUART1_UART_Init+0x8c>)
 8000d88:	f003 f879 	bl	8003e7e <HAL_UARTEx_SetRxFifoThreshold>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000d92:	f7ff feb1 	bl	8000af8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000d96:	4805      	ldr	r0, [pc, #20]	; (8000dac <MX_LPUART1_UART_Init+0x8c>)
 8000d98:	f002 fffa 	bl	8003d90 <HAL_UARTEx_DisableFifoMode>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000da2:	f7ff fea9 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	200003d4 	.word	0x200003d4
 8000db0:	40008000 	.word	0x40008000

08000db4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a1b      	ldr	r2, [pc, #108]	; (8000e40 <HAL_UART_MspInit+0x8c>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d130      	bne.n	8000e38 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000dd6:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <HAL_UART_MspInit+0x90>)
 8000dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dda:	4a1a      	ldr	r2, [pc, #104]	; (8000e44 <HAL_UART_MspInit+0x90>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000de2:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <HAL_UART_MspInit+0x90>)
 8000de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dee:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <HAL_UART_MspInit+0x90>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	4a14      	ldr	r2, [pc, #80]	; (8000e44 <HAL_UART_MspInit+0x90>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfa:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <HAL_UART_MspInit+0x90>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000e06:	230c      	movs	r3, #12
 8000e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000e16:	230c      	movs	r3, #12
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e24:	f000 fa9c 	bl	8001360 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	205b      	movs	r0, #91	; 0x5b
 8000e2e:	f000 f9a2 	bl	8001176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000e32:	205b      	movs	r0, #91	; 0x5b
 8000e34:	f000 f9b9 	bl	80011aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000e38:	bf00      	nop
 8000e3a:	3728      	adds	r7, #40	; 0x28
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40008000 	.word	0x40008000
 8000e44:	40021000 	.word	0x40021000

08000e48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e48:	480d      	ldr	r0, [pc, #52]	; (8000e80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e4a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e4c:	480d      	ldr	r0, [pc, #52]	; (8000e84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e4e:	490e      	ldr	r1, [pc, #56]	; (8000e88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e50:	4a0e      	ldr	r2, [pc, #56]	; (8000e8c <LoopForever+0xe>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e54:	e002      	b.n	8000e5c <LoopCopyDataInit>

08000e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5a:	3304      	adds	r3, #4

08000e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e60:	d3f9      	bcc.n	8000e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e62:	4a0b      	ldr	r2, [pc, #44]	; (8000e90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e64:	4c0b      	ldr	r4, [pc, #44]	; (8000e94 <LoopForever+0x16>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e68:	e001      	b.n	8000e6e <LoopFillZerobss>

08000e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e6c:	3204      	adds	r2, #4

08000e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e70:	d3fb      	bcc.n	8000e6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e72:	f7ff ff43 	bl	8000cfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e76:	f003 f895 	bl	8003fa4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e7a:	f7ff fda9 	bl	80009d0 <main>

08000e7e <LoopForever>:

LoopForever:
    b LoopForever
 8000e7e:	e7fe      	b.n	8000e7e <LoopForever>
  ldr   r0, =_estack
 8000e80:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e88:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000e8c:	08005124 	.word	0x08005124
  ldr r2, =_sbss
 8000e90:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000e94:	20000478 	.word	0x20000478

08000e98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e98:	e7fe      	b.n	8000e98 <ADC1_2_IRQHandler>

08000e9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	f000 f95b 	bl	8001160 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f000 f80e 	bl	8000ecc <HAL_InitTick>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d002      	beq.n	8000ebc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	71fb      	strb	r3, [r7, #7]
 8000eba:	e001      	b.n	8000ec0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ebc:	f7ff fe22 	bl	8000b04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ec0:	79fb      	ldrb	r3, [r7, #7]

}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ed8:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <HAL_InitTick+0x68>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d022      	beq.n	8000f26 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ee0:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <HAL_InitTick+0x6c>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <HAL_InitTick+0x68>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000eec:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 f966 	bl	80011c6 <HAL_SYSTICK_Config>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d10f      	bne.n	8000f20 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b0f      	cmp	r3, #15
 8000f04:	d809      	bhi.n	8000f1a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f06:	2200      	movs	r2, #0
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0e:	f000 f932 	bl	8001176 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f12:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <HAL_InitTick+0x70>)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	e007      	b.n	8000f2a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	73fb      	strb	r3, [r7, #15]
 8000f1e:	e004      	b.n	8000f2a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	73fb      	strb	r3, [r7, #15]
 8000f24:	e001      	b.n	8000f2a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000014 	.word	0x20000014
 8000f38:	2000000c 	.word	0x2000000c
 8000f3c:	20000010 	.word	0x20000010

08000f40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <HAL_IncTick+0x1c>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <HAL_IncTick+0x20>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	4a03      	ldr	r2, [pc, #12]	; (8000f5c <HAL_IncTick+0x1c>)
 8000f50:	6013      	str	r3, [r2, #0]
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	20000464 	.word	0x20000464
 8000f60:	20000014 	.word	0x20000014

08000f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return uwTick;
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <HAL_GetTick+0x14>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20000464 	.word	0x20000464

08000f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f84:	f7ff ffee 	bl	8000f64 <HAL_GetTick>
 8000f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f94:	d004      	beq.n	8000fa0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <HAL_Delay+0x40>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fa0:	bf00      	nop
 8000fa2:	f7ff ffdf 	bl	8000f64 <HAL_GetTick>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	68fa      	ldr	r2, [r7, #12]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d8f7      	bhi.n	8000fa2 <HAL_Delay+0x26>
  {
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	bf00      	nop
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000014 	.word	0x20000014

08000fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff2:	4a04      	ldr	r2, [pc, #16]	; (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	60d3      	str	r3, [r2, #12]
}
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <__NVIC_GetPriorityGrouping+0x18>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	f003 0307 	and.w	r3, r3, #7
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	2b00      	cmp	r3, #0
 8001034:	db0b      	blt.n	800104e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f003 021f 	and.w	r2, r3, #31
 800103c:	4907      	ldr	r1, [pc, #28]	; (800105c <__NVIC_EnableIRQ+0x38>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	095b      	lsrs	r3, r3, #5
 8001044:	2001      	movs	r0, #1
 8001046:	fa00 f202 	lsl.w	r2, r0, r2
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000e100 	.word	0xe000e100

08001060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	6039      	str	r1, [r7, #0]
 800106a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	2b00      	cmp	r3, #0
 8001072:	db0a      	blt.n	800108a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	b2da      	uxtb	r2, r3
 8001078:	490c      	ldr	r1, [pc, #48]	; (80010ac <__NVIC_SetPriority+0x4c>)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	0112      	lsls	r2, r2, #4
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	440b      	add	r3, r1
 8001084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001088:	e00a      	b.n	80010a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4908      	ldr	r1, [pc, #32]	; (80010b0 <__NVIC_SetPriority+0x50>)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	f003 030f 	and.w	r3, r3, #15
 8001096:	3b04      	subs	r3, #4
 8001098:	0112      	lsls	r2, r2, #4
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	440b      	add	r3, r1
 800109e:	761a      	strb	r2, [r3, #24]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000e100 	.word	0xe000e100
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	; 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f1c3 0307 	rsb	r3, r3, #7
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	bf28      	it	cs
 80010d2:	2304      	movcs	r3, #4
 80010d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3304      	adds	r3, #4
 80010da:	2b06      	cmp	r3, #6
 80010dc:	d902      	bls.n	80010e4 <NVIC_EncodePriority+0x30>
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3b03      	subs	r3, #3
 80010e2:	e000      	b.n	80010e6 <NVIC_EncodePriority+0x32>
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43da      	mvns	r2, r3
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	401a      	ands	r2, r3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa01 f303 	lsl.w	r3, r1, r3
 8001106:	43d9      	mvns	r1, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	4313      	orrs	r3, r2
         );
}
 800110e:	4618      	mov	r0, r3
 8001110:	3724      	adds	r7, #36	; 0x24
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800112c:	d301      	bcc.n	8001132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112e:	2301      	movs	r3, #1
 8001130:	e00f      	b.n	8001152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001132:	4a0a      	ldr	r2, [pc, #40]	; (800115c <SysTick_Config+0x40>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800113a:	210f      	movs	r1, #15
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	f7ff ff8e 	bl	8001060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <SysTick_Config+0x40>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114a:	4b04      	ldr	r3, [pc, #16]	; (800115c <SysTick_Config+0x40>)
 800114c:	2207      	movs	r2, #7
 800114e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	e000e010 	.word	0xe000e010

08001160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff29 	bl	8000fc0 <__NVIC_SetPriorityGrouping>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b086      	sub	sp, #24
 800117a:	af00      	add	r7, sp, #0
 800117c:	4603      	mov	r3, r0
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001184:	f7ff ff40 	bl	8001008 <__NVIC_GetPriorityGrouping>
 8001188:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	68b9      	ldr	r1, [r7, #8]
 800118e:	6978      	ldr	r0, [r7, #20]
 8001190:	f7ff ff90 	bl	80010b4 <NVIC_EncodePriority>
 8001194:	4602      	mov	r2, r0
 8001196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff5f 	bl	8001060 <__NVIC_SetPriority>
}
 80011a2:	bf00      	nop
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff33 	bl	8001024 <__NVIC_EnableIRQ>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff ffa4 	bl	800111c <SysTick_Config>
 80011d4:	4603      	mov	r3, r0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011de:	b480      	push	{r7}
 80011e0:	b085      	sub	sp, #20
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011e6:	2300      	movs	r3, #0
 80011e8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d005      	beq.n	8001202 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2204      	movs	r2, #4
 80011fa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	73fb      	strb	r3, [r7, #15]
 8001200:	e037      	b.n	8001272 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 020e 	bic.w	r2, r2, #14
 8001210:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800121c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001220:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f022 0201 	bic.w	r2, r2, #1
 8001230:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	f003 021f 	and.w	r2, r3, #31
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	2101      	movs	r1, #1
 8001240:	fa01 f202 	lsl.w	r2, r1, r2
 8001244:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800124e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001254:	2b00      	cmp	r3, #0
 8001256:	d00c      	beq.n	8001272 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001262:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001266:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001270:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2201      	movs	r2, #1
 8001276:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001282:	7bfb      	ldrb	r3, [r7, #15]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001298:	2300      	movs	r3, #0
 800129a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d00d      	beq.n	80012c4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2204      	movs	r2, #4
 80012ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2201      	movs	r2, #1
 80012b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	73fb      	strb	r3, [r7, #15]
 80012c2:	e047      	b.n	8001354 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 020e 	bic.w	r2, r2, #14
 80012d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 0201 	bic.w	r2, r2, #1
 80012e2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f8:	f003 021f 	and.w	r2, r3, #31
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	2101      	movs	r1, #1
 8001302:	fa01 f202 	lsl.w	r2, r1, r2
 8001306:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001310:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001316:	2b00      	cmp	r3, #0
 8001318:	d00c      	beq.n	8001334 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001324:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001328:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001332:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2201      	movs	r2, #1
 8001338:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	4798      	blx	r3
    }
  }
  return status;
 8001354:	7bfb      	ldrb	r3, [r7, #15]
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001360:	b480      	push	{r7}
 8001362:	b087      	sub	sp, #28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800136e:	e15a      	b.n	8001626 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	2101      	movs	r1, #1
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	fa01 f303 	lsl.w	r3, r1, r3
 800137c:	4013      	ands	r3, r2
 800137e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 814c 	beq.w	8001620 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d00b      	beq.n	80013a8 <HAL_GPIO_Init+0x48>
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b02      	cmp	r3, #2
 8001396:	d007      	beq.n	80013a8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800139c:	2b11      	cmp	r3, #17
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b12      	cmp	r3, #18
 80013a6:	d130      	bne.n	800140a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	68da      	ldr	r2, [r3, #12]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013de:	2201      	movs	r2, #1
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	091b      	lsrs	r3, r3, #4
 80013f4:	f003 0201 	and.w	r2, r3, #1
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	2203      	movs	r2, #3
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4013      	ands	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	689a      	ldr	r2, [r3, #8]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b02      	cmp	r3, #2
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0xea>
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b12      	cmp	r3, #18
 8001448:	d123      	bne.n	8001492 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	08da      	lsrs	r2, r3, #3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	3208      	adds	r2, #8
 8001452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001456:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	220f      	movs	r2, #15
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	691a      	ldr	r2, [r3, #16]
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	08da      	lsrs	r2, r3, #3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3208      	adds	r2, #8
 800148c:	6939      	ldr	r1, [r7, #16]
 800148e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	2203      	movs	r2, #3
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4013      	ands	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 0203 	and.w	r2, r3, #3
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 80a6 	beq.w	8001620 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d4:	4b5b      	ldr	r3, [pc, #364]	; (8001644 <HAL_GPIO_Init+0x2e4>)
 80014d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d8:	4a5a      	ldr	r2, [pc, #360]	; (8001644 <HAL_GPIO_Init+0x2e4>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	6613      	str	r3, [r2, #96]	; 0x60
 80014e0:	4b58      	ldr	r3, [pc, #352]	; (8001644 <HAL_GPIO_Init+0x2e4>)
 80014e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ec:	4a56      	ldr	r2, [pc, #344]	; (8001648 <HAL_GPIO_Init+0x2e8>)
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	089b      	lsrs	r3, r3, #2
 80014f2:	3302      	adds	r3, #2
 80014f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	f003 0303 	and.w	r3, r3, #3
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	220f      	movs	r2, #15
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001516:	d01f      	beq.n	8001558 <HAL_GPIO_Init+0x1f8>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a4c      	ldr	r2, [pc, #304]	; (800164c <HAL_GPIO_Init+0x2ec>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d019      	beq.n	8001554 <HAL_GPIO_Init+0x1f4>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a4b      	ldr	r2, [pc, #300]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d013      	beq.n	8001550 <HAL_GPIO_Init+0x1f0>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a4a      	ldr	r2, [pc, #296]	; (8001654 <HAL_GPIO_Init+0x2f4>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d00d      	beq.n	800154c <HAL_GPIO_Init+0x1ec>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a49      	ldr	r2, [pc, #292]	; (8001658 <HAL_GPIO_Init+0x2f8>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d007      	beq.n	8001548 <HAL_GPIO_Init+0x1e8>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a48      	ldr	r2, [pc, #288]	; (800165c <HAL_GPIO_Init+0x2fc>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d101      	bne.n	8001544 <HAL_GPIO_Init+0x1e4>
 8001540:	2305      	movs	r3, #5
 8001542:	e00a      	b.n	800155a <HAL_GPIO_Init+0x1fa>
 8001544:	2306      	movs	r3, #6
 8001546:	e008      	b.n	800155a <HAL_GPIO_Init+0x1fa>
 8001548:	2304      	movs	r3, #4
 800154a:	e006      	b.n	800155a <HAL_GPIO_Init+0x1fa>
 800154c:	2303      	movs	r3, #3
 800154e:	e004      	b.n	800155a <HAL_GPIO_Init+0x1fa>
 8001550:	2302      	movs	r3, #2
 8001552:	e002      	b.n	800155a <HAL_GPIO_Init+0x1fa>
 8001554:	2301      	movs	r3, #1
 8001556:	e000      	b.n	800155a <HAL_GPIO_Init+0x1fa>
 8001558:	2300      	movs	r3, #0
 800155a:	697a      	ldr	r2, [r7, #20]
 800155c:	f002 0203 	and.w	r2, r2, #3
 8001560:	0092      	lsls	r2, r2, #2
 8001562:	4093      	lsls	r3, r2
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800156a:	4937      	ldr	r1, [pc, #220]	; (8001648 <HAL_GPIO_Init+0x2e8>)
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	089b      	lsrs	r3, r3, #2
 8001570:	3302      	adds	r3, #2
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001578:	4b39      	ldr	r3, [pc, #228]	; (8001660 <HAL_GPIO_Init+0x300>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	43db      	mvns	r3, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800159c:	4a30      	ldr	r2, [pc, #192]	; (8001660 <HAL_GPIO_Init+0x300>)
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80015a2:	4b2f      	ldr	r3, [pc, #188]	; (8001660 <HAL_GPIO_Init+0x300>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	43db      	mvns	r3, r3
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015c6:	4a26      	ldr	r2, [pc, #152]	; (8001660 <HAL_GPIO_Init+0x300>)
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015cc:	4b24      	ldr	r3, [pc, #144]	; (8001660 <HAL_GPIO_Init+0x300>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4013      	ands	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015f0:	4a1b      	ldr	r2, [pc, #108]	; (8001660 <HAL_GPIO_Init+0x300>)
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015f6:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <HAL_GPIO_Init+0x300>)
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	43db      	mvns	r3, r3
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4013      	ands	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4313      	orrs	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800161a:	4a11      	ldr	r2, [pc, #68]	; (8001660 <HAL_GPIO_Init+0x300>)
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	3301      	adds	r3, #1
 8001624:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	fa22 f303 	lsr.w	r3, r2, r3
 8001630:	2b00      	cmp	r3, #0
 8001632:	f47f ae9d 	bne.w	8001370 <HAL_GPIO_Init+0x10>
  }
}
 8001636:	bf00      	nop
 8001638:	bf00      	nop
 800163a:	371c      	adds	r7, #28
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	40021000 	.word	0x40021000
 8001648:	40010000 	.word	0x40010000
 800164c:	48000400 	.word	0x48000400
 8001650:	48000800 	.word	0x48000800
 8001654:	48000c00 	.word	0x48000c00
 8001658:	48001000 	.word	0x48001000
 800165c:	48001400 	.word	0x48001400
 8001660:	40010400 	.word	0x40010400

08001664 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	807b      	strh	r3, [r7, #2]
 8001670:	4613      	mov	r3, r2
 8001672:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001674:	787b      	ldrb	r3, [r7, #1]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800167a:	887a      	ldrh	r2, [r7, #2]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001680:	e002      	b.n	8001688 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001682:	887a      	ldrh	r2, [r7, #2]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d141      	bne.n	8001726 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016a2:	4b4b      	ldr	r3, [pc, #300]	; (80017d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ae:	d131      	bne.n	8001714 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016b0:	4b47      	ldr	r3, [pc, #284]	; (80017d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016b6:	4a46      	ldr	r2, [pc, #280]	; (80017d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016c0:	4b43      	ldr	r3, [pc, #268]	; (80017d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016c8:	4a41      	ldr	r2, [pc, #260]	; (80017d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016d0:	4b40      	ldr	r3, [pc, #256]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2232      	movs	r2, #50	; 0x32
 80016d6:	fb02 f303 	mul.w	r3, r2, r3
 80016da:	4a3f      	ldr	r2, [pc, #252]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80016dc:	fba2 2303 	umull	r2, r3, r2, r3
 80016e0:	0c9b      	lsrs	r3, r3, #18
 80016e2:	3301      	adds	r3, #1
 80016e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016e6:	e002      	b.n	80016ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016ee:	4b38      	ldr	r3, [pc, #224]	; (80017d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016fa:	d102      	bne.n	8001702 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f2      	bne.n	80016e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001702:	4b33      	ldr	r3, [pc, #204]	; (80017d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800170a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800170e:	d158      	bne.n	80017c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e057      	b.n	80017c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001714:	4b2e      	ldr	r3, [pc, #184]	; (80017d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800171a:	4a2d      	ldr	r2, [pc, #180]	; (80017d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800171c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001720:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001724:	e04d      	b.n	80017c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800172c:	d141      	bne.n	80017b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800172e:	4b28      	ldr	r3, [pc, #160]	; (80017d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800173a:	d131      	bne.n	80017a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800173c:	4b24      	ldr	r3, [pc, #144]	; (80017d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800173e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001742:	4a23      	ldr	r2, [pc, #140]	; (80017d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001748:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800174c:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001754:	4a1e      	ldr	r2, [pc, #120]	; (80017d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001756:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800175a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800175c:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2232      	movs	r2, #50	; 0x32
 8001762:	fb02 f303 	mul.w	r3, r2, r3
 8001766:	4a1c      	ldr	r2, [pc, #112]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001768:	fba2 2303 	umull	r2, r3, r2, r3
 800176c:	0c9b      	lsrs	r3, r3, #18
 800176e:	3301      	adds	r3, #1
 8001770:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001772:	e002      	b.n	800177a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	3b01      	subs	r3, #1
 8001778:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001786:	d102      	bne.n	800178e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f2      	bne.n	8001774 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800179a:	d112      	bne.n	80017c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e011      	b.n	80017c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017a6:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80017b0:	e007      	b.n	80017c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017b2:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017ba:	4a05      	ldr	r2, [pc, #20]	; (80017d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017c0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	40007000 	.word	0x40007000
 80017d4:	2000000c 	.word	0x2000000c
 80017d8:	431bde83 	.word	0x431bde83

080017dc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	4a04      	ldr	r2, [pc, #16]	; (80017f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80017e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ea:	6093      	str	r3, [r2, #8]
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40007000 	.word	0x40007000

080017fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e308      	b.n	8001e20 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	d075      	beq.n	8001906 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800181a:	4ba3      	ldr	r3, [pc, #652]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 030c 	and.w	r3, r3, #12
 8001822:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001824:	4ba0      	ldr	r3, [pc, #640]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	f003 0303 	and.w	r3, r3, #3
 800182c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	2b0c      	cmp	r3, #12
 8001832:	d102      	bne.n	800183a <HAL_RCC_OscConfig+0x3e>
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	2b03      	cmp	r3, #3
 8001838:	d002      	beq.n	8001840 <HAL_RCC_OscConfig+0x44>
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	2b08      	cmp	r3, #8
 800183e:	d10b      	bne.n	8001858 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001840:	4b99      	ldr	r3, [pc, #612]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d05b      	beq.n	8001904 <HAL_RCC_OscConfig+0x108>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d157      	bne.n	8001904 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e2e3      	b.n	8001e20 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001860:	d106      	bne.n	8001870 <HAL_RCC_OscConfig+0x74>
 8001862:	4b91      	ldr	r3, [pc, #580]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a90      	ldr	r2, [pc, #576]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	e01d      	b.n	80018ac <HAL_RCC_OscConfig+0xb0>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001878:	d10c      	bne.n	8001894 <HAL_RCC_OscConfig+0x98>
 800187a:	4b8b      	ldr	r3, [pc, #556]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a8a      	ldr	r2, [pc, #552]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	4b88      	ldr	r3, [pc, #544]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a87      	ldr	r2, [pc, #540]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 800188c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	e00b      	b.n	80018ac <HAL_RCC_OscConfig+0xb0>
 8001894:	4b84      	ldr	r3, [pc, #528]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a83      	ldr	r2, [pc, #524]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 800189a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	4b81      	ldr	r3, [pc, #516]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a80      	ldr	r2, [pc, #512]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 80018a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d013      	beq.n	80018dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b4:	f7ff fb56 	bl	8000f64 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018bc:	f7ff fb52 	bl	8000f64 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b64      	cmp	r3, #100	; 0x64
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e2a8      	b.n	8001e20 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ce:	4b76      	ldr	r3, [pc, #472]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0f0      	beq.n	80018bc <HAL_RCC_OscConfig+0xc0>
 80018da:	e014      	b.n	8001906 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018dc:	f7ff fb42 	bl	8000f64 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e4:	f7ff fb3e 	bl	8000f64 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b64      	cmp	r3, #100	; 0x64
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e294      	b.n	8001e20 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018f6:	4b6c      	ldr	r3, [pc, #432]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0xe8>
 8001902:	e000      	b.n	8001906 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d075      	beq.n	80019fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001912:	4b65      	ldr	r3, [pc, #404]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f003 030c 	and.w	r3, r3, #12
 800191a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800191c:	4b62      	ldr	r3, [pc, #392]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	2b0c      	cmp	r3, #12
 800192a:	d102      	bne.n	8001932 <HAL_RCC_OscConfig+0x136>
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	2b02      	cmp	r3, #2
 8001930:	d002      	beq.n	8001938 <HAL_RCC_OscConfig+0x13c>
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	2b04      	cmp	r3, #4
 8001936:	d11f      	bne.n	8001978 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001938:	4b5b      	ldr	r3, [pc, #364]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <HAL_RCC_OscConfig+0x154>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e267      	b.n	8001e20 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001950:	4b55      	ldr	r3, [pc, #340]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	061b      	lsls	r3, r3, #24
 800195e:	4952      	ldr	r1, [pc, #328]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001960:	4313      	orrs	r3, r2
 8001962:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001964:	4b51      	ldr	r3, [pc, #324]	; (8001aac <HAL_RCC_OscConfig+0x2b0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff faaf 	bl	8000ecc <HAL_InitTick>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d043      	beq.n	80019fc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e253      	b.n	8001e20 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d023      	beq.n	80019c8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001980:	4b49      	ldr	r3, [pc, #292]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a48      	ldr	r2, [pc, #288]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800198a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff faea 	bl	8000f64 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001994:	f7ff fae6 	bl	8000f64 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e23c      	b.n	8001e20 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019a6:	4b40      	ldr	r3, [pc, #256]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f0      	beq.n	8001994 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b2:	4b3d      	ldr	r3, [pc, #244]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	061b      	lsls	r3, r3, #24
 80019c0:	4939      	ldr	r1, [pc, #228]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	604b      	str	r3, [r1, #4]
 80019c6:	e01a      	b.n	80019fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019c8:	4b37      	ldr	r3, [pc, #220]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a36      	ldr	r2, [pc, #216]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 80019ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d4:	f7ff fac6 	bl	8000f64 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019dc:	f7ff fac2 	bl	8000f64 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e218      	b.n	8001e20 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019ee:	4b2e      	ldr	r3, [pc, #184]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x1e0>
 80019fa:	e000      	b.n	80019fe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d03c      	beq.n	8001a84 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d01c      	beq.n	8001a4c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a12:	4b25      	ldr	r3, [pc, #148]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001a14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a18:	4a23      	ldr	r2, [pc, #140]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a22:	f7ff fa9f 	bl	8000f64 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a2a:	f7ff fa9b 	bl	8000f64 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e1f1      	b.n	8001e20 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a3c:	4b1a      	ldr	r3, [pc, #104]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0ef      	beq.n	8001a2a <HAL_RCC_OscConfig+0x22e>
 8001a4a:	e01b      	b.n	8001a84 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a4c:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a52:	4a15      	ldr	r2, [pc, #84]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001a54:	f023 0301 	bic.w	r3, r3, #1
 8001a58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5c:	f7ff fa82 	bl	8000f64 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a64:	f7ff fa7e 	bl	8000f64 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e1d4      	b.n	8001e20 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1ef      	bne.n	8001a64 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 80ab 	beq.w	8001be8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a92:	2300      	movs	r3, #0
 8001a94:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a96:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <HAL_RCC_OscConfig+0x2ac>)
 8001a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d106      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x2b4>
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e005      	b.n	8001ab2 <HAL_RCC_OscConfig+0x2b6>
 8001aa6:	bf00      	nop
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	20000010 	.word	0x20000010
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00d      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	4baf      	ldr	r3, [pc, #700]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aba:	4aae      	ldr	r2, [pc, #696]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ac2:	4bac      	ldr	r3, [pc, #688]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ad2:	4ba9      	ldr	r3, [pc, #676]	; (8001d78 <HAL_RCC_OscConfig+0x57c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d118      	bne.n	8001b10 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ade:	4ba6      	ldr	r3, [pc, #664]	; (8001d78 <HAL_RCC_OscConfig+0x57c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4aa5      	ldr	r2, [pc, #660]	; (8001d78 <HAL_RCC_OscConfig+0x57c>)
 8001ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aea:	f7ff fa3b 	bl	8000f64 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001af2:	f7ff fa37 	bl	8000f64 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e18d      	b.n	8001e20 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b04:	4b9c      	ldr	r3, [pc, #624]	; (8001d78 <HAL_RCC_OscConfig+0x57c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0f0      	beq.n	8001af2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d108      	bne.n	8001b2a <HAL_RCC_OscConfig+0x32e>
 8001b18:	4b96      	ldr	r3, [pc, #600]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b1e:	4a95      	ldr	r2, [pc, #596]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b28:	e024      	b.n	8001b74 <HAL_RCC_OscConfig+0x378>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	2b05      	cmp	r3, #5
 8001b30:	d110      	bne.n	8001b54 <HAL_RCC_OscConfig+0x358>
 8001b32:	4b90      	ldr	r3, [pc, #576]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b38:	4a8e      	ldr	r2, [pc, #568]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001b3a:	f043 0304 	orr.w	r3, r3, #4
 8001b3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b42:	4b8c      	ldr	r3, [pc, #560]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b48:	4a8a      	ldr	r2, [pc, #552]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b52:	e00f      	b.n	8001b74 <HAL_RCC_OscConfig+0x378>
 8001b54:	4b87      	ldr	r3, [pc, #540]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b5a:	4a86      	ldr	r2, [pc, #536]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001b5c:	f023 0301 	bic.w	r3, r3, #1
 8001b60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b64:	4b83      	ldr	r3, [pc, #524]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b6a:	4a82      	ldr	r2, [pc, #520]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001b6c:	f023 0304 	bic.w	r3, r3, #4
 8001b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d016      	beq.n	8001baa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7c:	f7ff f9f2 	bl	8000f64 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b82:	e00a      	b.n	8001b9a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b84:	f7ff f9ee 	bl	8000f64 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e142      	b.n	8001e20 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b9a:	4b76      	ldr	r3, [pc, #472]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0ed      	beq.n	8001b84 <HAL_RCC_OscConfig+0x388>
 8001ba8:	e015      	b.n	8001bd6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001baa:	f7ff f9db 	bl	8000f64 <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bb0:	e00a      	b.n	8001bc8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb2:	f7ff f9d7 	bl	8000f64 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e12b      	b.n	8001e20 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bc8:	4b6a      	ldr	r3, [pc, #424]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1ed      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bd6:	7ffb      	ldrb	r3, [r7, #31]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d105      	bne.n	8001be8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bdc:	4b65      	ldr	r3, [pc, #404]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be0:	4a64      	ldr	r2, [pc, #400]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001be2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001be6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0320 	and.w	r3, r3, #32
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d03c      	beq.n	8001c6e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d01c      	beq.n	8001c36 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bfc:	4b5d      	ldr	r3, [pc, #372]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001bfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c02:	4a5c      	ldr	r2, [pc, #368]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0c:	f7ff f9aa 	bl	8000f64 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c14:	f7ff f9a6 	bl	8000f64 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e0fc      	b.n	8001e20 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c26:	4b53      	ldr	r3, [pc, #332]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001c28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0ef      	beq.n	8001c14 <HAL_RCC_OscConfig+0x418>
 8001c34:	e01b      	b.n	8001c6e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c36:	4b4f      	ldr	r3, [pc, #316]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001c38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c3c:	4a4d      	ldr	r2, [pc, #308]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001c3e:	f023 0301 	bic.w	r3, r3, #1
 8001c42:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c46:	f7ff f98d 	bl	8000f64 <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c4e:	f7ff f989 	bl	8000f64 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e0df      	b.n	8001e20 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c60:	4b44      	ldr	r3, [pc, #272]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001c62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1ef      	bne.n	8001c4e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 80d3 	beq.w	8001e1e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c78:	4b3e      	ldr	r3, [pc, #248]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 030c 	and.w	r3, r3, #12
 8001c80:	2b0c      	cmp	r3, #12
 8001c82:	f000 808d 	beq.w	8001da0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d15a      	bne.n	8001d44 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8e:	4b39      	ldr	r3, [pc, #228]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a38      	ldr	r2, [pc, #224]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001c94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9a:	f7ff f963 	bl	8000f64 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca2:	f7ff f95f 	bl	8000f64 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e0b5      	b.n	8001e20 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cb4:	4b2f      	ldr	r3, [pc, #188]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1f0      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cc0:	4b2c      	ldr	r3, [pc, #176]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	4b2d      	ldr	r3, [pc, #180]	; (8001d7c <HAL_RCC_OscConfig+0x580>)
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	6a11      	ldr	r1, [r2, #32]
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cd0:	3a01      	subs	r2, #1
 8001cd2:	0112      	lsls	r2, r2, #4
 8001cd4:	4311      	orrs	r1, r2
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001cda:	0212      	lsls	r2, r2, #8
 8001cdc:	4311      	orrs	r1, r2
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ce2:	0852      	lsrs	r2, r2, #1
 8001ce4:	3a01      	subs	r2, #1
 8001ce6:	0552      	lsls	r2, r2, #21
 8001ce8:	4311      	orrs	r1, r2
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cee:	0852      	lsrs	r2, r2, #1
 8001cf0:	3a01      	subs	r2, #1
 8001cf2:	0652      	lsls	r2, r2, #25
 8001cf4:	4311      	orrs	r1, r2
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001cfa:	06d2      	lsls	r2, r2, #27
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	491d      	ldr	r1, [pc, #116]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d04:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a1a      	ldr	r2, [pc, #104]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001d0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d0e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d10:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	4a17      	ldr	r2, [pc, #92]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001d16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d1a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1c:	f7ff f922 	bl	8000f64 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d24:	f7ff f91e 	bl	8000f64 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e074      	b.n	8001e20 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d36:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0x528>
 8001d42:	e06c      	b.n	8001e1e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d44:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001d4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d4e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	4a07      	ldr	r2, [pc, #28]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001d56:	f023 0303 	bic.w	r3, r3, #3
 8001d5a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	4a04      	ldr	r2, [pc, #16]	; (8001d74 <HAL_RCC_OscConfig+0x578>)
 8001d62:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6c:	f7ff f8fa 	bl	8000f64 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d72:	e00e      	b.n	8001d92 <HAL_RCC_OscConfig+0x596>
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40007000 	.word	0x40007000
 8001d7c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d80:	f7ff f8f0 	bl	8000f64 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e046      	b.n	8001e20 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d92:	4b25      	ldr	r3, [pc, #148]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x584>
 8001d9e:	e03e      	b.n	8001e1e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	69db      	ldr	r3, [r3, #28]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d101      	bne.n	8001dac <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e039      	b.n	8001e20 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001dac:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <HAL_RCC_OscConfig+0x62c>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f003 0203 	and.w	r2, r3, #3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d12c      	bne.n	8001e1a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d123      	bne.n	8001e1a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ddc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d11b      	bne.n	8001e1a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dec:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d113      	bne.n	8001e1a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfc:	085b      	lsrs	r3, r3, #1
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d109      	bne.n	8001e1a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e10:	085b      	lsrs	r3, r3, #1
 8001e12:	3b01      	subs	r3, #1
 8001e14:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d001      	beq.n	8001e1e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3720      	adds	r7, #32
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40021000 	.word	0x40021000

08001e2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e11e      	b.n	8002082 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e44:	4b91      	ldr	r3, [pc, #580]	; (800208c <HAL_RCC_ClockConfig+0x260>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 030f 	and.w	r3, r3, #15
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d910      	bls.n	8001e74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e52:	4b8e      	ldr	r3, [pc, #568]	; (800208c <HAL_RCC_ClockConfig+0x260>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f023 020f 	bic.w	r2, r3, #15
 8001e5a:	498c      	ldr	r1, [pc, #560]	; (800208c <HAL_RCC_ClockConfig+0x260>)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e62:	4b8a      	ldr	r3, [pc, #552]	; (800208c <HAL_RCC_ClockConfig+0x260>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d001      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e106      	b.n	8002082 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d073      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b03      	cmp	r3, #3
 8001e86:	d129      	bne.n	8001edc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e88:	4b81      	ldr	r3, [pc, #516]	; (8002090 <HAL_RCC_ClockConfig+0x264>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e0f4      	b.n	8002082 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001e98:	f000 f99e 	bl	80021d8 <RCC_GetSysClockFreqFromPLLSource>
 8001e9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4a7c      	ldr	r2, [pc, #496]	; (8002094 <HAL_RCC_ClockConfig+0x268>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d93f      	bls.n	8001f26 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ea6:	4b7a      	ldr	r3, [pc, #488]	; (8002090 <HAL_RCC_ClockConfig+0x264>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d009      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d033      	beq.n	8001f26 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d12f      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ec6:	4b72      	ldr	r3, [pc, #456]	; (8002090 <HAL_RCC_ClockConfig+0x264>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ece:	4a70      	ldr	r2, [pc, #448]	; (8002090 <HAL_RCC_ClockConfig+0x264>)
 8001ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ed4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001ed6:	2380      	movs	r3, #128	; 0x80
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	e024      	b.n	8001f26 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d107      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ee4:	4b6a      	ldr	r3, [pc, #424]	; (8002090 <HAL_RCC_ClockConfig+0x264>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d109      	bne.n	8001f04 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e0c6      	b.n	8002082 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ef4:	4b66      	ldr	r3, [pc, #408]	; (8002090 <HAL_RCC_ClockConfig+0x264>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e0be      	b.n	8002082 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001f04:	f000 f8ce 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 8001f08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4a61      	ldr	r2, [pc, #388]	; (8002094 <HAL_RCC_ClockConfig+0x268>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d909      	bls.n	8001f26 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f12:	4b5f      	ldr	r3, [pc, #380]	; (8002090 <HAL_RCC_ClockConfig+0x264>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f1a:	4a5d      	ldr	r2, [pc, #372]	; (8002090 <HAL_RCC_ClockConfig+0x264>)
 8001f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f20:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001f22:	2380      	movs	r3, #128	; 0x80
 8001f24:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f26:	4b5a      	ldr	r3, [pc, #360]	; (8002090 <HAL_RCC_ClockConfig+0x264>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f023 0203 	bic.w	r2, r3, #3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	4957      	ldr	r1, [pc, #348]	; (8002090 <HAL_RCC_ClockConfig+0x264>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f38:	f7ff f814 	bl	8000f64 <HAL_GetTick>
 8001f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3e:	e00a      	b.n	8001f56 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f40:	f7ff f810 	bl	8000f64 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e095      	b.n	8002082 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f56:	4b4e      	ldr	r3, [pc, #312]	; (8002090 <HAL_RCC_ClockConfig+0x264>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 020c 	and.w	r2, r3, #12
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d1eb      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d023      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f80:	4b43      	ldr	r3, [pc, #268]	; (8002090 <HAL_RCC_ClockConfig+0x264>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	4a42      	ldr	r2, [pc, #264]	; (8002090 <HAL_RCC_ClockConfig+0x264>)
 8001f86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f8a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d007      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001f98:	4b3d      	ldr	r3, [pc, #244]	; (8002090 <HAL_RCC_ClockConfig+0x264>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001fa0:	4a3b      	ldr	r2, [pc, #236]	; (8002090 <HAL_RCC_ClockConfig+0x264>)
 8001fa2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fa6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa8:	4b39      	ldr	r3, [pc, #228]	; (8002090 <HAL_RCC_ClockConfig+0x264>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	4936      	ldr	r1, [pc, #216]	; (8002090 <HAL_RCC_ClockConfig+0x264>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	608b      	str	r3, [r1, #8]
 8001fba:	e008      	b.n	8001fce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	2b80      	cmp	r3, #128	; 0x80
 8001fc0:	d105      	bne.n	8001fce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001fc2:	4b33      	ldr	r3, [pc, #204]	; (8002090 <HAL_RCC_ClockConfig+0x264>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	4a32      	ldr	r2, [pc, #200]	; (8002090 <HAL_RCC_ClockConfig+0x264>)
 8001fc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fcc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fce:	4b2f      	ldr	r3, [pc, #188]	; (800208c <HAL_RCC_ClockConfig+0x260>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d21d      	bcs.n	8002018 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fdc:	4b2b      	ldr	r3, [pc, #172]	; (800208c <HAL_RCC_ClockConfig+0x260>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f023 020f 	bic.w	r2, r3, #15
 8001fe4:	4929      	ldr	r1, [pc, #164]	; (800208c <HAL_RCC_ClockConfig+0x260>)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fec:	f7fe ffba 	bl	8000f64 <HAL_GetTick>
 8001ff0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff2:	e00a      	b.n	800200a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff4:	f7fe ffb6 	bl	8000f64 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002002:	4293      	cmp	r3, r2
 8002004:	d901      	bls.n	800200a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e03b      	b.n	8002082 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200a:	4b20      	ldr	r3, [pc, #128]	; (800208c <HAL_RCC_ClockConfig+0x260>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d1ed      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	d008      	beq.n	8002036 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002024:	4b1a      	ldr	r3, [pc, #104]	; (8002090 <HAL_RCC_ClockConfig+0x264>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	4917      	ldr	r1, [pc, #92]	; (8002090 <HAL_RCC_ClockConfig+0x264>)
 8002032:	4313      	orrs	r3, r2
 8002034:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b00      	cmp	r3, #0
 8002040:	d009      	beq.n	8002056 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002042:	4b13      	ldr	r3, [pc, #76]	; (8002090 <HAL_RCC_ClockConfig+0x264>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	490f      	ldr	r1, [pc, #60]	; (8002090 <HAL_RCC_ClockConfig+0x264>)
 8002052:	4313      	orrs	r3, r2
 8002054:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002056:	f000 f825 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 800205a:	4602      	mov	r2, r0
 800205c:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <HAL_RCC_ClockConfig+0x264>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	091b      	lsrs	r3, r3, #4
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	490c      	ldr	r1, [pc, #48]	; (8002098 <HAL_RCC_ClockConfig+0x26c>)
 8002068:	5ccb      	ldrb	r3, [r1, r3]
 800206a:	f003 031f 	and.w	r3, r3, #31
 800206e:	fa22 f303 	lsr.w	r3, r2, r3
 8002072:	4a0a      	ldr	r2, [pc, #40]	; (800209c <HAL_RCC_ClockConfig+0x270>)
 8002074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002076:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <HAL_RCC_ClockConfig+0x274>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe ff26 	bl	8000ecc <HAL_InitTick>
 8002080:	4603      	mov	r3, r0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40022000 	.word	0x40022000
 8002090:	40021000 	.word	0x40021000
 8002094:	04c4b400 	.word	0x04c4b400
 8002098:	0800503c 	.word	0x0800503c
 800209c:	2000000c 	.word	0x2000000c
 80020a0:	20000010 	.word	0x20000010

080020a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b087      	sub	sp, #28
 80020a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80020aa:	4b2c      	ldr	r3, [pc, #176]	; (800215c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 030c 	and.w	r3, r3, #12
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d102      	bne.n	80020bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020b6:	4b2a      	ldr	r3, [pc, #168]	; (8002160 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	e047      	b.n	800214c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80020bc:	4b27      	ldr	r3, [pc, #156]	; (800215c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 030c 	and.w	r3, r3, #12
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	d102      	bne.n	80020ce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020c8:	4b26      	ldr	r3, [pc, #152]	; (8002164 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020ca:	613b      	str	r3, [r7, #16]
 80020cc:	e03e      	b.n	800214c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80020ce:	4b23      	ldr	r3, [pc, #140]	; (800215c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	2b0c      	cmp	r3, #12
 80020d8:	d136      	bne.n	8002148 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020da:	4b20      	ldr	r3, [pc, #128]	; (800215c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020e4:	4b1d      	ldr	r3, [pc, #116]	; (800215c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	091b      	lsrs	r3, r3, #4
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	3301      	adds	r3, #1
 80020f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d10c      	bne.n	8002112 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020f8:	4a1a      	ldr	r2, [pc, #104]	; (8002164 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002100:	4a16      	ldr	r2, [pc, #88]	; (800215c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002102:	68d2      	ldr	r2, [r2, #12]
 8002104:	0a12      	lsrs	r2, r2, #8
 8002106:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800210a:	fb02 f303 	mul.w	r3, r2, r3
 800210e:	617b      	str	r3, [r7, #20]
      break;
 8002110:	e00c      	b.n	800212c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002112:	4a13      	ldr	r2, [pc, #76]	; (8002160 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	fbb2 f3f3 	udiv	r3, r2, r3
 800211a:	4a10      	ldr	r2, [pc, #64]	; (800215c <HAL_RCC_GetSysClockFreq+0xb8>)
 800211c:	68d2      	ldr	r2, [r2, #12]
 800211e:	0a12      	lsrs	r2, r2, #8
 8002120:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002124:	fb02 f303 	mul.w	r3, r2, r3
 8002128:	617b      	str	r3, [r7, #20]
      break;
 800212a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800212c:	4b0b      	ldr	r3, [pc, #44]	; (800215c <HAL_RCC_GetSysClockFreq+0xb8>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	0e5b      	lsrs	r3, r3, #25
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	3301      	adds	r3, #1
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	fbb2 f3f3 	udiv	r3, r2, r3
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	e001      	b.n	800214c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800214c:	693b      	ldr	r3, [r7, #16]
}
 800214e:	4618      	mov	r0, r3
 8002150:	371c      	adds	r7, #28
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40021000 	.word	0x40021000
 8002160:	00f42400 	.word	0x00f42400
 8002164:	016e3600 	.word	0x016e3600

08002168 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800216c:	4b03      	ldr	r3, [pc, #12]	; (800217c <HAL_RCC_GetHCLKFreq+0x14>)
 800216e:	681b      	ldr	r3, [r3, #0]
}
 8002170:	4618      	mov	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	2000000c 	.word	0x2000000c

08002180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002184:	f7ff fff0 	bl	8002168 <HAL_RCC_GetHCLKFreq>
 8002188:	4602      	mov	r2, r0
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	0a1b      	lsrs	r3, r3, #8
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	4904      	ldr	r1, [pc, #16]	; (80021a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002196:	5ccb      	ldrb	r3, [r1, r3]
 8002198:	f003 031f 	and.w	r3, r3, #31
 800219c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40021000 	.word	0x40021000
 80021a8:	0800504c 	.word	0x0800504c

080021ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021b0:	f7ff ffda 	bl	8002168 <HAL_RCC_GetHCLKFreq>
 80021b4:	4602      	mov	r2, r0
 80021b6:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	0adb      	lsrs	r3, r3, #11
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	4904      	ldr	r1, [pc, #16]	; (80021d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021c2:	5ccb      	ldrb	r3, [r1, r3]
 80021c4:	f003 031f 	and.w	r3, r3, #31
 80021c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40021000 	.word	0x40021000
 80021d4:	0800504c 	.word	0x0800504c

080021d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	b087      	sub	sp, #28
 80021dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021de:	4b1e      	ldr	r3, [pc, #120]	; (8002258 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021e8:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	3301      	adds	r3, #1
 80021f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	2b03      	cmp	r3, #3
 80021fa:	d10c      	bne.n	8002216 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021fc:	4a17      	ldr	r2, [pc, #92]	; (800225c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	fbb2 f3f3 	udiv	r3, r2, r3
 8002204:	4a14      	ldr	r2, [pc, #80]	; (8002258 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002206:	68d2      	ldr	r2, [r2, #12]
 8002208:	0a12      	lsrs	r2, r2, #8
 800220a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800220e:	fb02 f303 	mul.w	r3, r2, r3
 8002212:	617b      	str	r3, [r7, #20]
    break;
 8002214:	e00c      	b.n	8002230 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002216:	4a12      	ldr	r2, [pc, #72]	; (8002260 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	fbb2 f3f3 	udiv	r3, r2, r3
 800221e:	4a0e      	ldr	r2, [pc, #56]	; (8002258 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002220:	68d2      	ldr	r2, [r2, #12]
 8002222:	0a12      	lsrs	r2, r2, #8
 8002224:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002228:	fb02 f303 	mul.w	r3, r2, r3
 800222c:	617b      	str	r3, [r7, #20]
    break;
 800222e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002230:	4b09      	ldr	r3, [pc, #36]	; (8002258 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	0e5b      	lsrs	r3, r3, #25
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	3301      	adds	r3, #1
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	fbb2 f3f3 	udiv	r3, r2, r3
 8002248:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800224a:	687b      	ldr	r3, [r7, #4]
}
 800224c:	4618      	mov	r0, r3
 800224e:	371c      	adds	r7, #28
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	40021000 	.word	0x40021000
 800225c:	016e3600 	.word	0x016e3600
 8002260:	00f42400 	.word	0x00f42400

08002264 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800226c:	2300      	movs	r3, #0
 800226e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002270:	2300      	movs	r3, #0
 8002272:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 8098 	beq.w	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002282:	2300      	movs	r3, #0
 8002284:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002286:	4b43      	ldr	r3, [pc, #268]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10d      	bne.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002292:	4b40      	ldr	r3, [pc, #256]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002296:	4a3f      	ldr	r2, [pc, #252]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800229c:	6593      	str	r3, [r2, #88]	; 0x58
 800229e:	4b3d      	ldr	r3, [pc, #244]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022aa:	2301      	movs	r3, #1
 80022ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022ae:	4b3a      	ldr	r3, [pc, #232]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a39      	ldr	r2, [pc, #228]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022ba:	f7fe fe53 	bl	8000f64 <HAL_GetTick>
 80022be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022c0:	e009      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c2:	f7fe fe4f 	bl	8000f64 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d902      	bls.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	74fb      	strb	r3, [r7, #19]
        break;
 80022d4:	e005      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022d6:	4b30      	ldr	r3, [pc, #192]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0ef      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80022e2:	7cfb      	ldrb	r3, [r7, #19]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d159      	bne.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022e8:	4b2a      	ldr	r3, [pc, #168]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d01e      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	429a      	cmp	r2, r3
 8002302:	d019      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002304:	4b23      	ldr	r3, [pc, #140]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800230e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002310:	4b20      	ldr	r3, [pc, #128]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002316:	4a1f      	ldr	r2, [pc, #124]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002320:	4b1c      	ldr	r3, [pc, #112]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002326:	4a1b      	ldr	r2, [pc, #108]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800232c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002330:	4a18      	ldr	r2, [pc, #96]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d016      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002342:	f7fe fe0f 	bl	8000f64 <HAL_GetTick>
 8002346:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002348:	e00b      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234a:	f7fe fe0b 	bl	8000f64 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	f241 3288 	movw	r2, #5000	; 0x1388
 8002358:	4293      	cmp	r3, r2
 800235a:	d902      	bls.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	74fb      	strb	r3, [r7, #19]
            break;
 8002360:	e006      	b.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002362:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0ec      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002370:	7cfb      	ldrb	r3, [r7, #19]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10b      	bne.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002376:	4b07      	ldr	r3, [pc, #28]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	4903      	ldr	r1, [pc, #12]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002386:	4313      	orrs	r3, r2
 8002388:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800238c:	e008      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800238e:	7cfb      	ldrb	r3, [r7, #19]
 8002390:	74bb      	strb	r3, [r7, #18]
 8002392:	e005      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002394:	40021000 	.word	0x40021000
 8002398:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800239c:	7cfb      	ldrb	r3, [r7, #19]
 800239e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023a0:	7c7b      	ldrb	r3, [r7, #17]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d105      	bne.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a6:	4ba6      	ldr	r3, [pc, #664]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023aa:	4aa5      	ldr	r2, [pc, #660]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00a      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023be:	4ba0      	ldr	r3, [pc, #640]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c4:	f023 0203 	bic.w	r2, r3, #3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	499c      	ldr	r1, [pc, #624]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00a      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023e0:	4b97      	ldr	r3, [pc, #604]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e6:	f023 020c 	bic.w	r2, r3, #12
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	4994      	ldr	r1, [pc, #592]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0304 	and.w	r3, r3, #4
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00a      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002402:	4b8f      	ldr	r3, [pc, #572]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002408:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	498b      	ldr	r1, [pc, #556]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002412:	4313      	orrs	r3, r2
 8002414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0308 	and.w	r3, r3, #8
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00a      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002424:	4b86      	ldr	r3, [pc, #536]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	4983      	ldr	r1, [pc, #524]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002434:	4313      	orrs	r3, r2
 8002436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0320 	and.w	r3, r3, #32
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00a      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002446:	4b7e      	ldr	r3, [pc, #504]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	497a      	ldr	r1, [pc, #488]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002456:	4313      	orrs	r3, r2
 8002458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00a      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002468:	4b75      	ldr	r3, [pc, #468]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	4972      	ldr	r1, [pc, #456]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00a      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800248a:	4b6d      	ldr	r3, [pc, #436]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800248c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002490:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	4969      	ldr	r1, [pc, #420]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00a      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024ac:	4b64      	ldr	r3, [pc, #400]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	4961      	ldr	r1, [pc, #388]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00a      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024ce:	4b5c      	ldr	r3, [pc, #368]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	4958      	ldr	r1, [pc, #352]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d015      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024f0:	4b53      	ldr	r3, [pc, #332]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fe:	4950      	ldr	r1, [pc, #320]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002500:	4313      	orrs	r3, r2
 8002502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800250e:	d105      	bne.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002510:	4b4b      	ldr	r3, [pc, #300]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	4a4a      	ldr	r2, [pc, #296]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002516:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800251a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002524:	2b00      	cmp	r3, #0
 8002526:	d015      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002528:	4b45      	ldr	r3, [pc, #276]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800252a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002536:	4942      	ldr	r1, [pc, #264]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002538:	4313      	orrs	r3, r2
 800253a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002546:	d105      	bne.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002548:	4b3d      	ldr	r3, [pc, #244]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	4a3c      	ldr	r2, [pc, #240]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800254e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002552:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d015      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002560:	4b37      	ldr	r3, [pc, #220]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002566:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	4934      	ldr	r1, [pc, #208]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002570:	4313      	orrs	r3, r2
 8002572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800257e:	d105      	bne.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002580:	4b2f      	ldr	r3, [pc, #188]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	4a2e      	ldr	r2, [pc, #184]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002586:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800258a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d015      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002598:	4b29      	ldr	r3, [pc, #164]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800259a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a6:	4926      	ldr	r1, [pc, #152]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025b6:	d105      	bne.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025b8:	4b21      	ldr	r3, [pc, #132]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	4a20      	ldr	r2, [pc, #128]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d015      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025d0:	4b1b      	ldr	r3, [pc, #108]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025de:	4918      	ldr	r1, [pc, #96]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025ee:	d105      	bne.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025f0:	4b13      	ldr	r3, [pc, #76]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	4a12      	ldr	r2, [pc, #72]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d015      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002608:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002616:	490a      	ldr	r1, [pc, #40]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002622:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002626:	d105      	bne.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002628:	4b05      	ldr	r3, [pc, #20]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	4a04      	ldr	r2, [pc, #16]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800262e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002632:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002634:	7cbb      	ldrb	r3, [r7, #18]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40021000 	.word	0x40021000

08002644 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e042      	b.n	80026dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800265c:	2b00      	cmp	r3, #0
 800265e:	d106      	bne.n	800266e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7fe fba3 	bl	8000db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2224      	movs	r2, #36	; 0x24
 8002672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0201 	bic.w	r2, r2, #1
 8002684:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 fb5c 	bl	8002d44 <UART_SetConfig>
 800268c:	4603      	mov	r3, r0
 800268e:	2b01      	cmp	r3, #1
 8002690:	d101      	bne.n	8002696 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e022      	b.n	80026dc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 fdee 	bl	8003280 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0201 	orr.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 fe75 	bl	80033c4 <UART_CheckIdleState>
 80026da:	4603      	mov	r3, r0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08a      	sub	sp, #40	; 0x28
 80026e8:	af02      	add	r7, sp, #8
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	603b      	str	r3, [r7, #0]
 80026f0:	4613      	mov	r3, r2
 80026f2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026fa:	2b20      	cmp	r3, #32
 80026fc:	f040 8083 	bne.w	8002806 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <HAL_UART_Transmit+0x28>
 8002706:	88fb      	ldrh	r3, [r7, #6]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e07b      	b.n	8002808 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002716:	2b01      	cmp	r3, #1
 8002718:	d101      	bne.n	800271e <HAL_UART_Transmit+0x3a>
 800271a:	2302      	movs	r3, #2
 800271c:	e074      	b.n	8002808 <HAL_UART_Transmit+0x124>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2221      	movs	r2, #33	; 0x21
 8002732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002736:	f7fe fc15 	bl	8000f64 <HAL_GetTick>
 800273a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	88fa      	ldrh	r2, [r7, #6]
 8002740:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	88fa      	ldrh	r2, [r7, #6]
 8002748:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002754:	d108      	bne.n	8002768 <HAL_UART_Transmit+0x84>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d104      	bne.n	8002768 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800275e:	2300      	movs	r3, #0
 8002760:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	61bb      	str	r3, [r7, #24]
 8002766:	e003      	b.n	8002770 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800276c:	2300      	movs	r3, #0
 800276e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8002778:	e02c      	b.n	80027d4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	2200      	movs	r2, #0
 8002782:	2180      	movs	r1, #128	; 0x80
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 fe68 	bl	800345a <UART_WaitOnFlagUntilTimeout>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e039      	b.n	8002808 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10b      	bne.n	80027b2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	3302      	adds	r3, #2
 80027ae:	61bb      	str	r3, [r7, #24]
 80027b0:	e007      	b.n	80027c2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	781a      	ldrb	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	3301      	adds	r3, #1
 80027c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	3b01      	subs	r3, #1
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80027da:	b29b      	uxth	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1cc      	bne.n	800277a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	2200      	movs	r2, #0
 80027e8:	2140      	movs	r1, #64	; 0x40
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 fe35 	bl	800345a <UART_WaitOnFlagUntilTimeout>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e006      	b.n	8002808 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2220      	movs	r2, #32
 80027fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	e000      	b.n	8002808 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8002806:	2302      	movs	r3, #2
  }
}
 8002808:	4618      	mov	r0, r3
 800280a:	3720      	adds	r7, #32
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	4613      	mov	r3, r2
 800281c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002824:	2b20      	cmp	r3, #32
 8002826:	d131      	bne.n	800288c <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d002      	beq.n	8002834 <HAL_UART_Receive_IT+0x24>
 800282e:	88fb      	ldrh	r3, [r7, #6]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e02a      	b.n	800288e <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800283e:	2b01      	cmp	r3, #1
 8002840:	d101      	bne.n	8002846 <HAL_UART_Receive_IT+0x36>
 8002842:	2302      	movs	r3, #2
 8002844:	e023      	b.n	800288e <HAL_UART_Receive_IT+0x7e>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a0f      	ldr	r2, [pc, #60]	; (8002898 <HAL_UART_Receive_IT+0x88>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d00e      	beq.n	800287c <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d007      	beq.n	800287c <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800287a:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800287c:	88fb      	ldrh	r3, [r7, #6]
 800287e:	461a      	mov	r2, r3
 8002880:	68b9      	ldr	r1, [r7, #8]
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 fe6a 	bl	800355c <UART_Start_Receive_IT>
 8002888:	4603      	mov	r3, r0
 800288a:	e000      	b.n	800288e <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800288c:	2302      	movs	r3, #2
  }
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40008000 	.word	0x40008000

0800289c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b088      	sub	sp, #32
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80028bc:	69fa      	ldr	r2, [r7, #28]
 80028be:	f640 030f 	movw	r3, #2063	; 0x80f
 80028c2:	4013      	ands	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d118      	bne.n	80028fe <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f003 0320 	and.w	r3, r3, #32
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d013      	beq.n	80028fe <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	f003 0320 	and.w	r3, r3, #32
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d104      	bne.n	80028ea <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d009      	beq.n	80028fe <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 81fb 	beq.w	8002cea <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	4798      	blx	r3
      }
      return;
 80028fc:	e1f5      	b.n	8002cea <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 80ef 	beq.w	8002ae4 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	4b73      	ldr	r3, [pc, #460]	; (8002ad8 <HAL_UART_IRQHandler+0x23c>)
 800290a:	4013      	ands	r3, r2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d105      	bne.n	800291c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4b72      	ldr	r3, [pc, #456]	; (8002adc <HAL_UART_IRQHandler+0x240>)
 8002914:	4013      	ands	r3, r2
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 80e4 	beq.w	8002ae4 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d010      	beq.n	8002948 <HAL_UART_IRQHandler+0xac>
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00b      	beq.n	8002948 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2201      	movs	r2, #1
 8002936:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800293e:	f043 0201 	orr.w	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d010      	beq.n	8002974 <HAL_UART_IRQHandler+0xd8>
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00b      	beq.n	8002974 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2202      	movs	r2, #2
 8002962:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800296a:	f043 0204 	orr.w	r2, r3, #4
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b00      	cmp	r3, #0
 800297c:	d010      	beq.n	80029a0 <HAL_UART_IRQHandler+0x104>
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00b      	beq.n	80029a0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2204      	movs	r2, #4
 800298e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002996:	f043 0202 	orr.w	r2, r3, #2
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d015      	beq.n	80029d6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	f003 0320 	and.w	r3, r3, #32
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d104      	bne.n	80029be <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	4b48      	ldr	r3, [pc, #288]	; (8002ad8 <HAL_UART_IRQHandler+0x23c>)
 80029b8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00b      	beq.n	80029d6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2208      	movs	r2, #8
 80029c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029cc:	f043 0208 	orr.w	r2, r3, #8
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d011      	beq.n	8002a04 <HAL_UART_IRQHandler+0x168>
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00c      	beq.n	8002a04 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029fa:	f043 0220 	orr.w	r2, r3, #32
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 816f 	beq.w	8002cee <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f003 0320 	and.w	r3, r3, #32
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d011      	beq.n	8002a3e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	f003 0320 	and.w	r3, r3, #32
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d104      	bne.n	8002a2e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d007      	beq.n	8002a3e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a44:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a50:	2b40      	cmp	r3, #64	; 0x40
 8002a52:	d004      	beq.n	8002a5e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d031      	beq.n	8002ac2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fe3a 	bl	80036d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6e:	2b40      	cmp	r3, #64	; 0x40
 8002a70:	d123      	bne.n	8002aba <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a80:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d013      	beq.n	8002ab2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a8e:	4a14      	ldr	r2, [pc, #80]	; (8002ae0 <HAL_UART_IRQHandler+0x244>)
 8002a90:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fe fbfa 	bl	8001290 <HAL_DMA_Abort_IT>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d017      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002aac:	4610      	mov	r0, r2
 8002aae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab0:	e00f      	b.n	8002ad2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f930 	bl	8002d18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab8:	e00b      	b.n	8002ad2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f92c 	bl	8002d18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ac0:	e007      	b.n	8002ad2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f928 	bl	8002d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002ad0:	e10d      	b.n	8002cee <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad2:	bf00      	nop
    return;
 8002ad4:	e10b      	b.n	8002cee <HAL_UART_IRQHandler+0x452>
 8002ad6:	bf00      	nop
 8002ad8:	10000001 	.word	0x10000001
 8002adc:	04000120 	.word	0x04000120
 8002ae0:	0800373d 	.word	0x0800373d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	f040 80ab 	bne.w	8002c44 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	f003 0310 	and.w	r3, r3, #16
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 80a5 	beq.w	8002c44 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	f003 0310 	and.w	r3, r3, #16
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 809f 	beq.w	8002c44 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2210      	movs	r2, #16
 8002b0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b18:	2b40      	cmp	r3, #64	; 0x40
 8002b1a:	d155      	bne.n	8002bc8 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002b26:	893b      	ldrh	r3, [r7, #8]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 80e2 	beq.w	8002cf2 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b34:	893a      	ldrh	r2, [r7, #8]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	f080 80db 	bcs.w	8002cf2 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	893a      	ldrh	r2, [r7, #8]
 8002b40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0320 	and.w	r3, r3, #32
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d12b      	bne.n	8002bac <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b62:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689a      	ldr	r2, [r3, #8]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0201 	bic.w	r2, r2, #1
 8002b72:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b82:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 0210 	bic.w	r2, r2, #16
 8002ba0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fe fb19 	bl	80011de <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 f8b3 	bl	8002d2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002bc6:	e094      	b.n	8002cf2 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 8087 	beq.w	8002cf6 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8002be8:	897b      	ldrh	r3, [r7, #10]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 8083 	beq.w	8002cf6 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002bfe:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6812      	ldr	r2, [r2, #0]
 8002c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c0e:	f023 0301 	bic.w	r3, r3, #1
 8002c12:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0210 	bic.w	r2, r2, #16
 8002c36:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c38:	897b      	ldrh	r3, [r7, #10]
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f875 	bl	8002d2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c42:	e058      	b.n	8002cf6 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00d      	beq.n	8002c6a <HAL_UART_IRQHandler+0x3ce>
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d008      	beq.n	8002c6a <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f001 f876 	bl	8003d54 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002c68:	e048      	b.n	8002cfc <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d012      	beq.n	8002c9a <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d104      	bne.n	8002c88 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d008      	beq.n	8002c9a <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d034      	beq.n	8002cfa <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	4798      	blx	r3
    }
    return;
 8002c98:	e02f      	b.n	8002cfa <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d008      	beq.n	8002cb6 <HAL_UART_IRQHandler+0x41a>
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 fd5a 	bl	8003768 <UART_EndTransmit_IT>
    return;
 8002cb4:	e022      	b.n	8002cfc <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d008      	beq.n	8002cd2 <HAL_UART_IRQHandler+0x436>
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f001 f856 	bl	8003d7c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cd0:	e014      	b.n	8002cfc <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00f      	beq.n	8002cfc <HAL_UART_IRQHandler+0x460>
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	da0c      	bge.n	8002cfc <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f001 f840 	bl	8003d68 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ce8:	e008      	b.n	8002cfc <HAL_UART_IRQHandler+0x460>
      return;
 8002cea:	bf00      	nop
 8002cec:	e006      	b.n	8002cfc <HAL_UART_IRQHandler+0x460>
    return;
 8002cee:	bf00      	nop
 8002cf0:	e004      	b.n	8002cfc <HAL_UART_IRQHandler+0x460>
      return;
 8002cf2:	bf00      	nop
 8002cf4:	e002      	b.n	8002cfc <HAL_UART_IRQHandler+0x460>
      return;
 8002cf6:	bf00      	nop
 8002cf8:	e000      	b.n	8002cfc <HAL_UART_IRQHandler+0x460>
    return;
 8002cfa:	bf00      	nop
  }
}
 8002cfc:	3720      	adds	r7, #32
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop

08002d04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d44:	b5b0      	push	{r4, r5, r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	4baf      	ldr	r3, [pc, #700]	; (800302c <UART_SetConfig+0x2e8>)
 8002d70:	4013      	ands	r3, r2
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6812      	ldr	r2, [r2, #0]
 8002d76:	69f9      	ldr	r1, [r7, #28]
 8002d78:	430b      	orrs	r3, r1
 8002d7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68da      	ldr	r2, [r3, #12]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4aa4      	ldr	r2, [pc, #656]	; (8003030 <UART_SetConfig+0x2ec>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d004      	beq.n	8002dac <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	69fa      	ldr	r2, [r7, #28]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002db6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6812      	ldr	r2, [r2, #0]
 8002dbe:	69f9      	ldr	r1, [r7, #28]
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dca:	f023 010f 	bic.w	r1, r3, #15
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a95      	ldr	r2, [pc, #596]	; (8003034 <UART_SetConfig+0x2f0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d120      	bne.n	8002e26 <UART_SetConfig+0xe2>
 8002de4:	4b94      	ldr	r3, [pc, #592]	; (8003038 <UART_SetConfig+0x2f4>)
 8002de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	2b03      	cmp	r3, #3
 8002df0:	d816      	bhi.n	8002e20 <UART_SetConfig+0xdc>
 8002df2:	a201      	add	r2, pc, #4	; (adr r2, 8002df8 <UART_SetConfig+0xb4>)
 8002df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df8:	08002e09 	.word	0x08002e09
 8002dfc:	08002e15 	.word	0x08002e15
 8002e00:	08002e0f 	.word	0x08002e0f
 8002e04:	08002e1b 	.word	0x08002e1b
 8002e08:	2301      	movs	r3, #1
 8002e0a:	76fb      	strb	r3, [r7, #27]
 8002e0c:	e0bc      	b.n	8002f88 <UART_SetConfig+0x244>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	76fb      	strb	r3, [r7, #27]
 8002e12:	e0b9      	b.n	8002f88 <UART_SetConfig+0x244>
 8002e14:	2304      	movs	r3, #4
 8002e16:	76fb      	strb	r3, [r7, #27]
 8002e18:	e0b6      	b.n	8002f88 <UART_SetConfig+0x244>
 8002e1a:	2308      	movs	r3, #8
 8002e1c:	76fb      	strb	r3, [r7, #27]
 8002e1e:	e0b3      	b.n	8002f88 <UART_SetConfig+0x244>
 8002e20:	2310      	movs	r3, #16
 8002e22:	76fb      	strb	r3, [r7, #27]
 8002e24:	e0b0      	b.n	8002f88 <UART_SetConfig+0x244>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a84      	ldr	r2, [pc, #528]	; (800303c <UART_SetConfig+0x2f8>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d132      	bne.n	8002e96 <UART_SetConfig+0x152>
 8002e30:	4b81      	ldr	r3, [pc, #516]	; (8003038 <UART_SetConfig+0x2f4>)
 8002e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e36:	f003 030c 	and.w	r3, r3, #12
 8002e3a:	2b0c      	cmp	r3, #12
 8002e3c:	d828      	bhi.n	8002e90 <UART_SetConfig+0x14c>
 8002e3e:	a201      	add	r2, pc, #4	; (adr r2, 8002e44 <UART_SetConfig+0x100>)
 8002e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e44:	08002e79 	.word	0x08002e79
 8002e48:	08002e91 	.word	0x08002e91
 8002e4c:	08002e91 	.word	0x08002e91
 8002e50:	08002e91 	.word	0x08002e91
 8002e54:	08002e85 	.word	0x08002e85
 8002e58:	08002e91 	.word	0x08002e91
 8002e5c:	08002e91 	.word	0x08002e91
 8002e60:	08002e91 	.word	0x08002e91
 8002e64:	08002e7f 	.word	0x08002e7f
 8002e68:	08002e91 	.word	0x08002e91
 8002e6c:	08002e91 	.word	0x08002e91
 8002e70:	08002e91 	.word	0x08002e91
 8002e74:	08002e8b 	.word	0x08002e8b
 8002e78:	2300      	movs	r3, #0
 8002e7a:	76fb      	strb	r3, [r7, #27]
 8002e7c:	e084      	b.n	8002f88 <UART_SetConfig+0x244>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	76fb      	strb	r3, [r7, #27]
 8002e82:	e081      	b.n	8002f88 <UART_SetConfig+0x244>
 8002e84:	2304      	movs	r3, #4
 8002e86:	76fb      	strb	r3, [r7, #27]
 8002e88:	e07e      	b.n	8002f88 <UART_SetConfig+0x244>
 8002e8a:	2308      	movs	r3, #8
 8002e8c:	76fb      	strb	r3, [r7, #27]
 8002e8e:	e07b      	b.n	8002f88 <UART_SetConfig+0x244>
 8002e90:	2310      	movs	r3, #16
 8002e92:	76fb      	strb	r3, [r7, #27]
 8002e94:	e078      	b.n	8002f88 <UART_SetConfig+0x244>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a69      	ldr	r2, [pc, #420]	; (8003040 <UART_SetConfig+0x2fc>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d120      	bne.n	8002ee2 <UART_SetConfig+0x19e>
 8002ea0:	4b65      	ldr	r3, [pc, #404]	; (8003038 <UART_SetConfig+0x2f4>)
 8002ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002eaa:	2b30      	cmp	r3, #48	; 0x30
 8002eac:	d013      	beq.n	8002ed6 <UART_SetConfig+0x192>
 8002eae:	2b30      	cmp	r3, #48	; 0x30
 8002eb0:	d814      	bhi.n	8002edc <UART_SetConfig+0x198>
 8002eb2:	2b20      	cmp	r3, #32
 8002eb4:	d009      	beq.n	8002eca <UART_SetConfig+0x186>
 8002eb6:	2b20      	cmp	r3, #32
 8002eb8:	d810      	bhi.n	8002edc <UART_SetConfig+0x198>
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d002      	beq.n	8002ec4 <UART_SetConfig+0x180>
 8002ebe:	2b10      	cmp	r3, #16
 8002ec0:	d006      	beq.n	8002ed0 <UART_SetConfig+0x18c>
 8002ec2:	e00b      	b.n	8002edc <UART_SetConfig+0x198>
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	76fb      	strb	r3, [r7, #27]
 8002ec8:	e05e      	b.n	8002f88 <UART_SetConfig+0x244>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	76fb      	strb	r3, [r7, #27]
 8002ece:	e05b      	b.n	8002f88 <UART_SetConfig+0x244>
 8002ed0:	2304      	movs	r3, #4
 8002ed2:	76fb      	strb	r3, [r7, #27]
 8002ed4:	e058      	b.n	8002f88 <UART_SetConfig+0x244>
 8002ed6:	2308      	movs	r3, #8
 8002ed8:	76fb      	strb	r3, [r7, #27]
 8002eda:	e055      	b.n	8002f88 <UART_SetConfig+0x244>
 8002edc:	2310      	movs	r3, #16
 8002ede:	76fb      	strb	r3, [r7, #27]
 8002ee0:	e052      	b.n	8002f88 <UART_SetConfig+0x244>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a57      	ldr	r2, [pc, #348]	; (8003044 <UART_SetConfig+0x300>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d120      	bne.n	8002f2e <UART_SetConfig+0x1ea>
 8002eec:	4b52      	ldr	r3, [pc, #328]	; (8003038 <UART_SetConfig+0x2f4>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002ef6:	2bc0      	cmp	r3, #192	; 0xc0
 8002ef8:	d013      	beq.n	8002f22 <UART_SetConfig+0x1de>
 8002efa:	2bc0      	cmp	r3, #192	; 0xc0
 8002efc:	d814      	bhi.n	8002f28 <UART_SetConfig+0x1e4>
 8002efe:	2b80      	cmp	r3, #128	; 0x80
 8002f00:	d009      	beq.n	8002f16 <UART_SetConfig+0x1d2>
 8002f02:	2b80      	cmp	r3, #128	; 0x80
 8002f04:	d810      	bhi.n	8002f28 <UART_SetConfig+0x1e4>
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d002      	beq.n	8002f10 <UART_SetConfig+0x1cc>
 8002f0a:	2b40      	cmp	r3, #64	; 0x40
 8002f0c:	d006      	beq.n	8002f1c <UART_SetConfig+0x1d8>
 8002f0e:	e00b      	b.n	8002f28 <UART_SetConfig+0x1e4>
 8002f10:	2300      	movs	r3, #0
 8002f12:	76fb      	strb	r3, [r7, #27]
 8002f14:	e038      	b.n	8002f88 <UART_SetConfig+0x244>
 8002f16:	2302      	movs	r3, #2
 8002f18:	76fb      	strb	r3, [r7, #27]
 8002f1a:	e035      	b.n	8002f88 <UART_SetConfig+0x244>
 8002f1c:	2304      	movs	r3, #4
 8002f1e:	76fb      	strb	r3, [r7, #27]
 8002f20:	e032      	b.n	8002f88 <UART_SetConfig+0x244>
 8002f22:	2308      	movs	r3, #8
 8002f24:	76fb      	strb	r3, [r7, #27]
 8002f26:	e02f      	b.n	8002f88 <UART_SetConfig+0x244>
 8002f28:	2310      	movs	r3, #16
 8002f2a:	76fb      	strb	r3, [r7, #27]
 8002f2c:	e02c      	b.n	8002f88 <UART_SetConfig+0x244>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a3f      	ldr	r2, [pc, #252]	; (8003030 <UART_SetConfig+0x2ec>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d125      	bne.n	8002f84 <UART_SetConfig+0x240>
 8002f38:	4b3f      	ldr	r3, [pc, #252]	; (8003038 <UART_SetConfig+0x2f4>)
 8002f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f46:	d017      	beq.n	8002f78 <UART_SetConfig+0x234>
 8002f48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f4c:	d817      	bhi.n	8002f7e <UART_SetConfig+0x23a>
 8002f4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f52:	d00b      	beq.n	8002f6c <UART_SetConfig+0x228>
 8002f54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f58:	d811      	bhi.n	8002f7e <UART_SetConfig+0x23a>
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <UART_SetConfig+0x222>
 8002f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f62:	d006      	beq.n	8002f72 <UART_SetConfig+0x22e>
 8002f64:	e00b      	b.n	8002f7e <UART_SetConfig+0x23a>
 8002f66:	2300      	movs	r3, #0
 8002f68:	76fb      	strb	r3, [r7, #27]
 8002f6a:	e00d      	b.n	8002f88 <UART_SetConfig+0x244>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	76fb      	strb	r3, [r7, #27]
 8002f70:	e00a      	b.n	8002f88 <UART_SetConfig+0x244>
 8002f72:	2304      	movs	r3, #4
 8002f74:	76fb      	strb	r3, [r7, #27]
 8002f76:	e007      	b.n	8002f88 <UART_SetConfig+0x244>
 8002f78:	2308      	movs	r3, #8
 8002f7a:	76fb      	strb	r3, [r7, #27]
 8002f7c:	e004      	b.n	8002f88 <UART_SetConfig+0x244>
 8002f7e:	2310      	movs	r3, #16
 8002f80:	76fb      	strb	r3, [r7, #27]
 8002f82:	e001      	b.n	8002f88 <UART_SetConfig+0x244>
 8002f84:	2310      	movs	r3, #16
 8002f86:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a28      	ldr	r2, [pc, #160]	; (8003030 <UART_SetConfig+0x2ec>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	f040 809e 	bne.w	80030d0 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f94:	7efb      	ldrb	r3, [r7, #27]
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	d823      	bhi.n	8002fe2 <UART_SetConfig+0x29e>
 8002f9a:	a201      	add	r2, pc, #4	; (adr r2, 8002fa0 <UART_SetConfig+0x25c>)
 8002f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa0:	08002fc5 	.word	0x08002fc5
 8002fa4:	08002fe3 	.word	0x08002fe3
 8002fa8:	08002fcd 	.word	0x08002fcd
 8002fac:	08002fe3 	.word	0x08002fe3
 8002fb0:	08002fd3 	.word	0x08002fd3
 8002fb4:	08002fe3 	.word	0x08002fe3
 8002fb8:	08002fe3 	.word	0x08002fe3
 8002fbc:	08002fe3 	.word	0x08002fe3
 8002fc0:	08002fdb 	.word	0x08002fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fc4:	f7ff f8dc 	bl	8002180 <HAL_RCC_GetPCLK1Freq>
 8002fc8:	6178      	str	r0, [r7, #20]
        break;
 8002fca:	e00f      	b.n	8002fec <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fcc:	4b1e      	ldr	r3, [pc, #120]	; (8003048 <UART_SetConfig+0x304>)
 8002fce:	617b      	str	r3, [r7, #20]
        break;
 8002fd0:	e00c      	b.n	8002fec <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fd2:	f7ff f867 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 8002fd6:	6178      	str	r0, [r7, #20]
        break;
 8002fd8:	e008      	b.n	8002fec <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fde:	617b      	str	r3, [r7, #20]
        break;
 8002fe0:	e004      	b.n	8002fec <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	76bb      	strb	r3, [r7, #26]
        break;
 8002fea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 812e 	beq.w	8003250 <UART_SetConfig+0x50c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	4a14      	ldr	r2, [pc, #80]	; (800304c <UART_SetConfig+0x308>)
 8002ffa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ffe:	461a      	mov	r2, r3
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	fbb3 f3f2 	udiv	r3, r3, r2
 8003006:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	4413      	add	r3, r2
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	429a      	cmp	r2, r3
 8003016:	d305      	bcc.n	8003024 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	429a      	cmp	r2, r3
 8003022:	d915      	bls.n	8003050 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	76bb      	strb	r3, [r7, #26]
 8003028:	e112      	b.n	8003250 <UART_SetConfig+0x50c>
 800302a:	bf00      	nop
 800302c:	cfff69f3 	.word	0xcfff69f3
 8003030:	40008000 	.word	0x40008000
 8003034:	40013800 	.word	0x40013800
 8003038:	40021000 	.word	0x40021000
 800303c:	40004400 	.word	0x40004400
 8003040:	40004800 	.word	0x40004800
 8003044:	40004c00 	.word	0x40004c00
 8003048:	00f42400 	.word	0x00f42400
 800304c:	08005054 	.word	0x08005054
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	4618      	mov	r0, r3
 8003054:	f04f 0100 	mov.w	r1, #0
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	4a86      	ldr	r2, [pc, #536]	; (8003278 <UART_SetConfig+0x534>)
 800305e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003062:	b29a      	uxth	r2, r3
 8003064:	f04f 0300 	mov.w	r3, #0
 8003068:	f7fd f92a 	bl	80002c0 <__aeabi_uldivmod>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4610      	mov	r0, r2
 8003072:	4619      	mov	r1, r3
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	f04f 0300 	mov.w	r3, #0
 800307c:	020b      	lsls	r3, r1, #8
 800307e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003082:	0202      	lsls	r2, r0, #8
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	6849      	ldr	r1, [r1, #4]
 8003088:	0849      	lsrs	r1, r1, #1
 800308a:	4608      	mov	r0, r1
 800308c:	f04f 0100 	mov.w	r1, #0
 8003090:	1814      	adds	r4, r2, r0
 8003092:	eb43 0501 	adc.w	r5, r3, r1
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	461a      	mov	r2, r3
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	4620      	mov	r0, r4
 80030a2:	4629      	mov	r1, r5
 80030a4:	f7fd f90c 	bl	80002c0 <__aeabi_uldivmod>
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4613      	mov	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030b6:	d308      	bcc.n	80030ca <UART_SetConfig+0x386>
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030be:	d204      	bcs.n	80030ca <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	60da      	str	r2, [r3, #12]
 80030c8:	e0c2      	b.n	8003250 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	76bb      	strb	r3, [r7, #26]
 80030ce:	e0bf      	b.n	8003250 <UART_SetConfig+0x50c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030d8:	d165      	bne.n	80031a6 <UART_SetConfig+0x462>
  {
    switch (clocksource)
 80030da:	7efb      	ldrb	r3, [r7, #27]
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d828      	bhi.n	8003132 <UART_SetConfig+0x3ee>
 80030e0:	a201      	add	r2, pc, #4	; (adr r2, 80030e8 <UART_SetConfig+0x3a4>)
 80030e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e6:	bf00      	nop
 80030e8:	0800310d 	.word	0x0800310d
 80030ec:	08003115 	.word	0x08003115
 80030f0:	0800311d 	.word	0x0800311d
 80030f4:	08003133 	.word	0x08003133
 80030f8:	08003123 	.word	0x08003123
 80030fc:	08003133 	.word	0x08003133
 8003100:	08003133 	.word	0x08003133
 8003104:	08003133 	.word	0x08003133
 8003108:	0800312b 	.word	0x0800312b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800310c:	f7ff f838 	bl	8002180 <HAL_RCC_GetPCLK1Freq>
 8003110:	6178      	str	r0, [r7, #20]
        break;
 8003112:	e013      	b.n	800313c <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003114:	f7ff f84a 	bl	80021ac <HAL_RCC_GetPCLK2Freq>
 8003118:	6178      	str	r0, [r7, #20]
        break;
 800311a:	e00f      	b.n	800313c <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800311c:	4b57      	ldr	r3, [pc, #348]	; (800327c <UART_SetConfig+0x538>)
 800311e:	617b      	str	r3, [r7, #20]
        break;
 8003120:	e00c      	b.n	800313c <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003122:	f7fe ffbf 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 8003126:	6178      	str	r0, [r7, #20]
        break;
 8003128:	e008      	b.n	800313c <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800312a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800312e:	617b      	str	r3, [r7, #20]
        break;
 8003130:	e004      	b.n	800313c <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	76bb      	strb	r3, [r7, #26]
        break;
 800313a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 8086 	beq.w	8003250 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	4a4b      	ldr	r2, [pc, #300]	; (8003278 <UART_SetConfig+0x534>)
 800314a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800314e:	461a      	mov	r2, r3
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	fbb3 f3f2 	udiv	r3, r3, r2
 8003156:	005a      	lsls	r2, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	085b      	lsrs	r3, r3, #1
 800315e:	441a      	add	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	fbb2 f3f3 	udiv	r3, r2, r3
 8003168:	b29b      	uxth	r3, r3
 800316a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	2b0f      	cmp	r3, #15
 8003170:	d916      	bls.n	80031a0 <UART_SetConfig+0x45c>
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003178:	d212      	bcs.n	80031a0 <UART_SetConfig+0x45c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	b29b      	uxth	r3, r3
 800317e:	f023 030f 	bic.w	r3, r3, #15
 8003182:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	085b      	lsrs	r3, r3, #1
 8003188:	b29b      	uxth	r3, r3
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	b29a      	uxth	r2, r3
 8003190:	89fb      	ldrh	r3, [r7, #14]
 8003192:	4313      	orrs	r3, r2
 8003194:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	89fa      	ldrh	r2, [r7, #14]
 800319c:	60da      	str	r2, [r3, #12]
 800319e:	e057      	b.n	8003250 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	76bb      	strb	r3, [r7, #26]
 80031a4:	e054      	b.n	8003250 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031a6:	7efb      	ldrb	r3, [r7, #27]
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d828      	bhi.n	80031fe <UART_SetConfig+0x4ba>
 80031ac:	a201      	add	r2, pc, #4	; (adr r2, 80031b4 <UART_SetConfig+0x470>)
 80031ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b2:	bf00      	nop
 80031b4:	080031d9 	.word	0x080031d9
 80031b8:	080031e1 	.word	0x080031e1
 80031bc:	080031e9 	.word	0x080031e9
 80031c0:	080031ff 	.word	0x080031ff
 80031c4:	080031ef 	.word	0x080031ef
 80031c8:	080031ff 	.word	0x080031ff
 80031cc:	080031ff 	.word	0x080031ff
 80031d0:	080031ff 	.word	0x080031ff
 80031d4:	080031f7 	.word	0x080031f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031d8:	f7fe ffd2 	bl	8002180 <HAL_RCC_GetPCLK1Freq>
 80031dc:	6178      	str	r0, [r7, #20]
        break;
 80031de:	e013      	b.n	8003208 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031e0:	f7fe ffe4 	bl	80021ac <HAL_RCC_GetPCLK2Freq>
 80031e4:	6178      	str	r0, [r7, #20]
        break;
 80031e6:	e00f      	b.n	8003208 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031e8:	4b24      	ldr	r3, [pc, #144]	; (800327c <UART_SetConfig+0x538>)
 80031ea:	617b      	str	r3, [r7, #20]
        break;
 80031ec:	e00c      	b.n	8003208 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ee:	f7fe ff59 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 80031f2:	6178      	str	r0, [r7, #20]
        break;
 80031f4:	e008      	b.n	8003208 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031fa:	617b      	str	r3, [r7, #20]
        break;
 80031fc:	e004      	b.n	8003208 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 80031fe:	2300      	movs	r3, #0
 8003200:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	76bb      	strb	r3, [r7, #26]
        break;
 8003206:	bf00      	nop
    }

    if (pclk != 0U)
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d020      	beq.n	8003250 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	4a19      	ldr	r2, [pc, #100]	; (8003278 <UART_SetConfig+0x534>)
 8003214:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003218:	461a      	mov	r2, r3
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	fbb3 f2f2 	udiv	r2, r3, r2
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	085b      	lsrs	r3, r3, #1
 8003226:	441a      	add	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003230:	b29b      	uxth	r3, r3
 8003232:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	2b0f      	cmp	r3, #15
 8003238:	d908      	bls.n	800324c <UART_SetConfig+0x508>
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003240:	d204      	bcs.n	800324c <UART_SetConfig+0x508>
      {
        huart->Instance->BRR = usartdiv;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	60da      	str	r2, [r3, #12]
 800324a:	e001      	b.n	8003250 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800326c:	7ebb      	ldrb	r3, [r7, #26]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3720      	adds	r7, #32
 8003272:	46bd      	mov	sp, r7
 8003274:	bdb0      	pop	{r4, r5, r7, pc}
 8003276:	bf00      	nop
 8003278:	08005054 	.word	0x08005054
 800327c:	00f42400 	.word	0x00f42400

08003280 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00a      	beq.n	80032aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00a      	beq.n	80032ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003314:	f003 0310 	and.w	r3, r3, #16
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00a      	beq.n	8003332 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003336:	f003 0320 	and.w	r3, r3, #32
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335c:	2b00      	cmp	r3, #0
 800335e:	d01a      	beq.n	8003396 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800337e:	d10a      	bne.n	8003396 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
  }
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af02      	add	r7, sp, #8
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033d4:	f7fd fdc6 	bl	8000f64 <HAL_GetTick>
 80033d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d10e      	bne.n	8003406 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f82f 	bl	800345a <UART_WaitOnFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e025      	b.n	8003452 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b04      	cmp	r3, #4
 8003412:	d10e      	bne.n	8003432 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003414:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f819 	bl	800345a <UART_WaitOnFlagUntilTimeout>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e00f      	b.n	8003452 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2220      	movs	r2, #32
 8003436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2220      	movs	r2, #32
 800343e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b084      	sub	sp, #16
 800345e:	af00      	add	r7, sp, #0
 8003460:	60f8      	str	r0, [r7, #12]
 8003462:	60b9      	str	r1, [r7, #8]
 8003464:	603b      	str	r3, [r7, #0]
 8003466:	4613      	mov	r3, r2
 8003468:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800346a:	e062      	b.n	8003532 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003472:	d05e      	beq.n	8003532 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003474:	f7fd fd76 	bl	8000f64 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	429a      	cmp	r2, r3
 8003482:	d302      	bcc.n	800348a <UART_WaitOnFlagUntilTimeout+0x30>
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d11d      	bne.n	80034c6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003498:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0201 	bic.w	r2, r2, #1
 80034a8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e045      	b.n	8003552 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d02e      	beq.n	8003532 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034e2:	d126      	bne.n	8003532 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034ec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034fc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0201 	bic.w	r2, r2, #1
 800350c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2220      	movs	r2, #32
 8003512:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2220      	movs	r2, #32
 800351a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2220      	movs	r2, #32
 8003522:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e00f      	b.n	8003552 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	69da      	ldr	r2, [r3, #28]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4013      	ands	r3, r2
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	429a      	cmp	r2, r3
 8003540:	bf0c      	ite	eq
 8003542:	2301      	moveq	r3, #1
 8003544:	2300      	movne	r3, #0
 8003546:	b2db      	uxtb	r3, r3
 8003548:	461a      	mov	r2, r3
 800354a:	79fb      	ldrb	r3, [r7, #7]
 800354c:	429a      	cmp	r2, r3
 800354e:	d08d      	beq.n	800346c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
	...

0800355c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	4613      	mov	r3, r2
 8003568:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	88fa      	ldrh	r2, [r7, #6]
 8003574:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	88fa      	ldrh	r2, [r7, #6]
 800357c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800358e:	d10e      	bne.n	80035ae <UART_Start_Receive_IT+0x52>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d105      	bne.n	80035a4 <UART_Start_Receive_IT+0x48>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800359e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80035a2:	e02d      	b.n	8003600 <UART_Start_Receive_IT+0xa4>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	22ff      	movs	r2, #255	; 0xff
 80035a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80035ac:	e028      	b.n	8003600 <UART_Start_Receive_IT+0xa4>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10d      	bne.n	80035d2 <UART_Start_Receive_IT+0x76>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d104      	bne.n	80035c8 <UART_Start_Receive_IT+0x6c>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	22ff      	movs	r2, #255	; 0xff
 80035c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80035c6:	e01b      	b.n	8003600 <UART_Start_Receive_IT+0xa4>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	227f      	movs	r2, #127	; 0x7f
 80035cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80035d0:	e016      	b.n	8003600 <UART_Start_Receive_IT+0xa4>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035da:	d10d      	bne.n	80035f8 <UART_Start_Receive_IT+0x9c>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d104      	bne.n	80035ee <UART_Start_Receive_IT+0x92>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	227f      	movs	r2, #127	; 0x7f
 80035e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80035ec:	e008      	b.n	8003600 <UART_Start_Receive_IT+0xa4>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	223f      	movs	r2, #63	; 0x3f
 80035f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80035f6:	e003      	b.n	8003600 <UART_Start_Receive_IT+0xa4>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2222      	movs	r2, #34	; 0x22
 800360c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0201 	orr.w	r2, r2, #1
 800361e:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003624:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003628:	d12a      	bne.n	8003680 <UART_Start_Receive_IT+0x124>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003630:	88fa      	ldrh	r2, [r7, #6]
 8003632:	429a      	cmp	r2, r3
 8003634:	d324      	bcc.n	8003680 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800363e:	d107      	bne.n	8003650 <UART_Start_Receive_IT+0xf4>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d103      	bne.n	8003650 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4a1f      	ldr	r2, [pc, #124]	; (80036c8 <UART_Start_Receive_IT+0x16c>)
 800364c:	671a      	str	r2, [r3, #112]	; 0x70
 800364e:	e002      	b.n	8003656 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4a1e      	ldr	r2, [pc, #120]	; (80036cc <UART_Start_Receive_IT+0x170>)
 8003654:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800366c:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800367c:	609a      	str	r2, [r3, #8]
 800367e:	e01b      	b.n	80036b8 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003688:	d107      	bne.n	800369a <UART_Start_Receive_IT+0x13e>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d103      	bne.n	800369a <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	4a0e      	ldr	r2, [pc, #56]	; (80036d0 <UART_Start_Receive_IT+0x174>)
 8003696:	671a      	str	r2, [r3, #112]	; 0x70
 8003698:	e002      	b.n	80036a0 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4a0d      	ldr	r2, [pc, #52]	; (80036d4 <UART_Start_Receive_IT+0x178>)
 800369e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80036b6:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	08003b51 	.word	0x08003b51
 80036cc:	0800394d 	.word	0x0800394d
 80036d0:	08003875 	.word	0x08003875
 80036d4:	0800379d 	.word	0x0800379d

080036d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80036ee:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6812      	ldr	r2, [r2, #0]
 80036fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036fe:	f023 0301 	bic.w	r3, r3, #1
 8003702:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003708:	2b01      	cmp	r3, #1
 800370a:	d107      	bne.n	800371c <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0210 	bic.w	r2, r2, #16
 800371a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2220      	movs	r2, #32
 8003720:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003748:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f7ff fadc 	bl	8002d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003760:	bf00      	nop
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800377e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2220      	movs	r2, #32
 8003784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff fab8 	bl	8002d04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003794:	bf00      	nop
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80037aa:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b2:	2b22      	cmp	r3, #34	; 0x22
 80037b4:	d152      	bne.n	800385c <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80037be:	89bb      	ldrh	r3, [r7, #12]
 80037c0:	b2d9      	uxtb	r1, r3
 80037c2:	89fb      	ldrh	r3, [r7, #14]
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ca:	400a      	ands	r2, r1
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	3b01      	subs	r3, #1
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d139      	bne.n	800386c <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003806:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0201 	bic.w	r2, r2, #1
 8003816:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2220      	movs	r2, #32
 800381c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800382a:	2b01      	cmp	r3, #1
 800382c:	d10f      	bne.n	800384e <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0210 	bic.w	r2, r2, #16
 800383c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003844:	4619      	mov	r1, r3
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7ff fa70 	bl	8002d2c <HAL_UARTEx_RxEventCallback>
 800384c:	e002      	b.n	8003854 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fd f938 	bl	8000ac4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800385a:	e007      	b.n	800386c <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699a      	ldr	r2, [r3, #24]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0208 	orr.w	r2, r2, #8
 800386a:	619a      	str	r2, [r3, #24]
}
 800386c:	bf00      	nop
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003882:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388a:	2b22      	cmp	r3, #34	; 0x22
 800388c:	d152      	bne.n	8003934 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389a:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800389c:	89ba      	ldrh	r2, [r7, #12]
 800389e:	89fb      	ldrh	r3, [r7, #14]
 80038a0:	4013      	ands	r3, r2
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ac:	1c9a      	adds	r2, r3, #2
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d139      	bne.n	8003944 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80038de:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689a      	ldr	r2, [r3, #8]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0201 	bic.w	r2, r2, #1
 80038ee:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003902:	2b01      	cmp	r3, #1
 8003904:	d10f      	bne.n	8003926 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0210 	bic.w	r2, r2, #16
 8003914:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800391c:	4619      	mov	r1, r3
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7ff fa04 	bl	8002d2c <HAL_UARTEx_RxEventCallback>
 8003924:	e002      	b.n	800392c <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7fd f8cc 	bl	8000ac4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003932:	e007      	b.n	8003944 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	699a      	ldr	r2, [r3, #24]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0208 	orr.w	r2, r2, #8
 8003942:	619a      	str	r2, [r3, #24]
}
 8003944:	bf00      	nop
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b088      	sub	sp, #32
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800395a:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397a:	2b22      	cmp	r3, #34	; 0x22
 800397c:	f040 80da 	bne.w	8003b34 <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003986:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003988:	e0aa      	b.n	8003ae0 <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003992:	89bb      	ldrh	r3, [r7, #12]
 8003994:	b2d9      	uxtb	r1, r3
 8003996:	8b7b      	ldrh	r3, [r7, #26]
 8003998:	b2da      	uxtb	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399e:	400a      	ands	r2, r1
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a8:	1c5a      	adds	r2, r3, #1
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	3b01      	subs	r3, #1
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d04d      	beq.n	8003a6e <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d010      	beq.n	80039fe <UART_RxISR_8BIT_FIFOEN+0xb2>
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00b      	beq.n	80039fe <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2201      	movs	r2, #1
 80039ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039f4:	f043 0201 	orr.w	r2, r3, #1
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d010      	beq.n	8003a2a <UART_RxISR_8BIT_FIFOEN+0xde>
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00b      	beq.n	8003a2a <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2202      	movs	r2, #2
 8003a18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a20:	f043 0204 	orr.w	r2, r3, #4
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d010      	beq.n	8003a56 <UART_RxISR_8BIT_FIFOEN+0x10a>
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00b      	beq.n	8003a56 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2204      	movs	r2, #4
 8003a44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a4c:	f043 0202 	orr.w	r2, r3, #2
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d006      	beq.n	8003a6e <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7ff f959 	bl	8002d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d132      	bne.n	8003ae0 <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a88:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	6812      	ldr	r2, [r2, #0]
 8003a94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a98:	f023 0301 	bic.w	r3, r3, #1
 8003a9c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d10f      	bne.n	8003ad4 <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0210 	bic.w	r2, r2, #16
 8003ac2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003aca:	4619      	mov	r1, r3
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff f92d 	bl	8002d2c <HAL_UARTEx_RxEventCallback>
 8003ad2:	e002      	b.n	8003ada <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7fc fff5 	bl	8000ac4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003ae0:	89fb      	ldrh	r3, [r7, #14]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d005      	beq.n	8003af2 <UART_RxISR_8BIT_FIFOEN+0x1a6>
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	f003 0320 	and.w	r3, r3, #32
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f47f af4c 	bne.w	800398a <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003af8:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003afa:	897b      	ldrh	r3, [r7, #10]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d021      	beq.n	8003b44 <UART_RxISR_8BIT_FIFOEN+0x1f8>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003b06:	897a      	ldrh	r2, [r7, #10]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d21b      	bcs.n	8003b44 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003b1a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a0b      	ldr	r2, [pc, #44]	; (8003b4c <UART_RxISR_8BIT_FIFOEN+0x200>)
 8003b20:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0220 	orr.w	r2, r2, #32
 8003b30:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b32:	e007      	b.n	8003b44 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699a      	ldr	r2, [r3, #24]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0208 	orr.w	r2, r2, #8
 8003b42:	619a      	str	r2, [r3, #24]
}
 8003b44:	bf00      	nop
 8003b46:	3720      	adds	r7, #32
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	0800379d 	.word	0x0800379d

08003b50 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08a      	sub	sp, #40	; 0x28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003b5e:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7e:	2b22      	cmp	r3, #34	; 0x22
 8003b80:	f040 80da 	bne.w	8003d38 <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003b8a:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003b8c:	e0aa      	b.n	8003ce4 <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9a:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 8003b9c:	8aba      	ldrh	r2, [r7, #20]
 8003b9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bac:	1c9a      	adds	r2, r3, #2
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d04d      	beq.n	8003c72 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d010      	beq.n	8003c02 <UART_RxISR_16BIT_FIFOEN+0xb2>
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00b      	beq.n	8003c02 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bf8:	f043 0201 	orr.w	r2, r3, #1
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d010      	beq.n	8003c2e <UART_RxISR_16BIT_FIFOEN+0xde>
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00b      	beq.n	8003c2e <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c24:	f043 0204 	orr.w	r2, r3, #4
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d010      	beq.n	8003c5a <UART_RxISR_16BIT_FIFOEN+0x10a>
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00b      	beq.n	8003c5a <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2204      	movs	r2, #4
 8003c48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c50:	f043 0202 	orr.w	r2, r3, #2
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d006      	beq.n	8003c72 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7ff f857 	bl	8002d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d132      	bne.n	8003ce4 <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c8c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6812      	ldr	r2, [r2, #0]
 8003c98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c9c:	f023 0301 	bic.w	r3, r3, #1
 8003ca0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d10f      	bne.n	8003cd8 <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0210 	bic.w	r2, r2, #16
 8003cc6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003cce:	4619      	mov	r1, r3
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7ff f82b 	bl	8002d2c <HAL_UARTEx_RxEventCallback>
 8003cd6:	e002      	b.n	8003cde <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7fc fef3 	bl	8000ac4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003ce4:	8afb      	ldrh	r3, [r7, #22]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d005      	beq.n	8003cf6 <UART_RxISR_16BIT_FIFOEN+0x1a6>
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	f003 0320 	and.w	r3, r3, #32
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f47f af4c 	bne.w	8003b8e <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003cfc:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003cfe:	89fb      	ldrh	r3, [r7, #14]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d021      	beq.n	8003d48 <UART_RxISR_16BIT_FIFOEN+0x1f8>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003d0a:	89fa      	ldrh	r2, [r7, #14]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d21b      	bcs.n	8003d48 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689a      	ldr	r2, [r3, #8]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003d1e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a0b      	ldr	r2, [pc, #44]	; (8003d50 <UART_RxISR_16BIT_FIFOEN+0x200>)
 8003d24:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f042 0220 	orr.w	r2, r2, #32
 8003d34:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d36:	e007      	b.n	8003d48 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699a      	ldr	r2, [r3, #24]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0208 	orr.w	r2, r2, #8
 8003d46:	619a      	str	r2, [r3, #24]
}
 8003d48:	bf00      	nop
 8003d4a:	3728      	adds	r7, #40	; 0x28
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	08003875 	.word	0x08003875

08003d54 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d101      	bne.n	8003da6 <HAL_UARTEx_DisableFifoMode+0x16>
 8003da2:	2302      	movs	r3, #2
 8003da4:	e027      	b.n	8003df6 <HAL_UARTEx_DisableFifoMode+0x66>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2224      	movs	r2, #36	; 0x24
 8003db2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0201 	bic.w	r2, r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003dd4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2220      	movs	r2, #32
 8003de8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b084      	sub	sp, #16
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
 8003e0a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d101      	bne.n	8003e1a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003e16:	2302      	movs	r3, #2
 8003e18:	e02d      	b.n	8003e76 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2224      	movs	r2, #36	; 0x24
 8003e26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0201 	bic.w	r2, r2, #1
 8003e40:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f850 	bl	8003efc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b084      	sub	sp, #16
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
 8003e86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d101      	bne.n	8003e96 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003e92:	2302      	movs	r3, #2
 8003e94:	e02d      	b.n	8003ef2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2224      	movs	r2, #36	; 0x24
 8003ea2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0201 	bic.w	r2, r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f812 	bl	8003efc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
	...

08003efc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d108      	bne.n	8003f1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003f1c:	e031      	b.n	8003f82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003f1e:	2308      	movs	r3, #8
 8003f20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003f22:	2308      	movs	r3, #8
 8003f24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	0e5b      	lsrs	r3, r3, #25
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	f003 0307 	and.w	r3, r3, #7
 8003f34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	0f5b      	lsrs	r3, r3, #29
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f46:	7bbb      	ldrb	r3, [r7, #14]
 8003f48:	7b3a      	ldrb	r2, [r7, #12]
 8003f4a:	4911      	ldr	r1, [pc, #68]	; (8003f90 <UARTEx_SetNbDataToProcess+0x94>)
 8003f4c:	5c8a      	ldrb	r2, [r1, r2]
 8003f4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003f52:	7b3a      	ldrb	r2, [r7, #12]
 8003f54:	490f      	ldr	r1, [pc, #60]	; (8003f94 <UARTEx_SetNbDataToProcess+0x98>)
 8003f56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f58:	fb93 f3f2 	sdiv	r3, r3, r2
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
 8003f66:	7b7a      	ldrb	r2, [r7, #13]
 8003f68:	4909      	ldr	r1, [pc, #36]	; (8003f90 <UARTEx_SetNbDataToProcess+0x94>)
 8003f6a:	5c8a      	ldrb	r2, [r1, r2]
 8003f6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003f70:	7b7a      	ldrb	r2, [r7, #13]
 8003f72:	4908      	ldr	r1, [pc, #32]	; (8003f94 <UARTEx_SetNbDataToProcess+0x98>)
 8003f74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f76:	fb93 f3f2 	sdiv	r3, r3, r2
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003f82:	bf00      	nop
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	0800506c 	.word	0x0800506c
 8003f94:	08005074 	.word	0x08005074

08003f98 <__errno>:
 8003f98:	4b01      	ldr	r3, [pc, #4]	; (8003fa0 <__errno+0x8>)
 8003f9a:	6818      	ldr	r0, [r3, #0]
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	20000018 	.word	0x20000018

08003fa4 <__libc_init_array>:
 8003fa4:	b570      	push	{r4, r5, r6, lr}
 8003fa6:	4d0d      	ldr	r5, [pc, #52]	; (8003fdc <__libc_init_array+0x38>)
 8003fa8:	4c0d      	ldr	r4, [pc, #52]	; (8003fe0 <__libc_init_array+0x3c>)
 8003faa:	1b64      	subs	r4, r4, r5
 8003fac:	10a4      	asrs	r4, r4, #2
 8003fae:	2600      	movs	r6, #0
 8003fb0:	42a6      	cmp	r6, r4
 8003fb2:	d109      	bne.n	8003fc8 <__libc_init_array+0x24>
 8003fb4:	4d0b      	ldr	r5, [pc, #44]	; (8003fe4 <__libc_init_array+0x40>)
 8003fb6:	4c0c      	ldr	r4, [pc, #48]	; (8003fe8 <__libc_init_array+0x44>)
 8003fb8:	f000 ffec 	bl	8004f94 <_init>
 8003fbc:	1b64      	subs	r4, r4, r5
 8003fbe:	10a4      	asrs	r4, r4, #2
 8003fc0:	2600      	movs	r6, #0
 8003fc2:	42a6      	cmp	r6, r4
 8003fc4:	d105      	bne.n	8003fd2 <__libc_init_array+0x2e>
 8003fc6:	bd70      	pop	{r4, r5, r6, pc}
 8003fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fcc:	4798      	blx	r3
 8003fce:	3601      	adds	r6, #1
 8003fd0:	e7ee      	b.n	8003fb0 <__libc_init_array+0xc>
 8003fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fd6:	4798      	blx	r3
 8003fd8:	3601      	adds	r6, #1
 8003fda:	e7f2      	b.n	8003fc2 <__libc_init_array+0x1e>
 8003fdc:	0800511c 	.word	0x0800511c
 8003fe0:	0800511c 	.word	0x0800511c
 8003fe4:	0800511c 	.word	0x0800511c
 8003fe8:	08005120 	.word	0x08005120

08003fec <memset>:
 8003fec:	4402      	add	r2, r0
 8003fee:	4603      	mov	r3, r0
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d100      	bne.n	8003ff6 <memset+0xa>
 8003ff4:	4770      	bx	lr
 8003ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8003ffa:	e7f9      	b.n	8003ff0 <memset+0x4>

08003ffc <iprintf>:
 8003ffc:	b40f      	push	{r0, r1, r2, r3}
 8003ffe:	4b0a      	ldr	r3, [pc, #40]	; (8004028 <iprintf+0x2c>)
 8004000:	b513      	push	{r0, r1, r4, lr}
 8004002:	681c      	ldr	r4, [r3, #0]
 8004004:	b124      	cbz	r4, 8004010 <iprintf+0x14>
 8004006:	69a3      	ldr	r3, [r4, #24]
 8004008:	b913      	cbnz	r3, 8004010 <iprintf+0x14>
 800400a:	4620      	mov	r0, r4
 800400c:	f000 fa5e 	bl	80044cc <__sinit>
 8004010:	ab05      	add	r3, sp, #20
 8004012:	9a04      	ldr	r2, [sp, #16]
 8004014:	68a1      	ldr	r1, [r4, #8]
 8004016:	9301      	str	r3, [sp, #4]
 8004018:	4620      	mov	r0, r4
 800401a:	f000 fc2f 	bl	800487c <_vfiprintf_r>
 800401e:	b002      	add	sp, #8
 8004020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004024:	b004      	add	sp, #16
 8004026:	4770      	bx	lr
 8004028:	20000018 	.word	0x20000018

0800402c <_puts_r>:
 800402c:	b570      	push	{r4, r5, r6, lr}
 800402e:	460e      	mov	r6, r1
 8004030:	4605      	mov	r5, r0
 8004032:	b118      	cbz	r0, 800403c <_puts_r+0x10>
 8004034:	6983      	ldr	r3, [r0, #24]
 8004036:	b90b      	cbnz	r3, 800403c <_puts_r+0x10>
 8004038:	f000 fa48 	bl	80044cc <__sinit>
 800403c:	69ab      	ldr	r3, [r5, #24]
 800403e:	68ac      	ldr	r4, [r5, #8]
 8004040:	b913      	cbnz	r3, 8004048 <_puts_r+0x1c>
 8004042:	4628      	mov	r0, r5
 8004044:	f000 fa42 	bl	80044cc <__sinit>
 8004048:	4b2c      	ldr	r3, [pc, #176]	; (80040fc <_puts_r+0xd0>)
 800404a:	429c      	cmp	r4, r3
 800404c:	d120      	bne.n	8004090 <_puts_r+0x64>
 800404e:	686c      	ldr	r4, [r5, #4]
 8004050:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004052:	07db      	lsls	r3, r3, #31
 8004054:	d405      	bmi.n	8004062 <_puts_r+0x36>
 8004056:	89a3      	ldrh	r3, [r4, #12]
 8004058:	0598      	lsls	r0, r3, #22
 800405a:	d402      	bmi.n	8004062 <_puts_r+0x36>
 800405c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800405e:	f000 fad3 	bl	8004608 <__retarget_lock_acquire_recursive>
 8004062:	89a3      	ldrh	r3, [r4, #12]
 8004064:	0719      	lsls	r1, r3, #28
 8004066:	d51d      	bpl.n	80040a4 <_puts_r+0x78>
 8004068:	6923      	ldr	r3, [r4, #16]
 800406a:	b1db      	cbz	r3, 80040a4 <_puts_r+0x78>
 800406c:	3e01      	subs	r6, #1
 800406e:	68a3      	ldr	r3, [r4, #8]
 8004070:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004074:	3b01      	subs	r3, #1
 8004076:	60a3      	str	r3, [r4, #8]
 8004078:	bb39      	cbnz	r1, 80040ca <_puts_r+0x9e>
 800407a:	2b00      	cmp	r3, #0
 800407c:	da38      	bge.n	80040f0 <_puts_r+0xc4>
 800407e:	4622      	mov	r2, r4
 8004080:	210a      	movs	r1, #10
 8004082:	4628      	mov	r0, r5
 8004084:	f000 f848 	bl	8004118 <__swbuf_r>
 8004088:	3001      	adds	r0, #1
 800408a:	d011      	beq.n	80040b0 <_puts_r+0x84>
 800408c:	250a      	movs	r5, #10
 800408e:	e011      	b.n	80040b4 <_puts_r+0x88>
 8004090:	4b1b      	ldr	r3, [pc, #108]	; (8004100 <_puts_r+0xd4>)
 8004092:	429c      	cmp	r4, r3
 8004094:	d101      	bne.n	800409a <_puts_r+0x6e>
 8004096:	68ac      	ldr	r4, [r5, #8]
 8004098:	e7da      	b.n	8004050 <_puts_r+0x24>
 800409a:	4b1a      	ldr	r3, [pc, #104]	; (8004104 <_puts_r+0xd8>)
 800409c:	429c      	cmp	r4, r3
 800409e:	bf08      	it	eq
 80040a0:	68ec      	ldreq	r4, [r5, #12]
 80040a2:	e7d5      	b.n	8004050 <_puts_r+0x24>
 80040a4:	4621      	mov	r1, r4
 80040a6:	4628      	mov	r0, r5
 80040a8:	f000 f888 	bl	80041bc <__swsetup_r>
 80040ac:	2800      	cmp	r0, #0
 80040ae:	d0dd      	beq.n	800406c <_puts_r+0x40>
 80040b0:	f04f 35ff 	mov.w	r5, #4294967295
 80040b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040b6:	07da      	lsls	r2, r3, #31
 80040b8:	d405      	bmi.n	80040c6 <_puts_r+0x9a>
 80040ba:	89a3      	ldrh	r3, [r4, #12]
 80040bc:	059b      	lsls	r3, r3, #22
 80040be:	d402      	bmi.n	80040c6 <_puts_r+0x9a>
 80040c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040c2:	f000 faa2 	bl	800460a <__retarget_lock_release_recursive>
 80040c6:	4628      	mov	r0, r5
 80040c8:	bd70      	pop	{r4, r5, r6, pc}
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	da04      	bge.n	80040d8 <_puts_r+0xac>
 80040ce:	69a2      	ldr	r2, [r4, #24]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	dc06      	bgt.n	80040e2 <_puts_r+0xb6>
 80040d4:	290a      	cmp	r1, #10
 80040d6:	d004      	beq.n	80040e2 <_puts_r+0xb6>
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	6022      	str	r2, [r4, #0]
 80040de:	7019      	strb	r1, [r3, #0]
 80040e0:	e7c5      	b.n	800406e <_puts_r+0x42>
 80040e2:	4622      	mov	r2, r4
 80040e4:	4628      	mov	r0, r5
 80040e6:	f000 f817 	bl	8004118 <__swbuf_r>
 80040ea:	3001      	adds	r0, #1
 80040ec:	d1bf      	bne.n	800406e <_puts_r+0x42>
 80040ee:	e7df      	b.n	80040b0 <_puts_r+0x84>
 80040f0:	6823      	ldr	r3, [r4, #0]
 80040f2:	250a      	movs	r5, #10
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	6022      	str	r2, [r4, #0]
 80040f8:	701d      	strb	r5, [r3, #0]
 80040fa:	e7db      	b.n	80040b4 <_puts_r+0x88>
 80040fc:	080050a0 	.word	0x080050a0
 8004100:	080050c0 	.word	0x080050c0
 8004104:	08005080 	.word	0x08005080

08004108 <puts>:
 8004108:	4b02      	ldr	r3, [pc, #8]	; (8004114 <puts+0xc>)
 800410a:	4601      	mov	r1, r0
 800410c:	6818      	ldr	r0, [r3, #0]
 800410e:	f7ff bf8d 	b.w	800402c <_puts_r>
 8004112:	bf00      	nop
 8004114:	20000018 	.word	0x20000018

08004118 <__swbuf_r>:
 8004118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800411a:	460e      	mov	r6, r1
 800411c:	4614      	mov	r4, r2
 800411e:	4605      	mov	r5, r0
 8004120:	b118      	cbz	r0, 800412a <__swbuf_r+0x12>
 8004122:	6983      	ldr	r3, [r0, #24]
 8004124:	b90b      	cbnz	r3, 800412a <__swbuf_r+0x12>
 8004126:	f000 f9d1 	bl	80044cc <__sinit>
 800412a:	4b21      	ldr	r3, [pc, #132]	; (80041b0 <__swbuf_r+0x98>)
 800412c:	429c      	cmp	r4, r3
 800412e:	d12b      	bne.n	8004188 <__swbuf_r+0x70>
 8004130:	686c      	ldr	r4, [r5, #4]
 8004132:	69a3      	ldr	r3, [r4, #24]
 8004134:	60a3      	str	r3, [r4, #8]
 8004136:	89a3      	ldrh	r3, [r4, #12]
 8004138:	071a      	lsls	r2, r3, #28
 800413a:	d52f      	bpl.n	800419c <__swbuf_r+0x84>
 800413c:	6923      	ldr	r3, [r4, #16]
 800413e:	b36b      	cbz	r3, 800419c <__swbuf_r+0x84>
 8004140:	6923      	ldr	r3, [r4, #16]
 8004142:	6820      	ldr	r0, [r4, #0]
 8004144:	1ac0      	subs	r0, r0, r3
 8004146:	6963      	ldr	r3, [r4, #20]
 8004148:	b2f6      	uxtb	r6, r6
 800414a:	4283      	cmp	r3, r0
 800414c:	4637      	mov	r7, r6
 800414e:	dc04      	bgt.n	800415a <__swbuf_r+0x42>
 8004150:	4621      	mov	r1, r4
 8004152:	4628      	mov	r0, r5
 8004154:	f000 f926 	bl	80043a4 <_fflush_r>
 8004158:	bb30      	cbnz	r0, 80041a8 <__swbuf_r+0x90>
 800415a:	68a3      	ldr	r3, [r4, #8]
 800415c:	3b01      	subs	r3, #1
 800415e:	60a3      	str	r3, [r4, #8]
 8004160:	6823      	ldr	r3, [r4, #0]
 8004162:	1c5a      	adds	r2, r3, #1
 8004164:	6022      	str	r2, [r4, #0]
 8004166:	701e      	strb	r6, [r3, #0]
 8004168:	6963      	ldr	r3, [r4, #20]
 800416a:	3001      	adds	r0, #1
 800416c:	4283      	cmp	r3, r0
 800416e:	d004      	beq.n	800417a <__swbuf_r+0x62>
 8004170:	89a3      	ldrh	r3, [r4, #12]
 8004172:	07db      	lsls	r3, r3, #31
 8004174:	d506      	bpl.n	8004184 <__swbuf_r+0x6c>
 8004176:	2e0a      	cmp	r6, #10
 8004178:	d104      	bne.n	8004184 <__swbuf_r+0x6c>
 800417a:	4621      	mov	r1, r4
 800417c:	4628      	mov	r0, r5
 800417e:	f000 f911 	bl	80043a4 <_fflush_r>
 8004182:	b988      	cbnz	r0, 80041a8 <__swbuf_r+0x90>
 8004184:	4638      	mov	r0, r7
 8004186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004188:	4b0a      	ldr	r3, [pc, #40]	; (80041b4 <__swbuf_r+0x9c>)
 800418a:	429c      	cmp	r4, r3
 800418c:	d101      	bne.n	8004192 <__swbuf_r+0x7a>
 800418e:	68ac      	ldr	r4, [r5, #8]
 8004190:	e7cf      	b.n	8004132 <__swbuf_r+0x1a>
 8004192:	4b09      	ldr	r3, [pc, #36]	; (80041b8 <__swbuf_r+0xa0>)
 8004194:	429c      	cmp	r4, r3
 8004196:	bf08      	it	eq
 8004198:	68ec      	ldreq	r4, [r5, #12]
 800419a:	e7ca      	b.n	8004132 <__swbuf_r+0x1a>
 800419c:	4621      	mov	r1, r4
 800419e:	4628      	mov	r0, r5
 80041a0:	f000 f80c 	bl	80041bc <__swsetup_r>
 80041a4:	2800      	cmp	r0, #0
 80041a6:	d0cb      	beq.n	8004140 <__swbuf_r+0x28>
 80041a8:	f04f 37ff 	mov.w	r7, #4294967295
 80041ac:	e7ea      	b.n	8004184 <__swbuf_r+0x6c>
 80041ae:	bf00      	nop
 80041b0:	080050a0 	.word	0x080050a0
 80041b4:	080050c0 	.word	0x080050c0
 80041b8:	08005080 	.word	0x08005080

080041bc <__swsetup_r>:
 80041bc:	4b32      	ldr	r3, [pc, #200]	; (8004288 <__swsetup_r+0xcc>)
 80041be:	b570      	push	{r4, r5, r6, lr}
 80041c0:	681d      	ldr	r5, [r3, #0]
 80041c2:	4606      	mov	r6, r0
 80041c4:	460c      	mov	r4, r1
 80041c6:	b125      	cbz	r5, 80041d2 <__swsetup_r+0x16>
 80041c8:	69ab      	ldr	r3, [r5, #24]
 80041ca:	b913      	cbnz	r3, 80041d2 <__swsetup_r+0x16>
 80041cc:	4628      	mov	r0, r5
 80041ce:	f000 f97d 	bl	80044cc <__sinit>
 80041d2:	4b2e      	ldr	r3, [pc, #184]	; (800428c <__swsetup_r+0xd0>)
 80041d4:	429c      	cmp	r4, r3
 80041d6:	d10f      	bne.n	80041f8 <__swsetup_r+0x3c>
 80041d8:	686c      	ldr	r4, [r5, #4]
 80041da:	89a3      	ldrh	r3, [r4, #12]
 80041dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041e0:	0719      	lsls	r1, r3, #28
 80041e2:	d42c      	bmi.n	800423e <__swsetup_r+0x82>
 80041e4:	06dd      	lsls	r5, r3, #27
 80041e6:	d411      	bmi.n	800420c <__swsetup_r+0x50>
 80041e8:	2309      	movs	r3, #9
 80041ea:	6033      	str	r3, [r6, #0]
 80041ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80041f0:	81a3      	strh	r3, [r4, #12]
 80041f2:	f04f 30ff 	mov.w	r0, #4294967295
 80041f6:	e03e      	b.n	8004276 <__swsetup_r+0xba>
 80041f8:	4b25      	ldr	r3, [pc, #148]	; (8004290 <__swsetup_r+0xd4>)
 80041fa:	429c      	cmp	r4, r3
 80041fc:	d101      	bne.n	8004202 <__swsetup_r+0x46>
 80041fe:	68ac      	ldr	r4, [r5, #8]
 8004200:	e7eb      	b.n	80041da <__swsetup_r+0x1e>
 8004202:	4b24      	ldr	r3, [pc, #144]	; (8004294 <__swsetup_r+0xd8>)
 8004204:	429c      	cmp	r4, r3
 8004206:	bf08      	it	eq
 8004208:	68ec      	ldreq	r4, [r5, #12]
 800420a:	e7e6      	b.n	80041da <__swsetup_r+0x1e>
 800420c:	0758      	lsls	r0, r3, #29
 800420e:	d512      	bpl.n	8004236 <__swsetup_r+0x7a>
 8004210:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004212:	b141      	cbz	r1, 8004226 <__swsetup_r+0x6a>
 8004214:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004218:	4299      	cmp	r1, r3
 800421a:	d002      	beq.n	8004222 <__swsetup_r+0x66>
 800421c:	4630      	mov	r0, r6
 800421e:	f000 fa59 	bl	80046d4 <_free_r>
 8004222:	2300      	movs	r3, #0
 8004224:	6363      	str	r3, [r4, #52]	; 0x34
 8004226:	89a3      	ldrh	r3, [r4, #12]
 8004228:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800422c:	81a3      	strh	r3, [r4, #12]
 800422e:	2300      	movs	r3, #0
 8004230:	6063      	str	r3, [r4, #4]
 8004232:	6923      	ldr	r3, [r4, #16]
 8004234:	6023      	str	r3, [r4, #0]
 8004236:	89a3      	ldrh	r3, [r4, #12]
 8004238:	f043 0308 	orr.w	r3, r3, #8
 800423c:	81a3      	strh	r3, [r4, #12]
 800423e:	6923      	ldr	r3, [r4, #16]
 8004240:	b94b      	cbnz	r3, 8004256 <__swsetup_r+0x9a>
 8004242:	89a3      	ldrh	r3, [r4, #12]
 8004244:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800424c:	d003      	beq.n	8004256 <__swsetup_r+0x9a>
 800424e:	4621      	mov	r1, r4
 8004250:	4630      	mov	r0, r6
 8004252:	f000 f9ff 	bl	8004654 <__smakebuf_r>
 8004256:	89a0      	ldrh	r0, [r4, #12]
 8004258:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800425c:	f010 0301 	ands.w	r3, r0, #1
 8004260:	d00a      	beq.n	8004278 <__swsetup_r+0xbc>
 8004262:	2300      	movs	r3, #0
 8004264:	60a3      	str	r3, [r4, #8]
 8004266:	6963      	ldr	r3, [r4, #20]
 8004268:	425b      	negs	r3, r3
 800426a:	61a3      	str	r3, [r4, #24]
 800426c:	6923      	ldr	r3, [r4, #16]
 800426e:	b943      	cbnz	r3, 8004282 <__swsetup_r+0xc6>
 8004270:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004274:	d1ba      	bne.n	80041ec <__swsetup_r+0x30>
 8004276:	bd70      	pop	{r4, r5, r6, pc}
 8004278:	0781      	lsls	r1, r0, #30
 800427a:	bf58      	it	pl
 800427c:	6963      	ldrpl	r3, [r4, #20]
 800427e:	60a3      	str	r3, [r4, #8]
 8004280:	e7f4      	b.n	800426c <__swsetup_r+0xb0>
 8004282:	2000      	movs	r0, #0
 8004284:	e7f7      	b.n	8004276 <__swsetup_r+0xba>
 8004286:	bf00      	nop
 8004288:	20000018 	.word	0x20000018
 800428c:	080050a0 	.word	0x080050a0
 8004290:	080050c0 	.word	0x080050c0
 8004294:	08005080 	.word	0x08005080

08004298 <__sflush_r>:
 8004298:	898a      	ldrh	r2, [r1, #12]
 800429a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800429e:	4605      	mov	r5, r0
 80042a0:	0710      	lsls	r0, r2, #28
 80042a2:	460c      	mov	r4, r1
 80042a4:	d458      	bmi.n	8004358 <__sflush_r+0xc0>
 80042a6:	684b      	ldr	r3, [r1, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	dc05      	bgt.n	80042b8 <__sflush_r+0x20>
 80042ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	dc02      	bgt.n	80042b8 <__sflush_r+0x20>
 80042b2:	2000      	movs	r0, #0
 80042b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042ba:	2e00      	cmp	r6, #0
 80042bc:	d0f9      	beq.n	80042b2 <__sflush_r+0x1a>
 80042be:	2300      	movs	r3, #0
 80042c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80042c4:	682f      	ldr	r7, [r5, #0]
 80042c6:	602b      	str	r3, [r5, #0]
 80042c8:	d032      	beq.n	8004330 <__sflush_r+0x98>
 80042ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80042cc:	89a3      	ldrh	r3, [r4, #12]
 80042ce:	075a      	lsls	r2, r3, #29
 80042d0:	d505      	bpl.n	80042de <__sflush_r+0x46>
 80042d2:	6863      	ldr	r3, [r4, #4]
 80042d4:	1ac0      	subs	r0, r0, r3
 80042d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80042d8:	b10b      	cbz	r3, 80042de <__sflush_r+0x46>
 80042da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042dc:	1ac0      	subs	r0, r0, r3
 80042de:	2300      	movs	r3, #0
 80042e0:	4602      	mov	r2, r0
 80042e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042e4:	6a21      	ldr	r1, [r4, #32]
 80042e6:	4628      	mov	r0, r5
 80042e8:	47b0      	blx	r6
 80042ea:	1c43      	adds	r3, r0, #1
 80042ec:	89a3      	ldrh	r3, [r4, #12]
 80042ee:	d106      	bne.n	80042fe <__sflush_r+0x66>
 80042f0:	6829      	ldr	r1, [r5, #0]
 80042f2:	291d      	cmp	r1, #29
 80042f4:	d82c      	bhi.n	8004350 <__sflush_r+0xb8>
 80042f6:	4a2a      	ldr	r2, [pc, #168]	; (80043a0 <__sflush_r+0x108>)
 80042f8:	40ca      	lsrs	r2, r1
 80042fa:	07d6      	lsls	r6, r2, #31
 80042fc:	d528      	bpl.n	8004350 <__sflush_r+0xb8>
 80042fe:	2200      	movs	r2, #0
 8004300:	6062      	str	r2, [r4, #4]
 8004302:	04d9      	lsls	r1, r3, #19
 8004304:	6922      	ldr	r2, [r4, #16]
 8004306:	6022      	str	r2, [r4, #0]
 8004308:	d504      	bpl.n	8004314 <__sflush_r+0x7c>
 800430a:	1c42      	adds	r2, r0, #1
 800430c:	d101      	bne.n	8004312 <__sflush_r+0x7a>
 800430e:	682b      	ldr	r3, [r5, #0]
 8004310:	b903      	cbnz	r3, 8004314 <__sflush_r+0x7c>
 8004312:	6560      	str	r0, [r4, #84]	; 0x54
 8004314:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004316:	602f      	str	r7, [r5, #0]
 8004318:	2900      	cmp	r1, #0
 800431a:	d0ca      	beq.n	80042b2 <__sflush_r+0x1a>
 800431c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004320:	4299      	cmp	r1, r3
 8004322:	d002      	beq.n	800432a <__sflush_r+0x92>
 8004324:	4628      	mov	r0, r5
 8004326:	f000 f9d5 	bl	80046d4 <_free_r>
 800432a:	2000      	movs	r0, #0
 800432c:	6360      	str	r0, [r4, #52]	; 0x34
 800432e:	e7c1      	b.n	80042b4 <__sflush_r+0x1c>
 8004330:	6a21      	ldr	r1, [r4, #32]
 8004332:	2301      	movs	r3, #1
 8004334:	4628      	mov	r0, r5
 8004336:	47b0      	blx	r6
 8004338:	1c41      	adds	r1, r0, #1
 800433a:	d1c7      	bne.n	80042cc <__sflush_r+0x34>
 800433c:	682b      	ldr	r3, [r5, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0c4      	beq.n	80042cc <__sflush_r+0x34>
 8004342:	2b1d      	cmp	r3, #29
 8004344:	d001      	beq.n	800434a <__sflush_r+0xb2>
 8004346:	2b16      	cmp	r3, #22
 8004348:	d101      	bne.n	800434e <__sflush_r+0xb6>
 800434a:	602f      	str	r7, [r5, #0]
 800434c:	e7b1      	b.n	80042b2 <__sflush_r+0x1a>
 800434e:	89a3      	ldrh	r3, [r4, #12]
 8004350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004354:	81a3      	strh	r3, [r4, #12]
 8004356:	e7ad      	b.n	80042b4 <__sflush_r+0x1c>
 8004358:	690f      	ldr	r7, [r1, #16]
 800435a:	2f00      	cmp	r7, #0
 800435c:	d0a9      	beq.n	80042b2 <__sflush_r+0x1a>
 800435e:	0793      	lsls	r3, r2, #30
 8004360:	680e      	ldr	r6, [r1, #0]
 8004362:	bf08      	it	eq
 8004364:	694b      	ldreq	r3, [r1, #20]
 8004366:	600f      	str	r7, [r1, #0]
 8004368:	bf18      	it	ne
 800436a:	2300      	movne	r3, #0
 800436c:	eba6 0807 	sub.w	r8, r6, r7
 8004370:	608b      	str	r3, [r1, #8]
 8004372:	f1b8 0f00 	cmp.w	r8, #0
 8004376:	dd9c      	ble.n	80042b2 <__sflush_r+0x1a>
 8004378:	6a21      	ldr	r1, [r4, #32]
 800437a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800437c:	4643      	mov	r3, r8
 800437e:	463a      	mov	r2, r7
 8004380:	4628      	mov	r0, r5
 8004382:	47b0      	blx	r6
 8004384:	2800      	cmp	r0, #0
 8004386:	dc06      	bgt.n	8004396 <__sflush_r+0xfe>
 8004388:	89a3      	ldrh	r3, [r4, #12]
 800438a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800438e:	81a3      	strh	r3, [r4, #12]
 8004390:	f04f 30ff 	mov.w	r0, #4294967295
 8004394:	e78e      	b.n	80042b4 <__sflush_r+0x1c>
 8004396:	4407      	add	r7, r0
 8004398:	eba8 0800 	sub.w	r8, r8, r0
 800439c:	e7e9      	b.n	8004372 <__sflush_r+0xda>
 800439e:	bf00      	nop
 80043a0:	20400001 	.word	0x20400001

080043a4 <_fflush_r>:
 80043a4:	b538      	push	{r3, r4, r5, lr}
 80043a6:	690b      	ldr	r3, [r1, #16]
 80043a8:	4605      	mov	r5, r0
 80043aa:	460c      	mov	r4, r1
 80043ac:	b913      	cbnz	r3, 80043b4 <_fflush_r+0x10>
 80043ae:	2500      	movs	r5, #0
 80043b0:	4628      	mov	r0, r5
 80043b2:	bd38      	pop	{r3, r4, r5, pc}
 80043b4:	b118      	cbz	r0, 80043be <_fflush_r+0x1a>
 80043b6:	6983      	ldr	r3, [r0, #24]
 80043b8:	b90b      	cbnz	r3, 80043be <_fflush_r+0x1a>
 80043ba:	f000 f887 	bl	80044cc <__sinit>
 80043be:	4b14      	ldr	r3, [pc, #80]	; (8004410 <_fflush_r+0x6c>)
 80043c0:	429c      	cmp	r4, r3
 80043c2:	d11b      	bne.n	80043fc <_fflush_r+0x58>
 80043c4:	686c      	ldr	r4, [r5, #4]
 80043c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0ef      	beq.n	80043ae <_fflush_r+0xa>
 80043ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80043d0:	07d0      	lsls	r0, r2, #31
 80043d2:	d404      	bmi.n	80043de <_fflush_r+0x3a>
 80043d4:	0599      	lsls	r1, r3, #22
 80043d6:	d402      	bmi.n	80043de <_fflush_r+0x3a>
 80043d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043da:	f000 f915 	bl	8004608 <__retarget_lock_acquire_recursive>
 80043de:	4628      	mov	r0, r5
 80043e0:	4621      	mov	r1, r4
 80043e2:	f7ff ff59 	bl	8004298 <__sflush_r>
 80043e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043e8:	07da      	lsls	r2, r3, #31
 80043ea:	4605      	mov	r5, r0
 80043ec:	d4e0      	bmi.n	80043b0 <_fflush_r+0xc>
 80043ee:	89a3      	ldrh	r3, [r4, #12]
 80043f0:	059b      	lsls	r3, r3, #22
 80043f2:	d4dd      	bmi.n	80043b0 <_fflush_r+0xc>
 80043f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043f6:	f000 f908 	bl	800460a <__retarget_lock_release_recursive>
 80043fa:	e7d9      	b.n	80043b0 <_fflush_r+0xc>
 80043fc:	4b05      	ldr	r3, [pc, #20]	; (8004414 <_fflush_r+0x70>)
 80043fe:	429c      	cmp	r4, r3
 8004400:	d101      	bne.n	8004406 <_fflush_r+0x62>
 8004402:	68ac      	ldr	r4, [r5, #8]
 8004404:	e7df      	b.n	80043c6 <_fflush_r+0x22>
 8004406:	4b04      	ldr	r3, [pc, #16]	; (8004418 <_fflush_r+0x74>)
 8004408:	429c      	cmp	r4, r3
 800440a:	bf08      	it	eq
 800440c:	68ec      	ldreq	r4, [r5, #12]
 800440e:	e7da      	b.n	80043c6 <_fflush_r+0x22>
 8004410:	080050a0 	.word	0x080050a0
 8004414:	080050c0 	.word	0x080050c0
 8004418:	08005080 	.word	0x08005080

0800441c <std>:
 800441c:	2300      	movs	r3, #0
 800441e:	b510      	push	{r4, lr}
 8004420:	4604      	mov	r4, r0
 8004422:	e9c0 3300 	strd	r3, r3, [r0]
 8004426:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800442a:	6083      	str	r3, [r0, #8]
 800442c:	8181      	strh	r1, [r0, #12]
 800442e:	6643      	str	r3, [r0, #100]	; 0x64
 8004430:	81c2      	strh	r2, [r0, #14]
 8004432:	6183      	str	r3, [r0, #24]
 8004434:	4619      	mov	r1, r3
 8004436:	2208      	movs	r2, #8
 8004438:	305c      	adds	r0, #92	; 0x5c
 800443a:	f7ff fdd7 	bl	8003fec <memset>
 800443e:	4b05      	ldr	r3, [pc, #20]	; (8004454 <std+0x38>)
 8004440:	6263      	str	r3, [r4, #36]	; 0x24
 8004442:	4b05      	ldr	r3, [pc, #20]	; (8004458 <std+0x3c>)
 8004444:	62a3      	str	r3, [r4, #40]	; 0x28
 8004446:	4b05      	ldr	r3, [pc, #20]	; (800445c <std+0x40>)
 8004448:	62e3      	str	r3, [r4, #44]	; 0x2c
 800444a:	4b05      	ldr	r3, [pc, #20]	; (8004460 <std+0x44>)
 800444c:	6224      	str	r4, [r4, #32]
 800444e:	6323      	str	r3, [r4, #48]	; 0x30
 8004450:	bd10      	pop	{r4, pc}
 8004452:	bf00      	nop
 8004454:	08004e25 	.word	0x08004e25
 8004458:	08004e47 	.word	0x08004e47
 800445c:	08004e7f 	.word	0x08004e7f
 8004460:	08004ea3 	.word	0x08004ea3

08004464 <_cleanup_r>:
 8004464:	4901      	ldr	r1, [pc, #4]	; (800446c <_cleanup_r+0x8>)
 8004466:	f000 b8af 	b.w	80045c8 <_fwalk_reent>
 800446a:	bf00      	nop
 800446c:	080043a5 	.word	0x080043a5

08004470 <__sfmoreglue>:
 8004470:	b570      	push	{r4, r5, r6, lr}
 8004472:	1e4a      	subs	r2, r1, #1
 8004474:	2568      	movs	r5, #104	; 0x68
 8004476:	4355      	muls	r5, r2
 8004478:	460e      	mov	r6, r1
 800447a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800447e:	f000 f979 	bl	8004774 <_malloc_r>
 8004482:	4604      	mov	r4, r0
 8004484:	b140      	cbz	r0, 8004498 <__sfmoreglue+0x28>
 8004486:	2100      	movs	r1, #0
 8004488:	e9c0 1600 	strd	r1, r6, [r0]
 800448c:	300c      	adds	r0, #12
 800448e:	60a0      	str	r0, [r4, #8]
 8004490:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004494:	f7ff fdaa 	bl	8003fec <memset>
 8004498:	4620      	mov	r0, r4
 800449a:	bd70      	pop	{r4, r5, r6, pc}

0800449c <__sfp_lock_acquire>:
 800449c:	4801      	ldr	r0, [pc, #4]	; (80044a4 <__sfp_lock_acquire+0x8>)
 800449e:	f000 b8b3 	b.w	8004608 <__retarget_lock_acquire_recursive>
 80044a2:	bf00      	nop
 80044a4:	20000470 	.word	0x20000470

080044a8 <__sfp_lock_release>:
 80044a8:	4801      	ldr	r0, [pc, #4]	; (80044b0 <__sfp_lock_release+0x8>)
 80044aa:	f000 b8ae 	b.w	800460a <__retarget_lock_release_recursive>
 80044ae:	bf00      	nop
 80044b0:	20000470 	.word	0x20000470

080044b4 <__sinit_lock_acquire>:
 80044b4:	4801      	ldr	r0, [pc, #4]	; (80044bc <__sinit_lock_acquire+0x8>)
 80044b6:	f000 b8a7 	b.w	8004608 <__retarget_lock_acquire_recursive>
 80044ba:	bf00      	nop
 80044bc:	2000046b 	.word	0x2000046b

080044c0 <__sinit_lock_release>:
 80044c0:	4801      	ldr	r0, [pc, #4]	; (80044c8 <__sinit_lock_release+0x8>)
 80044c2:	f000 b8a2 	b.w	800460a <__retarget_lock_release_recursive>
 80044c6:	bf00      	nop
 80044c8:	2000046b 	.word	0x2000046b

080044cc <__sinit>:
 80044cc:	b510      	push	{r4, lr}
 80044ce:	4604      	mov	r4, r0
 80044d0:	f7ff fff0 	bl	80044b4 <__sinit_lock_acquire>
 80044d4:	69a3      	ldr	r3, [r4, #24]
 80044d6:	b11b      	cbz	r3, 80044e0 <__sinit+0x14>
 80044d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044dc:	f7ff bff0 	b.w	80044c0 <__sinit_lock_release>
 80044e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80044e4:	6523      	str	r3, [r4, #80]	; 0x50
 80044e6:	4b13      	ldr	r3, [pc, #76]	; (8004534 <__sinit+0x68>)
 80044e8:	4a13      	ldr	r2, [pc, #76]	; (8004538 <__sinit+0x6c>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80044ee:	42a3      	cmp	r3, r4
 80044f0:	bf04      	itt	eq
 80044f2:	2301      	moveq	r3, #1
 80044f4:	61a3      	streq	r3, [r4, #24]
 80044f6:	4620      	mov	r0, r4
 80044f8:	f000 f820 	bl	800453c <__sfp>
 80044fc:	6060      	str	r0, [r4, #4]
 80044fe:	4620      	mov	r0, r4
 8004500:	f000 f81c 	bl	800453c <__sfp>
 8004504:	60a0      	str	r0, [r4, #8]
 8004506:	4620      	mov	r0, r4
 8004508:	f000 f818 	bl	800453c <__sfp>
 800450c:	2200      	movs	r2, #0
 800450e:	60e0      	str	r0, [r4, #12]
 8004510:	2104      	movs	r1, #4
 8004512:	6860      	ldr	r0, [r4, #4]
 8004514:	f7ff ff82 	bl	800441c <std>
 8004518:	68a0      	ldr	r0, [r4, #8]
 800451a:	2201      	movs	r2, #1
 800451c:	2109      	movs	r1, #9
 800451e:	f7ff ff7d 	bl	800441c <std>
 8004522:	68e0      	ldr	r0, [r4, #12]
 8004524:	2202      	movs	r2, #2
 8004526:	2112      	movs	r1, #18
 8004528:	f7ff ff78 	bl	800441c <std>
 800452c:	2301      	movs	r3, #1
 800452e:	61a3      	str	r3, [r4, #24]
 8004530:	e7d2      	b.n	80044d8 <__sinit+0xc>
 8004532:	bf00      	nop
 8004534:	0800507c 	.word	0x0800507c
 8004538:	08004465 	.word	0x08004465

0800453c <__sfp>:
 800453c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453e:	4607      	mov	r7, r0
 8004540:	f7ff ffac 	bl	800449c <__sfp_lock_acquire>
 8004544:	4b1e      	ldr	r3, [pc, #120]	; (80045c0 <__sfp+0x84>)
 8004546:	681e      	ldr	r6, [r3, #0]
 8004548:	69b3      	ldr	r3, [r6, #24]
 800454a:	b913      	cbnz	r3, 8004552 <__sfp+0x16>
 800454c:	4630      	mov	r0, r6
 800454e:	f7ff ffbd 	bl	80044cc <__sinit>
 8004552:	3648      	adds	r6, #72	; 0x48
 8004554:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004558:	3b01      	subs	r3, #1
 800455a:	d503      	bpl.n	8004564 <__sfp+0x28>
 800455c:	6833      	ldr	r3, [r6, #0]
 800455e:	b30b      	cbz	r3, 80045a4 <__sfp+0x68>
 8004560:	6836      	ldr	r6, [r6, #0]
 8004562:	e7f7      	b.n	8004554 <__sfp+0x18>
 8004564:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004568:	b9d5      	cbnz	r5, 80045a0 <__sfp+0x64>
 800456a:	4b16      	ldr	r3, [pc, #88]	; (80045c4 <__sfp+0x88>)
 800456c:	60e3      	str	r3, [r4, #12]
 800456e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004572:	6665      	str	r5, [r4, #100]	; 0x64
 8004574:	f000 f847 	bl	8004606 <__retarget_lock_init_recursive>
 8004578:	f7ff ff96 	bl	80044a8 <__sfp_lock_release>
 800457c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004580:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004584:	6025      	str	r5, [r4, #0]
 8004586:	61a5      	str	r5, [r4, #24]
 8004588:	2208      	movs	r2, #8
 800458a:	4629      	mov	r1, r5
 800458c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004590:	f7ff fd2c 	bl	8003fec <memset>
 8004594:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004598:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800459c:	4620      	mov	r0, r4
 800459e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045a0:	3468      	adds	r4, #104	; 0x68
 80045a2:	e7d9      	b.n	8004558 <__sfp+0x1c>
 80045a4:	2104      	movs	r1, #4
 80045a6:	4638      	mov	r0, r7
 80045a8:	f7ff ff62 	bl	8004470 <__sfmoreglue>
 80045ac:	4604      	mov	r4, r0
 80045ae:	6030      	str	r0, [r6, #0]
 80045b0:	2800      	cmp	r0, #0
 80045b2:	d1d5      	bne.n	8004560 <__sfp+0x24>
 80045b4:	f7ff ff78 	bl	80044a8 <__sfp_lock_release>
 80045b8:	230c      	movs	r3, #12
 80045ba:	603b      	str	r3, [r7, #0]
 80045bc:	e7ee      	b.n	800459c <__sfp+0x60>
 80045be:	bf00      	nop
 80045c0:	0800507c 	.word	0x0800507c
 80045c4:	ffff0001 	.word	0xffff0001

080045c8 <_fwalk_reent>:
 80045c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045cc:	4606      	mov	r6, r0
 80045ce:	4688      	mov	r8, r1
 80045d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80045d4:	2700      	movs	r7, #0
 80045d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80045da:	f1b9 0901 	subs.w	r9, r9, #1
 80045de:	d505      	bpl.n	80045ec <_fwalk_reent+0x24>
 80045e0:	6824      	ldr	r4, [r4, #0]
 80045e2:	2c00      	cmp	r4, #0
 80045e4:	d1f7      	bne.n	80045d6 <_fwalk_reent+0xe>
 80045e6:	4638      	mov	r0, r7
 80045e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045ec:	89ab      	ldrh	r3, [r5, #12]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d907      	bls.n	8004602 <_fwalk_reent+0x3a>
 80045f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045f6:	3301      	adds	r3, #1
 80045f8:	d003      	beq.n	8004602 <_fwalk_reent+0x3a>
 80045fa:	4629      	mov	r1, r5
 80045fc:	4630      	mov	r0, r6
 80045fe:	47c0      	blx	r8
 8004600:	4307      	orrs	r7, r0
 8004602:	3568      	adds	r5, #104	; 0x68
 8004604:	e7e9      	b.n	80045da <_fwalk_reent+0x12>

08004606 <__retarget_lock_init_recursive>:
 8004606:	4770      	bx	lr

08004608 <__retarget_lock_acquire_recursive>:
 8004608:	4770      	bx	lr

0800460a <__retarget_lock_release_recursive>:
 800460a:	4770      	bx	lr

0800460c <__swhatbuf_r>:
 800460c:	b570      	push	{r4, r5, r6, lr}
 800460e:	460e      	mov	r6, r1
 8004610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004614:	2900      	cmp	r1, #0
 8004616:	b096      	sub	sp, #88	; 0x58
 8004618:	4614      	mov	r4, r2
 800461a:	461d      	mov	r5, r3
 800461c:	da07      	bge.n	800462e <__swhatbuf_r+0x22>
 800461e:	2300      	movs	r3, #0
 8004620:	602b      	str	r3, [r5, #0]
 8004622:	89b3      	ldrh	r3, [r6, #12]
 8004624:	061a      	lsls	r2, r3, #24
 8004626:	d410      	bmi.n	800464a <__swhatbuf_r+0x3e>
 8004628:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800462c:	e00e      	b.n	800464c <__swhatbuf_r+0x40>
 800462e:	466a      	mov	r2, sp
 8004630:	f000 fc5e 	bl	8004ef0 <_fstat_r>
 8004634:	2800      	cmp	r0, #0
 8004636:	dbf2      	blt.n	800461e <__swhatbuf_r+0x12>
 8004638:	9a01      	ldr	r2, [sp, #4]
 800463a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800463e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004642:	425a      	negs	r2, r3
 8004644:	415a      	adcs	r2, r3
 8004646:	602a      	str	r2, [r5, #0]
 8004648:	e7ee      	b.n	8004628 <__swhatbuf_r+0x1c>
 800464a:	2340      	movs	r3, #64	; 0x40
 800464c:	2000      	movs	r0, #0
 800464e:	6023      	str	r3, [r4, #0]
 8004650:	b016      	add	sp, #88	; 0x58
 8004652:	bd70      	pop	{r4, r5, r6, pc}

08004654 <__smakebuf_r>:
 8004654:	898b      	ldrh	r3, [r1, #12]
 8004656:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004658:	079d      	lsls	r5, r3, #30
 800465a:	4606      	mov	r6, r0
 800465c:	460c      	mov	r4, r1
 800465e:	d507      	bpl.n	8004670 <__smakebuf_r+0x1c>
 8004660:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004664:	6023      	str	r3, [r4, #0]
 8004666:	6123      	str	r3, [r4, #16]
 8004668:	2301      	movs	r3, #1
 800466a:	6163      	str	r3, [r4, #20]
 800466c:	b002      	add	sp, #8
 800466e:	bd70      	pop	{r4, r5, r6, pc}
 8004670:	ab01      	add	r3, sp, #4
 8004672:	466a      	mov	r2, sp
 8004674:	f7ff ffca 	bl	800460c <__swhatbuf_r>
 8004678:	9900      	ldr	r1, [sp, #0]
 800467a:	4605      	mov	r5, r0
 800467c:	4630      	mov	r0, r6
 800467e:	f000 f879 	bl	8004774 <_malloc_r>
 8004682:	b948      	cbnz	r0, 8004698 <__smakebuf_r+0x44>
 8004684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004688:	059a      	lsls	r2, r3, #22
 800468a:	d4ef      	bmi.n	800466c <__smakebuf_r+0x18>
 800468c:	f023 0303 	bic.w	r3, r3, #3
 8004690:	f043 0302 	orr.w	r3, r3, #2
 8004694:	81a3      	strh	r3, [r4, #12]
 8004696:	e7e3      	b.n	8004660 <__smakebuf_r+0xc>
 8004698:	4b0d      	ldr	r3, [pc, #52]	; (80046d0 <__smakebuf_r+0x7c>)
 800469a:	62b3      	str	r3, [r6, #40]	; 0x28
 800469c:	89a3      	ldrh	r3, [r4, #12]
 800469e:	6020      	str	r0, [r4, #0]
 80046a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046a4:	81a3      	strh	r3, [r4, #12]
 80046a6:	9b00      	ldr	r3, [sp, #0]
 80046a8:	6163      	str	r3, [r4, #20]
 80046aa:	9b01      	ldr	r3, [sp, #4]
 80046ac:	6120      	str	r0, [r4, #16]
 80046ae:	b15b      	cbz	r3, 80046c8 <__smakebuf_r+0x74>
 80046b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046b4:	4630      	mov	r0, r6
 80046b6:	f000 fc2d 	bl	8004f14 <_isatty_r>
 80046ba:	b128      	cbz	r0, 80046c8 <__smakebuf_r+0x74>
 80046bc:	89a3      	ldrh	r3, [r4, #12]
 80046be:	f023 0303 	bic.w	r3, r3, #3
 80046c2:	f043 0301 	orr.w	r3, r3, #1
 80046c6:	81a3      	strh	r3, [r4, #12]
 80046c8:	89a0      	ldrh	r0, [r4, #12]
 80046ca:	4305      	orrs	r5, r0
 80046cc:	81a5      	strh	r5, [r4, #12]
 80046ce:	e7cd      	b.n	800466c <__smakebuf_r+0x18>
 80046d0:	08004465 	.word	0x08004465

080046d4 <_free_r>:
 80046d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80046d6:	2900      	cmp	r1, #0
 80046d8:	d048      	beq.n	800476c <_free_r+0x98>
 80046da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046de:	9001      	str	r0, [sp, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f1a1 0404 	sub.w	r4, r1, #4
 80046e6:	bfb8      	it	lt
 80046e8:	18e4      	addlt	r4, r4, r3
 80046ea:	f000 fc35 	bl	8004f58 <__malloc_lock>
 80046ee:	4a20      	ldr	r2, [pc, #128]	; (8004770 <_free_r+0x9c>)
 80046f0:	9801      	ldr	r0, [sp, #4]
 80046f2:	6813      	ldr	r3, [r2, #0]
 80046f4:	4615      	mov	r5, r2
 80046f6:	b933      	cbnz	r3, 8004706 <_free_r+0x32>
 80046f8:	6063      	str	r3, [r4, #4]
 80046fa:	6014      	str	r4, [r2, #0]
 80046fc:	b003      	add	sp, #12
 80046fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004702:	f000 bc2f 	b.w	8004f64 <__malloc_unlock>
 8004706:	42a3      	cmp	r3, r4
 8004708:	d90b      	bls.n	8004722 <_free_r+0x4e>
 800470a:	6821      	ldr	r1, [r4, #0]
 800470c:	1862      	adds	r2, r4, r1
 800470e:	4293      	cmp	r3, r2
 8004710:	bf04      	itt	eq
 8004712:	681a      	ldreq	r2, [r3, #0]
 8004714:	685b      	ldreq	r3, [r3, #4]
 8004716:	6063      	str	r3, [r4, #4]
 8004718:	bf04      	itt	eq
 800471a:	1852      	addeq	r2, r2, r1
 800471c:	6022      	streq	r2, [r4, #0]
 800471e:	602c      	str	r4, [r5, #0]
 8004720:	e7ec      	b.n	80046fc <_free_r+0x28>
 8004722:	461a      	mov	r2, r3
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	b10b      	cbz	r3, 800472c <_free_r+0x58>
 8004728:	42a3      	cmp	r3, r4
 800472a:	d9fa      	bls.n	8004722 <_free_r+0x4e>
 800472c:	6811      	ldr	r1, [r2, #0]
 800472e:	1855      	adds	r5, r2, r1
 8004730:	42a5      	cmp	r5, r4
 8004732:	d10b      	bne.n	800474c <_free_r+0x78>
 8004734:	6824      	ldr	r4, [r4, #0]
 8004736:	4421      	add	r1, r4
 8004738:	1854      	adds	r4, r2, r1
 800473a:	42a3      	cmp	r3, r4
 800473c:	6011      	str	r1, [r2, #0]
 800473e:	d1dd      	bne.n	80046fc <_free_r+0x28>
 8004740:	681c      	ldr	r4, [r3, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	6053      	str	r3, [r2, #4]
 8004746:	4421      	add	r1, r4
 8004748:	6011      	str	r1, [r2, #0]
 800474a:	e7d7      	b.n	80046fc <_free_r+0x28>
 800474c:	d902      	bls.n	8004754 <_free_r+0x80>
 800474e:	230c      	movs	r3, #12
 8004750:	6003      	str	r3, [r0, #0]
 8004752:	e7d3      	b.n	80046fc <_free_r+0x28>
 8004754:	6825      	ldr	r5, [r4, #0]
 8004756:	1961      	adds	r1, r4, r5
 8004758:	428b      	cmp	r3, r1
 800475a:	bf04      	itt	eq
 800475c:	6819      	ldreq	r1, [r3, #0]
 800475e:	685b      	ldreq	r3, [r3, #4]
 8004760:	6063      	str	r3, [r4, #4]
 8004762:	bf04      	itt	eq
 8004764:	1949      	addeq	r1, r1, r5
 8004766:	6021      	streq	r1, [r4, #0]
 8004768:	6054      	str	r4, [r2, #4]
 800476a:	e7c7      	b.n	80046fc <_free_r+0x28>
 800476c:	b003      	add	sp, #12
 800476e:	bd30      	pop	{r4, r5, pc}
 8004770:	200003cc 	.word	0x200003cc

08004774 <_malloc_r>:
 8004774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004776:	1ccd      	adds	r5, r1, #3
 8004778:	f025 0503 	bic.w	r5, r5, #3
 800477c:	3508      	adds	r5, #8
 800477e:	2d0c      	cmp	r5, #12
 8004780:	bf38      	it	cc
 8004782:	250c      	movcc	r5, #12
 8004784:	2d00      	cmp	r5, #0
 8004786:	4606      	mov	r6, r0
 8004788:	db01      	blt.n	800478e <_malloc_r+0x1a>
 800478a:	42a9      	cmp	r1, r5
 800478c:	d903      	bls.n	8004796 <_malloc_r+0x22>
 800478e:	230c      	movs	r3, #12
 8004790:	6033      	str	r3, [r6, #0]
 8004792:	2000      	movs	r0, #0
 8004794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004796:	f000 fbdf 	bl	8004f58 <__malloc_lock>
 800479a:	4921      	ldr	r1, [pc, #132]	; (8004820 <_malloc_r+0xac>)
 800479c:	680a      	ldr	r2, [r1, #0]
 800479e:	4614      	mov	r4, r2
 80047a0:	b99c      	cbnz	r4, 80047ca <_malloc_r+0x56>
 80047a2:	4f20      	ldr	r7, [pc, #128]	; (8004824 <_malloc_r+0xb0>)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	b923      	cbnz	r3, 80047b2 <_malloc_r+0x3e>
 80047a8:	4621      	mov	r1, r4
 80047aa:	4630      	mov	r0, r6
 80047ac:	f000 fb2a 	bl	8004e04 <_sbrk_r>
 80047b0:	6038      	str	r0, [r7, #0]
 80047b2:	4629      	mov	r1, r5
 80047b4:	4630      	mov	r0, r6
 80047b6:	f000 fb25 	bl	8004e04 <_sbrk_r>
 80047ba:	1c43      	adds	r3, r0, #1
 80047bc:	d123      	bne.n	8004806 <_malloc_r+0x92>
 80047be:	230c      	movs	r3, #12
 80047c0:	6033      	str	r3, [r6, #0]
 80047c2:	4630      	mov	r0, r6
 80047c4:	f000 fbce 	bl	8004f64 <__malloc_unlock>
 80047c8:	e7e3      	b.n	8004792 <_malloc_r+0x1e>
 80047ca:	6823      	ldr	r3, [r4, #0]
 80047cc:	1b5b      	subs	r3, r3, r5
 80047ce:	d417      	bmi.n	8004800 <_malloc_r+0x8c>
 80047d0:	2b0b      	cmp	r3, #11
 80047d2:	d903      	bls.n	80047dc <_malloc_r+0x68>
 80047d4:	6023      	str	r3, [r4, #0]
 80047d6:	441c      	add	r4, r3
 80047d8:	6025      	str	r5, [r4, #0]
 80047da:	e004      	b.n	80047e6 <_malloc_r+0x72>
 80047dc:	6863      	ldr	r3, [r4, #4]
 80047de:	42a2      	cmp	r2, r4
 80047e0:	bf0c      	ite	eq
 80047e2:	600b      	streq	r3, [r1, #0]
 80047e4:	6053      	strne	r3, [r2, #4]
 80047e6:	4630      	mov	r0, r6
 80047e8:	f000 fbbc 	bl	8004f64 <__malloc_unlock>
 80047ec:	f104 000b 	add.w	r0, r4, #11
 80047f0:	1d23      	adds	r3, r4, #4
 80047f2:	f020 0007 	bic.w	r0, r0, #7
 80047f6:	1ac2      	subs	r2, r0, r3
 80047f8:	d0cc      	beq.n	8004794 <_malloc_r+0x20>
 80047fa:	1a1b      	subs	r3, r3, r0
 80047fc:	50a3      	str	r3, [r4, r2]
 80047fe:	e7c9      	b.n	8004794 <_malloc_r+0x20>
 8004800:	4622      	mov	r2, r4
 8004802:	6864      	ldr	r4, [r4, #4]
 8004804:	e7cc      	b.n	80047a0 <_malloc_r+0x2c>
 8004806:	1cc4      	adds	r4, r0, #3
 8004808:	f024 0403 	bic.w	r4, r4, #3
 800480c:	42a0      	cmp	r0, r4
 800480e:	d0e3      	beq.n	80047d8 <_malloc_r+0x64>
 8004810:	1a21      	subs	r1, r4, r0
 8004812:	4630      	mov	r0, r6
 8004814:	f000 faf6 	bl	8004e04 <_sbrk_r>
 8004818:	3001      	adds	r0, #1
 800481a:	d1dd      	bne.n	80047d8 <_malloc_r+0x64>
 800481c:	e7cf      	b.n	80047be <_malloc_r+0x4a>
 800481e:	bf00      	nop
 8004820:	200003cc 	.word	0x200003cc
 8004824:	200003d0 	.word	0x200003d0

08004828 <__sfputc_r>:
 8004828:	6893      	ldr	r3, [r2, #8]
 800482a:	3b01      	subs	r3, #1
 800482c:	2b00      	cmp	r3, #0
 800482e:	b410      	push	{r4}
 8004830:	6093      	str	r3, [r2, #8]
 8004832:	da08      	bge.n	8004846 <__sfputc_r+0x1e>
 8004834:	6994      	ldr	r4, [r2, #24]
 8004836:	42a3      	cmp	r3, r4
 8004838:	db01      	blt.n	800483e <__sfputc_r+0x16>
 800483a:	290a      	cmp	r1, #10
 800483c:	d103      	bne.n	8004846 <__sfputc_r+0x1e>
 800483e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004842:	f7ff bc69 	b.w	8004118 <__swbuf_r>
 8004846:	6813      	ldr	r3, [r2, #0]
 8004848:	1c58      	adds	r0, r3, #1
 800484a:	6010      	str	r0, [r2, #0]
 800484c:	7019      	strb	r1, [r3, #0]
 800484e:	4608      	mov	r0, r1
 8004850:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004854:	4770      	bx	lr

08004856 <__sfputs_r>:
 8004856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004858:	4606      	mov	r6, r0
 800485a:	460f      	mov	r7, r1
 800485c:	4614      	mov	r4, r2
 800485e:	18d5      	adds	r5, r2, r3
 8004860:	42ac      	cmp	r4, r5
 8004862:	d101      	bne.n	8004868 <__sfputs_r+0x12>
 8004864:	2000      	movs	r0, #0
 8004866:	e007      	b.n	8004878 <__sfputs_r+0x22>
 8004868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800486c:	463a      	mov	r2, r7
 800486e:	4630      	mov	r0, r6
 8004870:	f7ff ffda 	bl	8004828 <__sfputc_r>
 8004874:	1c43      	adds	r3, r0, #1
 8004876:	d1f3      	bne.n	8004860 <__sfputs_r+0xa>
 8004878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800487c <_vfiprintf_r>:
 800487c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004880:	460d      	mov	r5, r1
 8004882:	b09d      	sub	sp, #116	; 0x74
 8004884:	4614      	mov	r4, r2
 8004886:	4698      	mov	r8, r3
 8004888:	4606      	mov	r6, r0
 800488a:	b118      	cbz	r0, 8004894 <_vfiprintf_r+0x18>
 800488c:	6983      	ldr	r3, [r0, #24]
 800488e:	b90b      	cbnz	r3, 8004894 <_vfiprintf_r+0x18>
 8004890:	f7ff fe1c 	bl	80044cc <__sinit>
 8004894:	4b89      	ldr	r3, [pc, #548]	; (8004abc <_vfiprintf_r+0x240>)
 8004896:	429d      	cmp	r5, r3
 8004898:	d11b      	bne.n	80048d2 <_vfiprintf_r+0x56>
 800489a:	6875      	ldr	r5, [r6, #4]
 800489c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800489e:	07d9      	lsls	r1, r3, #31
 80048a0:	d405      	bmi.n	80048ae <_vfiprintf_r+0x32>
 80048a2:	89ab      	ldrh	r3, [r5, #12]
 80048a4:	059a      	lsls	r2, r3, #22
 80048a6:	d402      	bmi.n	80048ae <_vfiprintf_r+0x32>
 80048a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048aa:	f7ff fead 	bl	8004608 <__retarget_lock_acquire_recursive>
 80048ae:	89ab      	ldrh	r3, [r5, #12]
 80048b0:	071b      	lsls	r3, r3, #28
 80048b2:	d501      	bpl.n	80048b8 <_vfiprintf_r+0x3c>
 80048b4:	692b      	ldr	r3, [r5, #16]
 80048b6:	b9eb      	cbnz	r3, 80048f4 <_vfiprintf_r+0x78>
 80048b8:	4629      	mov	r1, r5
 80048ba:	4630      	mov	r0, r6
 80048bc:	f7ff fc7e 	bl	80041bc <__swsetup_r>
 80048c0:	b1c0      	cbz	r0, 80048f4 <_vfiprintf_r+0x78>
 80048c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048c4:	07dc      	lsls	r4, r3, #31
 80048c6:	d50e      	bpl.n	80048e6 <_vfiprintf_r+0x6a>
 80048c8:	f04f 30ff 	mov.w	r0, #4294967295
 80048cc:	b01d      	add	sp, #116	; 0x74
 80048ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048d2:	4b7b      	ldr	r3, [pc, #492]	; (8004ac0 <_vfiprintf_r+0x244>)
 80048d4:	429d      	cmp	r5, r3
 80048d6:	d101      	bne.n	80048dc <_vfiprintf_r+0x60>
 80048d8:	68b5      	ldr	r5, [r6, #8]
 80048da:	e7df      	b.n	800489c <_vfiprintf_r+0x20>
 80048dc:	4b79      	ldr	r3, [pc, #484]	; (8004ac4 <_vfiprintf_r+0x248>)
 80048de:	429d      	cmp	r5, r3
 80048e0:	bf08      	it	eq
 80048e2:	68f5      	ldreq	r5, [r6, #12]
 80048e4:	e7da      	b.n	800489c <_vfiprintf_r+0x20>
 80048e6:	89ab      	ldrh	r3, [r5, #12]
 80048e8:	0598      	lsls	r0, r3, #22
 80048ea:	d4ed      	bmi.n	80048c8 <_vfiprintf_r+0x4c>
 80048ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048ee:	f7ff fe8c 	bl	800460a <__retarget_lock_release_recursive>
 80048f2:	e7e9      	b.n	80048c8 <_vfiprintf_r+0x4c>
 80048f4:	2300      	movs	r3, #0
 80048f6:	9309      	str	r3, [sp, #36]	; 0x24
 80048f8:	2320      	movs	r3, #32
 80048fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8004902:	2330      	movs	r3, #48	; 0x30
 8004904:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004ac8 <_vfiprintf_r+0x24c>
 8004908:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800490c:	f04f 0901 	mov.w	r9, #1
 8004910:	4623      	mov	r3, r4
 8004912:	469a      	mov	sl, r3
 8004914:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004918:	b10a      	cbz	r2, 800491e <_vfiprintf_r+0xa2>
 800491a:	2a25      	cmp	r2, #37	; 0x25
 800491c:	d1f9      	bne.n	8004912 <_vfiprintf_r+0x96>
 800491e:	ebba 0b04 	subs.w	fp, sl, r4
 8004922:	d00b      	beq.n	800493c <_vfiprintf_r+0xc0>
 8004924:	465b      	mov	r3, fp
 8004926:	4622      	mov	r2, r4
 8004928:	4629      	mov	r1, r5
 800492a:	4630      	mov	r0, r6
 800492c:	f7ff ff93 	bl	8004856 <__sfputs_r>
 8004930:	3001      	adds	r0, #1
 8004932:	f000 80aa 	beq.w	8004a8a <_vfiprintf_r+0x20e>
 8004936:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004938:	445a      	add	r2, fp
 800493a:	9209      	str	r2, [sp, #36]	; 0x24
 800493c:	f89a 3000 	ldrb.w	r3, [sl]
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 80a2 	beq.w	8004a8a <_vfiprintf_r+0x20e>
 8004946:	2300      	movs	r3, #0
 8004948:	f04f 32ff 	mov.w	r2, #4294967295
 800494c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004950:	f10a 0a01 	add.w	sl, sl, #1
 8004954:	9304      	str	r3, [sp, #16]
 8004956:	9307      	str	r3, [sp, #28]
 8004958:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800495c:	931a      	str	r3, [sp, #104]	; 0x68
 800495e:	4654      	mov	r4, sl
 8004960:	2205      	movs	r2, #5
 8004962:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004966:	4858      	ldr	r0, [pc, #352]	; (8004ac8 <_vfiprintf_r+0x24c>)
 8004968:	f7fb fc5a 	bl	8000220 <memchr>
 800496c:	9a04      	ldr	r2, [sp, #16]
 800496e:	b9d8      	cbnz	r0, 80049a8 <_vfiprintf_r+0x12c>
 8004970:	06d1      	lsls	r1, r2, #27
 8004972:	bf44      	itt	mi
 8004974:	2320      	movmi	r3, #32
 8004976:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800497a:	0713      	lsls	r3, r2, #28
 800497c:	bf44      	itt	mi
 800497e:	232b      	movmi	r3, #43	; 0x2b
 8004980:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004984:	f89a 3000 	ldrb.w	r3, [sl]
 8004988:	2b2a      	cmp	r3, #42	; 0x2a
 800498a:	d015      	beq.n	80049b8 <_vfiprintf_r+0x13c>
 800498c:	9a07      	ldr	r2, [sp, #28]
 800498e:	4654      	mov	r4, sl
 8004990:	2000      	movs	r0, #0
 8004992:	f04f 0c0a 	mov.w	ip, #10
 8004996:	4621      	mov	r1, r4
 8004998:	f811 3b01 	ldrb.w	r3, [r1], #1
 800499c:	3b30      	subs	r3, #48	; 0x30
 800499e:	2b09      	cmp	r3, #9
 80049a0:	d94e      	bls.n	8004a40 <_vfiprintf_r+0x1c4>
 80049a2:	b1b0      	cbz	r0, 80049d2 <_vfiprintf_r+0x156>
 80049a4:	9207      	str	r2, [sp, #28]
 80049a6:	e014      	b.n	80049d2 <_vfiprintf_r+0x156>
 80049a8:	eba0 0308 	sub.w	r3, r0, r8
 80049ac:	fa09 f303 	lsl.w	r3, r9, r3
 80049b0:	4313      	orrs	r3, r2
 80049b2:	9304      	str	r3, [sp, #16]
 80049b4:	46a2      	mov	sl, r4
 80049b6:	e7d2      	b.n	800495e <_vfiprintf_r+0xe2>
 80049b8:	9b03      	ldr	r3, [sp, #12]
 80049ba:	1d19      	adds	r1, r3, #4
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	9103      	str	r1, [sp, #12]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	bfbb      	ittet	lt
 80049c4:	425b      	neglt	r3, r3
 80049c6:	f042 0202 	orrlt.w	r2, r2, #2
 80049ca:	9307      	strge	r3, [sp, #28]
 80049cc:	9307      	strlt	r3, [sp, #28]
 80049ce:	bfb8      	it	lt
 80049d0:	9204      	strlt	r2, [sp, #16]
 80049d2:	7823      	ldrb	r3, [r4, #0]
 80049d4:	2b2e      	cmp	r3, #46	; 0x2e
 80049d6:	d10c      	bne.n	80049f2 <_vfiprintf_r+0x176>
 80049d8:	7863      	ldrb	r3, [r4, #1]
 80049da:	2b2a      	cmp	r3, #42	; 0x2a
 80049dc:	d135      	bne.n	8004a4a <_vfiprintf_r+0x1ce>
 80049de:	9b03      	ldr	r3, [sp, #12]
 80049e0:	1d1a      	adds	r2, r3, #4
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	9203      	str	r2, [sp, #12]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	bfb8      	it	lt
 80049ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80049ee:	3402      	adds	r4, #2
 80049f0:	9305      	str	r3, [sp, #20]
 80049f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004ad8 <_vfiprintf_r+0x25c>
 80049f6:	7821      	ldrb	r1, [r4, #0]
 80049f8:	2203      	movs	r2, #3
 80049fa:	4650      	mov	r0, sl
 80049fc:	f7fb fc10 	bl	8000220 <memchr>
 8004a00:	b140      	cbz	r0, 8004a14 <_vfiprintf_r+0x198>
 8004a02:	2340      	movs	r3, #64	; 0x40
 8004a04:	eba0 000a 	sub.w	r0, r0, sl
 8004a08:	fa03 f000 	lsl.w	r0, r3, r0
 8004a0c:	9b04      	ldr	r3, [sp, #16]
 8004a0e:	4303      	orrs	r3, r0
 8004a10:	3401      	adds	r4, #1
 8004a12:	9304      	str	r3, [sp, #16]
 8004a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a18:	482c      	ldr	r0, [pc, #176]	; (8004acc <_vfiprintf_r+0x250>)
 8004a1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a1e:	2206      	movs	r2, #6
 8004a20:	f7fb fbfe 	bl	8000220 <memchr>
 8004a24:	2800      	cmp	r0, #0
 8004a26:	d03f      	beq.n	8004aa8 <_vfiprintf_r+0x22c>
 8004a28:	4b29      	ldr	r3, [pc, #164]	; (8004ad0 <_vfiprintf_r+0x254>)
 8004a2a:	bb1b      	cbnz	r3, 8004a74 <_vfiprintf_r+0x1f8>
 8004a2c:	9b03      	ldr	r3, [sp, #12]
 8004a2e:	3307      	adds	r3, #7
 8004a30:	f023 0307 	bic.w	r3, r3, #7
 8004a34:	3308      	adds	r3, #8
 8004a36:	9303      	str	r3, [sp, #12]
 8004a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a3a:	443b      	add	r3, r7
 8004a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a3e:	e767      	b.n	8004910 <_vfiprintf_r+0x94>
 8004a40:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a44:	460c      	mov	r4, r1
 8004a46:	2001      	movs	r0, #1
 8004a48:	e7a5      	b.n	8004996 <_vfiprintf_r+0x11a>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	3401      	adds	r4, #1
 8004a4e:	9305      	str	r3, [sp, #20]
 8004a50:	4619      	mov	r1, r3
 8004a52:	f04f 0c0a 	mov.w	ip, #10
 8004a56:	4620      	mov	r0, r4
 8004a58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a5c:	3a30      	subs	r2, #48	; 0x30
 8004a5e:	2a09      	cmp	r2, #9
 8004a60:	d903      	bls.n	8004a6a <_vfiprintf_r+0x1ee>
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d0c5      	beq.n	80049f2 <_vfiprintf_r+0x176>
 8004a66:	9105      	str	r1, [sp, #20]
 8004a68:	e7c3      	b.n	80049f2 <_vfiprintf_r+0x176>
 8004a6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a6e:	4604      	mov	r4, r0
 8004a70:	2301      	movs	r3, #1
 8004a72:	e7f0      	b.n	8004a56 <_vfiprintf_r+0x1da>
 8004a74:	ab03      	add	r3, sp, #12
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	462a      	mov	r2, r5
 8004a7a:	4b16      	ldr	r3, [pc, #88]	; (8004ad4 <_vfiprintf_r+0x258>)
 8004a7c:	a904      	add	r1, sp, #16
 8004a7e:	4630      	mov	r0, r6
 8004a80:	f3af 8000 	nop.w
 8004a84:	4607      	mov	r7, r0
 8004a86:	1c78      	adds	r0, r7, #1
 8004a88:	d1d6      	bne.n	8004a38 <_vfiprintf_r+0x1bc>
 8004a8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a8c:	07d9      	lsls	r1, r3, #31
 8004a8e:	d405      	bmi.n	8004a9c <_vfiprintf_r+0x220>
 8004a90:	89ab      	ldrh	r3, [r5, #12]
 8004a92:	059a      	lsls	r2, r3, #22
 8004a94:	d402      	bmi.n	8004a9c <_vfiprintf_r+0x220>
 8004a96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a98:	f7ff fdb7 	bl	800460a <__retarget_lock_release_recursive>
 8004a9c:	89ab      	ldrh	r3, [r5, #12]
 8004a9e:	065b      	lsls	r3, r3, #25
 8004aa0:	f53f af12 	bmi.w	80048c8 <_vfiprintf_r+0x4c>
 8004aa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004aa6:	e711      	b.n	80048cc <_vfiprintf_r+0x50>
 8004aa8:	ab03      	add	r3, sp, #12
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	462a      	mov	r2, r5
 8004aae:	4b09      	ldr	r3, [pc, #36]	; (8004ad4 <_vfiprintf_r+0x258>)
 8004ab0:	a904      	add	r1, sp, #16
 8004ab2:	4630      	mov	r0, r6
 8004ab4:	f000 f880 	bl	8004bb8 <_printf_i>
 8004ab8:	e7e4      	b.n	8004a84 <_vfiprintf_r+0x208>
 8004aba:	bf00      	nop
 8004abc:	080050a0 	.word	0x080050a0
 8004ac0:	080050c0 	.word	0x080050c0
 8004ac4:	08005080 	.word	0x08005080
 8004ac8:	080050e0 	.word	0x080050e0
 8004acc:	080050ea 	.word	0x080050ea
 8004ad0:	00000000 	.word	0x00000000
 8004ad4:	08004857 	.word	0x08004857
 8004ad8:	080050e6 	.word	0x080050e6

08004adc <_printf_common>:
 8004adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ae0:	4616      	mov	r6, r2
 8004ae2:	4699      	mov	r9, r3
 8004ae4:	688a      	ldr	r2, [r1, #8]
 8004ae6:	690b      	ldr	r3, [r1, #16]
 8004ae8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004aec:	4293      	cmp	r3, r2
 8004aee:	bfb8      	it	lt
 8004af0:	4613      	movlt	r3, r2
 8004af2:	6033      	str	r3, [r6, #0]
 8004af4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004af8:	4607      	mov	r7, r0
 8004afa:	460c      	mov	r4, r1
 8004afc:	b10a      	cbz	r2, 8004b02 <_printf_common+0x26>
 8004afe:	3301      	adds	r3, #1
 8004b00:	6033      	str	r3, [r6, #0]
 8004b02:	6823      	ldr	r3, [r4, #0]
 8004b04:	0699      	lsls	r1, r3, #26
 8004b06:	bf42      	ittt	mi
 8004b08:	6833      	ldrmi	r3, [r6, #0]
 8004b0a:	3302      	addmi	r3, #2
 8004b0c:	6033      	strmi	r3, [r6, #0]
 8004b0e:	6825      	ldr	r5, [r4, #0]
 8004b10:	f015 0506 	ands.w	r5, r5, #6
 8004b14:	d106      	bne.n	8004b24 <_printf_common+0x48>
 8004b16:	f104 0a19 	add.w	sl, r4, #25
 8004b1a:	68e3      	ldr	r3, [r4, #12]
 8004b1c:	6832      	ldr	r2, [r6, #0]
 8004b1e:	1a9b      	subs	r3, r3, r2
 8004b20:	42ab      	cmp	r3, r5
 8004b22:	dc26      	bgt.n	8004b72 <_printf_common+0x96>
 8004b24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b28:	1e13      	subs	r3, r2, #0
 8004b2a:	6822      	ldr	r2, [r4, #0]
 8004b2c:	bf18      	it	ne
 8004b2e:	2301      	movne	r3, #1
 8004b30:	0692      	lsls	r2, r2, #26
 8004b32:	d42b      	bmi.n	8004b8c <_printf_common+0xb0>
 8004b34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b38:	4649      	mov	r1, r9
 8004b3a:	4638      	mov	r0, r7
 8004b3c:	47c0      	blx	r8
 8004b3e:	3001      	adds	r0, #1
 8004b40:	d01e      	beq.n	8004b80 <_printf_common+0xa4>
 8004b42:	6823      	ldr	r3, [r4, #0]
 8004b44:	68e5      	ldr	r5, [r4, #12]
 8004b46:	6832      	ldr	r2, [r6, #0]
 8004b48:	f003 0306 	and.w	r3, r3, #6
 8004b4c:	2b04      	cmp	r3, #4
 8004b4e:	bf08      	it	eq
 8004b50:	1aad      	subeq	r5, r5, r2
 8004b52:	68a3      	ldr	r3, [r4, #8]
 8004b54:	6922      	ldr	r2, [r4, #16]
 8004b56:	bf0c      	ite	eq
 8004b58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b5c:	2500      	movne	r5, #0
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	bfc4      	itt	gt
 8004b62:	1a9b      	subgt	r3, r3, r2
 8004b64:	18ed      	addgt	r5, r5, r3
 8004b66:	2600      	movs	r6, #0
 8004b68:	341a      	adds	r4, #26
 8004b6a:	42b5      	cmp	r5, r6
 8004b6c:	d11a      	bne.n	8004ba4 <_printf_common+0xc8>
 8004b6e:	2000      	movs	r0, #0
 8004b70:	e008      	b.n	8004b84 <_printf_common+0xa8>
 8004b72:	2301      	movs	r3, #1
 8004b74:	4652      	mov	r2, sl
 8004b76:	4649      	mov	r1, r9
 8004b78:	4638      	mov	r0, r7
 8004b7a:	47c0      	blx	r8
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	d103      	bne.n	8004b88 <_printf_common+0xac>
 8004b80:	f04f 30ff 	mov.w	r0, #4294967295
 8004b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b88:	3501      	adds	r5, #1
 8004b8a:	e7c6      	b.n	8004b1a <_printf_common+0x3e>
 8004b8c:	18e1      	adds	r1, r4, r3
 8004b8e:	1c5a      	adds	r2, r3, #1
 8004b90:	2030      	movs	r0, #48	; 0x30
 8004b92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b96:	4422      	add	r2, r4
 8004b98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ba0:	3302      	adds	r3, #2
 8004ba2:	e7c7      	b.n	8004b34 <_printf_common+0x58>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	4622      	mov	r2, r4
 8004ba8:	4649      	mov	r1, r9
 8004baa:	4638      	mov	r0, r7
 8004bac:	47c0      	blx	r8
 8004bae:	3001      	adds	r0, #1
 8004bb0:	d0e6      	beq.n	8004b80 <_printf_common+0xa4>
 8004bb2:	3601      	adds	r6, #1
 8004bb4:	e7d9      	b.n	8004b6a <_printf_common+0x8e>
	...

08004bb8 <_printf_i>:
 8004bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bbc:	460c      	mov	r4, r1
 8004bbe:	4691      	mov	r9, r2
 8004bc0:	7e27      	ldrb	r7, [r4, #24]
 8004bc2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004bc4:	2f78      	cmp	r7, #120	; 0x78
 8004bc6:	4680      	mov	r8, r0
 8004bc8:	469a      	mov	sl, r3
 8004bca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bce:	d807      	bhi.n	8004be0 <_printf_i+0x28>
 8004bd0:	2f62      	cmp	r7, #98	; 0x62
 8004bd2:	d80a      	bhi.n	8004bea <_printf_i+0x32>
 8004bd4:	2f00      	cmp	r7, #0
 8004bd6:	f000 80d8 	beq.w	8004d8a <_printf_i+0x1d2>
 8004bda:	2f58      	cmp	r7, #88	; 0x58
 8004bdc:	f000 80a3 	beq.w	8004d26 <_printf_i+0x16e>
 8004be0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004be4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004be8:	e03a      	b.n	8004c60 <_printf_i+0xa8>
 8004bea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004bee:	2b15      	cmp	r3, #21
 8004bf0:	d8f6      	bhi.n	8004be0 <_printf_i+0x28>
 8004bf2:	a001      	add	r0, pc, #4	; (adr r0, 8004bf8 <_printf_i+0x40>)
 8004bf4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004bf8:	08004c51 	.word	0x08004c51
 8004bfc:	08004c65 	.word	0x08004c65
 8004c00:	08004be1 	.word	0x08004be1
 8004c04:	08004be1 	.word	0x08004be1
 8004c08:	08004be1 	.word	0x08004be1
 8004c0c:	08004be1 	.word	0x08004be1
 8004c10:	08004c65 	.word	0x08004c65
 8004c14:	08004be1 	.word	0x08004be1
 8004c18:	08004be1 	.word	0x08004be1
 8004c1c:	08004be1 	.word	0x08004be1
 8004c20:	08004be1 	.word	0x08004be1
 8004c24:	08004d71 	.word	0x08004d71
 8004c28:	08004c95 	.word	0x08004c95
 8004c2c:	08004d53 	.word	0x08004d53
 8004c30:	08004be1 	.word	0x08004be1
 8004c34:	08004be1 	.word	0x08004be1
 8004c38:	08004d93 	.word	0x08004d93
 8004c3c:	08004be1 	.word	0x08004be1
 8004c40:	08004c95 	.word	0x08004c95
 8004c44:	08004be1 	.word	0x08004be1
 8004c48:	08004be1 	.word	0x08004be1
 8004c4c:	08004d5b 	.word	0x08004d5b
 8004c50:	680b      	ldr	r3, [r1, #0]
 8004c52:	1d1a      	adds	r2, r3, #4
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	600a      	str	r2, [r1, #0]
 8004c58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c60:	2301      	movs	r3, #1
 8004c62:	e0a3      	b.n	8004dac <_printf_i+0x1f4>
 8004c64:	6825      	ldr	r5, [r4, #0]
 8004c66:	6808      	ldr	r0, [r1, #0]
 8004c68:	062e      	lsls	r6, r5, #24
 8004c6a:	f100 0304 	add.w	r3, r0, #4
 8004c6e:	d50a      	bpl.n	8004c86 <_printf_i+0xce>
 8004c70:	6805      	ldr	r5, [r0, #0]
 8004c72:	600b      	str	r3, [r1, #0]
 8004c74:	2d00      	cmp	r5, #0
 8004c76:	da03      	bge.n	8004c80 <_printf_i+0xc8>
 8004c78:	232d      	movs	r3, #45	; 0x2d
 8004c7a:	426d      	negs	r5, r5
 8004c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c80:	485e      	ldr	r0, [pc, #376]	; (8004dfc <_printf_i+0x244>)
 8004c82:	230a      	movs	r3, #10
 8004c84:	e019      	b.n	8004cba <_printf_i+0x102>
 8004c86:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004c8a:	6805      	ldr	r5, [r0, #0]
 8004c8c:	600b      	str	r3, [r1, #0]
 8004c8e:	bf18      	it	ne
 8004c90:	b22d      	sxthne	r5, r5
 8004c92:	e7ef      	b.n	8004c74 <_printf_i+0xbc>
 8004c94:	680b      	ldr	r3, [r1, #0]
 8004c96:	6825      	ldr	r5, [r4, #0]
 8004c98:	1d18      	adds	r0, r3, #4
 8004c9a:	6008      	str	r0, [r1, #0]
 8004c9c:	0628      	lsls	r0, r5, #24
 8004c9e:	d501      	bpl.n	8004ca4 <_printf_i+0xec>
 8004ca0:	681d      	ldr	r5, [r3, #0]
 8004ca2:	e002      	b.n	8004caa <_printf_i+0xf2>
 8004ca4:	0669      	lsls	r1, r5, #25
 8004ca6:	d5fb      	bpl.n	8004ca0 <_printf_i+0xe8>
 8004ca8:	881d      	ldrh	r5, [r3, #0]
 8004caa:	4854      	ldr	r0, [pc, #336]	; (8004dfc <_printf_i+0x244>)
 8004cac:	2f6f      	cmp	r7, #111	; 0x6f
 8004cae:	bf0c      	ite	eq
 8004cb0:	2308      	moveq	r3, #8
 8004cb2:	230a      	movne	r3, #10
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cba:	6866      	ldr	r6, [r4, #4]
 8004cbc:	60a6      	str	r6, [r4, #8]
 8004cbe:	2e00      	cmp	r6, #0
 8004cc0:	bfa2      	ittt	ge
 8004cc2:	6821      	ldrge	r1, [r4, #0]
 8004cc4:	f021 0104 	bicge.w	r1, r1, #4
 8004cc8:	6021      	strge	r1, [r4, #0]
 8004cca:	b90d      	cbnz	r5, 8004cd0 <_printf_i+0x118>
 8004ccc:	2e00      	cmp	r6, #0
 8004cce:	d04d      	beq.n	8004d6c <_printf_i+0x1b4>
 8004cd0:	4616      	mov	r6, r2
 8004cd2:	fbb5 f1f3 	udiv	r1, r5, r3
 8004cd6:	fb03 5711 	mls	r7, r3, r1, r5
 8004cda:	5dc7      	ldrb	r7, [r0, r7]
 8004cdc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ce0:	462f      	mov	r7, r5
 8004ce2:	42bb      	cmp	r3, r7
 8004ce4:	460d      	mov	r5, r1
 8004ce6:	d9f4      	bls.n	8004cd2 <_printf_i+0x11a>
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d10b      	bne.n	8004d04 <_printf_i+0x14c>
 8004cec:	6823      	ldr	r3, [r4, #0]
 8004cee:	07df      	lsls	r7, r3, #31
 8004cf0:	d508      	bpl.n	8004d04 <_printf_i+0x14c>
 8004cf2:	6923      	ldr	r3, [r4, #16]
 8004cf4:	6861      	ldr	r1, [r4, #4]
 8004cf6:	4299      	cmp	r1, r3
 8004cf8:	bfde      	ittt	le
 8004cfa:	2330      	movle	r3, #48	; 0x30
 8004cfc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d04:	1b92      	subs	r2, r2, r6
 8004d06:	6122      	str	r2, [r4, #16]
 8004d08:	f8cd a000 	str.w	sl, [sp]
 8004d0c:	464b      	mov	r3, r9
 8004d0e:	aa03      	add	r2, sp, #12
 8004d10:	4621      	mov	r1, r4
 8004d12:	4640      	mov	r0, r8
 8004d14:	f7ff fee2 	bl	8004adc <_printf_common>
 8004d18:	3001      	adds	r0, #1
 8004d1a:	d14c      	bne.n	8004db6 <_printf_i+0x1fe>
 8004d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d20:	b004      	add	sp, #16
 8004d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d26:	4835      	ldr	r0, [pc, #212]	; (8004dfc <_printf_i+0x244>)
 8004d28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d2c:	6823      	ldr	r3, [r4, #0]
 8004d2e:	680e      	ldr	r6, [r1, #0]
 8004d30:	061f      	lsls	r7, r3, #24
 8004d32:	f856 5b04 	ldr.w	r5, [r6], #4
 8004d36:	600e      	str	r6, [r1, #0]
 8004d38:	d514      	bpl.n	8004d64 <_printf_i+0x1ac>
 8004d3a:	07d9      	lsls	r1, r3, #31
 8004d3c:	bf44      	itt	mi
 8004d3e:	f043 0320 	orrmi.w	r3, r3, #32
 8004d42:	6023      	strmi	r3, [r4, #0]
 8004d44:	b91d      	cbnz	r5, 8004d4e <_printf_i+0x196>
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	f023 0320 	bic.w	r3, r3, #32
 8004d4c:	6023      	str	r3, [r4, #0]
 8004d4e:	2310      	movs	r3, #16
 8004d50:	e7b0      	b.n	8004cb4 <_printf_i+0xfc>
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	f043 0320 	orr.w	r3, r3, #32
 8004d58:	6023      	str	r3, [r4, #0]
 8004d5a:	2378      	movs	r3, #120	; 0x78
 8004d5c:	4828      	ldr	r0, [pc, #160]	; (8004e00 <_printf_i+0x248>)
 8004d5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d62:	e7e3      	b.n	8004d2c <_printf_i+0x174>
 8004d64:	065e      	lsls	r6, r3, #25
 8004d66:	bf48      	it	mi
 8004d68:	b2ad      	uxthmi	r5, r5
 8004d6a:	e7e6      	b.n	8004d3a <_printf_i+0x182>
 8004d6c:	4616      	mov	r6, r2
 8004d6e:	e7bb      	b.n	8004ce8 <_printf_i+0x130>
 8004d70:	680b      	ldr	r3, [r1, #0]
 8004d72:	6826      	ldr	r6, [r4, #0]
 8004d74:	6960      	ldr	r0, [r4, #20]
 8004d76:	1d1d      	adds	r5, r3, #4
 8004d78:	600d      	str	r5, [r1, #0]
 8004d7a:	0635      	lsls	r5, r6, #24
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	d501      	bpl.n	8004d84 <_printf_i+0x1cc>
 8004d80:	6018      	str	r0, [r3, #0]
 8004d82:	e002      	b.n	8004d8a <_printf_i+0x1d2>
 8004d84:	0671      	lsls	r1, r6, #25
 8004d86:	d5fb      	bpl.n	8004d80 <_printf_i+0x1c8>
 8004d88:	8018      	strh	r0, [r3, #0]
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	6123      	str	r3, [r4, #16]
 8004d8e:	4616      	mov	r6, r2
 8004d90:	e7ba      	b.n	8004d08 <_printf_i+0x150>
 8004d92:	680b      	ldr	r3, [r1, #0]
 8004d94:	1d1a      	adds	r2, r3, #4
 8004d96:	600a      	str	r2, [r1, #0]
 8004d98:	681e      	ldr	r6, [r3, #0]
 8004d9a:	6862      	ldr	r2, [r4, #4]
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	4630      	mov	r0, r6
 8004da0:	f7fb fa3e 	bl	8000220 <memchr>
 8004da4:	b108      	cbz	r0, 8004daa <_printf_i+0x1f2>
 8004da6:	1b80      	subs	r0, r0, r6
 8004da8:	6060      	str	r0, [r4, #4]
 8004daa:	6863      	ldr	r3, [r4, #4]
 8004dac:	6123      	str	r3, [r4, #16]
 8004dae:	2300      	movs	r3, #0
 8004db0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004db4:	e7a8      	b.n	8004d08 <_printf_i+0x150>
 8004db6:	6923      	ldr	r3, [r4, #16]
 8004db8:	4632      	mov	r2, r6
 8004dba:	4649      	mov	r1, r9
 8004dbc:	4640      	mov	r0, r8
 8004dbe:	47d0      	blx	sl
 8004dc0:	3001      	adds	r0, #1
 8004dc2:	d0ab      	beq.n	8004d1c <_printf_i+0x164>
 8004dc4:	6823      	ldr	r3, [r4, #0]
 8004dc6:	079b      	lsls	r3, r3, #30
 8004dc8:	d413      	bmi.n	8004df2 <_printf_i+0x23a>
 8004dca:	68e0      	ldr	r0, [r4, #12]
 8004dcc:	9b03      	ldr	r3, [sp, #12]
 8004dce:	4298      	cmp	r0, r3
 8004dd0:	bfb8      	it	lt
 8004dd2:	4618      	movlt	r0, r3
 8004dd4:	e7a4      	b.n	8004d20 <_printf_i+0x168>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	4632      	mov	r2, r6
 8004dda:	4649      	mov	r1, r9
 8004ddc:	4640      	mov	r0, r8
 8004dde:	47d0      	blx	sl
 8004de0:	3001      	adds	r0, #1
 8004de2:	d09b      	beq.n	8004d1c <_printf_i+0x164>
 8004de4:	3501      	adds	r5, #1
 8004de6:	68e3      	ldr	r3, [r4, #12]
 8004de8:	9903      	ldr	r1, [sp, #12]
 8004dea:	1a5b      	subs	r3, r3, r1
 8004dec:	42ab      	cmp	r3, r5
 8004dee:	dcf2      	bgt.n	8004dd6 <_printf_i+0x21e>
 8004df0:	e7eb      	b.n	8004dca <_printf_i+0x212>
 8004df2:	2500      	movs	r5, #0
 8004df4:	f104 0619 	add.w	r6, r4, #25
 8004df8:	e7f5      	b.n	8004de6 <_printf_i+0x22e>
 8004dfa:	bf00      	nop
 8004dfc:	080050f1 	.word	0x080050f1
 8004e00:	08005102 	.word	0x08005102

08004e04 <_sbrk_r>:
 8004e04:	b538      	push	{r3, r4, r5, lr}
 8004e06:	4d06      	ldr	r5, [pc, #24]	; (8004e20 <_sbrk_r+0x1c>)
 8004e08:	2300      	movs	r3, #0
 8004e0a:	4604      	mov	r4, r0
 8004e0c:	4608      	mov	r0, r1
 8004e0e:	602b      	str	r3, [r5, #0]
 8004e10:	f7fb ff3e 	bl	8000c90 <_sbrk>
 8004e14:	1c43      	adds	r3, r0, #1
 8004e16:	d102      	bne.n	8004e1e <_sbrk_r+0x1a>
 8004e18:	682b      	ldr	r3, [r5, #0]
 8004e1a:	b103      	cbz	r3, 8004e1e <_sbrk_r+0x1a>
 8004e1c:	6023      	str	r3, [r4, #0]
 8004e1e:	bd38      	pop	{r3, r4, r5, pc}
 8004e20:	20000474 	.word	0x20000474

08004e24 <__sread>:
 8004e24:	b510      	push	{r4, lr}
 8004e26:	460c      	mov	r4, r1
 8004e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e2c:	f000 f8a0 	bl	8004f70 <_read_r>
 8004e30:	2800      	cmp	r0, #0
 8004e32:	bfab      	itete	ge
 8004e34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e36:	89a3      	ldrhlt	r3, [r4, #12]
 8004e38:	181b      	addge	r3, r3, r0
 8004e3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e3e:	bfac      	ite	ge
 8004e40:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e42:	81a3      	strhlt	r3, [r4, #12]
 8004e44:	bd10      	pop	{r4, pc}

08004e46 <__swrite>:
 8004e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e4a:	461f      	mov	r7, r3
 8004e4c:	898b      	ldrh	r3, [r1, #12]
 8004e4e:	05db      	lsls	r3, r3, #23
 8004e50:	4605      	mov	r5, r0
 8004e52:	460c      	mov	r4, r1
 8004e54:	4616      	mov	r6, r2
 8004e56:	d505      	bpl.n	8004e64 <__swrite+0x1e>
 8004e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f000 f868 	bl	8004f34 <_lseek_r>
 8004e64:	89a3      	ldrh	r3, [r4, #12]
 8004e66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e6e:	81a3      	strh	r3, [r4, #12]
 8004e70:	4632      	mov	r2, r6
 8004e72:	463b      	mov	r3, r7
 8004e74:	4628      	mov	r0, r5
 8004e76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e7a:	f000 b817 	b.w	8004eac <_write_r>

08004e7e <__sseek>:
 8004e7e:	b510      	push	{r4, lr}
 8004e80:	460c      	mov	r4, r1
 8004e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e86:	f000 f855 	bl	8004f34 <_lseek_r>
 8004e8a:	1c43      	adds	r3, r0, #1
 8004e8c:	89a3      	ldrh	r3, [r4, #12]
 8004e8e:	bf15      	itete	ne
 8004e90:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e9a:	81a3      	strheq	r3, [r4, #12]
 8004e9c:	bf18      	it	ne
 8004e9e:	81a3      	strhne	r3, [r4, #12]
 8004ea0:	bd10      	pop	{r4, pc}

08004ea2 <__sclose>:
 8004ea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ea6:	f000 b813 	b.w	8004ed0 <_close_r>
	...

08004eac <_write_r>:
 8004eac:	b538      	push	{r3, r4, r5, lr}
 8004eae:	4d07      	ldr	r5, [pc, #28]	; (8004ecc <_write_r+0x20>)
 8004eb0:	4604      	mov	r4, r0
 8004eb2:	4608      	mov	r0, r1
 8004eb4:	4611      	mov	r1, r2
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	602a      	str	r2, [r5, #0]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	f7fb fe97 	bl	8000bee <_write>
 8004ec0:	1c43      	adds	r3, r0, #1
 8004ec2:	d102      	bne.n	8004eca <_write_r+0x1e>
 8004ec4:	682b      	ldr	r3, [r5, #0]
 8004ec6:	b103      	cbz	r3, 8004eca <_write_r+0x1e>
 8004ec8:	6023      	str	r3, [r4, #0]
 8004eca:	bd38      	pop	{r3, r4, r5, pc}
 8004ecc:	20000474 	.word	0x20000474

08004ed0 <_close_r>:
 8004ed0:	b538      	push	{r3, r4, r5, lr}
 8004ed2:	4d06      	ldr	r5, [pc, #24]	; (8004eec <_close_r+0x1c>)
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	4608      	mov	r0, r1
 8004eda:	602b      	str	r3, [r5, #0]
 8004edc:	f7fb fea3 	bl	8000c26 <_close>
 8004ee0:	1c43      	adds	r3, r0, #1
 8004ee2:	d102      	bne.n	8004eea <_close_r+0x1a>
 8004ee4:	682b      	ldr	r3, [r5, #0]
 8004ee6:	b103      	cbz	r3, 8004eea <_close_r+0x1a>
 8004ee8:	6023      	str	r3, [r4, #0]
 8004eea:	bd38      	pop	{r3, r4, r5, pc}
 8004eec:	20000474 	.word	0x20000474

08004ef0 <_fstat_r>:
 8004ef0:	b538      	push	{r3, r4, r5, lr}
 8004ef2:	4d07      	ldr	r5, [pc, #28]	; (8004f10 <_fstat_r+0x20>)
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	4604      	mov	r4, r0
 8004ef8:	4608      	mov	r0, r1
 8004efa:	4611      	mov	r1, r2
 8004efc:	602b      	str	r3, [r5, #0]
 8004efe:	f7fb fe9e 	bl	8000c3e <_fstat>
 8004f02:	1c43      	adds	r3, r0, #1
 8004f04:	d102      	bne.n	8004f0c <_fstat_r+0x1c>
 8004f06:	682b      	ldr	r3, [r5, #0]
 8004f08:	b103      	cbz	r3, 8004f0c <_fstat_r+0x1c>
 8004f0a:	6023      	str	r3, [r4, #0]
 8004f0c:	bd38      	pop	{r3, r4, r5, pc}
 8004f0e:	bf00      	nop
 8004f10:	20000474 	.word	0x20000474

08004f14 <_isatty_r>:
 8004f14:	b538      	push	{r3, r4, r5, lr}
 8004f16:	4d06      	ldr	r5, [pc, #24]	; (8004f30 <_isatty_r+0x1c>)
 8004f18:	2300      	movs	r3, #0
 8004f1a:	4604      	mov	r4, r0
 8004f1c:	4608      	mov	r0, r1
 8004f1e:	602b      	str	r3, [r5, #0]
 8004f20:	f7fb fe9d 	bl	8000c5e <_isatty>
 8004f24:	1c43      	adds	r3, r0, #1
 8004f26:	d102      	bne.n	8004f2e <_isatty_r+0x1a>
 8004f28:	682b      	ldr	r3, [r5, #0]
 8004f2a:	b103      	cbz	r3, 8004f2e <_isatty_r+0x1a>
 8004f2c:	6023      	str	r3, [r4, #0]
 8004f2e:	bd38      	pop	{r3, r4, r5, pc}
 8004f30:	20000474 	.word	0x20000474

08004f34 <_lseek_r>:
 8004f34:	b538      	push	{r3, r4, r5, lr}
 8004f36:	4d07      	ldr	r5, [pc, #28]	; (8004f54 <_lseek_r+0x20>)
 8004f38:	4604      	mov	r4, r0
 8004f3a:	4608      	mov	r0, r1
 8004f3c:	4611      	mov	r1, r2
 8004f3e:	2200      	movs	r2, #0
 8004f40:	602a      	str	r2, [r5, #0]
 8004f42:	461a      	mov	r2, r3
 8004f44:	f7fb fe96 	bl	8000c74 <_lseek>
 8004f48:	1c43      	adds	r3, r0, #1
 8004f4a:	d102      	bne.n	8004f52 <_lseek_r+0x1e>
 8004f4c:	682b      	ldr	r3, [r5, #0]
 8004f4e:	b103      	cbz	r3, 8004f52 <_lseek_r+0x1e>
 8004f50:	6023      	str	r3, [r4, #0]
 8004f52:	bd38      	pop	{r3, r4, r5, pc}
 8004f54:	20000474 	.word	0x20000474

08004f58 <__malloc_lock>:
 8004f58:	4801      	ldr	r0, [pc, #4]	; (8004f60 <__malloc_lock+0x8>)
 8004f5a:	f7ff bb55 	b.w	8004608 <__retarget_lock_acquire_recursive>
 8004f5e:	bf00      	nop
 8004f60:	2000046c 	.word	0x2000046c

08004f64 <__malloc_unlock>:
 8004f64:	4801      	ldr	r0, [pc, #4]	; (8004f6c <__malloc_unlock+0x8>)
 8004f66:	f7ff bb50 	b.w	800460a <__retarget_lock_release_recursive>
 8004f6a:	bf00      	nop
 8004f6c:	2000046c 	.word	0x2000046c

08004f70 <_read_r>:
 8004f70:	b538      	push	{r3, r4, r5, lr}
 8004f72:	4d07      	ldr	r5, [pc, #28]	; (8004f90 <_read_r+0x20>)
 8004f74:	4604      	mov	r4, r0
 8004f76:	4608      	mov	r0, r1
 8004f78:	4611      	mov	r1, r2
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	602a      	str	r2, [r5, #0]
 8004f7e:	461a      	mov	r2, r3
 8004f80:	f7fb fe18 	bl	8000bb4 <_read>
 8004f84:	1c43      	adds	r3, r0, #1
 8004f86:	d102      	bne.n	8004f8e <_read_r+0x1e>
 8004f88:	682b      	ldr	r3, [r5, #0]
 8004f8a:	b103      	cbz	r3, 8004f8e <_read_r+0x1e>
 8004f8c:	6023      	str	r3, [r4, #0]
 8004f8e:	bd38      	pop	{r3, r4, r5, pc}
 8004f90:	20000474 	.word	0x20000474

08004f94 <_init>:
 8004f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f96:	bf00      	nop
 8004f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f9a:	bc08      	pop	{r3}
 8004f9c:	469e      	mov	lr, r3
 8004f9e:	4770      	bx	lr

08004fa0 <_fini>:
 8004fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa2:	bf00      	nop
 8004fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fa6:	bc08      	pop	{r3}
 8004fa8:	469e      	mov	lr, r3
 8004faa:	4770      	bx	lr
